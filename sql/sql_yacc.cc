/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse MYSQLparse
#define yylex   MYSQLlex
#define yyerror MYSQLerror
#define yylval  MYSQLlval
#define yychar  MYSQLchar
#define yydebug MYSQLdebug
#define yynerrs MYSQLnerrs


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADMIN_SYM = 262,
     ADDDATE_SYM = 263,
     AFTER_SYM = 264,
     AGAINST = 265,
     AGGREGATE_SYM = 266,
     ALGORITHM_SYM = 267,
     ALL = 268,
     ALTER = 269,
     ALWAYS_SYM = 270,
     ANALYZE_SYM = 271,
     AND_AND_SYM = 272,
     AND_SYM = 273,
     ANY_SYM = 274,
     AS = 275,
     ASC = 276,
     ASCII_SYM = 277,
     ASENSITIVE_SYM = 278,
     AT_SYM = 279,
     AUTHORS_SYM = 280,
     AUTOEXTEND_SIZE_SYM = 281,
     AUTO_INC = 282,
     AUTO_SYM = 283,
     AVG_ROW_LENGTH = 284,
     AVG_SYM = 285,
     BACKUP_SYM = 286,
     BEFORE_SYM = 287,
     BEGIN_SYM = 288,
     BETWEEN_SYM = 289,
     BIGINT = 290,
     BINARY = 291,
     BINLOG_SYM = 292,
     BIN_NUM = 293,
     BIT_AND = 294,
     BIT_OR = 295,
     BIT_SYM = 296,
     BIT_XOR = 297,
     BLOB_SYM = 298,
     BLOCK_SYM = 299,
     BOOLEAN_SYM = 300,
     BOOL_SYM = 301,
     BOTH = 302,
     BTREE_SYM = 303,
     BY = 304,
     BYTE_SYM = 305,
     CACHE_SYM = 306,
     CALL_SYM = 307,
     CASCADE = 308,
     CASCADED = 309,
     CASE_SYM = 310,
     CAST_SYM = 311,
     CATALOG_NAME_SYM = 312,
     CHAIN_SYM = 313,
     CHANGE = 314,
     CHANGED = 315,
     CHARSET = 316,
     CHAR_SYM = 317,
     CHECKPOINT_SYM = 318,
     CHECKSUM_SYM = 319,
     CHECK_SYM = 320,
     CIPHER_SYM = 321,
     CLASS_ORIGIN_SYM = 322,
     CLIENT_SYM = 323,
     CLIENT_STATS_SYM = 324,
     CLOSE_SYM = 325,
     COALESCE = 326,
     CODE_SYM = 327,
     COLLATE_SYM = 328,
     COLLATION_SYM = 329,
     COLUMNS = 330,
     COLUMN_ADD_SYM = 331,
     COLUMN_CHECK_SYM = 332,
     COLUMN_CREATE_SYM = 333,
     COLUMN_DELETE_SYM = 334,
     COLUMN_GET_SYM = 335,
     COLUMN_SYM = 336,
     COLUMN_NAME_SYM = 337,
     COMMENT_SYM = 338,
     COMMITTED_SYM = 339,
     COMMIT_SYM = 340,
     COMPACT_SYM = 341,
     COMPLETION_SYM = 342,
     COMPRESSED_SYM = 343,
     CONCURRENT = 344,
     CONDITION_SYM = 345,
     CONNECTION_SYM = 346,
     CONSISTENT_SYM = 347,
     CONSTRAINT = 348,
     CONSTRAINT_CATALOG_SYM = 349,
     CONSTRAINT_NAME_SYM = 350,
     CONSTRAINT_SCHEMA_SYM = 351,
     CONTAINS_SYM = 352,
     CONTEXT_SYM = 353,
     CONTINUE_SYM = 354,
     CONTRIBUTORS_SYM = 355,
     CONVERT_SYM = 356,
     COUNT_SYM = 357,
     CPU_SYM = 358,
     CREATE = 359,
     CROSS = 360,
     CUBE_SYM = 361,
     CURDATE = 362,
     CURRENT_SYM = 363,
     CURRENT_USER = 364,
     CURRENT_ROLE = 365,
     CURRENT_POS_SYM = 366,
     CURSOR_SYM = 367,
     CURSOR_NAME_SYM = 368,
     CURTIME = 369,
     DATABASE = 370,
     DATABASES = 371,
     DATAFILE_SYM = 372,
     DATA_SYM = 373,
     DATETIME = 374,
     DATE_ADD_INTERVAL = 375,
     DATE_SUB_INTERVAL = 376,
     DATE_SYM = 377,
     DAY_HOUR_SYM = 378,
     DAY_MICROSECOND_SYM = 379,
     DAY_MINUTE_SYM = 380,
     DAY_SECOND_SYM = 381,
     DAY_SYM = 382,
     DEALLOCATE_SYM = 383,
     DECIMAL_NUM = 384,
     DECIMAL_SYM = 385,
     DECLARE_SYM = 386,
     DEFAULT = 387,
     DEFINER_SYM = 388,
     DELAYED_SYM = 389,
     DELAY_KEY_WRITE_SYM = 390,
     DELETE_SYM = 391,
     DESC = 392,
     DESCRIBE = 393,
     DES_KEY_FILE = 394,
     DETERMINISTIC_SYM = 395,
     DIAGNOSTICS_SYM = 396,
     DIRECTORY_SYM = 397,
     DISABLE_SYM = 398,
     DISCARD = 399,
     DISK_SYM = 400,
     DISTINCT = 401,
     DIV_SYM = 402,
     DOUBLE_SYM = 403,
     DO_SYM = 404,
     DROP = 405,
     DUAL_SYM = 406,
     DUMPFILE = 407,
     DUPLICATE_SYM = 408,
     DYNAMIC_SYM = 409,
     EACH_SYM = 410,
     ELSE = 411,
     ELSEIF_SYM = 412,
     ENABLE_SYM = 413,
     ENCLOSED = 414,
     END = 415,
     ENDS_SYM = 416,
     END_OF_INPUT = 417,
     ENGINES_SYM = 418,
     ENGINE_SYM = 419,
     ENUM = 420,
     EQ = 421,
     EQUAL_SYM = 422,
     ERROR_SYM = 423,
     ERRORS = 424,
     ESCAPED = 425,
     ESCAPE_SYM = 426,
     EVENTS_SYM = 427,
     EVENT_SYM = 428,
     EVERY_SYM = 429,
     EXCHANGE_SYM = 430,
     EXAMINED_SYM = 431,
     EXECUTE_SYM = 432,
     EXISTS = 433,
     EXIT_SYM = 434,
     EXPANSION_SYM = 435,
     EXPORT_SYM = 436,
     EXTENDED_SYM = 437,
     EXTENT_SIZE_SYM = 438,
     EXTRACT_SYM = 439,
     FALSE_SYM = 440,
     FAST_SYM = 441,
     FAULTS_SYM = 442,
     FETCH_SYM = 443,
     FILE_SYM = 444,
     FIRST_SYM = 445,
     FIXED_SYM = 446,
     FLOAT_NUM = 447,
     FLOAT_SYM = 448,
     FLUSH_SYM = 449,
     FORCE_SYM = 450,
     FOREIGN = 451,
     FOR_SYM = 452,
     FOUND_SYM = 453,
     FROM = 454,
     FULL = 455,
     FULLTEXT_SYM = 456,
     FUNCTION_SYM = 457,
     GE = 458,
     GENERAL = 459,
     GENERATED_SYM = 460,
     GEOMETRYCOLLECTION = 461,
     GEOMETRY_SYM = 462,
     GET_FORMAT = 463,
     GET_SYM = 464,
     GLOBAL_SYM = 465,
     GRANT = 466,
     GRANTS = 467,
     GROUP_SYM = 468,
     GROUP_CONCAT_SYM = 469,
     GT_SYM = 470,
     HANDLER_SYM = 471,
     HARD_SYM = 472,
     HASH_SYM = 473,
     HAVING = 474,
     HELP_SYM = 475,
     HEX_NUM = 476,
     HEX_STRING = 477,
     HIGH_PRIORITY = 478,
     HOST_SYM = 479,
     HOSTS_SYM = 480,
     HOUR_MICROSECOND_SYM = 481,
     HOUR_MINUTE_SYM = 482,
     HOUR_SECOND_SYM = 483,
     HOUR_SYM = 484,
     ID_SYM = 485,
     IDENT = 486,
     IDENTIFIED_SYM = 487,
     IDENT_QUOTED = 488,
     IF = 489,
     IGNORE_SYM = 490,
     IGNORE_SERVER_IDS_SYM = 491,
     IMPORT = 492,
     INDEXES = 493,
     INDEX_SYM = 494,
     INDEX_STATS_SYM = 495,
     INFILE = 496,
     INITIAL_SIZE_SYM = 497,
     INNER_SYM = 498,
     INOUT_SYM = 499,
     INSENSITIVE_SYM = 500,
     INSERT = 501,
     INSERT_METHOD = 502,
     INSTALL_SYM = 503,
     INTERVAL_SYM = 504,
     INTO = 505,
     INT_SYM = 506,
     INVOKER_SYM = 507,
     IN_SYM = 508,
     IO_SYM = 509,
     IPC_SYM = 510,
     IS = 511,
     ISOLATION = 512,
     ISSUER_SYM = 513,
     ITERATE_SYM = 514,
     JOIN_SYM = 515,
     KEYS = 516,
     KEY_BLOCK_SIZE = 517,
     KEY_SYM = 518,
     KILL_SYM = 519,
     LANGUAGE_SYM = 520,
     LAST_SYM = 521,
     LAST_VALUE = 522,
     LE = 523,
     LEADING = 524,
     LEAVES = 525,
     LEAVE_SYM = 526,
     LEFT = 527,
     LESS_SYM = 528,
     LEVEL_SYM = 529,
     LEX_HOSTNAME = 530,
     LIKE = 531,
     LIMIT = 532,
     LINEAR_SYM = 533,
     LINES = 534,
     LINESTRING = 535,
     LIST_SYM = 536,
     LOAD = 537,
     LOCAL_SYM = 538,
     LOCATOR_SYM = 539,
     LOCKS_SYM = 540,
     LOCK_SYM = 541,
     LOGFILE_SYM = 542,
     LOGS_SYM = 543,
     LONGBLOB = 544,
     LONGTEXT = 545,
     LONG_NUM = 546,
     LONG_SYM = 547,
     LOOP_SYM = 548,
     LOW_PRIORITY = 549,
     LT = 550,
     MASTER_CONNECT_RETRY_SYM = 551,
     MASTER_GTID_POS_SYM = 552,
     MASTER_HOST_SYM = 553,
     MASTER_LOG_FILE_SYM = 554,
     MASTER_LOG_POS_SYM = 555,
     MASTER_PASSWORD_SYM = 556,
     MASTER_PORT_SYM = 557,
     MASTER_SERVER_ID_SYM = 558,
     MASTER_SSL_CAPATH_SYM = 559,
     MASTER_SSL_CA_SYM = 560,
     MASTER_SSL_CERT_SYM = 561,
     MASTER_SSL_CIPHER_SYM = 562,
     MASTER_SSL_CRL_SYM = 563,
     MASTER_SSL_CRLPATH_SYM = 564,
     MASTER_SSL_KEY_SYM = 565,
     MASTER_SSL_SYM = 566,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 567,
     MASTER_SYM = 568,
     MASTER_USER_SYM = 569,
     MASTER_USE_GTID_SYM = 570,
     MASTER_HEARTBEAT_PERIOD_SYM = 571,
     MATCH = 572,
     MATCHED_SYM = 573,
     MAX_CONNECTIONS_PER_HOUR = 574,
     MAX_QUERIES_PER_HOUR = 575,
     MAX_ROWS = 576,
     MAX_SIZE_SYM = 577,
     MAX_SYM = 578,
     MAX_UPDATES_PER_HOUR = 579,
     MAX_USER_CONNECTIONS_SYM = 580,
     MAX_VALUE_SYM = 581,
     MEDIUMBLOB = 582,
     MEDIUMINT = 583,
     MEDIUMTEXT = 584,
     MEDIUM_SYM = 585,
     MEMORY_SYM = 586,
     MERGE_SYM = 587,
     MESSAGE_TEXT_SYM = 588,
     MICROSECOND_SYM = 589,
     MIGRATE_SYM = 590,
     MINUTE_MICROSECOND_SYM = 591,
     MINUTE_SECOND_SYM = 592,
     MINUTE_SYM = 593,
     MIN_ROWS = 594,
     MIN_SYM = 595,
     MODE_SYM = 596,
     MODIFIES_SYM = 597,
     MODIFY_SYM = 598,
     MOD_SYM = 599,
     MONTH_SYM = 600,
     MULTILINESTRING = 601,
     MULTIPOINT = 602,
     MULTIPOLYGON = 603,
     MUTEX_SYM = 604,
     MYSQL_ERRNO_SYM = 605,
     NAMES_SYM = 606,
     NAME_SYM = 607,
     NATIONAL_SYM = 608,
     NATURAL = 609,
     NCHAR_STRING = 610,
     NCHAR_SYM = 611,
     NDBCLUSTER_SYM = 612,
     NE = 613,
     NEG = 614,
     NEW_SYM = 615,
     NEXT_SYM = 616,
     NODEGROUP_SYM = 617,
     NONE_SYM = 618,
     NOT2_SYM = 619,
     NOT_SYM = 620,
     NOW_SYM = 621,
     NO_SYM = 622,
     NO_WAIT_SYM = 623,
     NO_WRITE_TO_BINLOG = 624,
     NULL_SYM = 625,
     NUM = 626,
     NUMBER_SYM = 627,
     NUMERIC_SYM = 628,
     NVARCHAR_SYM = 629,
     OFFSET_SYM = 630,
     OLD_PASSWORD = 631,
     ON = 632,
     ONE_SYM = 633,
     ONLY_SYM = 634,
     ONLINE_SYM = 635,
     OPEN_SYM = 636,
     OPTIMIZE = 637,
     OPTIONS_SYM = 638,
     OPTION = 639,
     OPTIONALLY = 640,
     OR2_SYM = 641,
     ORDER_SYM = 642,
     OR_OR_SYM = 643,
     OR_SYM = 644,
     OUTER = 645,
     OUTFILE = 646,
     OUT_SYM = 647,
     OWNER_SYM = 648,
     PACK_KEYS_SYM = 649,
     PAGE_SYM = 650,
     PAGE_CHECKSUM_SYM = 651,
     PARAM_MARKER = 652,
     PARSER_SYM = 653,
     PARSE_VCOL_EXPR_SYM = 654,
     PARTIAL = 655,
     PARTITION_SYM = 656,
     PARTITIONS_SYM = 657,
     PARTITIONING_SYM = 658,
     PASSWORD = 659,
     PERSISTENT_SYM = 660,
     PHASE_SYM = 661,
     PLUGINS_SYM = 662,
     PLUGIN_SYM = 663,
     POINT_SYM = 664,
     POLYGON = 665,
     PORT_SYM = 666,
     POSITION_SYM = 667,
     PRECISION = 668,
     PREPARE_SYM = 669,
     PRESERVE_SYM = 670,
     PREV_SYM = 671,
     PRIMARY_SYM = 672,
     PRIVILEGES = 673,
     PROCEDURE_SYM = 674,
     PROCESS = 675,
     PROCESSLIST_SYM = 676,
     PROFILE_SYM = 677,
     PROFILES_SYM = 678,
     PROXY_SYM = 679,
     PURGE = 680,
     QUARTER_SYM = 681,
     QUERY_SYM = 682,
     QUICK = 683,
     RANGE_SYM = 684,
     READS_SYM = 685,
     READ_ONLY_SYM = 686,
     READ_SYM = 687,
     READ_WRITE_SYM = 688,
     REAL = 689,
     REBUILD_SYM = 690,
     RECOVER_SYM = 691,
     REDOFILE_SYM = 692,
     REDO_BUFFER_SIZE_SYM = 693,
     REDUNDANT_SYM = 694,
     REFERENCES = 695,
     REGEXP = 696,
     RELAY = 697,
     RELAYLOG_SYM = 698,
     RELAY_LOG_FILE_SYM = 699,
     RELAY_LOG_POS_SYM = 700,
     RELAY_THREAD = 701,
     RELEASE_SYM = 702,
     RELOAD = 703,
     REMOVE_SYM = 704,
     RENAME = 705,
     REORGANIZE_SYM = 706,
     REPAIR = 707,
     REPEATABLE_SYM = 708,
     REPEAT_SYM = 709,
     REPLACE = 710,
     REPLICATION = 711,
     REQUIRE_SYM = 712,
     RESET_SYM = 713,
     RESIGNAL_SYM = 714,
     RESOURCES = 715,
     RESTORE_SYM = 716,
     RESTRICT = 717,
     RESUME_SYM = 718,
     RETURNED_SQLSTATE_SYM = 719,
     RETURNING_SYM = 720,
     RETURNS_SYM = 721,
     RETURN_SYM = 722,
     REVERSE_SYM = 723,
     REVOKE = 724,
     RIGHT = 725,
     ROLE_SYM = 726,
     ROLLBACK_SYM = 727,
     ROLLUP_SYM = 728,
     ROUTINE_SYM = 729,
     ROWS_SYM = 730,
     ROW_FORMAT_SYM = 731,
     ROW_SYM = 732,
     ROW_COUNT_SYM = 733,
     RTREE_SYM = 734,
     SAVEPOINT_SYM = 735,
     SCHEDULE_SYM = 736,
     SCHEMA_NAME_SYM = 737,
     SECOND_MICROSECOND_SYM = 738,
     SECOND_SYM = 739,
     SECURITY_SYM = 740,
     SELECT_SYM = 741,
     SENSITIVE_SYM = 742,
     SEPARATOR_SYM = 743,
     SERIALIZABLE_SYM = 744,
     SERIAL_SYM = 745,
     SESSION_SYM = 746,
     SERVER_SYM = 747,
     SERVER_OPTIONS = 748,
     SET = 749,
     SET_VAR = 750,
     SHARE_SYM = 751,
     SHIFT_LEFT = 752,
     SHIFT_RIGHT = 753,
     SHOW = 754,
     SHUTDOWN = 755,
     SIGNAL_SYM = 756,
     SIGNED_SYM = 757,
     SIMPLE_SYM = 758,
     SLAVE = 759,
     SLAVES = 760,
     SLAVE_POS_SYM = 761,
     SLOW = 762,
     SMALLINT = 763,
     SNAPSHOT_SYM = 764,
     SOCKET_SYM = 765,
     SOFT_SYM = 766,
     SONAME_SYM = 767,
     SOUNDS_SYM = 768,
     SOURCE_SYM = 769,
     SPATIAL_SYM = 770,
     SPECIFIC_SYM = 771,
     SQLEXCEPTION_SYM = 772,
     SQLSTATE_SYM = 773,
     SQLWARNING_SYM = 774,
     SQL_BIG_RESULT = 775,
     SQL_BUFFER_RESULT = 776,
     SQL_CACHE_SYM = 777,
     SQL_CALC_FOUND_ROWS = 778,
     SQL_NO_CACHE_SYM = 779,
     SQL_SMALL_RESULT = 780,
     SQL_SYM = 781,
     SQL_THREAD = 782,
     SSL_SYM = 783,
     STARTING = 784,
     STARTS_SYM = 785,
     START_SYM = 786,
     STATS_AUTO_RECALC_SYM = 787,
     STATS_PERSISTENT_SYM = 788,
     STATS_SAMPLE_PAGES_SYM = 789,
     STATUS_SYM = 790,
     STDDEV_SAMP_SYM = 791,
     STD_SYM = 792,
     STOP_SYM = 793,
     STORAGE_SYM = 794,
     STRAIGHT_JOIN = 795,
     STRING_SYM = 796,
     SUBCLASS_ORIGIN_SYM = 797,
     SUBDATE_SYM = 798,
     SUBJECT_SYM = 799,
     SUBPARTITIONS_SYM = 800,
     SUBPARTITION_SYM = 801,
     SUBSTRING = 802,
     SUM_SYM = 803,
     SUPER_SYM = 804,
     SUSPEND_SYM = 805,
     SWAPS_SYM = 806,
     SWITCHES_SYM = 807,
     SYSDATE = 808,
     TABLES = 809,
     TABLESPACE = 810,
     TABLE_REF_PRIORITY = 811,
     TABLE_STATS_SYM = 812,
     TABLE_SYM = 813,
     TABLE_CHECKSUM_SYM = 814,
     TABLE_NAME_SYM = 815,
     TEMPORARY = 816,
     TEMPTABLE_SYM = 817,
     TERMINATED = 818,
     TEXT_STRING = 819,
     TEXT_SYM = 820,
     THAN_SYM = 821,
     THEN_SYM = 822,
     TIMESTAMP = 823,
     TIMESTAMP_ADD = 824,
     TIMESTAMP_DIFF = 825,
     TIME_SYM = 826,
     TINYBLOB = 827,
     TINYINT = 828,
     TINYTEXT = 829,
     TO_SYM = 830,
     TRAILING = 831,
     TRANSACTION_SYM = 832,
     TRANSACTIONAL_SYM = 833,
     TRIGGERS_SYM = 834,
     TRIGGER_SYM = 835,
     TRIM = 836,
     TRUE_SYM = 837,
     TRUNCATE_SYM = 838,
     TYPES_SYM = 839,
     TYPE_SYM = 840,
     UDF_RETURNS_SYM = 841,
     ULONGLONG_NUM = 842,
     UNCOMMITTED_SYM = 843,
     UNDEFINED_SYM = 844,
     UNDERSCORE_CHARSET = 845,
     UNDOFILE_SYM = 846,
     UNDO_BUFFER_SIZE_SYM = 847,
     UNDO_SYM = 848,
     UNICODE_SYM = 849,
     UNINSTALL_SYM = 850,
     UNION_SYM = 851,
     UNIQUE_SYM = 852,
     UNKNOWN_SYM = 853,
     UNLOCK_SYM = 854,
     UNSIGNED = 855,
     UNTIL_SYM = 856,
     UPDATE_SYM = 857,
     UPGRADE_SYM = 858,
     USAGE = 859,
     USER = 860,
     USER_STATS_SYM = 861,
     USE_FRM = 862,
     USE_SYM = 863,
     USING = 864,
     UTC_DATE_SYM = 865,
     UTC_TIMESTAMP_SYM = 866,
     UTC_TIME_SYM = 867,
     VALUES = 868,
     VALUE_SYM = 869,
     VARBINARY = 870,
     VARCHAR = 871,
     VARIABLES = 872,
     VARIANCE_SYM = 873,
     VARYING = 874,
     VAR_SAMP_SYM = 875,
     VIA_SYM = 876,
     VIEW_SYM = 877,
     VIRTUAL_SYM = 878,
     WAIT_SYM = 879,
     WARNINGS = 880,
     WEEK_SYM = 881,
     WEIGHT_STRING_SYM = 882,
     WHEN_SYM = 883,
     WHERE = 884,
     WHILE_SYM = 885,
     WITH = 886,
     WITH_CUBE_SYM = 887,
     WITH_ROLLUP_SYM = 888,
     WORK_SYM = 889,
     WRAPPER_SYM = 890,
     WRITE_SYM = 891,
     X509_SYM = 892,
     XA_SYM = 893,
     XML_SYM = 894,
     XOR = 895,
     YEAR_MONTH_SYM = 896,
     YEAR_SYM = 897,
     ZEROFILL = 898,
     IMPOSSIBLE_ACTION = 899
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADMIN_SYM 262
#define ADDDATE_SYM 263
#define AFTER_SYM 264
#define AGAINST 265
#define AGGREGATE_SYM 266
#define ALGORITHM_SYM 267
#define ALL 268
#define ALTER 269
#define ALWAYS_SYM 270
#define ANALYZE_SYM 271
#define AND_AND_SYM 272
#define AND_SYM 273
#define ANY_SYM 274
#define AS 275
#define ASC 276
#define ASCII_SYM 277
#define ASENSITIVE_SYM 278
#define AT_SYM 279
#define AUTHORS_SYM 280
#define AUTOEXTEND_SIZE_SYM 281
#define AUTO_INC 282
#define AUTO_SYM 283
#define AVG_ROW_LENGTH 284
#define AVG_SYM 285
#define BACKUP_SYM 286
#define BEFORE_SYM 287
#define BEGIN_SYM 288
#define BETWEEN_SYM 289
#define BIGINT 290
#define BINARY 291
#define BINLOG_SYM 292
#define BIN_NUM 293
#define BIT_AND 294
#define BIT_OR 295
#define BIT_SYM 296
#define BIT_XOR 297
#define BLOB_SYM 298
#define BLOCK_SYM 299
#define BOOLEAN_SYM 300
#define BOOL_SYM 301
#define BOTH 302
#define BTREE_SYM 303
#define BY 304
#define BYTE_SYM 305
#define CACHE_SYM 306
#define CALL_SYM 307
#define CASCADE 308
#define CASCADED 309
#define CASE_SYM 310
#define CAST_SYM 311
#define CATALOG_NAME_SYM 312
#define CHAIN_SYM 313
#define CHANGE 314
#define CHANGED 315
#define CHARSET 316
#define CHAR_SYM 317
#define CHECKPOINT_SYM 318
#define CHECKSUM_SYM 319
#define CHECK_SYM 320
#define CIPHER_SYM 321
#define CLASS_ORIGIN_SYM 322
#define CLIENT_SYM 323
#define CLIENT_STATS_SYM 324
#define CLOSE_SYM 325
#define COALESCE 326
#define CODE_SYM 327
#define COLLATE_SYM 328
#define COLLATION_SYM 329
#define COLUMNS 330
#define COLUMN_ADD_SYM 331
#define COLUMN_CHECK_SYM 332
#define COLUMN_CREATE_SYM 333
#define COLUMN_DELETE_SYM 334
#define COLUMN_GET_SYM 335
#define COLUMN_SYM 336
#define COLUMN_NAME_SYM 337
#define COMMENT_SYM 338
#define COMMITTED_SYM 339
#define COMMIT_SYM 340
#define COMPACT_SYM 341
#define COMPLETION_SYM 342
#define COMPRESSED_SYM 343
#define CONCURRENT 344
#define CONDITION_SYM 345
#define CONNECTION_SYM 346
#define CONSISTENT_SYM 347
#define CONSTRAINT 348
#define CONSTRAINT_CATALOG_SYM 349
#define CONSTRAINT_NAME_SYM 350
#define CONSTRAINT_SCHEMA_SYM 351
#define CONTAINS_SYM 352
#define CONTEXT_SYM 353
#define CONTINUE_SYM 354
#define CONTRIBUTORS_SYM 355
#define CONVERT_SYM 356
#define COUNT_SYM 357
#define CPU_SYM 358
#define CREATE 359
#define CROSS 360
#define CUBE_SYM 361
#define CURDATE 362
#define CURRENT_SYM 363
#define CURRENT_USER 364
#define CURRENT_ROLE 365
#define CURRENT_POS_SYM 366
#define CURSOR_SYM 367
#define CURSOR_NAME_SYM 368
#define CURTIME 369
#define DATABASE 370
#define DATABASES 371
#define DATAFILE_SYM 372
#define DATA_SYM 373
#define DATETIME 374
#define DATE_ADD_INTERVAL 375
#define DATE_SUB_INTERVAL 376
#define DATE_SYM 377
#define DAY_HOUR_SYM 378
#define DAY_MICROSECOND_SYM 379
#define DAY_MINUTE_SYM 380
#define DAY_SECOND_SYM 381
#define DAY_SYM 382
#define DEALLOCATE_SYM 383
#define DECIMAL_NUM 384
#define DECIMAL_SYM 385
#define DECLARE_SYM 386
#define DEFAULT 387
#define DEFINER_SYM 388
#define DELAYED_SYM 389
#define DELAY_KEY_WRITE_SYM 390
#define DELETE_SYM 391
#define DESC 392
#define DESCRIBE 393
#define DES_KEY_FILE 394
#define DETERMINISTIC_SYM 395
#define DIAGNOSTICS_SYM 396
#define DIRECTORY_SYM 397
#define DISABLE_SYM 398
#define DISCARD 399
#define DISK_SYM 400
#define DISTINCT 401
#define DIV_SYM 402
#define DOUBLE_SYM 403
#define DO_SYM 404
#define DROP 405
#define DUAL_SYM 406
#define DUMPFILE 407
#define DUPLICATE_SYM 408
#define DYNAMIC_SYM 409
#define EACH_SYM 410
#define ELSE 411
#define ELSEIF_SYM 412
#define ENABLE_SYM 413
#define ENCLOSED 414
#define END 415
#define ENDS_SYM 416
#define END_OF_INPUT 417
#define ENGINES_SYM 418
#define ENGINE_SYM 419
#define ENUM 420
#define EQ 421
#define EQUAL_SYM 422
#define ERROR_SYM 423
#define ERRORS 424
#define ESCAPED 425
#define ESCAPE_SYM 426
#define EVENTS_SYM 427
#define EVENT_SYM 428
#define EVERY_SYM 429
#define EXCHANGE_SYM 430
#define EXAMINED_SYM 431
#define EXECUTE_SYM 432
#define EXISTS 433
#define EXIT_SYM 434
#define EXPANSION_SYM 435
#define EXPORT_SYM 436
#define EXTENDED_SYM 437
#define EXTENT_SIZE_SYM 438
#define EXTRACT_SYM 439
#define FALSE_SYM 440
#define FAST_SYM 441
#define FAULTS_SYM 442
#define FETCH_SYM 443
#define FILE_SYM 444
#define FIRST_SYM 445
#define FIXED_SYM 446
#define FLOAT_NUM 447
#define FLOAT_SYM 448
#define FLUSH_SYM 449
#define FORCE_SYM 450
#define FOREIGN 451
#define FOR_SYM 452
#define FOUND_SYM 453
#define FROM 454
#define FULL 455
#define FULLTEXT_SYM 456
#define FUNCTION_SYM 457
#define GE 458
#define GENERAL 459
#define GENERATED_SYM 460
#define GEOMETRYCOLLECTION 461
#define GEOMETRY_SYM 462
#define GET_FORMAT 463
#define GET_SYM 464
#define GLOBAL_SYM 465
#define GRANT 466
#define GRANTS 467
#define GROUP_SYM 468
#define GROUP_CONCAT_SYM 469
#define GT_SYM 470
#define HANDLER_SYM 471
#define HARD_SYM 472
#define HASH_SYM 473
#define HAVING 474
#define HELP_SYM 475
#define HEX_NUM 476
#define HEX_STRING 477
#define HIGH_PRIORITY 478
#define HOST_SYM 479
#define HOSTS_SYM 480
#define HOUR_MICROSECOND_SYM 481
#define HOUR_MINUTE_SYM 482
#define HOUR_SECOND_SYM 483
#define HOUR_SYM 484
#define ID_SYM 485
#define IDENT 486
#define IDENTIFIED_SYM 487
#define IDENT_QUOTED 488
#define IF 489
#define IGNORE_SYM 490
#define IGNORE_SERVER_IDS_SYM 491
#define IMPORT 492
#define INDEXES 493
#define INDEX_SYM 494
#define INDEX_STATS_SYM 495
#define INFILE 496
#define INITIAL_SIZE_SYM 497
#define INNER_SYM 498
#define INOUT_SYM 499
#define INSENSITIVE_SYM 500
#define INSERT 501
#define INSERT_METHOD 502
#define INSTALL_SYM 503
#define INTERVAL_SYM 504
#define INTO 505
#define INT_SYM 506
#define INVOKER_SYM 507
#define IN_SYM 508
#define IO_SYM 509
#define IPC_SYM 510
#define IS 511
#define ISOLATION 512
#define ISSUER_SYM 513
#define ITERATE_SYM 514
#define JOIN_SYM 515
#define KEYS 516
#define KEY_BLOCK_SIZE 517
#define KEY_SYM 518
#define KILL_SYM 519
#define LANGUAGE_SYM 520
#define LAST_SYM 521
#define LAST_VALUE 522
#define LE 523
#define LEADING 524
#define LEAVES 525
#define LEAVE_SYM 526
#define LEFT 527
#define LESS_SYM 528
#define LEVEL_SYM 529
#define LEX_HOSTNAME 530
#define LIKE 531
#define LIMIT 532
#define LINEAR_SYM 533
#define LINES 534
#define LINESTRING 535
#define LIST_SYM 536
#define LOAD 537
#define LOCAL_SYM 538
#define LOCATOR_SYM 539
#define LOCKS_SYM 540
#define LOCK_SYM 541
#define LOGFILE_SYM 542
#define LOGS_SYM 543
#define LONGBLOB 544
#define LONGTEXT 545
#define LONG_NUM 546
#define LONG_SYM 547
#define LOOP_SYM 548
#define LOW_PRIORITY 549
#define LT 550
#define MASTER_CONNECT_RETRY_SYM 551
#define MASTER_GTID_POS_SYM 552
#define MASTER_HOST_SYM 553
#define MASTER_LOG_FILE_SYM 554
#define MASTER_LOG_POS_SYM 555
#define MASTER_PASSWORD_SYM 556
#define MASTER_PORT_SYM 557
#define MASTER_SERVER_ID_SYM 558
#define MASTER_SSL_CAPATH_SYM 559
#define MASTER_SSL_CA_SYM 560
#define MASTER_SSL_CERT_SYM 561
#define MASTER_SSL_CIPHER_SYM 562
#define MASTER_SSL_CRL_SYM 563
#define MASTER_SSL_CRLPATH_SYM 564
#define MASTER_SSL_KEY_SYM 565
#define MASTER_SSL_SYM 566
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 567
#define MASTER_SYM 568
#define MASTER_USER_SYM 569
#define MASTER_USE_GTID_SYM 570
#define MASTER_HEARTBEAT_PERIOD_SYM 571
#define MATCH 572
#define MATCHED_SYM 573
#define MAX_CONNECTIONS_PER_HOUR 574
#define MAX_QUERIES_PER_HOUR 575
#define MAX_ROWS 576
#define MAX_SIZE_SYM 577
#define MAX_SYM 578
#define MAX_UPDATES_PER_HOUR 579
#define MAX_USER_CONNECTIONS_SYM 580
#define MAX_VALUE_SYM 581
#define MEDIUMBLOB 582
#define MEDIUMINT 583
#define MEDIUMTEXT 584
#define MEDIUM_SYM 585
#define MEMORY_SYM 586
#define MERGE_SYM 587
#define MESSAGE_TEXT_SYM 588
#define MICROSECOND_SYM 589
#define MIGRATE_SYM 590
#define MINUTE_MICROSECOND_SYM 591
#define MINUTE_SECOND_SYM 592
#define MINUTE_SYM 593
#define MIN_ROWS 594
#define MIN_SYM 595
#define MODE_SYM 596
#define MODIFIES_SYM 597
#define MODIFY_SYM 598
#define MOD_SYM 599
#define MONTH_SYM 600
#define MULTILINESTRING 601
#define MULTIPOINT 602
#define MULTIPOLYGON 603
#define MUTEX_SYM 604
#define MYSQL_ERRNO_SYM 605
#define NAMES_SYM 606
#define NAME_SYM 607
#define NATIONAL_SYM 608
#define NATURAL 609
#define NCHAR_STRING 610
#define NCHAR_SYM 611
#define NDBCLUSTER_SYM 612
#define NE 613
#define NEG 614
#define NEW_SYM 615
#define NEXT_SYM 616
#define NODEGROUP_SYM 617
#define NONE_SYM 618
#define NOT2_SYM 619
#define NOT_SYM 620
#define NOW_SYM 621
#define NO_SYM 622
#define NO_WAIT_SYM 623
#define NO_WRITE_TO_BINLOG 624
#define NULL_SYM 625
#define NUM 626
#define NUMBER_SYM 627
#define NUMERIC_SYM 628
#define NVARCHAR_SYM 629
#define OFFSET_SYM 630
#define OLD_PASSWORD 631
#define ON 632
#define ONE_SYM 633
#define ONLY_SYM 634
#define ONLINE_SYM 635
#define OPEN_SYM 636
#define OPTIMIZE 637
#define OPTIONS_SYM 638
#define OPTION 639
#define OPTIONALLY 640
#define OR2_SYM 641
#define ORDER_SYM 642
#define OR_OR_SYM 643
#define OR_SYM 644
#define OUTER 645
#define OUTFILE 646
#define OUT_SYM 647
#define OWNER_SYM 648
#define PACK_KEYS_SYM 649
#define PAGE_SYM 650
#define PAGE_CHECKSUM_SYM 651
#define PARAM_MARKER 652
#define PARSER_SYM 653
#define PARSE_VCOL_EXPR_SYM 654
#define PARTIAL 655
#define PARTITION_SYM 656
#define PARTITIONS_SYM 657
#define PARTITIONING_SYM 658
#define PASSWORD 659
#define PERSISTENT_SYM 660
#define PHASE_SYM 661
#define PLUGINS_SYM 662
#define PLUGIN_SYM 663
#define POINT_SYM 664
#define POLYGON 665
#define PORT_SYM 666
#define POSITION_SYM 667
#define PRECISION 668
#define PREPARE_SYM 669
#define PRESERVE_SYM 670
#define PREV_SYM 671
#define PRIMARY_SYM 672
#define PRIVILEGES 673
#define PROCEDURE_SYM 674
#define PROCESS 675
#define PROCESSLIST_SYM 676
#define PROFILE_SYM 677
#define PROFILES_SYM 678
#define PROXY_SYM 679
#define PURGE 680
#define QUARTER_SYM 681
#define QUERY_SYM 682
#define QUICK 683
#define RANGE_SYM 684
#define READS_SYM 685
#define READ_ONLY_SYM 686
#define READ_SYM 687
#define READ_WRITE_SYM 688
#define REAL 689
#define REBUILD_SYM 690
#define RECOVER_SYM 691
#define REDOFILE_SYM 692
#define REDO_BUFFER_SIZE_SYM 693
#define REDUNDANT_SYM 694
#define REFERENCES 695
#define REGEXP 696
#define RELAY 697
#define RELAYLOG_SYM 698
#define RELAY_LOG_FILE_SYM 699
#define RELAY_LOG_POS_SYM 700
#define RELAY_THREAD 701
#define RELEASE_SYM 702
#define RELOAD 703
#define REMOVE_SYM 704
#define RENAME 705
#define REORGANIZE_SYM 706
#define REPAIR 707
#define REPEATABLE_SYM 708
#define REPEAT_SYM 709
#define REPLACE 710
#define REPLICATION 711
#define REQUIRE_SYM 712
#define RESET_SYM 713
#define RESIGNAL_SYM 714
#define RESOURCES 715
#define RESTORE_SYM 716
#define RESTRICT 717
#define RESUME_SYM 718
#define RETURNED_SQLSTATE_SYM 719
#define RETURNING_SYM 720
#define RETURNS_SYM 721
#define RETURN_SYM 722
#define REVERSE_SYM 723
#define REVOKE 724
#define RIGHT 725
#define ROLE_SYM 726
#define ROLLBACK_SYM 727
#define ROLLUP_SYM 728
#define ROUTINE_SYM 729
#define ROWS_SYM 730
#define ROW_FORMAT_SYM 731
#define ROW_SYM 732
#define ROW_COUNT_SYM 733
#define RTREE_SYM 734
#define SAVEPOINT_SYM 735
#define SCHEDULE_SYM 736
#define SCHEMA_NAME_SYM 737
#define SECOND_MICROSECOND_SYM 738
#define SECOND_SYM 739
#define SECURITY_SYM 740
#define SELECT_SYM 741
#define SENSITIVE_SYM 742
#define SEPARATOR_SYM 743
#define SERIALIZABLE_SYM 744
#define SERIAL_SYM 745
#define SESSION_SYM 746
#define SERVER_SYM 747
#define SERVER_OPTIONS 748
#define SET 749
#define SET_VAR 750
#define SHARE_SYM 751
#define SHIFT_LEFT 752
#define SHIFT_RIGHT 753
#define SHOW 754
#define SHUTDOWN 755
#define SIGNAL_SYM 756
#define SIGNED_SYM 757
#define SIMPLE_SYM 758
#define SLAVE 759
#define SLAVES 760
#define SLAVE_POS_SYM 761
#define SLOW 762
#define SMALLINT 763
#define SNAPSHOT_SYM 764
#define SOCKET_SYM 765
#define SOFT_SYM 766
#define SONAME_SYM 767
#define SOUNDS_SYM 768
#define SOURCE_SYM 769
#define SPATIAL_SYM 770
#define SPECIFIC_SYM 771
#define SQLEXCEPTION_SYM 772
#define SQLSTATE_SYM 773
#define SQLWARNING_SYM 774
#define SQL_BIG_RESULT 775
#define SQL_BUFFER_RESULT 776
#define SQL_CACHE_SYM 777
#define SQL_CALC_FOUND_ROWS 778
#define SQL_NO_CACHE_SYM 779
#define SQL_SMALL_RESULT 780
#define SQL_SYM 781
#define SQL_THREAD 782
#define SSL_SYM 783
#define STARTING 784
#define STARTS_SYM 785
#define START_SYM 786
#define STATS_AUTO_RECALC_SYM 787
#define STATS_PERSISTENT_SYM 788
#define STATS_SAMPLE_PAGES_SYM 789
#define STATUS_SYM 790
#define STDDEV_SAMP_SYM 791
#define STD_SYM 792
#define STOP_SYM 793
#define STORAGE_SYM 794
#define STRAIGHT_JOIN 795
#define STRING_SYM 796
#define SUBCLASS_ORIGIN_SYM 797
#define SUBDATE_SYM 798
#define SUBJECT_SYM 799
#define SUBPARTITIONS_SYM 800
#define SUBPARTITION_SYM 801
#define SUBSTRING 802
#define SUM_SYM 803
#define SUPER_SYM 804
#define SUSPEND_SYM 805
#define SWAPS_SYM 806
#define SWITCHES_SYM 807
#define SYSDATE 808
#define TABLES 809
#define TABLESPACE 810
#define TABLE_REF_PRIORITY 811
#define TABLE_STATS_SYM 812
#define TABLE_SYM 813
#define TABLE_CHECKSUM_SYM 814
#define TABLE_NAME_SYM 815
#define TEMPORARY 816
#define TEMPTABLE_SYM 817
#define TERMINATED 818
#define TEXT_STRING 819
#define TEXT_SYM 820
#define THAN_SYM 821
#define THEN_SYM 822
#define TIMESTAMP 823
#define TIMESTAMP_ADD 824
#define TIMESTAMP_DIFF 825
#define TIME_SYM 826
#define TINYBLOB 827
#define TINYINT 828
#define TINYTEXT 829
#define TO_SYM 830
#define TRAILING 831
#define TRANSACTION_SYM 832
#define TRANSACTIONAL_SYM 833
#define TRIGGERS_SYM 834
#define TRIGGER_SYM 835
#define TRIM 836
#define TRUE_SYM 837
#define TRUNCATE_SYM 838
#define TYPES_SYM 839
#define TYPE_SYM 840
#define UDF_RETURNS_SYM 841
#define ULONGLONG_NUM 842
#define UNCOMMITTED_SYM 843
#define UNDEFINED_SYM 844
#define UNDERSCORE_CHARSET 845
#define UNDOFILE_SYM 846
#define UNDO_BUFFER_SIZE_SYM 847
#define UNDO_SYM 848
#define UNICODE_SYM 849
#define UNINSTALL_SYM 850
#define UNION_SYM 851
#define UNIQUE_SYM 852
#define UNKNOWN_SYM 853
#define UNLOCK_SYM 854
#define UNSIGNED 855
#define UNTIL_SYM 856
#define UPDATE_SYM 857
#define UPGRADE_SYM 858
#define USAGE 859
#define USER 860
#define USER_STATS_SYM 861
#define USE_FRM 862
#define USE_SYM 863
#define USING 864
#define UTC_DATE_SYM 865
#define UTC_TIMESTAMP_SYM 866
#define UTC_TIME_SYM 867
#define VALUES 868
#define VALUE_SYM 869
#define VARBINARY 870
#define VARCHAR 871
#define VARIABLES 872
#define VARIANCE_SYM 873
#define VARYING 874
#define VAR_SAMP_SYM 875
#define VIA_SYM 876
#define VIEW_SYM 877
#define VIRTUAL_SYM 878
#define WAIT_SYM 879
#define WARNINGS 880
#define WEEK_SYM 881
#define WEIGHT_STRING_SYM 882
#define WHEN_SYM 883
#define WHERE 884
#define WHILE_SYM 885
#define WITH 886
#define WITH_CUBE_SYM 887
#define WITH_ROLLUP_SYM 888
#define WORK_SYM 889
#define WRAPPER_SYM 890
#define WRITE_SYM 891
#define X509_SYM 892
#define XA_SYM 893
#define XML_SYM 894
#define XOR 895
#define YEAR_MONTH_SYM 896
#define YEAR_SYM 897
#define ZEROFILL 898
#define IMPOSSIBLE_ACTION 899




/* Copy the first part of user declarations.  */
#line 25 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"

#define YYLIP  (& thd->m_parser_state->m_lip)
#define YYPS   (& thd->m_parser_state->m_yacc)
#define YYCSCL (thd->variables.character_set_client)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (thd->lex)

#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(current_thd, (char*) (A));      \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(thd);  \
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext), thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label(current_thd, empty_lex_str, lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !MY_TEST(i) ||
         sp->push_backpatch(i, ctx->push_label(current_thd, empty_lex_str, 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!MY_TEST(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->default_value)
    it= spv->default_value;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param  thd         The current thread.
  @param  name        The SP variable name.
  @param  spvar       The SP variable (optional).
  @param  start_in_q  Start position of the SP variable name in the query.
  @param  end_in_q    End position of the SP variable name in the query.

  @remark If spvar is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal*
create_item_for_sp_var(THD *thd, LEX_STRING name, sp_variable *spvar,
                       const char *start_in_q, const char *end_in_q)
{
  Item_splocal *item;
  LEX *lex= thd->lex;
  uint pos_in_q, len_in_q;
  sp_pcontext *spc = lex->spcont;

  /* If necessary, look for the variable. */
  if (spc && !spvar)
    spvar= spc->find_variable(name, false);

  if (!spvar)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(spc && spvar);

  /* Position and length of the SP variable name in the query. */
  pos_in_q= start_in_q - lex->sphead->m_tmp_query;
  len_in_q= end_in_q - start_in_q;

  item= new (thd->mem_root)
    Item_splocal(name, spvar->offset, spvar->type, pos_in_q, len_in_q);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  lex->option_list= NULL;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list, lex->option_list, lex->check_exists);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

static void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->one_shot_set= 0;
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    DBUG_ASSERT(no_lookahead);
    lex->sphead->m_tmp_query= lip->get_ptr();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                 lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}




/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 890 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
{
  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  enum ha_choice choice;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  class sp_condition_value *spcondvalue;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  Diagnostics_information::Which_area diag_area;
  Diagnostics_information *diag_info;
  Statement_information_item *stmt_info_item;
  Statement_information_item::Name stmt_info_item_name;
  List<Statement_information_item> *stmt_info_list;
  Condition_information_item *cond_info_item;
  Condition_information_item::Name cond_info_item_name;
  List<Condition_information_item> *cond_info_list;
  DYNCALL_CREATE_DEF *dyncol_def;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;
  bool is_not_empty;
}
/* Line 193 of yacc.c.  */
#line 2318 "/Users/matt/Documents/Develop/GitRepository/MariaDB/Debug/sql/sql_yacc.cc"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */
#line 950 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 216 of yacc.c.  */
#line 2334 "/Users/matt/Documents/Develop/GitRepository/MariaDB/Debug/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  622
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   66079

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  664
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  997
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2824
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4794

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   899

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   657,     2,     2,     2,   651,   646,     2,
     654,   655,   649,   648,   656,   647,   662,   650,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   663,   660,
       2,     2,     2,     2,   661,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   652,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   658,   645,   659,   653,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   129,   131,   135,   137,   139,   144,
     146,   149,   150,   155,   156,   159,   163,   165,   168,   169,
     173,   174,   181,   183,   187,   191,   195,   199,   203,   207,
     211,   215,   219,   223,   227,   231,   235,   239,   243,   247,
     253,   255,   256,   258,   262,   264,   268,   272,   276,   280,
     284,   288,   292,   293,   295,   297,   298,   306,   307,   308,
     324,   325,   326,   342,   343,   344,   360,   361,   368,   369,
     373,   378,   384,   389,   393,   396,   407,   409,   413,   416,
     419,   422,   425,   428,   431,   434,   435,   449,   450,   457,
     460,   461,   463,   467,   469,   470,   473,   474,   477,   478,
     480,   484,   489,   490,   493,   494,   497,   499,   501,   503,
     505,   507,   509,   511,   513,   515,   517,   519,   521,   523,
     524,   528,   530,   531,   534,   535,   538,   541,   544,   547,
     550,   554,   558,   560,   562,   564,   567,   571,   575,   576,
     581,   582,   586,   587,   589,   593,   595,   596,   598,   602,
     604,   605,   609,   610,   612,   616,   618,   623,   624,   626,
     628,   630,   631,   635,   638,   642,   643,   647,   648,   654,
     660,   661,   669,   675,   676,   679,   681,   683,   685,   689,
     691,   693,   695,   699,   700,   702,   704,   706,   708,   711,
     713,   717,   719,   721,   722,   724,   725,   728,   732,   738,
     740,   742,   744,   746,   748,   750,   752,   754,   756,   758,
     760,   762,   764,   766,   768,   772,   777,   778,   780,   782,
     786,   788,   792,   796,   798,   801,   803,   805,   807,   809,
     813,   817,   819,   821,   823,   825,   827,   829,   831,   833,
     835,   837,   839,   841,   843,   845,   849,   850,   853,   855,
     857,   859,   861,   863,   865,   867,   869,   871,   873,   875,
     877,   879,   880,   886,   887,   890,   891,   895,   896,   899,
     902,   905,   908,   909,   916,   919,   920,   923,   925,   927,
     931,   932,   933,   934,   942,   943,   946,   949,   951,   953,
     954,   955,   964,   965,   972,   974,   977,   979,   982,   983,
     984,   991,   992,   993,  1000,  1001,  1004,  1005,  1011,  1012,
    1014,  1015,  1021,  1022,  1025,  1026,  1032,  1037,  1038,  1039,
    1048,  1049,  1057,  1059,  1061,  1063,  1065,  1067,  1070,  1075,
    1081,  1082,  1087,  1092,  1097,  1101,  1105,  1108,  1111,  1112,
    1115,  1117,  1120,  1124,  1126,  1128,  1130,  1132,  1134,  1137,
    1141,  1143,  1145,  1147,  1149,  1151,  1153,  1155,  1157,  1159,
    1161,  1164,  1168,  1170,  1172,  1174,  1176,  1178,  1180,  1182,
    1185,  1189,  1191,  1193,  1195,  1197,  1199,  1201,  1203,  1205,
    1207,  1210,  1214,  1216,  1218,  1220,  1223,  1226,  1229,  1231,
    1233,  1235,  1237,  1240,  1244,  1248,  1252,  1256,  1260,  1264,
    1268,  1272,  1277,  1278,  1280,  1282,  1284,  1286,  1288,  1289,
    1297,  1301,  1302,  1308,  1310,  1313,  1318,  1319,  1320,  1326,
    1327,  1335,  1337,  1338,  1340,  1341,  1346,  1347,  1348,  1352,
    1358,  1365,  1366,  1371,  1374,  1377,  1380,  1383,  1384,  1386,
    1387,  1391,  1392,  1394,  1396,  1400,  1402,  1407,  1413,  1419,
    1420,  1423,  1424,  1425,  1433,  1434,  1445,  1447,  1451,  1453,
    1455,  1456,  1459,  1460,  1464,  1466,  1470,  1471,  1478,  1480,
    1481,  1482,  1488,  1489,  1494,  1496,  1498,  1500,  1504,  1506,
    1510,  1511,  1512,  1518,  1520,  1524,  1526,  1528,  1529,  1533,
    1535,  1539,  1540,  1545,  1547,  1548,  1550,  1553,  1555,  1559,
    1564,  1568,  1572,  1576,  1580,  1585,  1590,  1594,  1595,  1596,
    1603,  1604,  1606,  1607,  1609,  1611,  1614,  1616,  1618,  1619,
    1621,  1623,  1626,  1628,  1629,  1633,  1635,  1639,  1640,  1642,
    1644,  1647,  1649,  1652,  1656,  1660,  1664,  1668,  1672,  1676,
    1680,  1684,  1688,  1692,  1696,  1700,  1704,  1708,  1712,  1716,
    1720,  1724,  1728,  1732,  1736,  1737,  1744,  1746,  1748,  1752,
    1757,  1762,  1765,  1768,  1771,  1775,  1779,  1783,  1787,  1791,
    1795,  1799,  1804,  1809,  1811,  1813,  1815,  1817,  1819,  1821,
    1823,  1825,  1827,  1829,  1831,  1833,  1835,  1838,  1840,  1842,
    1844,  1846,  1848,  1850,  1854,  1856,  1858,  1861,  1864,  1865,
    1874,  1875,  1885,  1886,  1896,  1897,  1907,  1916,  1919,  1920,
    1922,  1927,  1928,  1930,  1933,  1934,  1938,  1941,  1950,  1951,
    1954,  1955,  1957,  1959,  1960,  1962,  1965,  1967,  1969,  1972,
    1975,  1980,  1984,  1988,  1992,  1996,  1998,  2001,  2003,  2005,
    2009,  2012,  2016,  2019,  2022,  2024,  2028,  2032,  2035,  2039,
    2041,  2044,  2047,  2050,  2052,  2055,  2057,  2059,  2061,  2064,
    2068,  2071,  2075,  2078,  2081,  2085,  2089,  2093,  2094,  2101,
    2102,  2109,  2112,  2114,  2116,  2118,  2120,  2122,  2124,  2126,
    2128,  2130,  2132,  2134,  2137,  2140,  2142,  2145,  2147,  2150,
    2154,  2157,  2159,  2161,  2163,  2165,  2167,  2169,  2171,  2174,
    2175,  2177,  2179,  2185,  2186,  2188,  2191,  2193,  2195,  2197,
    2199,  2203,  2207,  2211,  2215,  2216,  2218,  2219,  2221,  2222,
    2224,  2227,  2229,  2231,  2234,  2237,  2242,  2244,  2248,  2251,
    2253,  2256,  2259,  2262,  2266,  2270,  2274,  2278,  2281,  2284,
    2286,  2288,  2290,  2293,  2295,  2297,  2299,  2301,  2303,  2304,
    2307,  2309,  2311,  2313,  2315,  2317,  2318,  2321,  2323,  2325,
    2326,  2328,  2330,  2333,  2336,  2338,  2341,  2344,  2345,  2347,
    2349,  2351,  2355,  2357,  2361,  2362,  2364,  2365,  2370,  2372,
    2374,  2376,  2377,  2379,  2382,  2384,  2386,  2389,  2391,  2395,
    2399,  2401,  2403,  2404,  2407,  2408,  2410,  2416,  2417,  2421,
    2425,  2427,  2428,  2431,  2434,  2437,  2438,  2442,  2446,  2453,
    2460,  2462,  2464,  2467,  2470,  2473,  2475,  2478,  2481,  2483,
    2485,  2486,  2488,  2490,  2492,  2494,  2495,  2497,  2499,  2501,
    2502,  2504,  2507,  2508,  2510,  2511,  2513,  2514,  2516,  2518,
    2521,  2523,  2526,  2528,  2531,  2534,  2537,  2541,  2544,  2548,
    2552,  2556,  2560,  2562,  2564,  2566,  2568,  2572,  2574,  2576,
    2578,  2583,  2586,  2588,  2593,  2594,  2596,  2599,  2600,  2603,
    2605,  2609,  2610,  2611,  2619,  2620,  2626,  2634,  2635,  2641,
    2642,  2648,  2649,  2655,  2656,  2661,  2662,  2673,  2677,  2682,
    2686,  2690,  2698,  2699,  2703,  2705,  2710,  2711,  2715,  2716,
    2719,  2720,  2722,  2723,  2726,  2729,  2732,  2735,  2737,  2739,
    2741,  2746,  2751,  2752,  2759,  2764,  2765,  2771,  2772,  2779,
    2784,  2788,  2790,  2798,  2801,  2803,  2805,  2806,  2813,  2814,
    2818,  2821,  2822,  2828,  2829,  2830,  2837,  2839,  2843,  2845,
    2847,  2851,  2855,  2859,  2862,  2867,  2868,  2876,  2877,  2878,
    2887,  2893,  2899,  2903,  2908,  2911,  2914,  2921,  2927,  2931,
    2937,  2939,  2941,  2943,  2945,  2947,  2948,  2950,  2952,  2955,
    2958,  2962,  2966,  2970,  2974,  2975,  2977,  2978,  2980,  2981,
    2984,  2985,  2987,  2990,  2992,  2994,  2996,  2997,  2999,  3001,
    3002,  3005,  3007,  3008,  3010,  3012,  3014,  3015,  3022,  3023,
    3029,  3034,  3039,  3043,  3044,  3046,  3048,  3052,  3056,  3059,
    3062,  3063,  3066,  3068,  3072,  3073,  3075,  3077,  3078,  3081,
    3086,  3088,  3092,  3093,  3099,  3100,  3102,  3104,  3105,  3112,
    3113,  3115,  3117,  3120,  3122,  3124,  3126,  3127,  3133,  3135,
    3139,  3142,  3143,  3147,  3149,  3154,  3156,  3157,  3162,  3164,
    3165,  3170,  3171,  3173,  3177,  3178,  3180,  3184,  3186,  3188,
    3191,  3192,  3198,  3199,  3201,  3203,  3206,  3208,  3210,  3212,
    3214,  3216,  3219,  3220,  3226,  3227,  3229,  3231,  3232,  3237,
    3242,  3246,  3252,  3254,  3258,  3262,  3263,  3270,  3272,  3274,
    3276,  3280,  3283,  3287,  3289,  3291,  3292,  3299,  3301,  3303,
    3305,  3309,  3313,  3318,  3319,  3326,  3327,  3330,  3331,  3336,
    3337,  3340,  3342,  3345,  3350,  3353,  3357,  3360,  3364,  3365,
    3369,  3370,  3371,  3378,  3381,  3383,  3385,  3388,  3391,  3400,
    3405,  3406,  3408,  3411,  3413,  3415,  3417,  3419,  3420,  3423,
    3428,  3432,  3434,  3436,  3440,  3445,  3446,  3447,  3448,  3451,
    3454,  3456,  3458,  3459,  3462,  3466,  3467,  3470,  3474,  3475,
    3478,  3482,  3486,  3490,  3493,  3497,  3502,  3506,  3511,  3515,
    3520,  3522,  3526,  3531,  3535,  3539,  3546,  3548,  3554,  3561,
    3567,  3575,  3582,  3591,  3597,  3604,  3609,  3614,  3620,  3624,
    3629,  3631,  3635,  3639,  3643,  3647,  3651,  3655,  3661,  3667,
    3671,  3675,  3679,  3683,  3687,  3691,  3693,  3695,  3697,  3699,
    3701,  3703,  3705,  3707,  3709,  3711,  3713,  3715,  3717,  3719,
    3721,  3723,  3725,  3726,  3729,  3731,  3734,  3736,  3738,  3740,
    3743,  3746,  3748,  3750,  3753,  3756,  3761,  3763,  3767,  3769,
    3771,  3773,  3775,  3777,  3781,  3783,  3785,  3787,  3789,  3793,
    3796,  3799,  3802,  3805,  3809,  3813,  3819,  3826,  3831,  3836,
    3844,  3847,  3854,  3860,  3867,  3874,  3879,  3884,  3890,  3895,
    3902,  3905,  3908,  3913,  3918,  3923,  3934,  3941,  3950,  3957,
    3962,  3967,  3974,  3979,  3984,  3989,  3996,  4001,  4009,  4017,
    4025,  4032,  4039,  4046,  4053,  4057,  4062,  4069,  4078,  4081,
    4084,  4093,  4102,  4109,  4116,  4119,  4126,  4133,  4142,  4151,
    4158,  4167,  4174,  4177,  4186,  4195,  4198,  4201,  4204,  4211,
    4218,  4223,  4228,  4237,  4242,  4247,  4252,  4257,  4261,  4270,
    4275,  4280,  4287,  4292,  4297,  4302,  4309,  4318,  4323,  4327,
    4334,  4339,  4346,  4352,  4361,  4369,  4380,  4382,  4389,  4394,
    4399,  4404,  4409,  4414,  4421,  4426,  4427,  4433,  4440,  4443,
    4447,  4448,  4453,  4454,  4458,  4459,  4461,  4463,  4467,  4472,
    4477,  4483,  4488,  4493,  4498,  4504,  4509,  4510,  4511,  4519,
    4524,  4530,  4535,  4541,  4546,  4551,  4556,  4561,  4566,  4572,
    4573,  4582,  4583,  4587,  4591,  4593,  4598,  4599,  4601,  4602,
    4605,  4606,  4607,  4612,  4617,  4620,  4621,  4625,  4628,  4632,
    4635,  4637,  4639,  4642,  4644,  4647,  4649,  4652,  4655,  4658,
    4659,  4663,  4664,  4666,  4668,  4672,  4674,  4678,  4680,  4684,
    4685,  4687,  4688,  4691,  4696,  4702,  4704,  4706,  4708,  4710,
    4715,  4717,  4721,  4725,  4726,  4733,  4734,  4743,  4748,  4749,
    4758,  4759,  4770,  4777,  4778,  4787,  4788,  4799,  4806,  4808,
    4811,  4813,  4815,  4818,  4819,  4821,  4827,  4828,  4834,  4838,
    4844,  4847,  4848,  4849,  4857,  4859,  4860,  4861,  4868,  4869,
    4873,  4874,  4875,  4881,  4882,  4884,  4885,  4887,  4888,  4891,
    4895,  4899,  4901,  4903,  4904,  4912,  4913,  4921,  4923,  4926,
    4927,  4928,  4931,  4932,  4935,  4936,  4938,  4940,  4942,  4944,
    4948,  4950,  4954,  4956,  4958,  4960,  4962,  4964,  4966,  4968,
    4970,  4972,  4974,  4976,  4978,  4980,  4982,  4984,  4986,  4988,
    4990,  4992,  4994,  4996,  4998,  5000,  5002,  5004,  5005,  5007,
    5009,  5010,  5013,  5014,  5016,  5017,  5018,  5022,  5023,  5024,
    5028,  5031,  5032,  5033,  5038,  5043,  5046,  5047,  5049,  5051,
    5055,  5059,  5061,  5064,  5065,  5067,  5068,  5073,  5078,  5081,
    5082,  5084,  5086,  5087,  5089,  5090,  5092,  5095,  5101,  5106,
    5112,  5117,  5119,  5123,  5127,  5129,  5131,  5133,  5135,  5137,
    5139,  5141,  5142,  5145,  5149,  5154,  5156,  5159,  5162,  5164,
    5166,  5168,  5170,  5172,  5174,  5176,  5178,  5180,  5182,  5184,
    5186,  5188,  5190,  5192,  5194,  5196,  5198,  5200,  5202,  5204,
    5206,  5208,  5210,  5212,  5214,  5215,  5216,  5223,  5224,  5226,
    5230,  5232,  5236,  5237,  5240,  5244,  5246,  5249,  5251,  5252,
    5256,  5257,  5258,  5266,  5269,  5271,  5272,  5276,  5277,  5285,
    5286,  5294,  5299,  5306,  5311,  5316,  5321,  5326,  5327,  5334,
    5339,  5344,  5350,  5357,  5362,  5364,  5368,  5370,  5373,  5375,
    5379,  5381,  5382,  5385,  5386,  5388,  5389,  5390,  5399,  5400,
    5401,  5408,  5409,  5411,  5413,  5415,  5417,  5419,  5422,  5424,
    5426,  5428,  5432,  5437,  5438,  5442,  5446,  5448,  5451,  5454,
    5455,  5459,  5460,  5466,  5470,  5472,  5476,  5478,  5482,  5484,
    5486,  5487,  5489,  5490,  5495,  5496,  5498,  5502,  5504,  5506,
    5508,  5509,  5510,  5517,  5518,  5519,  5531,  5535,  5537,  5541,
    5545,  5547,  5551,  5552,  5554,  5555,  5560,  5561,  5562,  5572,
    5573,  5579,  5580,  5587,  5588,  5591,  5593,  5597,  5600,  5605,
    5606,  5609,  5610,  5613,  5615,  5617,  5619,  5620,  5625,  5626,
    5628,  5629,  5631,  5633,  5637,  5639,  5641,  5644,  5647,  5650,
    5652,  5654,  5656,  5658,  5659,  5663,  5664,  5668,  5671,  5676,
    5681,  5685,  5690,  5695,  5697,  5701,  5705,  5709,  5713,  5720,
    5723,  5726,  5727,  5734,  5735,  5743,  5749,  5752,  5754,  5756,
    5758,  5764,  5770,  5773,  5776,  5778,  5783,  5787,  5790,  5794,
    5797,  5800,  5802,  5806,  5811,  5815,  5819,  5822,  5826,  5829,
    5833,  5835,  5837,  5839,  5841,  5845,  5849,  5853,  5857,  5861,
    5865,  5869,  5873,  5877,  5879,  5881,  5883,  5885,  5887,  5888,
    5890,  5891,  5894,  5895,  5897,  5899,  5901,  5902,  5905,  5906,
    5909,  5910,  5913,  5916,  5917,  5922,  5923,  5928,  5930,  5932,
    5934,  5936,  5938,  5940,  5942,  5943,  5945,  5947,  5948,  5950,
    5952,  5953,  5958,  5959,  5964,  5966,  5967,  5969,  5974,  5975,
    5979,  5983,  5985,  5988,  5991,  5994,  5997,  6000,  6004,  6007,
    6009,  6011,  6013,  6015,  6018,  6020,  6022,  6024,  6026,  6028,
    6030,  6032,  6033,  6035,  6036,  6040,  6041,  6045,  6049,  6051,
    6052,  6057,  6059,  6062,  6063,  6065,  6066,  6070,  6074,  6077,
    6080,  6081,  6087,  6088,  6090,  6092,  6093,  6095,  6097,  6100,
    6102,  6105,  6107,  6110,  6111,  6112,  6113,  6114,  6137,  6139,
    6141,  6142,  6144,  6145,  6147,  6149,  6150,  6152,  6154,  6155,
    6158,  6161,  6163,  6167,  6172,  6176,  6180,  6181,  6184,  6187,
    6189,  6193,  6197,  6198,  6203,  6204,  6208,  6210,  6212,  6213,
    6217,  6220,  6224,  6226,  6228,  6231,  6232,  6235,  6239,  6241,
    6247,  6249,  6251,  6254,  6257,  6259,  6261,  6263,  6265,  6267,
    6269,  6272,  6275,  6277,  6279,  6281,  6283,  6285,  6287,  6289,
    6291,  6293,  6296,  6299,  6301,  6303,  6305,  6307,  6309,  6312,
    6315,  6318,  6320,  6322,  6326,  6332,  6334,  6336,  6338,  6340,
    6342,  6346,  6351,  6357,  6359,  6365,  6369,  6372,  6374,  6378,
    6381,  6384,  6389,  6391,  6393,  6395,  6397,  6399,  6401,  6403,
    6405,  6407,  6409,  6411,  6413,  6415,  6417,  6421,  6424,  6426,
    6428,  6430,  6432,  6434,  6436,  6438,  6440,  6442,  6444,  6446,
    6448,  6450,  6452,  6454,  6456,  6458,  6460,  6462,  6464,  6466,
    6468,  6470,  6472,  6474,  6476,  6478,  6480,  6482,  6484,  6486,
    6488,  6490,  6492,  6494,  6496,  6498,  6500,  6502,  6504,  6506,
    6508,  6510,  6512,  6514,  6516,  6518,  6520,  6522,  6524,  6526,
    6528,  6530,  6532,  6534,  6536,  6538,  6540,  6542,  6544,  6546,
    6548,  6550,  6552,  6554,  6556,  6558,  6560,  6562,  6564,  6566,
    6568,  6570,  6572,  6574,  6576,  6578,  6580,  6582,  6584,  6586,
    6588,  6590,  6592,  6594,  6596,  6598,  6600,  6602,  6604,  6606,
    6608,  6610,  6612,  6614,  6616,  6618,  6620,  6622,  6624,  6626,
    6628,  6630,  6632,  6634,  6636,  6638,  6640,  6642,  6644,  6646,
    6648,  6650,  6652,  6654,  6656,  6658,  6660,  6662,  6664,  6666,
    6668,  6670,  6672,  6674,  6676,  6678,  6680,  6682,  6684,  6686,
    6688,  6690,  6692,  6694,  6696,  6698,  6700,  6702,  6704,  6706,
    6708,  6710,  6712,  6714,  6716,  6718,  6720,  6722,  6724,  6726,
    6728,  6730,  6732,  6734,  6736,  6738,  6740,  6742,  6744,  6746,
    6748,  6750,  6752,  6754,  6756,  6758,  6760,  6762,  6764,  6766,
    6768,  6770,  6772,  6774,  6776,  6778,  6780,  6782,  6784,  6786,
    6788,  6790,  6792,  6794,  6796,  6798,  6800,  6802,  6804,  6806,
    6808,  6810,  6812,  6814,  6816,  6818,  6820,  6822,  6824,  6826,
    6828,  6830,  6832,  6834,  6836,  6838,  6840,  6842,  6844,  6846,
    6848,  6850,  6852,  6854,  6856,  6858,  6860,  6862,  6864,  6866,
    6868,  6870,  6872,  6874,  6876,  6878,  6880,  6882,  6884,  6886,
    6888,  6890,  6892,  6894,  6896,  6898,  6900,  6902,  6904,  6906,
    6908,  6910,  6912,  6914,  6916,  6918,  6920,  6922,  6924,  6926,
    6928,  6930,  6932,  6934,  6936,  6938,  6940,  6942,  6944,  6946,
    6948,  6950,  6952,  6954,  6956,  6958,  6960,  6962,  6964,  6966,
    6968,  6970,  6972,  6974,  6976,  6978,  6980,  6982,  6984,  6986,
    6988,  6990,  6992,  6994,  6996,  6998,  7000,  7002,  7004,  7006,
    7008,  7010,  7012,  7014,  7016,  7018,  7020,  7022,  7024,  7026,
    7028,  7030,  7032,  7034,  7036,  7038,  7040,  7042,  7044,  7046,
    7048,  7050,  7052,  7054,  7056,  7058,  7060,  7062,  7064,  7066,
    7068,  7070,  7072,  7074,  7076,  7078,  7080,  7082,  7084,  7086,
    7088,  7090,  7092,  7094,  7096,  7098,  7100,  7102,  7104,  7106,
    7108,  7110,  7112,  7114,  7116,  7118,  7120,  7122,  7124,  7126,
    7128,  7130,  7132,  7134,  7136,  7138,  7140,  7142,  7144,  7146,
    7148,  7150,  7152,  7154,  7156,  7158,  7160,  7162,  7164,  7166,
    7168,  7170,  7171,  7175,  7176,  7180,  7181,  7185,  7186,  7190,
    7191,  7195,  7198,  7199,  7202,  7203,  7206,  7207,  7212,  7213,
    7217,  7219,  7221,  7223,  7225,  7226,  7228,  7230,  7232,  7233,
    7236,  7239,  7242,  7246,  7250,  7255,  7262,  7265,  7269,  7273,
    7276,  7280,  7286,  7288,  7292,  7296,  7298,  7300,  7304,  7308,
    7310,  7314,  7317,  7320,  7323,  7326,  7329,  7331,  7333,  7338,
    7343,  7345,  7347,  7349,  7351,  7353,  7354,  7359,  7361,  7363,
    7365,  7369,  7373,  7375,  7377,  7380,  7383,  7386,  7387,  7391,
    7396,  7400,  7401,  7409,  7411,  7414,  7416,  7418,  7420,  7422,
    7424,  7426,  7427,  7433,  7435,  7437,  7439,  7441,  7443,  7447,
    7454,  7461,  7468,  7476,  7482,  7486,  7491,  7493,  7497,  7506,
    7515,  7524,  7531,  7536,  7537,  7541,  7542,  7546,  7548,  7552,
    7555,  7557,  7559,  7560,  7562,  7564,  7567,  7568,  7570,  7572,
    7576,  7577,  7581,  7582,  7586,  7587,  7591,  7592,  7596,  7598,
    7600,  7602,  7604,  7606,  7608,  7610,  7612,  7614,  7616,  7618,
    7621,  7624,  7626,  7630,  7633,  7636,  7639,  7642,  7645,  7648,
    7651,  7654,  7656,  7658,  7661,  7662,  7664,  7668,  7670,  7673,
    7676,  7679,  7681,  7685,  7689,  7691,  7693,  7697,  7699,  7703,
    7705,  7709,  7711,  7713,  7715,  7717,  7722,  7728,  7733,  7740,
    7742,  7743,  7747,  7751,  7753,  7755,  7756,  7759,  7762,  7765,
    7768,  7769,  7772,  7773,  7777,  7780,  7782,  7785,  7788,  7791,
    7794,  7797,  7798,  7802,  7803,  7805,  7806,  7810,  7813,  7814,
    7816,  7819,  7820,  7822,  7827,  7832,  7838,  7841,  7845,  7846,
    7848,  7849,  7854,  7855,  7857,  7859,  7860,  7862,  7863,  7866,
    7869,  7871,  7872,  7874,  7876,  7879,  7883,  7886,  7887,  7894,
    7898,  7899,  7900,  7901,  7903,  7906,  7908,  7910,  7912,  7914,
    7916,  7918,  7920,  7922,  7924,  7927,  7930,  7934,  7936,  7938,
    7940,  7942,  7944,  7946,  7948,  7950,  7952,  7954,  7956,  7958,
    7960,  7961,  7965,  7969,  7973,  7977,  7978,  7982,  7986,  7987,
    7995,  7996,  8000,  8002,  8006,  8007,  8011,  8014,  8019,  8020,
    8024,  8029,  8034,  8035,  8036,  8037,  8054,  8063,  8071,  8072,
    8073,  8074,  8075,  8076,  8092,  8093,  8094,  8095,  8096,  8109,
    8114,  8119,  8123,  8128,  8132,  8135,  8137,  8141,  8147,  8149,
    8151,  8152,  8154,  8156,  8157,  8160,  8161,  8162,  8166,  8167,
    8170,  8176,  8180,  8184,  8188
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     665,     0,    -1,   162,    -1,    -1,   668,   666,   660,   667,
      -1,   668,   162,    -1,    -1,   162,    -1,   669,    -1,  1590,
      -1,  1055,    -1,  1123,    -1,  1136,    -1,   723,    -1,   681,
      -1,  1137,    -1,  1115,    -1,  1596,    -1,   690,    -1,   670,
      -1,  1389,    -1,  1423,    -1,  1340,    -1,  1342,    -1,   674,
      -1,  1430,    -1,   759,    -1,  1556,    -1,  1546,    -1,   679,
      -1,  1353,    -1,  1658,    -1,  1660,    -1,  1150,    -1,  1451,
      -1,  1458,    -1,  1538,    -1,  1142,    -1,   969,    -1,   878,
      -1,  1157,    -1,   672,    -1,  1447,    -1,  1599,    -1,  1145,
      -1,  1118,    -1,  1356,    -1,  1441,    -1,   758,    -1,  1553,
      -1,  1597,    -1,  1598,    -1,  1169,    -1,  1511,    -1,   751,
      -1,  1409,    -1,  1456,    -1,  1102,    -1,  1105,    -1,  1402,
      -1,  1659,    -1,  1544,    -1,  1381,    -1,  1457,    -1,  1650,
      -1,   671,   414,  1503,    -1,   128,    -1,   150,    -1,   414,
    1503,   199,   673,    -1,  1500,    -1,   661,  1505,    -1,    -1,
     177,  1503,   675,   676,    -1,    -1,   609,   677,    -1,   677,
     656,   678,    -1,   678,    -1,   661,  1505,    -1,    -1,   220,
     680,  1505,    -1,    -1,    59,   313,   688,   575,   682,   683,
      -1,   684,    -1,   683,   656,   684,    -1,   298,   166,  1500,
      -1,   314,   166,  1500,    -1,   301,   166,  1500,    -1,   302,
     166,  1319,    -1,   296,   166,  1319,    -1,   311,   166,  1319,
      -1,   305,   166,  1500,    -1,   304,   166,  1500,    -1,   306,
     166,  1500,    -1,   307,   166,  1500,    -1,   310,   166,  1500,
      -1,   312,   166,  1319,    -1,   308,   166,  1500,    -1,   309,
     166,  1500,    -1,   316,   166,  1487,    -1,   236,   166,   654,
     685,   655,    -1,   687,    -1,    -1,   686,    -1,   685,   656,
     686,    -1,  1319,    -1,   299,   166,  1500,    -1,   300,   166,
    1321,    -1,   444,   166,  1500,    -1,   445,   166,  1319,    -1,
     315,   166,   111,    -1,   315,   166,   506,    -1,   315,   166,
     367,    -1,    -1,   689,    -1,  1500,    -1,    -1,   934,   930,
     558,   933,  1496,   691,   866,    -1,    -1,    -1,   104,  1032,
     239,   933,  1503,  1036,   377,  1496,   692,   654,  1049,   655,
    1037,   693,  1089,    -1,    -1,    -1,   104,  1033,   239,   933,
    1503,  1035,   377,  1496,   694,   654,  1049,   655,  1038,   695,
    1089,    -1,    -1,    -1,   104,  1034,   239,   933,  1503,  1035,
     377,  1496,   696,   654,  1049,   655,  1039,   697,  1089,    -1,
      -1,   104,   115,   933,  1503,   698,   927,    -1,    -1,   934,
     699,  1618,    -1,   104,   605,   716,  1577,    -1,   104,   471,
     716,  1560,  1558,    -1,   104,   287,   213,   829,    -1,   104,
     555,   826,    -1,   104,   700,    -1,   492,  1505,   196,   118,
     635,  1505,   383,   654,   701,   655,    -1,   702,    -1,   701,
     656,   702,    -1,   605,  1500,    -1,   224,  1500,    -1,   115,
    1500,    -1,   393,  1500,    -1,   404,  1500,    -1,   510,  1500,
      -1,   411,  1319,    -1,    -1,  1186,   173,   933,   717,   704,
     377,   481,   705,   710,   707,   712,   149,   713,    -1,    -1,
     174,  1192,  1288,   706,   708,   709,    -1,    24,  1192,    -1,
      -1,   158,    -1,   143,   377,   504,    -1,   143,    -1,    -1,
     530,  1192,    -1,    -1,   161,  1192,    -1,    -1,   711,    -1,
     377,    87,   415,    -1,   377,    87,   365,   415,    -1,    -1,
      83,  1500,    -1,    -1,   714,   715,    -1,   775,    -1,   777,
      -1,   773,    -1,   794,    -1,   812,    -1,   814,    -1,   809,
      -1,   779,    -1,   781,    -1,   782,    -1,   783,    -1,   784,
      -1,   786,    -1,    -1,  1503,   662,  1503,    -1,  1503,    -1,
      -1,   718,   720,    -1,    -1,   719,   721,    -1,    83,  1500,
      -1,   265,   526,    -1,   367,   526,    -1,    97,   526,    -1,
     430,   526,   118,    -1,   342,   526,   118,    -1,   722,    -1,
     720,    -1,   140,    -1,  1198,   140,    -1,   526,   485,   133,
      -1,   526,   485,   252,    -1,    -1,    52,   717,   724,   725,
      -1,    -1,   654,   726,   655,    -1,    -1,   727,    -1,   727,
     656,  1192,    -1,  1192,    -1,    -1,   729,    -1,   729,   656,
     731,    -1,   731,    -1,    -1,  1503,   730,   992,    -1,    -1,
     733,    -1,   733,   656,   734,    -1,   734,    -1,   735,   730,
    1503,   992,    -1,    -1,   253,    -1,   392,    -1,   244,    -1,
      -1,   736,   772,   660,    -1,   772,   660,    -1,   737,   772,
     660,    -1,    -1,   738,   739,   660,    -1,    -1,   131,   770,
     740,   992,   771,    -1,   131,  1503,    90,   197,   747,    -1,
      -1,   131,   744,   216,   197,   741,   745,   772,    -1,   131,
    1503,   112,   197,   742,    -1,    -1,   743,  1169,    -1,   179,
      -1,    99,    -1,   746,    -1,   745,   656,   746,    -1,   750,
      -1,  1319,    -1,   748,    -1,   518,   749,  1501,    -1,    -1,
     614,    -1,   747,    -1,  1503,    -1,   519,    -1,  1198,   198,
      -1,   517,    -1,   501,   752,   754,    -1,  1503,    -1,   748,
      -1,    -1,   752,    -1,    -1,   494,   755,    -1,   757,   166,
     756,    -1,   755,   656,   757,   166,   756,    -1,  1486,    -1,
    1223,    -1,  1492,    -1,    67,    -1,   542,    -1,    94,    -1,
      96,    -1,    95,    -1,    57,    -1,   482,    -1,   560,    -1,
      82,    -1,   113,    -1,   333,    -1,   350,    -1,   459,   753,
     754,    -1,   209,   760,   141,   761,    -1,    -1,   108,    -1,
     762,    -1,    90,   766,   767,    -1,   763,    -1,   762,   656,
     763,    -1,   764,   166,   765,    -1,  1503,    -1,   661,  1505,
      -1,   372,    -1,   478,    -1,   756,    -1,   768,    -1,   767,
     656,   768,    -1,   764,   166,   769,    -1,    67,    -1,   542,
      -1,    94,    -1,    96,    -1,    95,    -1,    57,    -1,   482,
      -1,   560,    -1,    82,    -1,   113,    -1,   333,    -1,   350,
      -1,   464,    -1,  1503,    -1,   770,   656,  1503,    -1,    -1,
     132,  1192,    -1,   775,    -1,   777,    -1,   773,    -1,   794,
      -1,   812,    -1,   814,    -1,   809,    -1,   779,    -1,   781,
      -1,   782,    -1,   783,    -1,   784,    -1,   786,    -1,    -1,
     234,   774,   789,   160,   234,    -1,    -1,   776,   669,    -1,
      -1,   467,   778,  1192,    -1,    -1,   780,   818,    -1,   271,
    1504,    -1,   259,  1504,    -1,   381,  1503,    -1,    -1,   188,
     787,  1503,   250,   785,   788,    -1,    70,  1503,    -1,    -1,
     361,   199,    -1,   199,    -1,  1503,    -1,   788,   656,  1503,
      -1,    -1,    -1,    -1,   790,  1192,   567,   791,   737,   792,
     793,    -1,    -1,   157,   789,    -1,   156,   737,    -1,   795,
      -1,   798,    -1,    -1,    -1,    55,   796,  1192,   797,   800,
     808,   160,    55,    -1,    -1,    55,   799,   801,   808,   160,
      55,    -1,   802,    -1,   800,   802,    -1,   805,    -1,   801,
     805,    -1,    -1,    -1,   628,   803,  1192,   804,   567,   737,
      -1,    -1,    -1,   628,   806,  1192,   807,   567,   737,    -1,
      -1,   156,   737,    -1,    -1,  1504,   663,   810,   818,   811,
      -1,    -1,  1504,    -1,    -1,  1504,   663,   813,   816,   811,
      -1,    -1,   815,   816,    -1,    -1,    33,   817,   738,   736,
     160,    -1,   293,   737,   160,   293,    -1,    -1,    -1,   630,
     819,  1192,   149,   820,   737,   160,   630,    -1,    -1,   454,
     737,   601,   821,  1192,   160,   454,    -1,    32,    -1,     9,
      -1,   246,    -1,   602,    -1,   136,    -1,   851,   853,    -1,
     851,    59,   848,   832,    -1,   851,     6,   848,   827,   836,
      -1,    -1,   608,   287,   213,  1503,    -1,   851,     6,   848,
     839,    -1,   851,   150,   848,   839,    -1,   852,   831,   842,
      -1,   852,   831,   845,    -1,     6,   849,    -1,     6,   850,
      -1,    -1,   833,   834,    -1,   835,    -1,   834,   835,    -1,
     834,   656,   835,    -1,   854,    -1,   855,    -1,   856,    -1,
     837,    -1,   838,    -1,   837,   838,    -1,   837,   656,   838,
      -1,   854,    -1,   855,    -1,   856,    -1,   857,    -1,   860,
      -1,   862,    -1,   864,    -1,   861,    -1,   840,    -1,   841,
      -1,   840,   841,    -1,   840,   656,   841,    -1,   854,    -1,
     855,    -1,   856,    -1,   862,    -1,   864,    -1,   843,    -1,
     844,    -1,   843,   844,    -1,   843,   656,   844,    -1,   854,
      -1,   858,    -1,   859,    -1,   860,    -1,   862,    -1,   864,
      -1,   861,    -1,   846,    -1,   847,    -1,   846,   847,    -1,
     846,   656,   847,    -1,   854,    -1,   862,    -1,   864,    -1,
     117,  1500,    -1,   591,  1500,    -1,   437,  1500,    -1,  1503,
      -1,  1503,    -1,   431,    -1,   433,    -1,   365,     4,    -1,
     242,  1373,   865,    -1,    26,  1373,   865,    -1,   322,  1373,
     865,    -1,   183,  1373,   865,    -1,   592,  1373,   865,    -1,
     438,  1373,   865,    -1,   362,  1373,  1320,    -1,    83,  1373,
    1500,    -1,  1416,   164,  1373,   942,    -1,    -1,   864,    -1,
     624,    -1,   368,    -1,  1322,    -1,  1499,    -1,    -1,   654,
     948,   655,   867,   935,   873,   870,    -1,   935,   873,   870,
      -1,    -1,   654,   923,   655,   868,  1603,    -1,   869,    -1,
     276,  1496,    -1,   654,   276,  1496,   655,    -1,    -1,    -1,
    1466,   926,   923,   871,  1600,    -1,    -1,  1466,   926,   654,
     923,   655,   872,  1603,    -1,   874,    -1,    -1,   875,    -1,
      -1,   401,   877,   876,   880,    -1,    -1,    -1,   401,   879,
     880,    -1,    49,   881,   891,   892,   899,    -1,   883,   263,
     884,   654,   885,   655,    -1,    -1,   883,   218,   882,   889,
      -1,   429,   889,    -1,   429,   888,    -1,   281,   889,    -1,
     281,   888,    -1,    -1,   278,    -1,    -1,    12,   166,  1320,
      -1,    -1,   886,    -1,   887,    -1,   886,   656,   887,    -1,
    1503,    -1,    75,   654,   885,   655,    -1,   654,  1186,   897,
    1187,   655,    -1,   654,  1186,   897,  1187,   655,    -1,    -1,
     402,  1320,    -1,    -1,    -1,   546,    49,   883,   218,   890,
     893,   898,    -1,    -1,   546,    49,   883,   263,   884,   654,
     895,   655,   894,   898,    -1,   896,    -1,   895,   656,   896,
      -1,  1503,    -1,  1195,    -1,    -1,   545,  1320,    -1,    -1,
     654,   900,   655,    -1,   901,    -1,   900,   656,   901,    -1,
      -1,   401,   902,   903,   904,   920,   915,    -1,  1503,    -1,
      -1,    -1,   613,   273,   566,   905,   907,    -1,    -1,   613,
     253,   906,   908,    -1,   326,    -1,   910,    -1,   910,    -1,
     654,   909,   655,    -1,   910,    -1,   909,   656,   910,    -1,
      -1,    -1,   654,   911,   913,   912,   655,    -1,   914,    -1,
     913,   656,   914,    -1,   326,    -1,  1195,    -1,    -1,   654,
     916,   655,    -1,   917,    -1,   916,   656,   917,    -1,    -1,
     546,   918,   919,   920,    -1,  1505,    -1,    -1,   921,    -1,
     921,   922,    -1,   922,    -1,   555,  1373,  1505,    -1,  1416,
     164,  1373,   942,    -1,    91,  1373,  1500,    -1,   362,  1373,
    1320,    -1,   321,  1373,  1322,    -1,   339,  1373,  1322,    -1,
     118,   142,  1373,  1500,    -1,   239,   142,  1373,  1500,    -1,
      83,  1373,  1500,    -1,    -1,    -1,   486,   924,  1180,  1184,
     925,   946,    -1,    -1,    20,    -1,    -1,   928,    -1,   929,
      -1,   928,   929,    -1,   941,    -1,   940,    -1,    -1,   931,
      -1,   932,    -1,   932,   931,    -1,   561,    -1,    -1,   234,
    1198,   178,    -1,   104,    -1,   104,   389,   455,    -1,    -1,
     937,    -1,   938,    -1,   938,   936,    -1,   938,    -1,   938,
     937,    -1,   938,   656,   937,    -1,   164,  1373,   942,    -1,
     321,  1373,  1321,    -1,   339,  1373,  1321,    -1,    29,  1373,
    1319,    -1,   404,  1373,  1500,    -1,    83,  1373,  1500,    -1,
      27,  1373,  1321,    -1,   394,  1373,  1319,    -1,   394,  1373,
     132,    -1,   532,  1373,  1319,    -1,   532,  1373,   132,    -1,
     533,  1373,  1319,    -1,   533,  1373,   132,    -1,   534,  1373,
    1319,    -1,   534,  1373,   132,    -1,    64,  1373,  1319,    -1,
     559,  1373,  1319,    -1,   396,  1373,  1325,    -1,   135,  1373,
    1319,    -1,   476,  1373,   944,    -1,    -1,   596,  1373,   939,
     654,  1439,   655,    -1,   940,    -1,   941,    -1,   247,  1373,
     945,    -1,   118,   142,  1373,  1500,    -1,   239,   142,  1373,
    1500,    -1,   555,  1503,    -1,   539,   145,    -1,   539,   331,
      -1,    91,  1373,  1500,    -1,   262,  1373,  1319,    -1,   578,
    1373,  1325,    -1,  1499,  1372,  1500,    -1,  1499,  1372,  1503,
      -1,  1499,  1372,  1322,    -1,  1499,  1372,   132,    -1,  1004,
     995,  1373,   997,    -1,  1004,    73,  1373,  1003,    -1,  1505,
      -1,  1505,    -1,   132,    -1,   191,    -1,   154,    -1,    88,
      -1,   439,    -1,    86,    -1,   395,    -1,   367,    -1,   190,
      -1,   266,    -1,  1311,    -1,  1179,  1183,    -1,   541,    -1,
     434,    -1,   130,    -1,   251,    -1,   949,    -1,   950,    -1,
     949,   656,   950,    -1,   951,    -1,   952,    -1,   961,   957,
      -1,   961,  1021,    -1,    -1,  1027,  1052,  1036,   654,  1049,
     655,   953,  1037,    -1,    -1,  1033,  1030,  1052,  1035,   654,
    1049,   655,   954,  1038,    -1,    -1,  1034,  1030,  1052,  1035,
     654,  1049,   655,   955,  1039,    -1,    -1,   959,  1028,  1052,
    1036,   654,  1049,   655,   956,  1037,    -1,   959,   196,   263,
    1052,   654,  1049,   655,  1021,    -1,   959,   958,    -1,    -1,
     958,    -1,    65,   654,  1192,   655,    -1,    -1,   960,    -1,
      93,  1051,    -1,    -1,  1495,   962,   963,    -1,   971,   989,
      -1,   971,   964,    20,   654,   970,   655,   965,   966,    -1,
      -1,   205,    15,    -1,    -1,   623,    -1,   405,    -1,    -1,
     967,    -1,   967,   968,    -1,   968,    -1,   597,    -1,   597,
     263,    -1,    83,  1500,    -1,   399,   654,   970,   655,    -1,
    1186,  1192,  1187,    -1,   979,   987,   983,    -1,   980,   988,
     983,    -1,   193,   981,   983,    -1,    41,    -1,    41,   986,
      -1,    46,    -1,    45,    -1,   975,   986,  1007,    -1,   975,
    1007,    -1,   976,   986,  1008,    -1,   976,  1008,    -1,    36,
     986,    -1,    36,    -1,   977,   986,  1007,    -1,   978,   986,
    1008,    -1,   615,   986,    -1,   642,   987,   983,    -1,   122,
      -1,   571,   987,    -1,   568,   987,    -1,   119,   987,    -1,
     572,    -1,    43,   987,    -1,   974,    -1,   327,    -1,   289,
      -1,   292,   615,    -1,   292,   977,  1007,    -1,   574,  1007,
      -1,   565,   987,  1007,    -1,   329,  1007,    -1,   290,  1007,
      -1,   130,   981,   983,    -1,   373,   981,   983,    -1,   191,
     981,   983,    -1,    -1,   165,   972,   654,  1054,   655,  1007,
      -1,    -1,   494,   973,   654,  1054,   655,  1007,    -1,   292,
    1007,    -1,   490,    -1,   207,    -1,   206,    -1,   409,    -1,
     347,    -1,   280,    -1,   346,    -1,   410,    -1,   348,    -1,
      62,    -1,   356,    -1,   353,    62,    -1,   975,   619,    -1,
     616,    -1,   353,   616,    -1,   374,    -1,   356,   616,    -1,
     353,    62,   619,    -1,   356,   619,    -1,   251,    -1,   573,
      -1,   508,    -1,   328,    -1,    35,    -1,   434,    -1,   148,
      -1,   148,   413,    -1,    -1,   986,    -1,   982,    -1,   654,
     371,   656,   371,   655,    -1,    -1,   984,    -1,   984,   985,
      -1,   985,    -1,   502,    -1,   600,    -1,   643,    -1,   654,
     291,   655,    -1,   654,   587,   655,    -1,   654,   129,   655,
      -1,   654,   371,   655,    -1,    -1,   986,    -1,    -1,   982,
      -1,    -1,   990,    -1,   990,   991,    -1,   991,    -1,   370,
      -1,  1198,   370,    -1,   132,   993,    -1,   377,   602,   366,
    1189,    -1,    27,    -1,   490,   132,   614,    -1,  1020,   263,
      -1,   597,    -1,   597,   263,    -1,    83,  1500,    -1,    73,
    1001,    -1,  1499,  1372,  1500,    -1,  1499,  1372,  1503,    -1,
    1499,  1372,  1322,    -1,  1499,  1372,   132,    -1,   971,  1002,
      -1,   366,  1189,    -1,  1485,    -1,   221,    -1,   222,    -1,
      62,   494,    -1,    61,    -1,  1505,    -1,    36,    -1,   996,
      -1,   132,    -1,    -1,   995,   997,    -1,  1505,    -1,    36,
      -1,   999,    -1,   132,    -1,  1505,    -1,    -1,    73,  1003,
      -1,  1001,    -1,   132,    -1,    -1,   132,    -1,    22,    -1,
      36,    22,    -1,    22,    36,    -1,   594,    -1,   594,    36,
      -1,    36,   594,    -1,    -1,  1005,    -1,  1006,    -1,    50,
      -1,   995,   996,  1008,    -1,    36,    -1,    36,   995,   996,
      -1,    -1,    36,    -1,    -1,   654,  1320,  1010,   655,    -1,
      21,    -1,   137,    -1,   468,    -1,    -1,  1011,    -1,  1011,
    1012,    -1,  1012,    -1,  1320,    -1,  1014,  1013,    -1,  1015,
      -1,  1016,   656,  1015,    -1,  1014,   647,  1014,    -1,  1016,
      -1,  1017,    -1,    -1,   274,  1018,    -1,    -1,   417,    -1,
     440,  1496,  1022,  1024,  1025,    -1,    -1,   654,  1023,   655,
      -1,  1023,   656,  1503,    -1,  1503,    -1,    -1,   317,   200,
      -1,   317,   400,    -1,   317,   503,    -1,    -1,   377,   602,
    1026,    -1,   377,   136,  1026,    -1,   377,   602,  1026,   377,
     136,  1026,    -1,   377,   136,  1026,   377,   602,  1026,    -1,
     462,    -1,    53,    -1,   494,   370,    -1,   367,     5,    -1,
     494,   132,    -1,  1029,    -1,   417,   263,    -1,   597,  1030,
      -1,   263,    -1,   239,    -1,    -1,  1029,    -1,   261,    -1,
     239,    -1,   238,    -1,    -1,   597,    -1,   201,    -1,   515,
      -1,    -1,  1035,    -1,  1035,  1043,    -1,    -1,  1040,    -1,
      -1,  1042,    -1,    -1,  1041,    -1,  1045,    -1,  1040,  1045,
      -1,  1046,    -1,  1041,  1046,    -1,  1047,    -1,  1042,  1047,
      -1,   609,  1048,    -1,   585,  1048,    -1,   262,  1373,  1319,
      -1,    83,  1500,    -1,  1499,  1372,  1500,    -1,  1499,  1372,
    1503,    -1,  1499,  1372,  1322,    -1,  1499,  1372,   132,    -1,
    1044,    -1,  1043,    -1,  1044,    -1,  1044,    -1,   631,   398,
    1499,    -1,    48,    -1,   479,    -1,   218,    -1,  1049,   656,
    1050,  1309,    -1,  1050,  1309,    -1,  1503,    -1,  1503,   654,
     371,   655,    -1,    -1,  1495,    -1,   933,  1051,    -1,    -1,
     662,  1503,    -1,  1483,    -1,  1054,   656,  1483,    -1,    -1,
      -1,    14,  1056,  1094,   558,  1496,  1057,  1068,    -1,    -1,
      14,   115,  1067,  1058,   928,    -1,    14,   115,  1503,   603,
     118,   142,   352,    -1,    -1,    14,   419,   717,  1059,   718,
      -1,    -1,    14,   202,   717,  1060,   718,    -1,    -1,    14,
    1624,  1621,  1061,  1626,    -1,    -1,    14,  1621,  1062,  1626,
      -1,    -1,    14,  1621,   173,   717,  1063,  1064,  1065,   707,
     712,  1066,    -1,    14,   555,   828,    -1,    14,   287,   213,
     830,    -1,    14,   555,   825,    -1,    14,   555,   824,    -1,
      14,   492,  1505,   383,   654,   701,   655,    -1,    -1,   377,
     481,   705,    -1,   711,    -1,   377,   481,   705,   711,    -1,
      -1,   450,   575,   717,    -1,    -1,   149,   713,    -1,    -1,
    1503,    -1,    -1,   144,   555,    -1,   237,   555,    -1,  1083,
     874,    -1,  1083,  1072,    -1,  1072,    -1,   875,    -1,  1074,
      -1,   150,   401,  1351,  1081,    -1,   435,   401,  1144,  1073,
      -1,    -1,   382,   401,  1144,  1073,  1069,  1144,    -1,    16,
     401,  1144,  1073,    -1,    -1,    65,   401,  1073,  1070,  1139,
      -1,    -1,   452,   401,  1144,  1073,  1071,  1120,    -1,    71,
     401,  1144,  1320,    -1,   583,   401,  1073,    -1,  1077,    -1,
     175,   401,  1082,   631,   558,  1496,   877,    -1,   449,   403,
      -1,    13,    -1,  1081,    -1,    -1,     6,   401,   933,  1144,
    1075,  1076,    -1,    -1,   654,   900,   655,    -1,   402,  1320,
      -1,    -1,   451,   401,  1144,  1078,  1079,    -1,    -1,    -1,
    1081,  1080,   250,   654,   900,   655,    -1,  1082,    -1,  1081,
     656,  1082,    -1,  1503,    -1,  1085,    -1,  1083,   656,  1085,
      -1,     6,  1092,   933,    -1,  1084,   951,  1100,    -1,     6,
     952,    -1,  1084,   654,   948,   655,    -1,    -1,    59,  1092,
    1351,  1495,  1086,   961,  1100,    -1,    -1,    -1,   343,  1092,
    1351,  1495,  1087,   963,  1088,  1100,    -1,   150,  1092,  1351,
    1495,  1099,    -1,   150,   196,   263,  1351,  1495,    -1,   150,
     417,   263,    -1,   150,  1029,  1351,  1495,    -1,   143,   261,
      -1,   158,   261,    -1,    14,  1092,  1495,   494,   132,  1485,
      -1,    14,  1092,  1495,   150,   132,    -1,   450,  1101,  1496,
      -1,   101,   575,   995,   997,  1002,    -1,   936,    -1,   195,
      -1,  1302,    -1,  1090,    -1,  1091,    -1,    -1,  1091,    -1,
    1090,    -1,  1091,  1090,    -1,  1090,  1091,    -1,    12,  1373,
     132,    -1,    12,  1373,  1503,    -1,   286,  1373,   132,    -1,
     286,  1373,  1503,    -1,    -1,    81,    -1,    -1,   235,    -1,
      -1,  1095,  1096,    -1,    -1,  1097,    -1,  1097,  1098,    -1,
    1098,    -1,   235,    -1,   380,    -1,    -1,   462,    -1,    53,
      -1,    -1,     9,  1503,    -1,   190,    -1,    -1,   575,    -1,
     166,    -1,    20,    -1,    -1,   531,   504,   688,  1109,  1103,
    1113,    -1,    -1,   531,    13,   505,  1109,  1104,    -1,   538,
     504,   688,  1109,    -1,   538,    13,   505,  1109,    -1,   531,
     577,  1106,    -1,    -1,  1107,    -1,  1108,    -1,  1107,   656,
    1108,    -1,   631,    92,   509,    -1,   432,   379,    -1,   432,
     636,    -1,    -1,  1110,  1111,    -1,  1112,    -1,  1111,   656,
    1112,    -1,    -1,   527,    -1,   446,    -1,    -1,   601,  1114,
      -1,   601,   297,   166,  1500,    -1,   687,    -1,  1114,   656,
     687,    -1,    -1,    64,  1540,  1116,  1346,  1117,    -1,    -1,
     428,    -1,   182,    -1,    -1,   452,  1144,  1540,  1119,  1346,
    1120,    -1,    -1,  1121,    -1,  1122,    -1,  1122,  1121,    -1,
     428,    -1,   182,    -1,   607,    -1,    -1,    16,  1144,  1540,
    1124,  1125,    -1,  1126,    -1,  1125,   656,  1126,    -1,  1347,
    1127,    -1,    -1,   405,   197,  1128,    -1,    13,    -1,    75,
    1129,   238,  1131,    -1,    13,    -1,    -1,   654,  1130,  1133,
     655,    -1,    13,    -1,    -1,   654,  1132,  1134,   655,    -1,
      -1,  1503,    -1,  1133,   656,  1503,    -1,    -1,  1135,    -1,
    1134,   656,  1135,    -1,  1503,    -1,   417,    -1,    37,  1500,
      -1,    -1,    65,  1540,  1138,  1346,  1139,    -1,    -1,  1140,
      -1,  1141,    -1,  1141,  1140,    -1,   428,    -1,   186,    -1,
     330,    -1,   182,    -1,    60,    -1,   197,   603,    -1,    -1,
     382,  1144,  1540,  1143,  1346,    -1,    -1,   369,    -1,   283,
      -1,    -1,   450,  1540,  1146,  1148,    -1,   450,   605,   716,
    1147,    -1,  1508,   575,  1508,    -1,  1147,   656,  1508,   575,
    1508,    -1,  1149,    -1,  1148,   656,  1149,    -1,  1496,   575,
    1496,    -1,    -1,    51,   239,  1151,  1152,   253,  1156,    -1,
    1153,    -1,  1155,    -1,  1154,    -1,  1153,   656,  1154,    -1,
    1496,  1165,    -1,  1496,  1163,  1165,    -1,  1503,    -1,   132,
      -1,    -1,   282,   239,   250,    51,  1158,  1159,    -1,  1162,
      -1,  1160,    -1,  1161,    -1,  1160,   656,  1161,    -1,  1496,
    1165,  1168,    -1,  1496,  1163,  1165,  1168,    -1,    -1,   401,
     877,  1164,   654,  1073,   655,    -1,    -1,  1166,  1167,    -1,
      -1,  1029,   654,  1284,   655,    -1,    -1,   235,   270,    -1,
    1170,    -1,   486,  1173,    -1,   654,  1171,   655,  1603,    -1,
     486,  1175,    -1,   654,  1171,   655,    -1,   486,  1263,    -1,
     654,  1172,   655,    -1,    -1,  1175,  1174,  1600,    -1,    -1,
      -1,  1176,  1180,  1184,  1177,  1178,  1183,    -1,  1305,  1311,
      -1,  1335,    -1,  1179,    -1,  1335,  1179,    -1,  1179,  1335,
      -1,   199,  1243,  1294,  1299,  1296,  1305,  1311,  1326,    -1,
     199,   151,  1294,  1311,    -1,    -1,  1181,    -1,  1181,  1182,
      -1,  1182,    -1,  1617,    -1,   524,    -1,   522,    -1,    -1,
     197,   602,    -1,   286,   253,   496,   341,    -1,  1184,   656,
    1185,    -1,  1185,    -1,   649,    -1,  1186,  1490,  1187,    -1,
    1186,  1192,  1187,  1188,    -1,    -1,    -1,    -1,    20,  1503,
      -1,    20,  1500,    -1,  1503,    -1,  1500,    -1,    -1,   654,
     655,    -1,   654,  1320,   655,    -1,    -1,   654,   655,    -1,
     654,  1320,   655,    -1,    -1,   654,   655,    -1,  1192,  1196,
    1192,    -1,  1192,   640,  1192,    -1,  1192,  1197,  1192,    -1,
     365,  1192,    -1,  1193,   256,   582,    -1,  1193,   256,  1198,
     582,    -1,  1193,   256,   185,    -1,  1193,   256,  1198,   185,
      -1,  1193,   256,   598,    -1,  1193,   256,  1198,   598,    -1,
    1193,    -1,  1193,   256,   370,    -1,  1193,   256,  1198,   370,
      -1,  1193,   167,  1194,    -1,  1193,  1200,  1194,    -1,  1193,
    1200,  1201,   654,  1612,   655,    -1,  1194,    -1,  1195,   253,
     654,  1612,   655,    -1,  1195,  1198,   253,   654,  1612,   655,
      -1,  1195,   253,   654,  1192,   655,    -1,  1195,   253,   654,
    1192,   656,  1236,   655,    -1,  1195,  1198,   253,   654,  1192,
     655,    -1,  1195,  1198,   253,   654,  1192,   656,  1236,   655,
      -1,  1195,    34,  1195,    18,  1194,    -1,  1195,  1198,    34,
    1195,    18,  1194,    -1,  1195,   513,   276,  1195,    -1,  1195,
     276,  1206,  1298,    -1,  1195,  1198,   276,  1206,  1298,    -1,
    1195,   441,  1195,    -1,  1195,  1198,   441,  1195,    -1,  1195,
      -1,  1195,   645,  1195,    -1,  1195,   646,  1195,    -1,  1195,
     497,  1195,    -1,  1195,   498,  1195,    -1,  1195,   648,  1195,
      -1,  1195,   647,  1195,    -1,  1195,   648,   249,  1192,  1288,
      -1,  1195,   647,   249,  1192,  1288,    -1,  1195,   649,  1195,
      -1,  1195,   650,  1195,    -1,  1195,   651,  1195,    -1,  1195,
     147,  1195,    -1,  1195,   344,  1195,    -1,  1195,   652,  1195,
      -1,  1206,    -1,   389,    -1,   386,    -1,    18,    -1,    17,
      -1,   365,    -1,   364,    -1,   657,    -1,   364,    -1,   166,
      -1,   203,    -1,   215,    -1,   268,    -1,   295,    -1,   358,
      -1,    13,    -1,    19,    -1,    -1,    20,  1203,    -1,   251,
      -1,   600,   251,    -1,   148,    -1,   434,    -1,   193,    -1,
     130,   981,    -1,   975,  1007,    -1,   976,    -1,   122,    -1,
     571,   987,    -1,   119,   987,    -1,  1192,   656,  1192,  1202,
      -1,  1204,    -1,  1205,   656,  1204,    -1,  1492,    -1,  1207,
      -1,  1208,    -1,  1211,    -1,  1209,    -1,  1206,    73,  1505,
      -1,  1486,    -1,  1484,    -1,  1223,    -1,  1219,    -1,  1206,
     388,  1206,    -1,   648,  1206,    -1,   647,  1206,    -1,   653,
    1206,    -1,  1199,  1206,    -1,   654,  1612,   655,    -1,   654,
    1192,   655,    -1,   654,  1192,   656,  1236,   655,    -1,   477,
     654,  1192,   656,  1236,   655,    -1,   178,   654,  1612,   655,
      -1,   658,  1503,  1192,   659,    -1,   317,  1237,    10,   654,
    1195,  1213,   655,    -1,    36,  1206,    -1,    56,   654,  1192,
      20,  1233,   655,    -1,    55,  1239,  1241,  1240,   160,    -1,
     101,   654,  1192,   656,  1233,   655,    -1,   101,   654,  1192,
     609,   996,   655,    -1,   132,   654,  1492,   655,    -1,   613,
     654,  1493,   655,    -1,   249,  1192,  1288,   648,  1192,    -1,
      62,   654,  1236,   655,    -1,    62,   654,  1236,   609,   996,
     655,    -1,   109,  1191,    -1,   110,  1191,    -1,   122,   654,
    1192,   655,    -1,   127,   654,  1192,   655,    -1,   229,   654,
    1192,   655,    -1,   246,   654,  1192,   656,  1192,   656,  1192,
     656,  1192,   655,    -1,   249,   654,  1192,   656,  1192,   655,
      -1,   249,   654,  1192,   656,  1192,   656,  1236,   655,    -1,
     272,   654,  1192,   656,  1192,   655,    -1,   338,   654,  1192,
     655,    -1,   345,   654,  1192,   655,    -1,   470,   654,  1192,
     656,  1192,   655,    -1,   484,   654,  1192,   655,    -1,   571,
     654,  1192,   655,    -1,   568,   654,  1192,   655,    -1,   568,
     654,  1192,   656,  1192,   655,    -1,   581,   654,  1192,   655,
      -1,   581,   654,   269,  1192,   199,  1192,   655,    -1,   581,
     654,   576,  1192,   199,  1192,   655,    -1,   581,   654,    47,
    1192,   199,  1192,   655,    -1,   581,   654,   269,   199,  1192,
     655,    -1,   581,   654,   576,   199,  1192,   655,    -1,   581,
     654,    47,   199,  1192,   655,    -1,   581,   654,  1192,   199,
    1192,   655,    -1,   605,   654,   655,    -1,   642,   654,  1192,
     655,    -1,     8,   654,  1192,   656,  1192,   655,    -1,     8,
     654,  1192,   656,   249,  1192,  1288,   655,    -1,   107,  1191,
      -1,   114,  1190,    -1,   120,   654,  1192,   656,   249,  1192,
    1288,   655,    -1,   121,   654,  1192,   656,   249,  1192,  1288,
     655,    -1,   184,   654,  1288,   199,  1192,   655,    -1,   208,
     654,  1290,   656,  1192,   655,    -1,   366,  1190,    -1,   412,
     654,  1195,   253,  1192,   655,    -1,   543,   654,  1192,   656,
    1192,   655,    -1,   543,   654,  1192,   656,   249,  1192,  1288,
     655,    -1,   547,   654,  1192,   656,  1192,   656,  1192,   655,
      -1,   547,   654,  1192,   656,  1192,   655,    -1,   547,   654,
    1192,   199,  1192,   197,  1192,   655,    -1,   547,   654,  1192,
     199,  1192,   655,    -1,   553,  1190,    -1,   569,   654,  1289,
     656,  1192,   656,  1192,   655,    -1,   570,   654,  1289,   656,
    1192,   656,  1192,   655,    -1,   610,  1191,    -1,   612,  1190,
      -1,   611,  1190,    -1,    76,   654,  1192,   656,  1205,   655,
      -1,    79,   654,  1192,   656,  1236,   655,    -1,    77,   654,
    1192,   655,    -1,    78,   654,  1205,   655,    -1,    80,   654,
    1192,   656,  1192,    20,  1233,   655,    -1,    22,   654,  1192,
     655,    -1,    61,   654,  1192,   655,    -1,    71,   654,  1236,
     655,    -1,    74,   654,  1192,   655,    -1,   115,   654,   655,
      -1,   234,   654,  1192,   656,  1192,   656,  1192,   655,    -1,
     267,   654,  1236,   655,    -1,   334,   654,  1192,   655,    -1,
     344,   654,  1192,   656,  1192,   655,    -1,   376,   654,  1192,
     655,    -1,   404,   654,  1192,   655,    -1,   426,   654,  1192,
     655,    -1,   454,   654,  1192,   656,  1192,   655,    -1,   455,
     654,  1192,   656,  1192,   656,  1192,   655,    -1,   468,   654,
    1192,   655,    -1,   478,   654,   655,    -1,   583,   654,  1192,
     656,  1192,   655,    -1,   626,   654,  1192,   655,    -1,   626,
     654,  1192,   656,  1192,   655,    -1,   627,   654,  1192,  1019,
     655,    -1,   627,   654,  1192,    20,    62,  1009,  1019,   655,
      -1,   627,   654,  1192,    20,    36,  1009,   655,    -1,   627,
     654,  1192,   656,  1319,   656,  1319,   656,  1319,   655,    -1,
    1210,    -1,    97,   654,  1192,   656,  1192,   655,    -1,   206,
     654,  1236,   655,    -1,   280,   654,  1236,   655,    -1,   346,
     654,  1236,   655,    -1,   347,   654,  1236,   655,    -1,   348,
     654,  1236,   655,    -1,   409,   654,  1192,   656,  1192,   655,
      -1,   410,   654,  1236,   655,    -1,    -1,  1499,   654,  1212,
    1216,   655,    -1,  1503,   662,  1503,   654,  1235,   655,    -1,
    1214,  1215,    -1,   253,    45,   341,    -1,    -1,   253,   354,
     265,   341,    -1,    -1,   631,   427,   180,    -1,    -1,  1217,
      -1,  1218,    -1,  1217,   656,  1218,    -1,  1186,  1192,  1187,
    1188,    -1,    30,   654,  1231,   655,    -1,    30,   654,   146,
    1231,   655,    -1,    39,   654,  1231,   655,    -1,    40,   654,
    1231,   655,    -1,    42,   654,  1231,   655,    -1,   102,   654,
    1293,   649,   655,    -1,   102,   654,  1231,   655,    -1,    -1,
      -1,   102,   654,   146,  1220,  1236,  1221,   655,    -1,   340,
     654,  1231,   655,    -1,   340,   654,   146,  1231,   655,    -1,
     323,   654,  1231,   655,    -1,   323,   654,   146,  1231,   655,
      -1,   537,   654,  1231,   655,    -1,   618,   654,  1231,   655,
      -1,   536,   654,  1231,   655,    -1,   620,   654,  1231,   655,
      -1,   548,   654,  1231,   655,    -1,   548,   654,   146,  1231,
     655,    -1,    -1,   214,   654,  1226,  1222,  1236,  1228,  1227,
     655,    -1,    -1,   661,  1224,  1225,    -1,  1505,   495,  1192,
      -1,  1505,    -1,   661,  1527,  1505,  1053,    -1,    -1,   146,
      -1,    -1,   488,  1483,    -1,    -1,    -1,   387,    49,  1229,
    1230,    -1,  1230,   656,  1491,  1309,    -1,  1491,  1309,    -1,
      -1,  1293,  1232,  1192,    -1,    36,   987,    -1,    62,   987,
    1007,    -1,   356,   987,    -1,   251,    -1,   502,    -1,   502,
     251,    -1,   600,    -1,   600,   251,    -1,   122,    -1,   571,
     987,    -1,   119,   987,    -1,   130,   981,    -1,    -1,   148,
    1234,   988,    -1,    -1,  1236,    -1,  1192,    -1,  1236,   656,
    1192,    -1,  1238,    -1,   654,  1238,   655,    -1,  1492,    -1,
    1238,   656,  1492,    -1,    -1,  1192,    -1,    -1,   156,  1192,
      -1,   628,  1192,   567,  1192,    -1,  1241,   628,  1192,   567,
    1192,    -1,  1257,    -1,  1246,    -1,  1245,    -1,  1242,    -1,
     658,  1503,  1242,   659,    -1,  1244,    -1,  1245,   656,  1244,
      -1,  1242,  1254,  1242,    -1,    -1,  1242,  1254,  1242,   377,
    1247,  1192,    -1,    -1,  1242,  1254,  1242,   609,  1248,   654,
    1287,   655,    -1,  1242,   354,  1253,  1257,    -1,    -1,  1242,
     272,  1273,   260,  1242,   377,  1249,  1192,    -1,    -1,  1242,
     272,  1273,   260,  1257,  1250,   609,   654,  1287,   655,    -1,
    1242,   354,   272,  1273,   260,  1257,    -1,    -1,  1242,   470,
    1273,   260,  1242,   377,  1251,  1192,    -1,    -1,  1242,   470,
    1273,   260,  1257,  1252,   609,   654,  1287,   655,    -1,  1242,
     354,   470,  1273,   260,  1257,    -1,   260,    -1,   243,   260,
      -1,   540,    -1,  1253,    -1,   105,   260,    -1,    -1,  1256,
      -1,   401,   654,  1287,   655,   877,    -1,    -1,  1258,  1496,
    1255,  1292,  1282,    -1,  1272,  1271,  1268,    -1,   654,  1271,
    1259,   655,  1292,    -1,  1266,  1604,    -1,    -1,    -1,  1259,
     596,  1608,  1260,  1609,  1261,  1604,    -1,  1263,    -1,    -1,
      -1,  1264,  1615,  1184,  1265,   946,  1183,    -1,    -1,  1271,
    1267,  1245,    -1,    -1,    -1,  1269,  1180,  1184,  1270,   946,
      -1,    -1,   486,    -1,    -1,   390,    -1,    -1,   197,   260,
      -1,   197,   387,    49,    -1,   197,   213,    49,    -1,   195,
      -1,   235,    -1,    -1,  1275,  1029,  1274,  1277,   654,  1286,
     655,    -1,    -1,   608,  1029,  1274,  1278,   654,  1284,   655,
      -1,  1276,    -1,  1279,  1276,    -1,    -1,    -1,  1281,  1279,
      -1,    -1,  1283,  1280,    -1,    -1,  1286,    -1,  1503,    -1,
     417,    -1,  1285,    -1,  1286,   656,  1285,    -1,  1503,    -1,
    1287,   656,  1503,    -1,  1289,    -1,   123,    -1,   124,    -1,
     125,    -1,   126,    -1,   226,    -1,   227,    -1,   228,    -1,
     336,    -1,   337,    -1,   483,    -1,   641,    -1,   127,    -1,
     626,    -1,   229,    -1,   338,    -1,   345,    -1,   426,    -1,
     484,    -1,   334,    -1,   642,    -1,   122,    -1,   571,    -1,
     119,    -1,   568,    -1,    -1,    20,    -1,   166,    -1,    -1,
    1291,  1503,    -1,    -1,    13,    -1,    -1,    -1,   629,  1295,
    1192,    -1,    -1,    -1,   219,  1297,  1192,    -1,   171,  1206,
      -1,    -1,    -1,   213,    49,  1300,  1301,    -1,  1300,   656,
    1491,  1309,    -1,  1491,  1309,    -1,    -1,   632,    -1,   633,
      -1,   387,    49,  1303,    -1,  1303,   656,  1304,    -1,  1304,
      -1,  1493,  1309,    -1,    -1,  1306,    -1,    -1,   387,    49,
    1307,  1308,    -1,  1308,   656,  1491,  1309,    -1,  1491,  1309,
      -1,    -1,    21,    -1,   137,    -1,    -1,  1312,    -1,    -1,
    1312,    -1,   277,  1313,    -1,   277,  1313,   475,   176,  1316,
      -1,   277,   475,   176,  1316,    -1,   277,  1313,   475,   318,
    1315,    -1,   277,   475,   318,  1315,    -1,  1314,    -1,  1314,
     656,  1314,    -1,  1314,   375,  1314,    -1,  1503,    -1,  1484,
      -1,   587,    -1,   291,    -1,   371,    -1,  1314,    -1,  1314,
      -1,    -1,   277,  1314,    -1,   277,   475,   176,    -1,   277,
    1314,   475,   176,    -1,   371,    -1,   647,   371,    -1,   647,
     291,    -1,   371,    -1,   221,    -1,   291,    -1,   587,    -1,
     129,    -1,   192,    -1,   371,    -1,   221,    -1,   291,    -1,
     587,    -1,  1323,    -1,   371,    -1,   587,    -1,   291,    -1,
     129,    -1,   192,    -1,   371,    -1,   587,    -1,   221,    -1,
     291,    -1,  1323,    -1,  1324,    -1,   129,    -1,   192,    -1,
    1319,    -1,   132,    -1,    -1,    -1,   419,  1503,  1327,   654,
    1328,   655,    -1,    -1,  1329,    -1,  1329,   656,  1330,    -1,
    1330,    -1,  1186,  1192,  1187,    -1,    -1,  1332,  1333,    -1,
    1333,   656,  1334,    -1,  1334,    -1,   661,  1505,    -1,  1505,
      -1,    -1,   250,  1336,  1337,    -1,    -1,    -1,   391,  1502,
    1338,   998,  1339,  1467,  1470,    -1,   152,  1502,    -1,  1331,
      -1,    -1,   149,  1341,  1236,    -1,    -1,   150,  1352,  1540,
    1351,  1343,  1346,  1099,    -1,    -1,   150,   239,  1351,  1503,
     377,  1496,  1344,    -1,   150,   115,  1351,  1503,    -1,   150,
     202,  1351,  1503,   662,  1503,    -1,   150,   202,  1351,  1503,
      -1,   150,   419,  1351,   717,    -1,   150,   605,   716,  1576,
      -1,   150,   471,   716,  1560,    -1,    -1,   150,   622,  1351,
    1345,  1346,  1099,    -1,   150,   173,  1351,   717,    -1,   150,
     580,  1351,   717,    -1,   150,   555,   851,   862,   863,    -1,
     150,   287,   213,   852,   862,   863,    -1,   150,   492,  1351,
    1505,    -1,  1347,    -1,  1346,   656,  1347,    -1,  1496,    -1,
    1496,  1255,    -1,  1350,    -1,  1349,   656,  1350,    -1,  1497,
      -1,    -1,   234,   178,    -1,    -1,   561,    -1,    -1,    -1,
     246,  1354,  1359,  1093,  1361,  1355,  1363,  1379,    -1,    -1,
      -1,   455,  1357,  1360,  1361,  1358,  1363,    -1,    -1,   294,
      -1,   134,    -1,   223,    -1,  1388,    -1,   134,    -1,   250,
    1362,    -1,  1362,    -1,  1348,    -1,  1366,    -1,   654,   655,
    1366,    -1,   654,  1365,   655,  1366,    -1,    -1,   494,  1364,
    1370,    -1,  1365,   656,  1489,    -1,  1489,    -1,   613,  1369,
      -1,   614,  1369,    -1,    -1,   923,  1367,  1600,    -1,    -1,
     654,   923,   655,  1368,  1603,    -1,  1369,   656,  1374,    -1,
    1374,    -1,  1370,   656,  1371,    -1,  1371,    -1,  1493,  1372,
    1378,    -1,   166,    -1,   495,    -1,    -1,  1372,    -1,    -1,
     654,  1375,  1376,   655,    -1,    -1,  1377,    -1,  1377,   656,
    1378,    -1,  1378,    -1,  1192,    -1,   132,    -1,    -1,    -1,
     377,   153,  1380,   263,   602,  1386,    -1,    -1,    -1,   602,
    1382,  1388,  1093,  1243,   494,  1384,  1383,  1294,  1305,  1317,
      -1,  1384,   656,  1385,    -1,  1385,    -1,  1493,  1372,  1378,
      -1,  1386,   656,  1387,    -1,  1387,    -1,  1493,  1372,  1378,
      -1,    -1,   294,    -1,    -1,   136,  1390,  1400,  1391,    -1,
      -1,    -1,   199,  1496,  1255,  1392,  1294,  1305,  1317,  1393,
    1396,    -1,    -1,  1397,  1394,   199,  1243,  1294,    -1,    -1,
     199,  1349,  1395,   609,  1243,  1294,    -1,    -1,   465,  1184,
      -1,  1398,    -1,  1397,   656,  1398,    -1,  1503,  1399,    -1,
    1503,   662,  1503,  1399,    -1,    -1,   662,   649,    -1,    -1,
    1401,  1400,    -1,   428,    -1,   294,    -1,   235,    -1,    -1,
     583,  1404,  1403,  1347,    -1,    -1,   558,    -1,    -1,  1406,
      -1,  1407,    -1,  1406,   656,  1407,    -1,   103,    -1,   331,
      -1,    44,   254,    -1,    98,   552,    -1,   395,   187,    -1,
     255,    -1,   551,    -1,   514,    -1,    13,    -1,    -1,   197,
     427,   371,    -1,    -1,   499,  1410,  1411,    -1,   116,  1422,
      -1,  1418,   554,  1417,  1422,    -1,  1418,   579,  1417,  1422,
      -1,   172,  1417,  1422,    -1,   558,   535,  1417,  1422,    -1,
     381,   554,  1417,  1422,    -1,   407,    -1,   407,   512,  1500,
      -1,   407,   512,  1422,    -1,   164,   943,  1414,    -1,   164,
      13,  1414,    -1,  1418,    75,  1419,  1496,  1417,  1422,    -1,
    1415,   288,    -1,   504,   225,    -1,    -1,    37,   172,  1420,
    1421,  1412,  1310,    -1,    -1,   443,   688,   172,  1420,  1421,
    1413,  1310,    -1,  1031,  1419,  1496,  1417,  1294,    -1,  1416,
     163,    -1,    25,    -1,   100,    -1,   418,    -1,   102,   654,
     649,   655,   625,    -1,   102,   654,   649,   655,   169,    -1,
     625,  1310,    -1,   169,  1310,    -1,   423,    -1,   422,  1405,
    1408,  1310,    -1,  1526,   535,  1422,    -1,  1418,   421,    -1,
    1526,   617,  1422,    -1,   995,  1422,    -1,    74,  1422,    -1,
     212,    -1,   212,   197,  1507,    -1,   104,   115,   933,  1503,
      -1,   104,   558,  1496,    -1,   104,   622,  1496,    -1,   313,
     535,    -1,    13,   505,   535,    -1,   504,   535,    -1,   504,
     689,   535,    -1,    69,    -1,   606,    -1,   557,    -1,   240,
      -1,   104,   419,   717,    -1,   104,   202,   717,    -1,   104,
     580,   717,    -1,   419,   535,  1422,    -1,   202,   535,  1422,
      -1,   419,    72,   717,    -1,   202,    72,   717,    -1,   104,
     173,   717,    -1,  1427,   197,  1192,    -1,   535,    -1,   349,
      -1,   288,    -1,   313,    -1,    36,    -1,    -1,   539,    -1,
      -1,  1419,  1503,    -1,    -1,   200,    -1,   199,    -1,   253,
      -1,    -1,   253,  1500,    -1,    -1,   199,  1321,    -1,    -1,
     276,  1500,    -1,   629,  1192,    -1,    -1,  1427,  1496,  1424,
    1429,    -1,    -1,  1427,  1428,  1425,  1426,    -1,  1169,    -1,
    1353,    -1,  1356,    -1,  1381,    -1,  1389,    -1,   137,    -1,
     138,    -1,    -1,   182,    -1,   402,    -1,    -1,  1483,    -1,
    1503,    -1,    -1,   194,  1144,  1431,  1432,    -1,    -1,  1540,
    1433,  1439,  1434,    -1,  1437,    -1,    -1,  1435,    -1,   631,
     432,   286,  1440,    -1,    -1,   197,  1436,   181,    -1,  1437,
     656,  1438,    -1,  1438,    -1,   168,   288,    -1,   164,   288,
      -1,   204,   288,    -1,   507,   288,    -1,    36,   288,    -1,
     442,   288,   688,    -1,   427,    51,    -1,   225,    -1,   418,
      -1,   288,    -1,   535,    -1,   504,   688,    -1,    69,    -1,
     606,    -1,   557,    -1,   240,    -1,   313,    -1,   139,    -1,
     460,    -1,    -1,  1346,    -1,    -1,    18,   143,    63,    -1,
      -1,   458,  1442,  1443,    -1,  1443,   656,  1444,    -1,  1444,
      -1,    -1,   504,  1445,   688,  1446,    -1,   313,    -1,   427,
      51,    -1,    -1,    13,    -1,    -1,   425,  1448,  1449,    -1,
    1415,   288,  1450,    -1,   575,  1500,    -1,    32,  1192,    -1,
      -1,   264,  1452,  1453,  1454,  1455,    -1,    -1,   217,    -1,
     511,    -1,    -1,    91,    -1,   427,    -1,   427,   230,    -1,
    1192,    -1,   605,  1508,    -1,   500,    -1,   608,  1503,    -1,
      -1,    -1,    -1,    -1,   282,  1463,  1459,  1465,  1464,   241,
    1502,  1460,  1466,   250,   558,  1496,  1255,  1461,   998,  1462,
    1473,  1467,  1470,  1474,  1476,  1479,    -1,   118,    -1,   639,
      -1,    -1,   283,    -1,    -1,    89,    -1,   294,    -1,    -1,
     455,    -1,   235,    -1,    -1,    75,  1468,    -1,  1468,  1469,
      -1,  1469,    -1,   563,    49,  1483,    -1,   385,   159,    49,
    1483,    -1,   159,    49,  1483,    -1,   170,    49,  1483,    -1,
      -1,   279,  1471,    -1,  1471,  1472,    -1,  1472,    -1,   563,
      49,  1483,    -1,   529,    49,  1483,    -1,    -1,   475,   232,
      49,  1483,    -1,    -1,   235,   371,  1475,    -1,   279,    -1,
     475,    -1,    -1,   654,  1477,   655,    -1,   654,   655,    -1,
    1477,   656,  1478,    -1,  1478,    -1,  1493,    -1,   661,  1505,
      -1,    -1,   494,  1480,    -1,  1480,   656,  1481,    -1,  1481,
      -1,  1493,  1372,  1186,  1378,  1187,    -1,   564,    -1,   355,
      -1,   590,   564,    -1,  1482,  1501,    -1,  1501,    -1,   221,
      -1,   222,    -1,    38,    -1,   397,    -1,  1486,    -1,   648,
    1487,    -1,   647,  1487,    -1,  1482,    -1,  1487,    -1,  1488,
      -1,   370,    -1,   185,    -1,   582,    -1,   221,    -1,   222,
      -1,    38,    -1,   590,   994,    -1,   590,    38,    -1,   371,
      -1,   291,    -1,   587,    -1,   129,    -1,   192,    -1,   122,
     564,    -1,   571,   564,    -1,   568,   564,    -1,  1493,    -1,
    1490,    -1,  1503,   662,   649,    -1,  1503,   662,  1503,   662,
     649,    -1,  1192,    -1,  1503,    -1,  1494,    -1,  1503,    -1,
    1494,    -1,  1503,   662,  1503,    -1,   662,  1503,   662,  1503,
      -1,  1503,   662,  1503,   662,  1503,    -1,  1503,    -1,  1503,
     662,  1503,   662,  1503,    -1,  1503,   662,  1503,    -1,   662,
    1503,    -1,  1503,    -1,  1503,   662,  1503,    -1,   662,  1503,
      -1,  1503,  1399,    -1,  1503,   662,  1503,  1399,    -1,  1503,
      -1,   231,    -1,   233,    -1,   564,    -1,   564,    -1,   564,
      -1,  1499,    -1,  1509,    -1,  1499,    -1,  1510,    -1,  1503,
      -1,  1500,    -1,   275,    -1,  1505,    -1,  1505,   661,  1505,
      -1,   109,  1191,    -1,  1506,    -1,  1561,    -1,  1506,    -1,
    1510,    -1,    22,    -1,    31,    -1,    33,    -1,    50,    -1,
      51,    -1,    61,    -1,    64,    -1,    63,    -1,    70,    -1,
      76,    -1,    77,    -1,    78,    -1,    79,    -1,    80,    -1,
      83,    -1,    85,    -1,    97,    -1,   128,    -1,   149,    -1,
     160,    -1,   176,    -1,   177,    -1,   194,    -1,   209,    -1,
     216,    -1,   220,    -1,   224,    -1,   248,    -1,   265,    -1,
     367,    -1,   381,    -1,   384,    -1,   383,    -1,   393,    -1,
     398,    -1,   411,    -1,   414,    -1,   449,    -1,   452,    -1,
     458,    -1,   461,    -1,   472,    -1,   480,    -1,   485,    -1,
     492,    -1,   500,    -1,   502,    -1,   510,    -1,   504,    -1,
     505,    -1,   512,    -1,   531,    -1,   538,    -1,   583,    -1,
     594,    -1,   595,    -1,   635,    -1,   638,    -1,   603,    -1,
       5,    -1,     8,    -1,     7,    -1,     9,    -1,    10,    -1,
      11,    -1,    12,    -1,    15,    -1,    19,    -1,    24,    -1,
      25,    -1,    27,    -1,    26,    -1,    28,    -1,    29,    -1,
      30,    -1,    37,    -1,    41,    -1,    44,    -1,    46,    -1,
      45,    -1,    48,    -1,    54,    -1,    57,    -1,    58,    -1,
      60,    -1,    66,    -1,    69,    -1,    68,    -1,    67,    -1,
      71,    -1,    72,    -1,    74,    -1,    82,    -1,    75,    -1,
      84,    -1,    86,    -1,    87,    -1,    88,    -1,    89,    -1,
      91,    -1,    92,    -1,    94,    -1,    96,    -1,    95,    -1,
      98,    -1,   100,    -1,   111,    -1,   103,    -1,   106,    -1,
     108,    -1,   113,    -1,   118,    -1,   117,    -1,   119,    -1,
     122,    -1,   127,    -1,   133,    -1,   135,    -1,   139,    -1,
     141,    -1,   142,    -1,   143,    -1,   144,    -1,   145,    -1,
     152,    -1,   153,    -1,   154,    -1,   161,    -1,   165,    -1,
     164,    -1,   163,    -1,   168,    -1,   169,    -1,   171,    -1,
     173,    -1,   172,    -1,   174,    -1,   175,    -1,   180,    -1,
     181,    -1,   182,    -1,   183,    -1,   187,    -1,   186,    -1,
     198,    -1,   158,    -1,   200,    -1,   189,    -1,   190,    -1,
     191,    -1,   204,    -1,   205,    -1,   207,    -1,   206,    -1,
     208,    -1,   212,    -1,   210,    -1,   218,    -1,   217,    -1,
     225,    -1,   229,    -1,   230,    -1,   232,    -1,   236,    -1,
     240,    -1,   252,    -1,   237,    -1,   238,    -1,   242,    -1,
     254,    -1,   255,    -1,   257,    -1,   258,    -1,   247,    -1,
     262,    -1,   267,    -1,   266,    -1,   270,    -1,   273,    -1,
     274,    -1,   280,    -1,   281,    -1,   283,    -1,   285,    -1,
     287,    -1,   288,    -1,   321,    -1,   313,    -1,   316,    -1,
     297,    -1,   298,    -1,   302,    -1,   299,    -1,   300,    -1,
     314,    -1,   315,    -1,   301,    -1,   303,    -1,   296,    -1,
     311,    -1,   305,    -1,   304,    -1,   306,    -1,   307,    -1,
     308,    -1,   309,    -1,   310,    -1,   319,    -1,   320,    -1,
     322,    -1,   324,    -1,   325,    -1,   330,    -1,   331,    -1,
     332,    -1,   333,    -1,   334,    -1,   335,    -1,   338,    -1,
     339,    -1,   343,    -1,   341,    -1,   345,    -1,   346,    -1,
     347,    -1,   348,    -1,   349,    -1,   350,    -1,   352,    -1,
     351,    -1,   353,    -1,   356,    -1,   357,    -1,   361,    -1,
     360,    -1,   368,    -1,   362,    -1,   363,    -1,   372,    -1,
     374,    -1,   375,    -1,   376,    -1,   378,    -1,   380,    -1,
     379,    -1,   394,    -1,   395,    -1,   400,    -1,   403,    -1,
     402,    -1,   404,    -1,   405,    -1,   406,    -1,   408,    -1,
     407,    -1,   409,    -1,   410,    -1,   415,    -1,   416,    -1,
     418,    -1,   420,    -1,   421,    -1,   422,    -1,   423,    -1,
     424,    -1,   426,    -1,   427,    -1,   428,    -1,   431,    -1,
     435,    -1,   436,    -1,   438,    -1,   437,    -1,   439,    -1,
     442,    -1,   443,    -1,   444,    -1,   445,    -1,   446,    -1,
     448,    -1,   451,    -1,   453,    -1,   456,    -1,   460,    -1,
     463,    -1,   464,    -1,   466,    -1,   468,    -1,   471,    -1,
     473,    -1,   474,    -1,   475,    -1,   478,    -1,   476,    -1,
     477,    -1,   479,    -1,   481,    -1,   482,    -1,   484,    -1,
     490,    -1,   489,    -1,   491,    -1,   503,    -1,   496,    -1,
     506,    -1,   507,    -1,   509,    -1,   511,    -1,   513,    -1,
     514,    -1,   522,    -1,   521,    -1,   524,    -1,   527,    -1,
     530,    -1,   535,    -1,   539,    -1,   541,    -1,   542,    -1,
     543,    -1,   544,    -1,   546,    -1,   545,    -1,   549,    -1,
     550,    -1,   551,    -1,   552,    -1,   560,    -1,   557,    -1,
     554,    -1,   559,    -1,   555,    -1,   561,    -1,   562,    -1,
     565,    -1,   566,    -1,   577,    -1,   578,    -1,   579,    -1,
     568,    -1,   569,    -1,   570,    -1,   571,    -1,   584,    -1,
     585,    -1,   586,    -1,   202,    -1,   588,    -1,   589,    -1,
     592,    -1,   591,    -1,   598,    -1,   601,    -1,   605,    -1,
     606,    -1,   607,    -1,   617,    -1,   622,    -1,   623,    -1,
     614,    -1,   625,    -1,   624,    -1,   626,    -1,   627,    -1,
     634,    -1,   637,    -1,   639,    -1,   642,    -1,   621,    -1,
      -1,   494,  1512,  1513,    -1,    -1,  1529,  1514,  1519,    -1,
      -1,   577,  1515,  1531,    -1,    -1,  1525,  1516,  1517,    -1,
      -1,  1528,  1518,  1519,    -1,   577,  1531,    -1,    -1,   656,
    1520,    -1,    -1,  1521,  1523,    -1,    -1,  1520,   656,  1522,
    1523,    -1,    -1,  1525,  1524,  1528,    -1,  1529,    -1,   210,
      -1,   283,    -1,   491,    -1,    -1,   210,    -1,   283,    -1,
     491,    -1,    -1,   210,   662,    -1,   283,   662,    -1,   491,
     662,    -1,  1530,  1372,  1537,    -1,  1530,  1372,  1537,    -1,
     661,  1505,  1372,  1192,    -1,   661,   661,  1527,  1530,  1372,
    1537,    -1,   995,  1000,    -1,   351,  1372,  1192,    -1,   351,
     997,  1002,    -1,   471,  1505,    -1,   404,  1372,  1536,    -1,
     404,   197,  1508,  1372,  1536,    -1,  1503,    -1,  1503,   662,
    1503,    -1,   132,   662,  1503,    -1,  1532,    -1,  1533,    -1,
    1532,   656,  1533,    -1,  1533,   656,  1532,    -1,  1534,    -1,
     257,   274,  1535,    -1,   432,   379,    -1,   432,   636,    -1,
     432,   588,    -1,   432,    84,    -1,   453,   432,    -1,   489,
      -1,   564,    -1,   404,   654,   564,   655,    -1,   376,   654,
     564,   655,    -1,  1192,    -1,   132,    -1,   377,    -1,    13,
      -1,    36,    -1,    -1,   286,  1540,  1539,  1541,    -1,   558,
      -1,   554,    -1,  1542,    -1,  1541,   656,  1542,    -1,  1496,
    1292,  1543,    -1,   432,    -1,   636,    -1,   636,    89,    -1,
     294,   636,    -1,   432,   283,    -1,    -1,   599,  1545,  1540,
      -1,   216,  1496,   381,  1292,    -1,   216,  1498,    70,    -1,
      -1,   216,  1498,   432,  1547,  1548,  1294,  1311,    -1,  1549,
      -1,  1503,  1550,    -1,   190,    -1,   361,    -1,   190,    -1,
     361,    -1,   416,    -1,   266,    -1,    -1,  1552,  1551,   654,
    1377,   655,    -1,   166,    -1,   203,    -1,   268,    -1,   215,
      -1,   295,    -1,   469,   716,  1554,    -1,  1564,   377,  1563,
    1575,   199,  1578,    -1,  1564,   377,   202,  1575,   199,  1578,
      -1,  1564,   377,   419,  1575,   199,  1578,    -1,    13,  1565,
     656,   211,   384,   199,  1578,    -1,   424,   377,  1508,   199,
    1576,    -1,  1555,   199,  1578,    -1,     7,   384,   197,  1562,
      -1,  1562,    -1,   211,   716,  1557,    -1,  1564,   377,  1563,
    1575,   575,  1577,  1585,  1586,    -1,  1564,   377,   202,  1575,
     575,  1577,  1585,  1586,    -1,  1564,   377,   419,  1575,   575,
    1577,  1585,  1586,    -1,   424,   377,  1508,   575,  1577,  1587,
      -1,  1562,   575,  1577,  1559,    -1,    -1,   631,     7,  1507,
      -1,    -1,   631,     7,   384,    -1,  1562,    -1,  1560,   656,
    1562,    -1,   110,  1191,    -1,  1505,    -1,  1561,    -1,    -1,
     558,    -1,  1566,    -1,    13,  1565,    -1,    -1,   418,    -1,
    1567,    -1,  1566,   656,  1567,    -1,    -1,   486,  1568,  1582,
      -1,    -1,   246,  1569,  1582,    -1,    -1,   602,  1570,  1582,
      -1,    -1,   440,  1571,  1582,    -1,   136,    -1,   604,    -1,
     239,    -1,    14,    -1,   104,    -1,   150,    -1,   177,    -1,
     448,    -1,   500,    -1,   420,    -1,   189,    -1,   211,   384,
      -1,   499,   116,    -1,   549,    -1,   104,   561,   554,    -1,
     286,   554,    -1,   456,   504,    -1,   456,    68,    -1,   104,
     622,    -1,   499,   622,    -1,   104,   474,    -1,    14,   474,
      -1,   104,   605,    -1,   173,    -1,   580,    -1,   104,   555,
      -1,    -1,    18,    -1,  1574,  1572,  1573,    -1,  1574,    -1,
     544,   564,    -1,   258,   564,    -1,    66,   564,    -1,   649,
      -1,  1503,   662,   649,    -1,   649,   662,   649,    -1,  1496,
      -1,  1508,    -1,  1576,   656,  1508,    -1,  1581,    -1,  1577,
     656,  1581,    -1,  1507,    -1,  1578,   656,  1507,    -1,   621,
      -1,   631,    -1,   609,    -1,    20,    -1,  1508,   232,    49,
     564,    -1,  1508,   232,    49,   404,   564,    -1,  1508,   232,
    1579,  1505,    -1,  1508,   232,  1579,  1505,  1580,  1500,    -1,
    1507,    -1,    -1,   654,  1583,   655,    -1,  1583,   656,  1584,
      -1,  1584,    -1,  1503,    -1,    -1,   457,  1573,    -1,   457,
     528,    -1,   457,   637,    -1,   457,   363,    -1,    -1,   631,
    1588,    -1,    -1,   631,   211,   384,    -1,  1588,  1589,    -1,
    1589,    -1,   211,   384,    -1,   320,  1319,    -1,   324,  1319,
      -1,   319,  1319,    -1,   325,  1318,    -1,    -1,    33,  1591,
    1592,    -1,    -1,   634,    -1,    -1,    18,   367,    58,    -1,
      18,    58,    -1,    -1,   447,    -1,   367,   447,    -1,    -1,
     480,    -1,    85,  1592,  1593,  1594,    -1,   472,  1592,  1593,
    1594,    -1,   472,  1592,   575,  1595,  1503,    -1,   480,  1503,
      -1,   447,   480,  1503,    -1,    -1,  1601,    -1,    -1,   596,
    1608,  1602,  1170,    -1,    -1,  1601,    -1,  1605,    -1,    -1,
    1605,    -1,    -1,  1606,  1607,    -1,  1306,  1310,    -1,  1312,
      -1,    -1,   146,    -1,    13,    -1,   486,  1262,    -1,   654,
    1172,   655,    -1,  1609,  1604,    -1,    -1,  1610,   596,  1608,
    1611,  1609,  1604,    -1,  1613,  1610,  1614,    -1,    -1,    -1,
      -1,  1616,    -1,  1616,  1617,    -1,  1617,    -1,   540,    -1,
     223,    -1,   146,    -1,   525,    -1,   520,    -1,   521,    -1,
     523,    -1,    13,    -1,  1623,  1619,    -1,  1622,  1620,    -1,
    1624,  1621,  1626,    -1,  1626,    -1,  1634,    -1,  1645,    -1,
    1639,    -1,   703,    -1,  1626,    -1,  1634,    -1,  1645,    -1,
    1639,    -1,  1638,    -1,   703,    -1,  1622,    -1,  1623,    -1,
      -1,   133,   166,  1507,    -1,    12,   166,   589,    -1,    12,
     166,   332,    -1,    12,   166,   562,    -1,    -1,   526,   485,
     133,    -1,   526,   485,   252,    -1,    -1,  1625,   622,  1496,
    1627,  1628,    20,  1630,    -1,    -1,   654,  1629,   655,    -1,
    1503,    -1,  1629,   656,  1503,    -1,    -1,  1631,  1632,  1633,
      -1,   486,  1173,    -1,   654,  1171,   655,  1603,    -1,    -1,
     631,    65,   384,    -1,   631,    54,    65,   384,    -1,   631,
     283,    65,   384,    -1,    -1,    -1,    -1,   580,  1186,   717,
     822,   823,   377,  1186,  1635,  1496,   197,  1186,  1636,   155,
     477,  1637,   772,    -1,    11,  1186,   202,  1503,   466,   947,
     512,  1500,    -1,  1186,   202,  1503,   466,   947,   512,  1500,
      -1,    -1,    -1,    -1,    -1,    -1,  1186,   202,   717,   654,
    1640,   728,   655,  1641,   466,  1642,   992,  1643,   719,  1644,
     772,    -1,    -1,    -1,    -1,    -1,   419,  1186,   717,  1646,
     654,  1647,   732,   655,  1648,   719,  1649,   772,    -1,   638,
    1652,  1651,  1653,    -1,   638,   160,  1651,  1655,    -1,   638,
     414,  1651,    -1,   638,    85,  1651,  1654,    -1,   638,   472,
    1651,    -1,   638,   436,    -1,  1483,    -1,  1483,   656,  1483,
      -1,  1483,   656,  1483,   656,  1319,    -1,    33,    -1,   531,
      -1,    -1,   260,    -1,   463,    -1,    -1,   378,   406,    -1,
      -1,    -1,   550,  1656,  1657,    -1,    -1,   197,   335,    -1,
     248,   408,  1503,   512,  1500,    -1,   248,   512,  1500,    -1,
     595,   408,  1503,    -1,   595,   512,  1500,    -1,   644,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1931,  1931,  1943,  1942,  1967,  1974,  1976,  1980,  1981,
    1986,  1987,  1988,  1989,  1990,  1991,  1992,  1993,  1994,  1995,
    1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,  2004,  2005,
    2006,  2007,  2008,  2009,  2010,  2011,  2012,  2013,  2014,  2015,
    2016,  2017,  2018,  2019,  2020,  2021,  2022,  2023,  2024,  2025,
    2026,  2027,  2028,  2029,  2030,  2031,  2032,  2033,  2034,  2035,
    2036,  2037,  2038,  2039,  2040,  2044,  2053,  2054,  2058,  2067,
    2073,  2083,  2082,  2092,  2094,  2098,  2099,  2103,  2116,  2115,
    2135,  2134,  2143,  2144,  2148,  2152,  2156,  2160,  2164,  2168,
    2173,  2177,  2181,  2185,  2189,  2193,  2198,  2202,  2207,  2238,
    2243,  2246,  2248,  2249,  2253,  2259,  2263,  2279,  2283,  2289,
    2299,  2309,  2322,  2326,  2330,  2346,  2345,  2390,  2395,  2389,
    2402,  2407,  2400,  2414,  2419,  2412,  2425,  2424,  2437,  2436,
    2452,  2456,  2460,  2464,  2468,  2475,  2488,  2489,  2493,  2497,
    2501,  2505,  2509,  2513,  2517,  2525,  2524,  2555,  2554,  2561,
    2568,  2569,  2575,  2581,  2591,  2597,  2603,  2605,  2612,  2613,
    2617,  2623,  2632,  2633,  2641,  2641,  2697,  2698,  2699,  2700,
    2701,  2702,  2703,  2704,  2705,  2706,  2707,  2708,  2709,  2714,
    2728,  2744,  2762,  2763,  2767,  2768,  2773,  2775,  2777,  2779,
    2781,  2783,  2785,  2791,  2792,  2793,  2797,  2801,  2809,  2808,
    2821,  2823,  2826,  2828,  2832,  2836,  2843,  2845,  2849,  2850,
    2855,  2875,  2903,  2905,  2909,  2910,  2914,  2941,  2942,  2943,
    2944,  2948,  2949,  2953,  2954,  2959,  2962,  2989,  2988,  3052,
    3068,  3067,  3123,  3149,  3149,  3172,  3173,  3178,  3180,  3185,
    3207,  3218,  3222,  3244,  3245,  3249,  3253,  3262,  3268,  3274,
    3283,  3297,  3320,  3326,  3327,  3333,  3336,  3340,  3348,  3368,
    3370,  3388,  3394,  3396,  3398,  3400,  3402,  3404,  3406,  3408,
    3410,  3412,  3414,  3416,  3421,  3436,  3452,  3453,  3458,  3464,
    3473,  3479,  3488,  3496,  3505,  3514,  3516,  3525,  3530,  3536,
    3545,  3553,  3555,  3557,  3559,  3561,  3563,  3565,  3567,  3569,
    3571,  3573,  3575,  3577,  3582,  3600,  3621,  3622,  3626,  3627,
    3628,  3629,  3630,  3631,  3632,  3633,  3634,  3635,  3636,  3637,
    3638,  3643,  3642,  3649,  3649,  3704,  3703,  3732,  3732,  3747,
    3800,  3843,  3864,  3863,  3885,  3904,  3906,  3907,  3911,  3931,
    3954,  3956,  3972,  3954,  3991,  3993,  3994,  3998,  3999,  4004,
    4010,  4003,  4031,  4030,  4046,  4047,  4051,  4052,  4057,  4061,
    4056,  4082,  4086,  4081,  4105,  4115,  4120,  4119,  4154,  4155,
    4160,  4159,  4191,  4191,  4206,  4205,  4242,  4254,  4256,  4253,
    4283,  4282,  4303,  4305,  4310,  4312,  4314,  4331,  4336,  4342,
    4349,  4350,  4358,  4364,  4373,  4379,  4385,  4386,  4390,  4390,
    4395,  4396,  4397,  4401,  4402,  4403,  4407,  4411,  4412,  4413,
    4417,  4418,  4419,  4420,  4421,  4422,  4423,  4424,  4428,  4432,
    4433,  4434,  4438,  4439,  4440,  4441,  4442,  4446,  4450,  4451,
    4452,  4456,  4457,  4458,  4459,  4460,  4461,  4462,  4466,  4470,
    4471,  4472,  4476,  4477,  4478,  4483,  4491,  4499,  4507,  4519,
    4531,  4536,  4541,  4549,  4557,  4565,  4573,  4581,  4589,  4597,
    4610,  4623,  4636,  4638,  4642,  4647,  4660,  4661,  4713,  4712,
    4715,  4721,  4721,  4722,  4736,  4737,  4741,  4743,  4742,  4746,
    4745,  4751,  4788,  4789,  4794,  4793,  4812,  4831,  4830,  4847,
    4851,  4859,  4858,  4861,  4863,  4865,  4867,  4872,  4873,  4879,
    4880,  4897,  4898,  4902,  4903,  4907,  4926,  4936,  4947,  4956,
    4957,  4973,  4975,  4974,  4979,  4977,  4988,  4989,  4993,  5011,
    5027,  5028,  5044,  5059,  5081,  5082,  5087,  5086,  5110,  5120,
    5142,  5141,  5159,  5158,  5178,  5200,  5204,  5233,  5245,  5246,
    5251,  5262,  5250,  5287,  5288,  5292,  5305,  5326,  5339,  5365,
    5366,  5371,  5370,  5407,  5412,  5413,  5417,  5418,  5422,  5424,
    5430,  5436,  5438,  5440,  5442,  5444,  5446,  5456,  5471,  5455,
    5485,  5486,  5490,  5491,  5495,  5496,  5500,  5501,  5505,  5506,
    5510,  5511,  5515,  5520,  5524,  5532,  5536,  5542,  5544,  5548,
    5549,  5553,  5554,  5555,  5559,  5564,  5569,  5574,  5579,  5584,
    5589,  5594,  5609,  5615,  5630,  5635,  5650,  5656,  5674,  5679,
    5684,  5689,  5694,  5699,  5705,  5704,  5730,  5731,  5732,  5737,
    5742,  5747,  5749,  5751,  5753,  5759,  5764,  5769,  5775,  5781,
    5787,  5796,  5814,  5831,  5854,  5868,  5869,  5870,  5871,  5872,
    5873,  5874,  5878,  5879,  5880,  5884,  5885,  5889,  5890,  5891,
    5892,  5897,  5904,  5905,  5909,  5910,  5914,  5915,  5923,  5922,
    5931,  5929,  5939,  5937,  5947,  5945,  5953,  5974,  5980,  5982,
    5986,  5990,  5991,  5995,  6000,  5999,  6025,  6026,  6035,  6037,
    6042,  6045,  6049,  6056,  6057,  6061,  6062,  6066,  6072,  6078,
    6082,  6098,  6114,  6115,  6116,  6117,  6122,  6126,  6131,  6136,
    6140,  6145,  6150,  6156,  6161,  6167,  6171,  6176,  6181,  6199,
    6201,  6203,  6216,  6218,  6223,  6228,  6240,  6245,  6250,  6255,
    6257,  6259,  6261,  6263,  6265,  6267,  6269,  6272,  6271,  6276,
    6275,  6279,  6281,  6290,  6291,  6292,  6297,  6298,  6299,  6300,
    6301,  6305,  6309,  6310,  6314,  6315,  6319,  6320,  6321,  6322,
    6323,  6327,  6328,  6329,  6330,  6331,  6335,  6340,  6342,  6348,
    6349,  6351,  6356,  6365,  6366,  6370,  6371,  6375,  6376,  6377,
    6381,  6382,  6383,  6384,  6387,  6388,  6392,  6393,  6397,  6398,
    6402,  6403,  6407,  6408,  6409,  6410,  6417,  6418,  6424,  6430,
    6436,  6442,  6443,  6456,  6462,  6468,  6474,  6483,  6504,  6510,
    6515,  6516,  6520,  6521,  6525,  6533,  6537,  6538,  6542,  6543,
    6547,  6556,  6560,  6561,  6565,  6573,  6574,  6578,  6579,  6583,
    6584,  6589,  6590,  6594,  6601,  6610,  6615,  6623,  6624,  6625,
    6626,  6627,  6628,  6633,  6641,  6642,  6647,  6646,  6659,  6660,
    6664,  6667,  6668,  6669,  6670,  6674,  6682,  6689,  6690,  6694,
    6704,  6705,  6709,  6710,  6713,  6715,  6719,  6731,  6732,  6736,
    6743,  6756,  6757,  6759,  6761,  6767,  6772,  6778,  6784,  6791,
    6801,  6802,  6803,  6804,  6805,  6809,  6813,  6814,  6818,  6819,
    6823,  6824,  6828,  6829,  6830,  6834,  6835,  6839,  6843,  6856,
    6868,  6869,  6873,  6874,  6878,  6879,  6883,  6884,  6888,  6889,
    6893,  6894,  6898,  6899,  6903,  6904,  6908,  6910,  6911,  6917,
    6923,  6929,  6937,  6938,  6942,  6946,  6947,  6960,  6961,  6962,
    6966,  6967,  6971,  6977,  6991,  6992,  6996,  7008,  7009,  7013,
    7014,  7022,  7039,  7021,  7059,  7058,  7072,  7084,  7083,  7102,
    7101,  7120,  7119,  7138,  7132,  7152,  7151,  7184,  7189,  7194,
    7199,  7204,  7214,  7215,  7216,  7217,  7221,  7222,  7234,  7235,
    7239,  7240,  7243,  7245,  7253,  7261,  7263,  7265,  7266,  7274,
    7275,  7279,  7288,  7286,  7299,  7312,  7311,  7324,  7322,  7335,
    7342,  7352,  7353,  7380,  7387,  7391,  7396,  7395,  7411,  7413,
    7418,  7426,  7425,  7441,  7445,  7444,  7456,  7457,  7461,  7476,
    7477,  7481,  7490,  7494,  7499,  7505,  7504,  7516,  7527,  7515,
    7543,  7552,  7561,  7571,  7580,  7586,  7592,  7601,  7610,  7629,
    7649,  7659,  7663,  7668,  7669,  7672,  7674,  7675,  7676,  7677,
    7680,  7685,  7696,  7701,  7712,  7713,  7717,  7718,  7722,  7722,
    7725,  7727,  7731,  7732,  7736,  7737,  7745,  7746,  7747,  7751,
    7752,  7757,  7765,  7766,  7767,  7768,  7773,  7772,  7782,  7781,
    7788,  7795,  7805,  7822,  7825,  7832,  7836,  7843,  7847,  7851,
    7858,  7858,  7864,  7865,  7869,  7870,  7871,  7875,  7876,  7889,
    7896,  7897,  7902,  7901,  7913,  7914,  7915,  7920,  7919,  7940,
    7941,  7945,  7946,  7950,  7951,  7952,  7957,  7956,  7977,  7978,
    7982,  7987,  7988,  7995,  7997,  8001,  8003,  8002,  8014,  8016,
    8015,  8028,  8029,  8034,  8043,  8044,  8045,  8049,  8055,  8064,
    8073,  8072,  8098,  8099,  8103,  8104,  8108,  8109,  8110,  8111,
    8112,  8113,  8118,  8117,  8138,  8139,  8140,  8145,  8144,  8150,
    8157,  8162,  8170,  8171,  8175,  8189,  8188,  8201,  8202,  8206,
    8207,  8211,  8221,  8231,  8232,  8237,  8236,  8247,  8248,  8252,
    8253,  8257,  8267,  8278,  8277,  8285,  8285,  8294,  8295,  8300,
    8301,  8310,  8319,  8320,  8324,  8329,  8334,  8339,  8344,  8343,
    8363,  8371,  8363,  8378,  8379,  8380,  8381,  8382,  8386,  8393,
    8400,  8402,  8413,  8414,  8418,  8419,  8447,  8477,  8479,  8485,
    8495,  8496,  8497,  8511,  8516,  8541,  8547,  8553,  8554,  8555,
    8556,  8557,  8561,  8562,  8563,  8567,  8568,  8569,  8573,  8574,
    8579,  8630,  8637,  8680,  8686,  8692,  8698,  8704,  8710,  8716,
    8722,  8726,  8732,  8738,  8744,  8750,  8756,  8760,  8766,  8775,
    8781,  8789,  8795,  8805,  8811,  8820,  8830,  8836,  8846,  8852,
    8861,  8865,  8871,  8877,  8883,  8889,  8895,  8901,  8907,  8913,
    8919,  8925,  8931,  8937,  8943,  8949,  8953,  8954,  8958,  8959,
    8963,  8964,  8968,  8969,  8973,  8974,  8975,  8976,  8977,  8978,
    8982,  8983,  8988,  8994,  8998,  9005,  9012,  9019,  9026,  9033,
    9038,  9044,  9051,  9058,  9066,  9077,  9099,  9106,  9114,  9115,
    9116,  9117,  9118,  9119,  9130,  9131,  9132,  9133,  9134,  9140,
    9144,  9150,  9156,  9162,  9168,  9170,  9177,  9184,  9190,  9233,
    9242,  9249,  9257,  9263,  9270,  9276,  9290,  9297,  9313,  9319,
    9325,  9333,  9341,  9347,  9353,  9359,  9365,  9379,  9390,  9396,
    9402,  9408,  9414,  9420,  9426,  9432,  9438,  9444,  9450,  9456,
    9462,  9468,  9474,  9480,  9486,  9494,  9515,  9522,  9528,  9535,
    9542,  9549,  9556,  9562,  9568,  9575,  9581,  9588,  9594,  9600,
    9606,  9612,  9618,  9636,  9642,  9648,  9655,  9662,  9670,  9677,
    9684,  9691,  9698,  9715,  9721,  9727,  9733,  9739,  9746,  9752,
    9758,  9764,  9770,  9776,  9787,  9793,  9799,  9805,  9811,  9819,
    9825,  9836,  9842,  9848,  9856,  9866,  9872,  9888,  9894,  9901,
    9908,  9915,  9922,  9929,  9933,  9953,  9952, 10024, 10065, 10067,
   10072, 10073, 10077, 10078, 10082, 10083, 10087, 10094, 10102, 10128,
   10134, 10140, 10146, 10152, 10158, 10167, 10174, 10176, 10173, 10183,
   10194, 10200, 10206, 10212, 10218, 10224, 10230, 10236, 10242, 10249,
   10248, 10268, 10267, 10282, 10292, 10300, 10316, 10317, 10322, 10327,
   10330, 10333, 10332, 10349, 10351, 10357, 10356, 10373, 10375, 10377,
   10379, 10381, 10383, 10385, 10387, 10389, 10391, 10397, 10403, 10406,
   10405, 10411, 10412, 10416, 10423, 10431, 10432, 10436, 10443, 10451,
   10452, 10456, 10457, 10461, 10469, 10480, 10481, 10493, 10504, 10505,
   10511, 10512, 10532, 10536, 10534, 10552, 10550, 10561, 10571, 10569,
   10587, 10586, 10596, 10607, 10605, 10624, 10623, 10634, 10646, 10647,
   10648, 10652, 10653, 10661, 10662, 10666, 10681, 10681, 10696, 10736,
   10812, 10823, 10828, 10820, 10847, 10867, 10875, 10867, 10884, 10883,
   10906, 10923, 10906, 10930, 10934, 10960, 10961, 10966, 10969, 10970,
   10971, 10975, 10976, 10981, 10980, 10986, 10985, 10993, 10994, 10997,
   10999, 10999, 11003, 11003, 11008, 11009, 11013, 11015, 11020, 11021,
   11025, 11036, 11049, 11050, 11051, 11052, 11053, 11054, 11055, 11056,
   11057, 11058, 11059, 11060, 11064, 11065, 11066, 11067, 11068, 11069,
   11070, 11071, 11072, 11076, 11077, 11078, 11079, 11082, 11084, 11085,
   11089, 11090, 11098, 11100, 11104, 11106, 11105, 11119, 11122, 11121,
   11136, 11142, 11156, 11158, 11162, 11164, 11169, 11170, 11190, 11215,
   11219, 11220, 11224, 11236, 11238, 11243, 11242, 11277, 11279, 11284,
   11285, 11286, 11291, 11298, 11302, 11303, 11307, 11311, 11315, 11320,
   11324, 11331, 11338, 11345, 11355, 11388, 11392, 11398, 11404, 11414,
   11427, 11435, 11439, 11446, 11447, 11451, 11452, 11453, 11457, 11458,
   11459, 11460, 11461, 11462, 11466, 11467, 11468, 11469, 11470, 11474,
   11475, 11476, 11477, 11478, 11482, 11483, 11484, 11485, 11486, 11490,
   11495, 11496, 11500, 11501, 11504, 11507, 11506, 11537, 11538, 11542,
   11543, 11547, 11557, 11557, 11567, 11568, 11572, 11591, 11624, 11623,
   11636, 11644, 11635, 11646, 11658, 11670, 11669, 11687, 11686, 11697,
   11697, 11713, 11720, 11742, 11762, 11774, 11778, 11783, 11782, 11792,
   11798, 11805, 11810, 11815, 11825, 11826, 11830, 11841, 11854, 11855,
   11859, 11871, 11875, 11883, 11884, 11892, 11900, 11891, 11910, 11917,
   11909, 11927, 11935, 11936, 11944, 11948, 11949, 11960, 11961, 11965,
   11974, 11975, 11976, 11978, 11977, 11988, 11989, 11993, 11994, 11996,
   11995, 11999, 11998, 12004, 12005, 12009, 12010, 12014, 12024, 12025,
   12029, 12030, 12035, 12034, 12048, 12049, 12053, 12058, 12066, 12067,
   12075, 12077, 12077, 12085, 12093, 12084, 12115, 12116, 12120, 12128,
   12129, 12133, 12143, 12144, 12151, 12150, 12166, 12177, 12165, 12180,
   12179, 12191, 12190, 12203, 12205, 12209, 12210, 12214, 12227, 12243,
   12244, 12248, 12249, 12253, 12254, 12255, 12260, 12259, 12280, 12282,
   12285, 12287, 12290, 12291, 12294, 12298, 12302, 12306, 12310, 12314,
   12318, 12322, 12326, 12334, 12337, 12347, 12346, 12362, 12369, 12377,
   12385, 12393, 12401, 12409, 12416, 12423, 12429, 12431, 12433, 12442,
   12446, 12451, 12450, 12456, 12455, 12460, 12469, 12476, 12481, 12486,
   12491, 12493, 12495, 12497, 12499, 12501, 12508, 12516, 12518, 12526,
   12533, 12540, 12547, 12553, 12559, 12568, 12576, 12580, 12585, 12592,
   12597, 12604, 12611, 12618, 12625, 12632, 12639, 12645, 12652, 12659,
   12664, 12669, 12674, 12684, 12686, 12688, 12693, 12694, 12697, 12699,
   12703, 12704, 12708, 12709, 12713, 12714, 12718, 12719, 12723, 12724,
   12727, 12729, 12736, 12747, 12746, 12762, 12761, 12771, 12772, 12773,
   12774, 12775, 12779, 12780, 12784, 12785, 12786, 12790, 12791, 12792,
   12807, 12806, 12819, 12818, 12829, 12833, 12834, 12847, 12850, 12849,
   12861, 12862, 12867, 12869, 12871, 12873, 12875, 12877, 12888, 12890,
   12892, 12894, 12900, 12902, 12913, 12915, 12917, 12919, 12921, 12923,
   12925, 12930, 12931, 12935, 12936, 12940, 12939, 12949, 12950, 12954,
   12954, 12957, 12958, 12962, 12963, 12968, 12967, 12978, 12982, 12986,
   12999, 12998, 13013, 13014, 13015, 13018, 13019, 13020, 13021, 13029,
   13033, 13042, 13048, 13060, 13071, 13081, 13091, 13059, 13099, 13100,
   13104, 13105, 13109, 13110, 13118, 13122, 13123, 13124, 13127, 13129,
   13133, 13134, 13138, 13143, 13150, 13155, 13162, 13164, 13168, 13169,
   13173, 13178, 13186, 13187, 13190, 13192, 13200, 13202, 13206, 13207,
   13208, 13212, 13214, 13219, 13220, 13229, 13230, 13234, 13235, 13239,
   13252, 13275, 13287, 13298, 13317, 13325, 13337, 13345, 13360, 13380,
   13381, 13382, 13390, 13391, 13392, 13393, 13400, 13406, 13412, 13418,
   13424, 13430, 13459, 13490, 13500, 13510, 13516, 13525, 13537, 13543,
   13549, 13565, 13566, 13570, 13579, 13594, 13598, 13644, 13648, 13665,
   13669, 13747, 13771, 13801, 13802, 13818, 13828, 13832, 13838, 13844,
   13854, 13860, 13869, 13879, 13880, 13908, 13922, 13936, 13951, 13952,
   13962, 13963, 13973, 13974, 13975, 13979, 13994, 14026, 14036, 14036,
   14038, 14048, 14049, 14050, 14051, 14052, 14053, 14054, 14055, 14056,
   14057, 14058, 14059, 14060, 14061, 14062, 14063, 14064, 14065, 14066,
   14067, 14068, 14069, 14070, 14071, 14072, 14073, 14074, 14075, 14076,
   14077, 14078, 14079, 14080, 14081, 14082, 14083, 14084, 14085, 14086,
   14087, 14088, 14089, 14090, 14091, 14092, 14093, 14094, 14095, 14096,
   14097, 14098, 14099, 14100, 14101, 14102, 14103, 14104, 14105, 14106,
   14107, 14117, 14118, 14119, 14120, 14121, 14122, 14123, 14124, 14125,
   14126, 14127, 14128, 14129, 14130, 14131, 14132, 14133, 14134, 14135,
   14136, 14137, 14138, 14139, 14140, 14141, 14142, 14143, 14144, 14145,
   14146, 14147, 14148, 14149, 14150, 14151, 14152, 14153, 14154, 14155,
   14156, 14157, 14158, 14159, 14160, 14161, 14162, 14163, 14164, 14165,
   14166, 14171, 14172, 14173, 14174, 14175, 14176, 14177, 14178, 14179,
   14180, 14181, 14182, 14183, 14184, 14185, 14186, 14187, 14188, 14189,
   14190, 14191, 14192, 14193, 14194, 14195, 14196, 14197, 14198, 14199,
   14200, 14201, 14202, 14203, 14204, 14205, 14206, 14207, 14208, 14209,
   14210, 14211, 14212, 14213, 14214, 14215, 14216, 14217, 14218, 14219,
   14220, 14221, 14222, 14223, 14224, 14225, 14226, 14227, 14228, 14229,
   14230, 14231, 14232, 14233, 14234, 14235, 14236, 14237, 14238, 14239,
   14240, 14241, 14242, 14243, 14244, 14245, 14246, 14247, 14248, 14249,
   14250, 14251, 14252, 14253, 14254, 14255, 14256, 14257, 14258, 14259,
   14260, 14261, 14262, 14263, 14264, 14265, 14266, 14267, 14268, 14269,
   14270, 14271, 14272, 14273, 14274, 14275, 14276, 14277, 14278, 14279,
   14280, 14281, 14282, 14283, 14284, 14285, 14286, 14287, 14288, 14289,
   14290, 14291, 14292, 14293, 14294, 14295, 14296, 14297, 14298, 14299,
   14300, 14301, 14302, 14303, 14304, 14305, 14306, 14307, 14308, 14309,
   14310, 14311, 14312, 14313, 14314, 14315, 14316, 14317, 14318, 14319,
   14320, 14321, 14322, 14323, 14324, 14325, 14326, 14327, 14328, 14329,
   14330, 14331, 14332, 14333, 14334, 14335, 14336, 14337, 14338, 14339,
   14340, 14341, 14342, 14343, 14344, 14345, 14346, 14347, 14348, 14349,
   14350, 14351, 14352, 14353, 14354, 14355, 14356, 14357, 14358, 14359,
   14360, 14361, 14362, 14363, 14364, 14365, 14366, 14367, 14368, 14369,
   14370, 14371, 14372, 14373, 14374, 14375, 14376, 14377, 14378, 14379,
   14380, 14381, 14382, 14383, 14384, 14385, 14386, 14387, 14388, 14389,
   14390, 14391, 14392, 14393, 14394, 14395, 14396, 14397, 14398, 14399,
   14400, 14401, 14402, 14403, 14404, 14405, 14406, 14407, 14408, 14409,
   14410, 14411, 14412, 14413, 14414, 14415, 14416, 14417, 14418, 14419,
   14420, 14421, 14422, 14423, 14424, 14425, 14426, 14427, 14428, 14429,
   14430, 14442, 14441, 14460, 14459, 14466, 14465, 14475, 14474, 14485,
   14484, 14490, 14498, 14500, 14505, 14505, 14514, 14513, 14527, 14526,
   14531, 14535, 14536, 14537, 14541, 14542, 14543, 14544, 14548, 14549,
   14550, 14551, 14556, 14580, 14606, 14617, 14629, 14642, 14657, 14676,
   14682, 14707, 14720, 14746, 14789, 14803, 14804, 14805, 14806, 14810,
   14827, 14844, 14845, 14849, 14850, 14851, 14852, 14856, 14857, 14866,
   14877, 14878, 14879, 14885, 14891, 14903, 14902, 14918, 14919, 14923,
   14924, 14928, 14943, 14944, 14945, 14950, 14951, 14956, 14955, 14975,
   14987, 15000, 14999, 15033, 15034, 15038, 15039, 15043, 15044, 15045,
   15046, 15048, 15047, 15060, 15061, 15062, 15063, 15064, 15070, 15075,
   15081, 15092, 15103, 15107, 15114, 15123, 15125, 15130, 15135, 15142,
   15154, 15166, 15173, 15185, 15186, 15189, 15190, 15193, 15198, 15206,
   15217, 15237, 15240, 15242, 15246, 15247, 15254, 15256, 15260, 15261,
   15266, 15265, 15269, 15268, 15272, 15271, 15275, 15274, 15277, 15278,
   15279, 15280, 15281, 15282, 15283, 15284, 15285, 15286, 15287, 15288,
   15289, 15290, 15291, 15292, 15293, 15294, 15295, 15296, 15297, 15298,
   15299, 15300, 15301, 15302, 15306, 15307, 15311, 15312, 15316, 15326,
   15336, 15349, 15364, 15377, 15390, 15402, 15407, 15415, 15420, 15428,
   15433, 15440, 15440, 15441, 15441, 15444, 15473, 15478, 15484, 15490,
   15496, 15500, 15504, 15505, 15509, 15536, 15538, 15542, 15546, 15550,
   15557, 15558, 15562, 15563, 15567, 15568, 15572, 15573, 15579, 15585,
   15591, 15601, 15600, 15610, 15611, 15616, 15617, 15618, 15623, 15624,
   15625, 15629, 15630, 15634, 15646, 15655, 15665, 15674, 15688, 15689,
   15694, 15693, 15709, 15710, 15711, 15715, 15716, 15720, 15720, 15742,
   15743, 15747, 15748, 15749, 15753, 15757, 15764, 15767, 15765, 15781,
   15788, 15809, 15826, 15828, 15832, 15833, 15837, 15838, 15846, 15847,
   15848, 15849, 15855, 15861, 15871, 15873, 15875, 15880, 15881, 15882,
   15883, 15884, 15888, 15889, 15890, 15891, 15892, 15893, 15903, 15904,
   15909, 15922, 15935, 15937, 15939, 15945, 15946, 15948, 15954, 15953,
   15970, 15971, 15975, 15980, 15988, 15988, 16012, 16013, 16018, 16019,
   16021, 16023, 16041, 16047, 16052, 16034, 16113, 16130, 16154, 16185,
   16189, 16198, 16221, 16150, 16284, 16308, 16317, 16324, 16283, 16344,
   16348, 16352, 16356, 16360, 16364, 16371, 16378, 16385, 16395, 16396,
   16400, 16401, 16402, 16406, 16407, 16412, 16414, 16413, 16419, 16420,
   16424, 16431, 16441, 16447, 16458
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADMIN_SYM", "ADDDATE_SYM", "AFTER_SYM", "AGAINST",
  "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM",
  "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC",
  "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM", "AUTHORS_SYM",
  "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AUTO_SYM", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM",
  "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET", "CHAR_SYM",
  "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLIENT_STATS_SYM", "CLOSE_SYM",
  "COALESCE", "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS",
  "COLUMN_ADD_SYM", "COLUMN_CHECK_SYM", "COLUMN_CREATE_SYM",
  "COLUMN_DELETE_SYM", "COLUMN_GET_SYM", "COLUMN_SYM", "COLUMN_NAME_SYM",
  "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM",
  "COMPLETION_SYM", "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM",
  "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_SYM", "CURRENT_USER", "CURRENT_ROLE",
  "CURRENT_POS_SYM", "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME",
  "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM", "DATETIME",
  "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM",
  "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM",
  "DEALLOCATE_SYM", "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM",
  "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM",
  "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM",
  "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE",
  "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXAMINED_SYM", "EXECUTE_SYM",
  "EXISTS", "EXIT_SYM", "EXPANSION_SYM", "EXPORT_SYM", "EXTENDED_SYM",
  "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM",
  "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM", "FOUND_SYM",
  "FROM", "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GENERAL",
  "GENERATED_SYM", "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT",
  "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM",
  "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HARD_SYM", "HASH_SYM",
  "HAVING", "HELP_SYM", "HEX_NUM", "HEX_STRING", "HIGH_PRIORITY",
  "HOST_SYM", "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "ID_SYM", "IDENT", "IDENTIFIED_SYM",
  "IDENT_QUOTED", "IF", "IGNORE_SYM", "IGNORE_SERVER_IDS_SYM", "IMPORT",
  "INDEXES", "INDEX_SYM", "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM",
  "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD",
  "INSTALL_SYM", "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM",
  "IN_SYM", "IO_SYM", "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM",
  "ITERATE_SYM", "JOIN_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM",
  "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM", "LAST_VALUE", "LE", "LEADING",
  "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME",
  "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD",
  "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM",
  "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "LT", "MASTER_CONNECT_RETRY_SYM", "MASTER_GTID_POS_SYM",
  "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM",
  "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM",
  "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM",
  "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_USE_GTID_SYM", "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH",
  "MATCHED_SYM", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR",
  "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM", "MEDIUMBLOB", "MEDIUMINT",
  "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM",
  "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "ONLINE_SYM",
  "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PAGE_CHECKSUM_SYM",
  "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM", "PARTIAL",
  "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM", "PASSWORD",
  "PERSISTENT_SYM", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM",
  "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM",
  "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM",
  "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM",
  "PURGE", "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNED_SQLSTATE_SYM", "RETURNING_SYM", "RETURNS_SYM", "RETURN_SYM",
  "REVERSE_SYM", "REVOKE", "RIGHT", "ROLE_SYM", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM",
  "ROW_COUNT_SYM", "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM",
  "SCHEMA_NAME_SYM", "SECOND_MICROSECOND_SYM", "SECOND_SYM",
  "SECURITY_SYM", "SELECT_SYM", "SENSITIVE_SYM", "SEPARATOR_SYM",
  "SERIALIZABLE_SYM", "SERIAL_SYM", "SESSION_SYM", "SERVER_SYM",
  "SERVER_OPTIONS", "SET", "SET_VAR", "SHARE_SYM", "SHIFT_LEFT",
  "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGNAL_SYM", "SIGNED_SYM",
  "SIMPLE_SYM", "SLAVE", "SLAVES", "SLAVE_POS_SYM", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SOFT_SYM", "SONAME_SYM", "SOUNDS_SYM",
  "SOURCE_SYM", "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM",
  "SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STARTING",
  "STARTS_SYM", "START_SYM", "STATS_AUTO_RECALC_SYM",
  "STATS_PERSISTENT_SYM", "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM",
  "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN",
  "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM",
  "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM",
  "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE",
  "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_STATS_SYM",
  "TABLE_SYM", "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY",
  "TEMPTABLE_SYM", "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM",
  "THEN_SYM", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM",
  "TINYBLOB", "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING",
  "TRANSACTION_SYM", "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM",
  "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM",
  "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING",
  "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM", "VIRTUAL_SYM",
  "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WEIGHT_STRING_SYM", "WHEN_SYM",
  "WHERE", "WHILE_SYM", "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM",
  "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM",
  "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "IMPOSSIBLE_ACTION",
  "'|'", "'&'", "'-'", "'+'", "'*'", "'/'", "'%'", "'^'", "'~'", "'('",
  "')'", "','", "'!'", "'{'", "'}'", "';'", "'@'", "'.'", "':'", "$accept",
  "query", "@1", "opt_end_of_input", "verb_clause", "statement",
  "deallocate", "deallocate_or_drop", "prepare", "prepare_src", "execute",
  "@2", "execute_using", "execute_var_list", "execute_var_ident", "help",
  "@3", "change", "@4", "master_defs", "master_def",
  "ignore_server_id_list", "ignore_server_id", "master_file_def",
  "optional_connection_name", "connection_name", "create", "@5", "@6",
  "@7", "@8", "@9", "@10", "@11", "@12", "@13", "server_def",
  "server_options_list", "server_option", "event_tail", "@14",
  "ev_schedule_time", "@15", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "@16", "ev_sql_stmt_inner", "clear_privileges", "sp_name",
  "sp_a_chistics", "sp_c_chistics", "sp_chistic", "sp_c_chistic",
  "sp_suid", "call", "@17", "opt_sp_cparam_list", "opt_sp_cparams",
  "sp_cparams", "sp_fdparam_list", "sp_fdparams", "sp_init_param",
  "sp_fdparam", "sp_pdparam_list", "sp_pdparams", "sp_pdparam",
  "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1", "sp_decls", "sp_decl",
  "@18", "@19", "sp_cursor_stmt", "@20", "sp_handler_type",
  "sp_hcond_list", "sp_hcond_element", "sp_cond", "sqlstate", "opt_value",
  "sp_hcond", "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_idents", "sp_opt_default",
  "sp_proc_stmt", "sp_proc_stmt_if", "@21", "sp_proc_stmt_statement",
  "@22", "sp_proc_stmt_return", "@23", "sp_proc_stmt_unlabeled", "@24",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "@25", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "@26", "@27", "@28", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "@29", "@30",
  "searched_case_stmt", "@31", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "@32", "@33",
  "searched_when_clause", "@34", "@35", "else_clause_opt",
  "sp_labeled_control", "@36", "sp_opt_label", "sp_labeled_block", "@37",
  "sp_unlabeled_block", "@38", "sp_block_content", "@39",
  "sp_unlabeled_control", "@40", "@41", "@42", "trg_action_time",
  "trg_event", "change_tablespace_access", "change_tablespace_info",
  "tablespace_info", "opt_logfile_group_name", "alter_tablespace_info",
  "logfile_group_info", "alter_logfile_group_info", "add_log_file",
  "change_ts_option_list", "@43", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create_body",
  "@44", "@45", "create_like", "opt_create_select", "@46", "@47",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "@48",
  "have_partitioning", "partition_entry", "@49", "partition",
  "part_type_def", "@50", "opt_linear", "opt_key_algo", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "@51",
  "@52", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "@53", "part_name", "opt_part_values", "@54", "@55", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "@56", "@57",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "@58", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "@59", "@60", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "create_or_replace", "opt_create_table_options",
  "create_table_options_space_separated", "create_table_options",
  "create_table_option", "@61", "default_charset", "default_collation",
  "storage_engines", "known_storage_engines", "row_types",
  "merge_insert_types", "opt_select_from", "udf_type", "create_field_list",
  "field_list", "field_list_item", "column_def", "key_def", "@62", "@63",
  "@64", "@65", "opt_check_constraint", "check_constraint",
  "opt_constraint", "constraint", "field_spec", "@66", "field_def",
  "opt_generated_always", "vcol_opt_specifier", "vcol_opt_attribute",
  "vcol_opt_attribute_list", "vcol_attribute", "parse_vcol_expr",
  "virtual_column_func", "type", "@67", "@68", "spatial_type", "char",
  "nchar", "varchar", "nvarchar", "int_type", "real_type", "float_options",
  "precision", "field_options", "field_opt_list", "field_option",
  "field_length", "opt_field_length", "opt_precision", "opt_attribute",
  "opt_attribute_list", "attribute", "type_with_opt_collate",
  "now_or_signed_literal", "hex_num_or_string", "charset", "charset_name",
  "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "ws_nweights", "@69", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident",
  "opt_if_not_exists_ident", "opt_component", "string_list", "alter",
  "@70", "@71", "@72", "@73", "@74", "@75", "@76", "@77",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "@78", "@79", "@80",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "@81", "add_part_extra", "reorg_partition_rule", "@82",
  "reorg_parts_rule", "@83", "alt_part_name_list", "alt_part_name_item",
  "alter_list", "add_column", "alter_list_item", "@84", "@85", "@86",
  "opt_index_lock_algorithm", "alter_algorithm_option",
  "alter_lock_option", "opt_column", "opt_ignore", "alter_options", "@87",
  "alter_options_part2", "alter_option_list", "alter_option",
  "opt_restrict", "opt_place", "opt_to", "slave", "@88", "@89", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_thread_opts", "@90",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "@91", "opt_checksum_type", "repair",
  "@92", "opt_mi_repair_type", "mi_repair_types", "mi_repair_type",
  "analyze", "@93", "analyze_table_list", "analyze_table_elem_spec",
  "opt_persistent_stat_clause", "persistent_stat_spec",
  "persistent_column_stat_spec", "@94", "persistent_index_stat_spec",
  "@95", "table_column_list", "table_index_list", "table_index_name",
  "binlog_base64_event", "check", "@96", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "@97",
  "opt_no_write_to_binlog", "rename", "@98", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "@99",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "@100",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "@101", "cache_keys_spec", "@102",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "@103",
  "select_part2", "@104", "@105", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "opt_default_time_precision",
  "opt_time_precision", "optional_braces", "expr", "bool_pri", "predicate",
  "bit_expr", "or", "and", "not", "not2", "comp_op", "all_or_any",
  "opt_dyncol_type", "dyncol_type", "dyncall_create_element",
  "dyncall_create_list", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@106", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "@107", "@108", "@109",
  "variable", "@110", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "@111", "gorder_list",
  "in_sum_expr", "@112", "cast_type", "@113", "opt_expr_list", "expr_list",
  "ident_list_arg", "ident_list", "opt_expr", "opt_else", "when_list",
  "table_ref", "join_table_list", "esc_table_ref", "derived_table_list",
  "join_table", "@114", "@115", "@116", "@117", "@118", "@119",
  "inner_join", "normal_join", "opt_use_partition", "use_partition",
  "table_factor", "@120", "select_derived_union", "@121", "@122",
  "select_init2_derived", "select_part2_derived", "@123", "@124",
  "select_derived", "@125", "select_derived2", "@126", "@127",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "@128",
  "@129", "index_hints_list", "opt_index_hints_list", "@130",
  "opt_key_definition", "@131", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "@132", "having_clause", "@133", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "@134", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "limit_rows_matched_option",
  "limit_rows_option", "delete_limit_clause", "int_num", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "choice", "procedure_clause", "@135", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "@136",
  "select_var_list", "select_var_ident", "into", "@137",
  "into_destination", "@138", "@139", "do", "@140", "drop", "@141", "@142",
  "@143", "table_list", "table_name", "table_name_with_opt_use_partition",
  "table_alias_ref_list", "table_alias_ref", "opt_if_exists",
  "opt_temporary", "insert", "@144", "@145", "replace", "@146", "@147",
  "insert_lock_option", "replace_lock_option", "insert2", "insert_table",
  "insert_field_spec", "@148", "fields", "insert_values", "@149", "@150",
  "values_list", "ident_eq_list", "ident_eq_value", "equal", "opt_equal",
  "no_braces", "@151", "opt_values", "values", "expr_or_default",
  "opt_insert_update", "@152", "update", "@153", "@154", "update_list",
  "update_elem", "insert_update_list", "insert_update_elem",
  "opt_low_priority", "delete", "@155", "single_multi", "@156", "@157",
  "@158", "@159", "opt_select_expressions", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "@160", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "@161", "show_param", "@162",
  "@163", "show_engine_param", "master_or_binary", "opt_storage", "opt_db",
  "opt_full", "from_or_in", "binlog_in", "binlog_from", "wild_and_where",
  "describe", "@164", "@165", "explainable_command", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "@166",
  "flush_options", "@167", "opt_flush_lock", "flush_lock", "@168",
  "flush_options_list", "flush_option", "opt_table_list",
  "optional_flush_tables_arguments", "reset", "@169", "reset_options",
  "reset_option", "@170", "slave_reset_options", "purge", "@171",
  "purge_options", "purge_option", "kill", "@172", "kill_type",
  "kill_option", "kill_expr", "shutdown", "use", "load", "@173", "@174",
  "@175", "@176", "data_or_xml", "opt_local", "load_data_lock",
  "opt_duplicate", "opt_field_term", "field_term_list", "field_term",
  "opt_line_term", "line_term_list", "line_term",
  "opt_xml_rows_identified_by", "opt_ignore_lines", "lines_or_rows",
  "opt_field_or_var_spec", "fields_or_vars", "field_or_var",
  "opt_load_data_set_spec", "load_data_set_list", "load_data_set_elem",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "temporal_literal", "insert_ident",
  "table_wild", "order_ident", "simple_ident", "simple_ident_nospvar",
  "simple_ident_q", "field_ident", "table_ident", "table_ident_opt_wild",
  "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys",
  "TEXT_STRING_literal", "TEXT_STRING_filesystem", "ident", "label_ident",
  "ident_or_text", "user_maybe_role", "user_or_role", "user", "keyword",
  "keyword_sp", "set", "@177", "start_option_value_list", "@178", "@179",
  "@180", "start_option_value_list_following_option_type", "@181",
  "option_value_list_continued", "option_value_list", "@182", "@183",
  "option_value", "@184", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "@185",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "@186", "handler", "@187", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "@188",
  "handler_rkey_mode", "revoke", "revoke_command", "admin_option_for_role",
  "grant", "grant_command", "opt_with_admin", "opt_with_admin_option",
  "role_list", "current_role", "grant_role", "opt_table",
  "grant_privileges", "opt_privileges", "object_privilege_list",
  "object_privilege", "@189", "@190", "@191", "@192", "opt_and",
  "require_list", "require_list_element", "grant_ident", "user_list",
  "grant_list", "user_and_role_list", "via_or_with", "using_or_as",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "@193", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "@194",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "@195",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "@196", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_algorithm", "view_suid",
  "view_tail", "@197", "view_list_opt", "view_list", "view_select", "@198",
  "view_select_aux", "view_check_option", "trigger_tail", "@199", "@200",
  "@201", "udf_tail", "sf_tail", "@202", "@203", "@204", "@205", "@206",
  "sp_tail", "@207", "@208", "@209", "@210", "xa", "xid", "begin_or_start",
  "opt_join_or_resume", "opt_one_phase", "opt_suspend", "@211",
  "opt_migrate", "install", "uninstall", "keep_gcc_happy", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   896,   897,   898,   899,   124,    38,    45,    43,    42,
      47,    37,    94,   126,    40,    41,    44,    33,   123,   125,
      59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   664,   665,   666,   665,   665,   667,   667,   668,   668,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   670,   671,   671,   672,   673,
     673,   675,   674,   676,   676,   677,   677,   678,   680,   679,
     682,   681,   683,   683,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,   684,   684,   684,
     684,   685,   685,   685,   686,   687,   687,   687,   687,   687,
     687,   687,   688,   688,   689,   691,   690,   692,   693,   690,
     694,   695,   690,   696,   697,   690,   698,   690,   699,   690,
     690,   690,   690,   690,   690,   700,   701,   701,   702,   702,
     702,   702,   702,   702,   702,   704,   703,   706,   705,   705,
     707,   707,   707,   707,   708,   708,   709,   709,   710,   710,
     711,   711,   712,   712,   714,   713,   715,   715,   715,   715,
     715,   715,   715,   715,   715,   715,   715,   715,   715,   716,
     717,   717,   718,   718,   719,   719,   720,   720,   720,   720,
     720,   720,   720,   721,   721,   721,   722,   722,   724,   723,
     725,   725,   726,   726,   727,   727,   728,   728,   729,   729,
     730,   731,   732,   732,   733,   733,   734,   735,   735,   735,
     735,   736,   736,   737,   737,   738,   738,   740,   739,   739,
     741,   739,   739,   743,   742,   744,   744,   745,   745,   746,
     747,   747,   748,   749,   749,   750,   750,   750,   750,   750,
     751,   752,   752,   753,   753,   754,   754,   755,   755,   756,
     756,   756,   757,   757,   757,   757,   757,   757,   757,   757,
     757,   757,   757,   757,   758,   759,   760,   760,   761,   761,
     762,   762,   763,   764,   764,   765,   765,   766,   767,   767,
     768,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   769,   770,   770,   771,   771,   772,   772,
     772,   772,   772,   772,   772,   772,   772,   772,   772,   772,
     772,   774,   773,   776,   775,   778,   777,   780,   779,   781,
     782,   783,   785,   784,   786,   787,   787,   787,   788,   788,
     790,   791,   792,   789,   793,   793,   793,   794,   794,   796,
     797,   795,   799,   798,   800,   800,   801,   801,   803,   804,
     802,   806,   807,   805,   808,   808,   810,   809,   811,   811,
     813,   812,   815,   814,   817,   816,   818,   819,   820,   818,
     821,   818,   822,   822,   823,   823,   823,   824,   825,   826,
     827,   827,   828,   828,   829,   830,   831,   831,   833,   832,
     834,   834,   834,   835,   835,   835,   836,   837,   837,   837,
     838,   838,   838,   838,   838,   838,   838,   838,   839,   840,
     840,   840,   841,   841,   841,   841,   841,   842,   843,   843,
     843,   844,   844,   844,   844,   844,   844,   844,   845,   846,
     846,   846,   847,   847,   847,   848,   849,   850,   851,   852,
     853,   853,   853,   854,   855,   856,   857,   858,   859,   860,
     861,   862,   863,   863,   864,   864,   865,   865,   867,   866,
     866,   868,   866,   866,   869,   869,   870,   871,   870,   872,
     870,   873,   874,   874,   876,   875,   877,   879,   878,   880,
     881,   882,   881,   881,   881,   881,   881,   883,   883,   884,
     884,   885,   885,   886,   886,   887,   888,   889,   890,   891,
     891,   892,   893,   892,   894,   892,   895,   895,   896,   897,
     898,   898,   899,   899,   900,   900,   902,   901,   903,   904,
     905,   904,   906,   904,   907,   907,   908,   908,   909,   909,
     911,   912,   910,   913,   913,   914,   914,   915,   915,   916,
     916,   918,   917,   919,   920,   920,   921,   921,   922,   922,
     922,   922,   922,   922,   922,   922,   922,   924,   925,   923,
     926,   926,   927,   927,   928,   928,   929,   929,   930,   930,
     931,   931,   932,   933,   933,   934,   934,   935,   935,   936,
     936,   937,   937,   937,   938,   938,   938,   938,   938,   938,
     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,
     938,   938,   938,   938,   939,   938,   938,   938,   938,   938,
     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,
     938,   940,   941,   942,   943,   944,   944,   944,   944,   944,
     944,   944,   945,   945,   945,   946,   946,   947,   947,   947,
     947,   948,   949,   949,   950,   950,   951,   951,   953,   952,
     954,   952,   955,   952,   956,   952,   952,   952,   957,   957,
     958,   959,   959,   960,   962,   961,   963,   963,   964,   964,
     965,   965,   965,   966,   966,   967,   967,   968,   968,   968,
     969,   970,   971,   971,   971,   971,   971,   971,   971,   971,
     971,   971,   971,   971,   971,   971,   971,   971,   971,   971,
     971,   971,   971,   971,   971,   971,   971,   971,   971,   971,
     971,   971,   971,   971,   971,   971,   971,   972,   971,   973,
     971,   971,   971,   974,   974,   974,   974,   974,   974,   974,
     974,   975,   976,   976,   977,   977,   978,   978,   978,   978,
     978,   979,   979,   979,   979,   979,   980,   980,   980,   981,
     981,   981,   982,   983,   983,   984,   984,   985,   985,   985,
     986,   986,   986,   986,   987,   987,   988,   988,   989,   989,
     990,   990,   991,   991,   991,   991,   991,   991,   991,   991,
     991,   991,   991,   991,   991,   991,   991,   992,   993,   993,
     994,   994,   995,   995,   996,   996,   997,   997,   998,   998,
     999,   999,  1000,  1000,  1001,  1002,  1002,  1003,  1003,  1004,
    1004,  1005,  1005,  1005,  1006,  1006,  1006,  1007,  1007,  1007,
    1007,  1007,  1007,  1007,  1008,  1008,  1010,  1009,  1011,  1011,
    1012,  1013,  1013,  1013,  1013,  1014,  1015,  1016,  1016,  1017,
    1018,  1018,  1019,  1019,  1020,  1020,  1021,  1022,  1022,  1023,
    1023,  1024,  1024,  1024,  1024,  1025,  1025,  1025,  1025,  1025,
    1026,  1026,  1026,  1026,  1026,  1027,  1028,  1028,  1029,  1029,
    1030,  1030,  1031,  1031,  1031,  1032,  1032,  1033,  1034,  1035,
    1036,  1036,  1037,  1037,  1038,  1038,  1039,  1039,  1040,  1040,
    1041,  1041,  1042,  1042,  1043,  1043,  1044,  1044,  1044,  1044,
    1044,  1044,  1045,  1045,  1046,  1047,  1047,  1048,  1048,  1048,
    1049,  1049,  1050,  1050,  1051,  1051,  1052,  1053,  1053,  1054,
    1054,  1056,  1057,  1055,  1058,  1055,  1055,  1059,  1055,  1060,
    1055,  1061,  1055,  1062,  1055,  1063,  1055,  1055,  1055,  1055,
    1055,  1055,  1064,  1064,  1064,  1064,  1065,  1065,  1066,  1066,
    1067,  1067,  1068,  1068,  1068,  1068,  1068,  1068,  1068,  1068,
    1068,  1068,  1069,  1068,  1068,  1070,  1068,  1071,  1068,  1068,
    1068,  1068,  1068,  1072,  1073,  1073,  1075,  1074,  1076,  1076,
    1076,  1078,  1077,  1079,  1080,  1079,  1081,  1081,  1082,  1083,
    1083,  1084,  1085,  1085,  1085,  1086,  1085,  1087,  1088,  1085,
    1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,
    1085,  1085,  1085,  1085,  1085,  1089,  1089,  1089,  1089,  1089,
    1090,  1090,  1091,  1091,  1092,  1092,  1093,  1093,  1095,  1094,
    1096,  1096,  1097,  1097,  1098,  1098,  1099,  1099,  1099,  1100,
    1100,  1100,  1101,  1101,  1101,  1101,  1103,  1102,  1104,  1102,
    1102,  1102,  1105,  1106,  1106,  1107,  1107,  1108,  1108,  1108,
    1110,  1109,  1111,  1111,  1112,  1112,  1112,  1113,  1113,  1113,
    1114,  1114,  1116,  1115,  1117,  1117,  1117,  1119,  1118,  1120,
    1120,  1121,  1121,  1122,  1122,  1122,  1124,  1123,  1125,  1125,
    1126,  1127,  1127,  1128,  1128,  1129,  1130,  1129,  1131,  1132,
    1131,  1133,  1133,  1133,  1134,  1134,  1134,  1135,  1135,  1136,
    1138,  1137,  1139,  1139,  1140,  1140,  1141,  1141,  1141,  1141,
    1141,  1141,  1143,  1142,  1144,  1144,  1144,  1146,  1145,  1145,
    1147,  1147,  1148,  1148,  1149,  1151,  1150,  1152,  1152,  1153,
    1153,  1154,  1155,  1156,  1156,  1158,  1157,  1159,  1159,  1160,
    1160,  1161,  1162,  1164,  1163,  1166,  1165,  1167,  1167,  1168,
    1168,  1169,  1170,  1170,  1171,  1171,  1172,  1172,  1174,  1173,
    1176,  1177,  1175,  1178,  1178,  1178,  1178,  1178,  1179,  1179,
    1180,  1180,  1181,  1181,  1182,  1182,  1182,  1183,  1183,  1183,
    1184,  1184,  1184,  1185,  1185,  1186,  1187,  1188,  1188,  1188,
    1188,  1188,  1189,  1189,  1189,  1190,  1190,  1190,  1191,  1191,
    1192,  1192,  1192,  1192,  1192,  1192,  1192,  1192,  1192,  1192,
    1192,  1193,  1193,  1193,  1193,  1193,  1193,  1194,  1194,  1194,
    1194,  1194,  1194,  1194,  1194,  1194,  1194,  1194,  1194,  1194,
    1194,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,
    1195,  1195,  1195,  1195,  1195,  1195,  1196,  1196,  1197,  1197,
    1198,  1198,  1199,  1199,  1200,  1200,  1200,  1200,  1200,  1200,
    1201,  1201,  1202,  1202,  1203,  1203,  1203,  1203,  1203,  1203,
    1203,  1203,  1203,  1203,  1203,  1204,  1205,  1205,  1206,  1206,
    1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,
    1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,
    1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,  1207,  1207,
    1207,  1207,  1207,  1207,  1207,  1207,  1207,  1207,  1207,  1207,
    1207,  1207,  1207,  1207,  1207,  1207,  1207,  1207,  1207,  1207,
    1207,  1207,  1207,  1207,  1207,  1207,  1208,  1208,  1208,  1208,
    1208,  1208,  1208,  1208,  1208,  1208,  1208,  1208,  1208,  1208,
    1208,  1208,  1208,  1208,  1208,  1208,  1208,  1208,  1208,  1208,
    1208,  1208,  1208,  1209,  1209,  1209,  1209,  1209,  1209,  1209,
    1209,  1209,  1209,  1209,  1209,  1209,  1209,  1209,  1209,  1209,
    1209,  1209,  1209,  1209,  1209,  1209,  1209,  1210,  1210,  1210,
    1210,  1210,  1210,  1210,  1210,  1212,  1211,  1211,  1213,  1213,
    1214,  1214,  1215,  1215,  1216,  1216,  1217,  1217,  1218,  1219,
    1219,  1219,  1219,  1219,  1219,  1219,  1220,  1221,  1219,  1219,
    1219,  1219,  1219,  1219,  1219,  1219,  1219,  1219,  1219,  1222,
    1219,  1224,  1223,  1225,  1225,  1225,  1226,  1226,  1227,  1227,
    1228,  1229,  1228,  1230,  1230,  1232,  1231,  1233,  1233,  1233,
    1233,  1233,  1233,  1233,  1233,  1233,  1233,  1233,  1233,  1234,
    1233,  1235,  1235,  1236,  1236,  1237,  1237,  1238,  1238,  1239,
    1239,  1240,  1240,  1241,  1241,  1242,  1242,  1243,  1244,  1244,
    1245,  1245,  1246,  1247,  1246,  1248,  1246,  1246,  1249,  1246,
    1250,  1246,  1246,  1251,  1246,  1252,  1246,  1246,  1253,  1253,
    1253,  1254,  1254,  1255,  1255,  1256,  1258,  1257,  1257,  1257,
    1259,  1260,  1261,  1259,  1262,  1264,  1265,  1263,  1267,  1266,
    1269,  1270,  1268,  1271,  1272,  1273,  1273,  1274,  1274,  1274,
    1274,  1275,  1275,  1277,  1276,  1278,  1276,  1279,  1279,  1280,
    1281,  1280,  1283,  1282,  1284,  1284,  1285,  1285,  1286,  1286,
    1287,  1287,  1288,  1288,  1288,  1288,  1288,  1288,  1288,  1288,
    1288,  1288,  1288,  1288,  1289,  1289,  1289,  1289,  1289,  1289,
    1289,  1289,  1289,  1290,  1290,  1290,  1290,  1291,  1291,  1291,
    1292,  1292,  1293,  1293,  1294,  1295,  1294,  1296,  1297,  1296,
    1298,  1298,  1299,  1299,  1300,  1300,  1301,  1301,  1301,  1302,
    1303,  1303,  1304,  1305,  1305,  1307,  1306,  1308,  1308,  1309,
    1309,  1309,  1310,  1310,  1311,  1311,  1312,  1312,  1312,  1312,
    1312,  1313,  1313,  1313,  1314,  1314,  1314,  1314,  1314,  1315,
    1316,  1317,  1317,  1317,  1317,  1318,  1318,  1318,  1319,  1319,
    1319,  1319,  1319,  1319,  1320,  1320,  1320,  1320,  1320,  1321,
    1321,  1321,  1321,  1321,  1322,  1322,  1322,  1322,  1322,  1323,
    1324,  1324,  1325,  1325,  1326,  1327,  1326,  1328,  1328,  1329,
    1329,  1330,  1332,  1331,  1333,  1333,  1334,  1334,  1336,  1335,
    1338,  1339,  1337,  1337,  1337,  1341,  1340,  1343,  1342,  1344,
    1342,  1342,  1342,  1342,  1342,  1342,  1342,  1345,  1342,  1342,
    1342,  1342,  1342,  1342,  1346,  1346,  1347,  1348,  1349,  1349,
    1350,  1351,  1351,  1352,  1352,  1354,  1355,  1353,  1357,  1358,
    1356,  1359,  1359,  1359,  1359,  1360,  1360,  1361,  1361,  1362,
    1363,  1363,  1363,  1364,  1363,  1365,  1365,  1366,  1366,  1367,
    1366,  1368,  1366,  1369,  1369,  1370,  1370,  1371,  1372,  1372,
    1373,  1373,  1375,  1374,  1376,  1376,  1377,  1377,  1378,  1378,
    1379,  1380,  1379,  1382,  1383,  1381,  1384,  1384,  1385,  1386,
    1386,  1387,  1388,  1388,  1390,  1389,  1392,  1393,  1391,  1394,
    1391,  1395,  1391,  1396,  1396,  1397,  1397,  1398,  1398,  1399,
    1399,  1400,  1400,  1401,  1401,  1401,  1403,  1402,  1404,  1404,
    1405,  1405,  1406,  1406,  1407,  1407,  1407,  1407,  1407,  1407,
    1407,  1407,  1407,  1408,  1408,  1410,  1409,  1411,  1411,  1411,
    1411,  1411,  1411,  1411,  1411,  1411,  1411,  1411,  1411,  1411,
    1411,  1412,  1411,  1413,  1411,  1411,  1411,  1411,  1411,  1411,
    1411,  1411,  1411,  1411,  1411,  1411,  1411,  1411,  1411,  1411,
    1411,  1411,  1411,  1411,  1411,  1411,  1411,  1411,  1411,  1411,
    1411,  1411,  1411,  1411,  1411,  1411,  1411,  1411,  1411,  1411,
    1411,  1411,  1411,  1414,  1414,  1414,  1415,  1415,  1416,  1416,
    1417,  1417,  1418,  1418,  1419,  1419,  1420,  1420,  1421,  1421,
    1422,  1422,  1422,  1424,  1423,  1425,  1423,  1426,  1426,  1426,
    1426,  1426,  1427,  1427,  1428,  1428,  1428,  1429,  1429,  1429,
    1431,  1430,  1433,  1432,  1432,  1434,  1434,  1435,  1436,  1435,
    1437,  1437,  1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,
    1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,
    1438,  1439,  1439,  1440,  1440,  1442,  1441,  1443,  1443,  1445,
    1444,  1444,  1444,  1446,  1446,  1448,  1447,  1449,  1450,  1450,
    1452,  1451,  1453,  1453,  1453,  1454,  1454,  1454,  1454,  1455,
    1455,  1456,  1457,  1459,  1460,  1461,  1462,  1458,  1463,  1463,
    1464,  1464,  1465,  1465,  1465,  1466,  1466,  1466,  1467,  1467,
    1468,  1468,  1469,  1469,  1469,  1469,  1470,  1470,  1471,  1471,
    1472,  1472,  1473,  1473,  1474,  1474,  1475,  1475,  1476,  1476,
    1476,  1477,  1477,  1478,  1478,  1479,  1479,  1480,  1480,  1481,
    1482,  1482,  1482,  1482,  1483,  1483,  1483,  1483,  1484,  1485,
    1485,  1485,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1487,  1487,  1487,  1487,  1487,  1488,  1488,
    1488,  1489,  1489,  1490,  1490,  1491,  1492,  1492,  1493,  1493,
    1494,  1494,  1494,  1495,  1495,  1495,  1495,  1496,  1496,  1496,
    1497,  1497,  1498,  1499,  1499,  1500,  1501,  1502,  1503,  1503,
    1504,  1504,  1505,  1505,  1505,  1506,  1506,  1506,  1507,  1507,
    1508,  1509,  1509,  1509,  1509,  1509,  1509,  1509,  1509,  1509,
    1509,  1509,  1509,  1509,  1509,  1509,  1509,  1509,  1509,  1509,
    1509,  1509,  1509,  1509,  1509,  1509,  1509,  1509,  1509,  1509,
    1509,  1509,  1509,  1509,  1509,  1509,  1509,  1509,  1509,  1509,
    1509,  1509,  1509,  1509,  1509,  1509,  1509,  1509,  1509,  1509,
    1509,  1509,  1509,  1509,  1509,  1509,  1509,  1509,  1509,  1509,
    1509,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,  1510,
    1510,  1512,  1511,  1514,  1513,  1515,  1513,  1516,  1513,  1518,
    1517,  1517,  1519,  1519,  1521,  1520,  1522,  1520,  1524,  1523,
    1523,  1525,  1525,  1525,  1526,  1526,  1526,  1526,  1527,  1527,
    1527,  1527,  1528,  1529,  1529,  1529,  1529,  1529,  1529,  1529,
    1529,  1529,  1530,  1530,  1530,  1531,  1531,  1531,  1531,  1532,
    1533,  1534,  1534,  1535,  1535,  1535,  1535,  1536,  1536,  1536,
    1537,  1537,  1537,  1537,  1537,  1539,  1538,  1540,  1540,  1541,
    1541,  1542,  1543,  1543,  1543,  1543,  1543,  1545,  1544,  1546,
    1546,  1547,  1546,  1548,  1548,  1549,  1549,  1550,  1550,  1550,
    1550,  1551,  1550,  1552,  1552,  1552,  1552,  1552,  1553,  1554,
    1554,  1554,  1554,  1554,  1554,  1555,  1555,  1556,  1557,  1557,
    1557,  1557,  1557,  1558,  1558,  1559,  1559,  1560,  1560,  1561,
    1562,  1562,  1563,  1563,  1564,  1564,  1565,  1565,  1566,  1566,
    1568,  1567,  1569,  1567,  1570,  1567,  1571,  1567,  1567,  1567,
    1567,  1567,  1567,  1567,  1567,  1567,  1567,  1567,  1567,  1567,
    1567,  1567,  1567,  1567,  1567,  1567,  1567,  1567,  1567,  1567,
    1567,  1567,  1567,  1567,  1572,  1572,  1573,  1573,  1574,  1574,
    1574,  1575,  1575,  1575,  1575,  1576,  1576,  1577,  1577,  1578,
    1578,  1579,  1579,  1580,  1580,  1581,  1581,  1581,  1581,  1581,
    1582,  1582,  1583,  1583,  1584,  1585,  1585,  1585,  1585,  1585,
    1586,  1586,  1587,  1587,  1588,  1588,  1589,  1589,  1589,  1589,
    1589,  1591,  1590,  1592,  1592,  1593,  1593,  1593,  1594,  1594,
    1594,  1595,  1595,  1596,  1597,  1597,  1598,  1599,  1600,  1600,
    1602,  1601,  1603,  1603,  1603,  1604,  1604,  1606,  1605,  1607,
    1607,  1608,  1608,  1608,  1609,  1609,  1610,  1611,  1610,  1612,
    1613,  1614,  1615,  1615,  1616,  1616,  1617,  1617,  1617,  1617,
    1617,  1617,  1617,  1617,  1618,  1618,  1618,  1619,  1619,  1619,
    1619,  1619,  1620,  1620,  1620,  1620,  1620,  1620,  1621,  1621,
    1622,  1623,  1624,  1624,  1624,  1625,  1625,  1625,  1627,  1626,
    1628,  1628,  1629,  1629,  1631,  1630,  1632,  1632,  1633,  1633,
    1633,  1633,  1635,  1636,  1637,  1634,  1638,  1638,  1640,  1641,
    1642,  1643,  1644,  1639,  1646,  1647,  1648,  1649,  1645,  1650,
    1650,  1650,  1650,  1650,  1650,  1651,  1651,  1651,  1652,  1652,
    1653,  1653,  1653,  1654,  1654,  1655,  1656,  1655,  1657,  1657,
    1658,  1658,  1659,  1659,  1660
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     4,     1,
       2,     0,     4,     0,     2,     3,     1,     2,     0,     3,
       0,     6,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       1,     0,     1,     3,     1,     3,     3,     3,     3,     3,
       3,     3,     0,     1,     1,     0,     7,     0,     0,    15,
       0,     0,    15,     0,     0,    15,     0,     6,     0,     3,
       4,     5,     4,     3,     2,    10,     1,     3,     2,     2,
       2,     2,     2,     2,     2,     0,    13,     0,     6,     2,
       0,     1,     3,     1,     0,     2,     0,     2,     0,     1,
       3,     4,     0,     2,     0,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,     1,     0,     2,     0,     2,     2,     2,     2,     2,
       3,     3,     1,     1,     1,     2,     3,     3,     0,     4,
       0,     3,     0,     1,     3,     1,     0,     1,     3,     1,
       0,     3,     0,     1,     3,     1,     4,     0,     1,     1,
       1,     0,     3,     2,     3,     0,     3,     0,     5,     5,
       0,     7,     5,     0,     2,     1,     1,     1,     3,     1,
       1,     1,     3,     0,     1,     1,     1,     1,     2,     1,
       3,     1,     1,     0,     1,     0,     2,     3,     5,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     4,     0,     1,     1,     3,
       1,     3,     3,     1,     2,     1,     1,     1,     1,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     0,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     5,     0,     2,     0,     3,     0,     2,     2,
       2,     2,     0,     6,     2,     0,     2,     1,     1,     3,
       0,     0,     0,     7,     0,     2,     2,     1,     1,     0,
       0,     8,     0,     6,     1,     2,     1,     2,     0,     0,
       6,     0,     0,     6,     0,     2,     0,     5,     0,     1,
       0,     5,     0,     2,     0,     5,     4,     0,     0,     8,
       0,     7,     1,     1,     1,     1,     1,     2,     4,     5,
       0,     4,     4,     4,     3,     3,     2,     2,     0,     2,
       1,     2,     3,     1,     1,     1,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     3,     1,     1,     1,     2,     2,     2,     1,     1,
       1,     1,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     4,     0,     1,     1,     1,     1,     1,     0,     7,
       3,     0,     5,     1,     2,     4,     0,     0,     5,     0,
       7,     1,     0,     1,     0,     4,     0,     0,     3,     5,
       6,     0,     4,     2,     2,     2,     2,     0,     1,     0,
       3,     0,     1,     1,     3,     1,     4,     5,     5,     0,
       2,     0,     0,     7,     0,    10,     1,     3,     1,     1,
       0,     2,     0,     3,     1,     3,     0,     6,     1,     0,
       0,     5,     0,     4,     1,     1,     1,     3,     1,     3,
       0,     0,     5,     1,     3,     1,     1,     0,     3,     1,
       3,     0,     4,     1,     0,     1,     2,     1,     3,     4,
       3,     3,     3,     3,     4,     4,     3,     0,     0,     6,
       0,     1,     0,     1,     1,     2,     1,     1,     0,     1,
       1,     2,     1,     0,     3,     1,     3,     0,     1,     1,
       2,     1,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     0,     6,     1,     1,     3,     4,
       4,     2,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     4,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     2,     2,     0,     8,
       0,     9,     0,     9,     0,     9,     8,     2,     0,     1,
       4,     0,     1,     2,     0,     3,     2,     8,     0,     2,
       0,     1,     1,     0,     1,     2,     1,     1,     2,     2,
       4,     3,     3,     3,     3,     1,     2,     1,     1,     3,
       2,     3,     2,     2,     1,     3,     3,     2,     3,     1,
       2,     2,     2,     1,     2,     1,     1,     1,     2,     3,
       2,     3,     2,     2,     3,     3,     3,     0,     6,     0,
       6,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     2,     1,     2,     3,
       2,     1,     1,     1,     1,     1,     1,     1,     2,     0,
       1,     1,     5,     0,     1,     2,     1,     1,     1,     1,
       3,     3,     3,     3,     0,     1,     0,     1,     0,     1,
       2,     1,     1,     2,     2,     4,     1,     3,     2,     1,
       2,     2,     2,     3,     3,     3,     3,     2,     2,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     0,     2,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     0,
       1,     1,     2,     2,     1,     2,     2,     0,     1,     1,
       1,     3,     1,     3,     0,     1,     0,     4,     1,     1,
       1,     0,     1,     2,     1,     1,     2,     1,     3,     3,
       1,     1,     0,     2,     0,     1,     5,     0,     3,     3,
       1,     0,     2,     2,     2,     0,     3,     3,     6,     6,
       1,     1,     2,     2,     2,     1,     2,     2,     1,     1,
       0,     1,     1,     1,     1,     0,     1,     1,     1,     0,
       1,     2,     0,     1,     0,     1,     0,     1,     1,     2,
       1,     2,     1,     2,     2,     2,     3,     2,     3,     3,
       3,     3,     1,     1,     1,     1,     3,     1,     1,     1,
       4,     2,     1,     4,     0,     1,     2,     0,     2,     1,
       3,     0,     0,     7,     0,     5,     7,     0,     5,     0,
       5,     0,     5,     0,     4,     0,    10,     3,     4,     3,
       3,     7,     0,     3,     1,     4,     0,     3,     0,     2,
       0,     1,     0,     2,     2,     2,     2,     1,     1,     1,
       4,     4,     0,     6,     4,     0,     5,     0,     6,     4,
       3,     1,     7,     2,     1,     1,     0,     6,     0,     3,
       2,     0,     5,     0,     0,     6,     1,     3,     1,     1,
       3,     3,     3,     2,     4,     0,     7,     0,     0,     8,
       5,     5,     3,     4,     2,     2,     6,     5,     3,     5,
       1,     1,     1,     1,     1,     0,     1,     1,     2,     2,
       3,     3,     3,     3,     0,     1,     0,     1,     0,     2,
       0,     1,     2,     1,     1,     1,     0,     1,     1,     0,
       2,     1,     0,     1,     1,     1,     0,     6,     0,     5,
       4,     4,     3,     0,     1,     1,     3,     3,     2,     2,
       0,     2,     1,     3,     0,     1,     1,     0,     2,     4,
       1,     3,     0,     5,     0,     1,     1,     0,     6,     0,
       1,     1,     2,     1,     1,     1,     0,     5,     1,     3,
       2,     0,     3,     1,     4,     1,     0,     4,     1,     0,
       4,     0,     1,     3,     0,     1,     3,     1,     1,     2,
       0,     5,     0,     1,     1,     2,     1,     1,     1,     1,
       1,     2,     0,     5,     0,     1,     1,     0,     4,     4,
       3,     5,     1,     3,     3,     0,     6,     1,     1,     1,
       3,     2,     3,     1,     1,     0,     6,     1,     1,     1,
       3,     3,     4,     0,     6,     0,     2,     0,     4,     0,
       2,     1,     2,     4,     2,     3,     2,     3,     0,     3,
       0,     0,     6,     2,     1,     1,     2,     2,     8,     4,
       0,     1,     2,     1,     1,     1,     1,     0,     2,     4,
       3,     1,     1,     3,     4,     0,     0,     0,     2,     2,
       1,     1,     0,     2,     3,     0,     2,     3,     0,     2,
       3,     3,     3,     2,     3,     4,     3,     4,     3,     4,
       1,     3,     4,     3,     3,     6,     1,     5,     6,     5,
       7,     6,     8,     5,     6,     4,     4,     5,     3,     4,
       1,     3,     3,     3,     3,     3,     3,     5,     5,     3,
       3,     3,     3,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     2,     1,     2,     1,     1,     1,     2,
       2,     1,     1,     2,     2,     4,     1,     3,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     3,     2,
       2,     2,     2,     3,     3,     5,     6,     4,     4,     7,
       2,     6,     5,     6,     6,     4,     4,     5,     4,     6,
       2,     2,     4,     4,     4,    10,     6,     8,     6,     4,
       4,     6,     4,     4,     4,     6,     4,     7,     7,     7,
       6,     6,     6,     6,     3,     4,     6,     8,     2,     2,
       8,     8,     6,     6,     2,     6,     6,     8,     8,     6,
       8,     6,     2,     8,     8,     2,     2,     2,     6,     6,
       4,     4,     8,     4,     4,     4,     4,     3,     8,     4,
       4,     6,     4,     4,     4,     6,     8,     4,     3,     6,
       4,     6,     5,     8,     7,    10,     1,     6,     4,     4,
       4,     4,     4,     6,     4,     0,     5,     6,     2,     3,
       0,     4,     0,     3,     0,     1,     1,     3,     4,     4,
       5,     4,     4,     4,     5,     4,     0,     0,     7,     4,
       5,     4,     5,     4,     4,     4,     4,     4,     5,     0,
       8,     0,     3,     3,     1,     4,     0,     1,     0,     2,
       0,     0,     4,     4,     2,     0,     3,     2,     3,     2,
       1,     1,     2,     1,     2,     1,     2,     2,     2,     0,
       3,     0,     1,     1,     3,     1,     3,     1,     3,     0,
       1,     0,     2,     4,     5,     1,     1,     1,     1,     4,
       1,     3,     3,     0,     6,     0,     8,     4,     0,     8,
       0,    10,     6,     0,     8,     0,    10,     6,     1,     2,
       1,     1,     2,     0,     1,     5,     0,     5,     3,     5,
       2,     0,     0,     7,     1,     0,     0,     6,     0,     3,
       0,     0,     5,     0,     1,     0,     1,     0,     2,     3,
       3,     1,     1,     0,     7,     0,     7,     1,     2,     0,
       0,     2,     0,     2,     0,     1,     1,     1,     1,     3,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     1,     1,
       0,     2,     0,     1,     0,     0,     3,     0,     0,     3,
       2,     0,     0,     4,     4,     2,     0,     1,     1,     3,
       3,     1,     2,     0,     1,     0,     4,     4,     2,     0,
       1,     1,     0,     1,     0,     1,     2,     5,     4,     5,
       4,     1,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     0,     2,     3,     4,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     0,     6,     0,     1,     3,
       1,     3,     0,     2,     3,     1,     2,     1,     0,     3,
       0,     0,     7,     2,     1,     0,     3,     0,     7,     0,
       7,     4,     6,     4,     4,     4,     4,     0,     6,     4,
       4,     5,     6,     4,     1,     3,     1,     2,     1,     3,
       1,     0,     2,     0,     1,     0,     0,     8,     0,     0,
       6,     0,     1,     1,     1,     1,     1,     2,     1,     1,
       1,     3,     4,     0,     3,     3,     1,     2,     2,     0,
       3,     0,     5,     3,     1,     3,     1,     3,     1,     1,
       0,     1,     0,     4,     0,     1,     3,     1,     1,     1,
       0,     0,     6,     0,     0,    11,     3,     1,     3,     3,
       1,     3,     0,     1,     0,     4,     0,     0,     9,     0,
       5,     0,     6,     0,     2,     1,     3,     2,     4,     0,
       2,     0,     2,     1,     1,     1,     0,     4,     0,     1,
       0,     1,     1,     3,     1,     1,     2,     2,     2,     1,
       1,     1,     1,     0,     3,     0,     3,     2,     4,     4,
       3,     4,     4,     1,     3,     3,     3,     3,     6,     2,
       2,     0,     6,     0,     7,     5,     2,     1,     1,     1,
       5,     5,     2,     2,     1,     4,     3,     2,     3,     2,
       2,     1,     3,     4,     3,     3,     2,     3,     2,     3,
       1,     1,     1,     1,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     1,     1,     1,     1,     1,     0,     1,
       0,     2,     0,     1,     1,     1,     0,     2,     0,     2,
       0,     2,     2,     0,     4,     0,     4,     1,     1,     1,
       1,     1,     1,     1,     0,     1,     1,     0,     1,     1,
       0,     4,     0,     4,     1,     0,     1,     4,     0,     3,
       3,     1,     2,     2,     2,     2,     2,     3,     2,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     0,     1,     0,     3,     0,     3,     3,     1,     0,
       4,     1,     2,     0,     1,     0,     3,     3,     2,     2,
       0,     5,     0,     1,     1,     0,     1,     1,     2,     1,
       2,     1,     2,     0,     0,     0,     0,    22,     1,     1,
       0,     1,     0,     1,     1,     0,     1,     1,     0,     2,
       2,     1,     3,     4,     3,     3,     0,     2,     2,     1,
       3,     3,     0,     4,     0,     3,     1,     1,     0,     3,
       2,     3,     1,     1,     2,     0,     2,     3,     1,     5,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     1,     1,     1,     1,     2,     2,
       2,     1,     1,     3,     5,     1,     1,     1,     1,     1,
       3,     4,     5,     1,     5,     3,     2,     1,     3,     2,
       2,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     3,     0,     3,     0,     3,     0,     3,     0,
       3,     2,     0,     2,     0,     2,     0,     4,     0,     3,
       1,     1,     1,     1,     0,     1,     1,     1,     0,     2,
       2,     2,     3,     3,     4,     6,     2,     3,     3,     2,
       3,     5,     1,     3,     3,     1,     1,     3,     3,     1,
       3,     2,     2,     2,     2,     2,     1,     1,     4,     4,
       1,     1,     1,     1,     1,     0,     4,     1,     1,     1,
       3,     3,     1,     1,     2,     2,     2,     0,     3,     4,
       3,     0,     7,     1,     2,     1,     1,     1,     1,     1,
       1,     0,     5,     1,     1,     1,     1,     1,     3,     6,
       6,     6,     7,     5,     3,     4,     1,     3,     8,     8,
       8,     6,     4,     0,     3,     0,     3,     1,     3,     2,
       1,     1,     0,     1,     1,     2,     0,     1,     1,     3,
       0,     3,     0,     3,     0,     3,     0,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     3,     2,     2,     2,     2,     2,     2,     2,
       2,     1,     1,     2,     0,     1,     3,     1,     2,     2,
       2,     1,     3,     3,     1,     1,     3,     1,     3,     1,
       3,     1,     1,     1,     1,     4,     5,     4,     6,     1,
       0,     3,     3,     1,     1,     0,     2,     2,     2,     2,
       0,     2,     0,     3,     2,     1,     2,     2,     2,     2,
       2,     0,     3,     0,     1,     0,     3,     2,     0,     1,
       2,     0,     1,     4,     4,     5,     2,     3,     0,     1,
       0,     4,     0,     1,     1,     0,     1,     0,     2,     2,
       1,     0,     1,     1,     2,     3,     2,     0,     6,     3,
       0,     0,     0,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     3,     3,     3,     3,     0,     3,     3,     0,     7,
       0,     3,     1,     3,     0,     3,     2,     4,     0,     3,
       4,     4,     0,     0,     0,    16,     8,     7,     0,     0,
       0,     0,     0,    15,     0,     0,     0,     0,    12,     4,
       4,     3,     4,     3,     2,     1,     3,     5,     1,     1,
       0,     1,     1,     0,     2,     0,     0,     3,     0,     2,
       5,     3,     3,     3,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   931,  1134,  2691,     0,     0,     0,     0,     0,     0,
    2693,   585,    66,  1794,  1922,  1923,  1705,  1733,     2,     0,
    1134,   276,   179,     0,    78,  1735,     0,  1980,     0,     0,
    1134,     0,   487,     0,  1975,     0,     0,  1134,  1738,  1965,
     253,   179,  2693,     0,  1180,  2481,  1835,  1991,     0,     0,
       0,  1818,     0,  2557,  1783,     0,     0,  2824,     0,     0,
       3,     8,    19,     0,    41,    24,    29,    14,    18,    13,
      54,    48,    26,    39,   128,    38,    10,    57,    58,    16,
      45,    11,    12,    15,    37,    44,    33,    40,    52,  1171,
      22,    23,    30,    46,    62,    20,    59,    55,    21,  1924,
      25,    47,    42,    34,    56,    63,    35,    53,    36,    61,
      28,    49,    27,     9,    17,    50,    51,    43,    64,    31,
      60,    32,     0,   960,     0,     0,     0,     0,     0,     0,
    1038,   943,  2758,  2759,  2760,  1136,  1135,     0,  2693,  2095,
    1119,  1145,  2171,  2173,  2172,  2174,  2175,  2176,  2177,  2178,
    2179,  2112,  2180,  2181,  2183,  2182,  2184,  2185,  2186,  2113,
    2114,  2187,  2188,  2189,  2191,  2190,  2192,  2115,  2116,  2193,
    2194,  2195,  2196,  2117,  2119,  2118,  2197,  2200,  2199,  2198,
    2120,  2201,  2202,  2203,  2205,  2121,  2122,  2123,  2124,  2125,
    2204,  2126,  2206,  2127,  2207,  2208,  2209,  2210,  2211,  2212,
    2213,  2215,  2214,  2128,  2216,  2217,  2219,  2220,  2221,  2218,
    2222,  2224,  2223,  2225,  2226,  2227,  2129,  2228,  2229,  2230,
    2231,  2232,  2233,  2234,  2235,  2130,  2236,  2237,  2238,  2257,
    2131,  2239,  2242,  2241,  2240,  2243,  2244,  2245,  2247,  2246,
    2248,  2249,  2132,  2133,  2250,  2251,  2252,  2253,  2255,  2254,
    2259,  2260,  2261,  2134,  2256,  2258,  2458,  2262,  2263,  2265,
    2264,  2266,  2135,  2268,  2267,  2136,  2270,  2269,  2137,  2138,
    2271,  2272,  2273,  2093,  2274,  2094,  2275,  2278,  2279,  2276,
    2280,  2285,  2139,  2277,  2281,  2282,  2283,  2284,  2286,  2140,
    2288,  2287,  2289,  2290,  2291,  2292,  2293,  2294,  2295,  2296,
    2297,  2310,  2301,  2302,  2304,  2305,  2308,  2303,  2309,  2313,
    2312,  2314,  2315,  2316,  2317,  2318,  2311,  2299,  2306,  2307,
    2300,  2319,  2320,  2298,  2321,  2322,  2323,  2324,  2325,  2326,
    2327,  2328,  2329,  2330,  2331,  2333,  2332,  2334,  2335,  2336,
    2337,  2338,  2339,  2341,  2340,  2342,  2343,  2344,  2346,  2345,
    2348,  2349,  2141,  2347,  2350,  2351,  2352,  2353,  2354,  2356,
    2355,  2142,  2144,  2143,  2145,  2357,  2358,  2146,  2359,  2361,
    2360,  2362,  2363,  2364,  2366,  2365,  2367,  2368,  2147,  2148,
    2369,  2370,  2371,  2372,  2373,  2374,  2375,  2376,  2377,  2378,
    2379,  2380,  2381,  2382,  2384,  2383,  2385,  2386,  2387,  2388,
    2389,  2390,  2391,  2149,  2392,  2150,  2393,  2394,  2151,  2395,
    2152,  2396,  2397,  2398,  2399,  2400,  2153,  2401,  2402,  2403,
    2405,  2406,  2404,  2407,  2154,  2408,  2409,  2410,  2155,  2412,
    2411,  2413,  2156,  2415,  2157,  2158,  2414,  2160,  2161,  2416,
    2417,  2418,  2159,  2419,  2162,  2420,  2421,  2423,  2422,  2424,
    2425,  2426,  2163,  2427,  2164,  2428,  2429,  2430,  2431,  2432,
    2434,  2433,  2435,  2436,  2437,  2438,  2441,  2443,  2440,  2442,
    2439,  2444,  2445,  2446,  2447,  2451,  2452,  2453,  2454,  2448,
    2449,  2450,  2165,  2455,  2456,  2457,  2459,  2460,  2462,  2461,
    2166,  2167,  2463,  2464,  2170,  2465,  2466,  2467,  2471,  2468,
    2480,  2469,  2470,  2473,  2472,  2474,  2475,  2476,  2168,  2477,
    2169,  2478,  2479,   198,  2098,   181,  2099,  2111,   112,  2548,
    2547,  1082,  1120,  2694,  2695,   583,   887,     0,     0,   179,
       0,   888,     0,   886,   179,   134,     0,     0,     0,  1811,
       0,  1731,  1731,  1731,  1731,     0,  1731,   179,  1731,     0,
    1734,  1731,   179,  1731,     0,    71,  1930,   277,     0,     0,
       0,     0,     0,  2092,     0,  1741,     0,     0,  1982,  1998,
       0,  1999,  1993,  2545,     0,  1205,     0,     0,     0,     0,
     179,  1137,     0,  1792,     0,   243,   252,   254,   255,   251,
       0,  2695,  2706,  1172,  1178,  1190,     0,  1902,   255,     0,
     112,  1063,     0,   112,  1819,  1816,     0,     0,     0,  1792,
    1992,  2808,     0,     0,     0,  2804,     0,  2809,     0,  1180,
       0,     0,     1,     5,     0,     0,   582,  2760,     0,   579,
     580,  2252,  2361,  1915,  1913,  2087,     0,   934,   961,     0,
     939,     0,   937,  2104,  2103,  2102,     0,   950,   949,   947,
       0,   448,     0,  1040,     0,  2765,   941,  1096,  2692,     0,
     200,     0,     0,   113,   114,     0,     0,     0,  2698,     0,
       0,     0,   586,     0,     0,   133,     0,     0,   583,   583,
     583,  1815,  1814,  1813,     0,  1811,  2172,  2112,  2186,     0,
    2060,     0,     0,     0,  1489,     0,  2117,     0,  2201,  2203,
    2121,  2122,  2123,  2124,  2125,  2128,     0,     0,  1218,  1218,
    1218,  1215,     0,     0,     0,  2226,  2227,  2066,     0,     0,
       0,  2056,  2067,  2265,  2266,     0,  2058,  2059,  2272,     0,
       0,     0,  2287,     0,  2292,  2064,     0,     0,  2328,  2330,
       0,     0,  2334,  2335,  2336,  2337,  2041,  1273,     0,  1215,
    2055,  2063,  2353,  2048,  2362,  2367,  2368,     0,  2377,     0,
       0,  2399,     0,  2406,  2404,  2410,     0,     0,  2431,     0,
       0,  1215,  2040,  2451,  2452,  2453,  2454,     0,  2057,  2165,
    2065,     0,  2465,  1218,  1215,  1215,     0,     0,     0,  2474,
    2475,  2479,     0,     0,     0,  2730,  1272,     0,  1451,     0,
    1483,  1230,  1236,  1250,     0,  1265,  1299,  1300,  1302,  1406,
    1301,  1307,  1306,  1706,  2052,  1305,  1304,  2053,  2054,  1298,
    2077,  2098,  2076,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1898,     0,     0,  1717,  1731,    73,     0,     0,
    2606,  2621,  2622,  1218,  2618,  2623,  2246,  2133,  2259,     0,
    2620,  2612,     0,  2372,  2376,  2616,  2391,  2394,  2610,     0,
    2157,  2435,  2642,  2614,  2619,  2600,  2587,  2601,     0,     0,
    2604,  2608,  2089,  1597,  2560,  2561,     0,    79,  1743,  1744,
    1742,  1036,     0,  2821,  1983,  1984,  1985,     0,  2002,     0,
    1132,     0,     0,   497,   488,     0,  1897,  1896,     0,  1976,
    2707,     0,     0,  1087,  1746,  1793,     0,  1745,  1971,     0,
    1969,  1966,  1968,   244,     0,     0,   274,  2173,  2606,  2376,
    2578,     0,  2586,     0,  2701,  2698,  2708,  2743,  2738,  2737,
    2740,  2741,  1196,  2742,  1195,  2739,  2736,  1205,  1191,  1193,
    1194,   803,     0,     0,  2501,  2502,  2341,  2362,  2400,  2503,
    2448,     0,     0,  2522,  2482,  2487,  2483,     0,     0,  1857,
       0,   803,  1880,  1910,  1858,     0,     0,  1910,     0,  1632,
    1900,  1903,     0,  2505,  1871,   884,   883,  1883,   882,  2506,
    1896,     0,  1843,  1859,     0,  1820,  1864,   112,  2507,     0,
    1899,  1882,     0,  1881,  1632,  1910,     0,  1836,     0,     0,
       0,     0,     0,   250,  1070,  1070,     0,     0,  1062,  1064,
    1065,  1070,  1070,     0,  2822,  2823,  2558,  1036,  2047,  2045,
    2046,  2096,  2805,  2044,  2813,  2815,  2801,  2803,  2810,  1174,
       0,  2712,     6,    65,   129,  1205,  1205,  2760,   583,   581,
       0,  1927,  2763,  2764,  2762,   819,     0,  1218,  2105,  2108,
    2761,  2109,   182,   948,     0,   449,   182,     0,     0,     0,
       0,     0,   450,   451,   387,     0,  1044,  1045,  1039,  1041,
    1043,   945,     0,     0,   944,  2765,     0,     0,  1147,  1149,
    1148,  1165,   202,   199,   180,    80,  1084,  1724,  1726,  1122,
    2697,     0,     0,  2699,  2703,  1271,  1270,     0,   126,   132,
       0,  2593,  2597,     0,     0,  2108,  2669,     0,   130,  2657,
       0,     0,     0,     0,  1795,  1799,  1805,  1809,  1812,     0,
       0,  1602,  1320,  1602,  1602,  1602,  1490,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1602,     0,  1358,  1330,  1331,     0,  1359,     0,     0,     0,
    2068,     0,     0,     0,  2730,     0,     0,     0,  1456,     0,
       0,     0,  2730,     0,     0,     0,     0,     0,     0,  1485,
    1487,  2076,  1602,     0,     0,  1602,     0,     0,     0,     0,
       0,  1223,  1364,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1602,  1602,     0,     0,
    1602,  1372,  2070,     0,     0,     0,  2069,     0,     0,     0,
    2062,   800,   801,  2042,  2061,     0,  1375,  1377,  1376,     0,
    1602,  1602,     0,     0,     0,  1310,  1309,  1311,     0,     0,
       0,     0,     0,     0,  1269,  1268,  1267,  1266,     0,     0,
       0,  1274,     0,  1275,  1276,     0,  1277,  1278,  1279,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1312,     0,
       0,     0,  2043,  1415,     0,  1732,  1711,  1719,  1713,     0,
    1898,  1714,  1716,  1723,   462,     0,  1720,  2110,  2655,  1715,
       0,  1707,     0,    72,     0,  1954,  1959,     0,     0,     0,
    1949,  1957,  1951,  1958,  1950,     0,     0,  1960,   112,     0,
    1952,  1956,  1955,  1931,  1934,  1941,  1932,     0,     0,   275,
     278,   280,     0,   283,  2607,  2605,  2639,  2638,  2643,     0,
    2640,  2636,  2599,  2629,  2670,  2633,     0,  2670,  2635,  2634,
    2670,  2630,  2637,  2670,     0,  2602,     0,  1598,  1599,     0,
    2559,     0,  2088,  1037,     0,     0,  1986,  1987,     0,  1155,
    2003,  2004,  2000,  1597,  2546,  2549,     0,   690,  1206,   498,
       0,     0,   509,     0,     0,    68,    69,     0,  1139,     0,
    1138,  1142,     0,     0,     0,  1749,  1739,  1748,  1523,  1972,
     112,     0,   242,   267,   262,   270,   264,   266,   265,   271,
     272,   273,   268,   263,   269,   256,     0,     0,  2605,     0,
       0,  2602,  2702,     0,  2704,  2721,  1179,  2709,  1202,  1181,
    1201,     0,  1192,   802,     0,   805,   807,  1768,  1769,   806,
     815,     0,   804,     0,     0,  2519,     0,  2508,     0,   811,
     813,   812,  2516,   810,     0,     0,  2492,     0,     0,  1906,
       0,     0,  1870,     0,   583,     0,     0,     0,     0,     0,
       0,  1837,     0,     0,   634,     0,  1863,  1633,  1904,  1905,
    1910,     0,     0,  1910,     0,  1876,  1900,  1910,     0,  1910,
    1832,     0,     0,  1824,  1829,  1825,     0,  1831,  1830,  1833,
    1821,  1822,     0,  1850,  1878,     0,  1900,  1862,  1869,     0,
    1849,  1856,     0,  1867,  1900,  1900,     0,  1910,  1910,  1058,
    1074,  1056,  1068,  1069,     0,     0,  1061,  1060,  1817,  1526,
       0,     0,  2802,  2816,  2800,  2811,  2812,  2799,  1175,  2713,
    1173,  2714,     0,     7,     4,  1205,  1205,  1205,  2757,     0,
    2745,  2752,  2753,  2756,  2755,  2754,  2751,     0,  2744,  2747,
    2748,  2750,  2749,  2765,     0,  1917,  1918,  1919,  1920,  1921,
    1916,  1914,  1928,  1929,   820,   819,   574,   577,   576,     0,
       0,  2107,     0,   940,     0,  1898,   938,     0,     0,  1898,
     398,  1898,   452,   932,  1042,   952,     0,     0,   942,  1097,
    1098,  1101,     0,     0,   486,  1165,  1151,  1167,     0,   203,
     205,     0,  1086,  1085,     0,  1083,  1130,  1129,  1127,     0,
    1128,  1126,  1121,  1123,  1124,  2696,  2700,   584,   819,  1898,
       0,     0,   131,     0,   390,     0,     0,   889,   889,   889,
    1801,  1728,  1523,  1730,  2087,     0,     0,     0,  1807,     0,
       0,  1603,  1602,     0,  1465,     0,     0,     0,     0,  1491,
       0,     0,     0,     0,     0,     0,     0,     0,  1296,     0,
       0,     0,     0,     0,  1436,     0,  1465,  1219,  1680,  1681,
    1665,  1666,  1664,  1667,  1216,     0,  1668,  1679,  1387,     0,
       0,     0,     0,     0,     0,  1573,  1574,  1575,  1576,  1584,
    1577,  1578,  1579,  1586,  1591,  1580,  1581,  1587,  1588,  1589,
    1582,  1590,  1585,  1583,  1592,     0,  1572,     0,  1595,  1593,
    1596,  1594,     0,  1457,  1449,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1602,     0,     0,
       0,  1602,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1398,
       0,     0,     0,     0,     0,  1602,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1354,     0,  2079,  2078,
       0,     0,     0,   852,     0,  1314,     0,  1313,  1535,     0,
    2715,  2731,     0,  2508,  1452,  1454,     0,  1221,  1220,  1222,
    1233,  1226,  1231,  1224,  1228,     0,  1280,  2179,  1234,     0,
       0,  1262,  2730,  1611,  1263,  1248,  1253,  1254,     0,  1251,
    1252,     0,  1256,     0,  1255,  1259,  1260,  1261,  1264,     0,
       0,     0,     0,  1303,  1308,  1484,  1205,  2080,     0,     0,
     462,   465,   464,  1721,   463,  1770,     0,  1046,     0,     0,
      74,    76,  1946,  1943,  1942,  1944,  1948,   112,  1953,  1945,
       0,  1961,  2226,  2451,  2454,   287,     0,   260,   259,   261,
     284,     0,     0,  2632,     0,  2613,     0,  2617,  2611,  2615,
    2595,     0,     0,  2603,     0,  2641,  2624,  2628,  2627,  2625,
       0,  2626,  2631,  2609,  1601,  2260,  2345,     0,  1604,  2563,
    1736,  2820,  1988,  2465,  1989,  1981,     0,  2001,     0,     0,
       0,  1133,   691,     0,  1205,   496,   495,   494,   493,     0,
     511,   491,   499,    70,     0,     0,  1977,     0,     0,     0,
       0,  1089,  1747,     0,     0,  1727,  1524,  1973,  1967,     0,
       0,     0,     0,     0,  2659,  2584,     0,     0,     0,  2705,
    2723,  2722,  2710,  1205,  1623,  1206,  1206,  2076,  2524,     0,
    2518,  2517,     0,     0,     0,  2537,  2520,     0,     0,  2486,
    2525,  2526,  2529,     0,     0,     0,     0,     0,  2523,  2448,
    2488,  2489,     0,  2494,  2484,  2543,  2544,  2541,  2542,  2540,
    2513,  1877,     0,  1908,  1911,  1912,     0,     0,  1891,  1885,
    1884,  1874,  1886,  1875,  1895,  1894,  1893,  1847,  1846,  1647,
    1648,  2403,  1646,  1636,  1641,  1645,  1644,  1840,  1901,  1890,
    1888,  1872,  1910,  1845,  1844,  1889,  1887,  1826,  1827,  1828,
       0,  1632,     0,  1906,  1879,  1910,  1900,     0,  1910,  1910,
    1892,  1866,  1868,  1059,  1076,  1075,  1071,  1072,  1077,  1067,
    1066,  1544,  1543,     0,  1498,     0,  1500,  1497,  1496,  1495,
       0,  1543,  2806,  2814,  2818,     0,  1632,  2720,  2718,     0,
       0,     0,   583,     0,     0,  2746,   115,   575,  1770,  1770,
       0,  2106,     0,     0,     0,     0,     0,     0,     0,   183,
     192,     0,     0,   396,   397,  1770,   395,   438,   439,   442,
     443,   444,     0,     0,     0,     0,     0,     0,     0,     0,
     136,   445,  1770,  1770,   392,   418,   419,   422,   423,   424,
     425,   426,   388,     0,   393,   819,     0,   954,   956,  2766,
    2767,  2768,     0,     0,  1100,  1154,  1146,  1153,  1150,  1165,
    1163,  1152,   879,   878,     0,  1166,   201,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    81,
      82,   100,  1725,  1131,  1125,   127,   819,  1770,  1770,  1770,
    1770,   394,   427,   428,   431,   432,   433,   434,   437,   435,
     436,     0,  2598,     0,     0,  1898,     0,  2661,  2662,     0,
    2658,   890,     0,     0,     0,     0,     0,  1796,     0,  2090,
    1806,  1526,  1810,  1809,     0,  1383,     0,  1429,     0,  1431,
    1432,  1433,     0,     0,     0,     0,     0,  1384,     0,  1328,
    1385,  1386,     0,  1380,     0,  1381,     0,     0,     0,     0,
       0,     0,     0,  1435,     0,  1217,     0,     0,  1332,  1333,
    1325,  1317,     0,  1408,     0,     0,  1334,     0,     0,     0,
       0,  1389,     0,  1409,  1486,     0,  1488,  2080,     0,  1441,
    1390,  1339,     0,  1439,     0,  1340,  1410,  1411,  1412,  1392,
    1393,     0,  1414,     0,  1394,     0,     0,  1397,     0,     0,
    1342,  1445,  1443,     0,     0,     0,     0,  1447,  1344,     0,
       0,     0,  1343,     0,     0,     0,     0,     0,     0,     0,
    1346,     0,  1326,  1444,  1446,  1400,     0,     0,     0,     0,
       0,  1355,     0,  2724,  1534,  2732,  1535,     0,     0,  2726,
    2716,  2721,  2729,  1318,     0,     0,  2081,  1227,  1232,  1225,
    1229,  2730,     0,     0,     0,     0,  1246,  1245,     0,     0,
       0,  2730,  1611,  1249,     0,     0,  1425,  1426,  1481,     0,
    1712,  1709,  1722,  1771,     0,  2656,  1048,  1047,  1718,  1046,
      77,     0,  1947,  1940,  1962,  1935,     0,   279,   288,   281,
     285,   286,   282,  2674,     0,  2673,     0,     0,  2592,  2651,
    2654,  2087,     0,     0,     0,  2573,  2567,  2574,  2576,  2570,
    2575,  2577,  2568,  2569,  2564,  2571,  1605,  1634,     0,  1990,
    1156,  1158,  1159,  1157,  1165,     0,     0,  2552,  2553,  2551,
    2550,   501,     0,   510,     0,   522,     0,     0,     0,  1979,
    1978,     0,  1140,  1143,  1144,  1094,  1093,  1095,  1088,  1090,
    1091,   567,  1753,     0,     0,     0,  1759,  1740,  1750,     0,
    1974,  1970,     0,   257,  2585,     0,     0,     0,     0,     0,
       0,     0,  1200,  1526,  1698,  1197,  1185,  1634,  1624,  1184,
    1207,  1203,     0,   818,   817,   816,   814,     0,     0,     0,
       0,  2531,  2532,     0,     0,  2509,  2510,  2511,     0,  2514,
    2491,  2492,     0,  2493,     0,  1907,     0,  1851,     0,  1873,
       0,     0,     0,     0,     0,  1842,     0,  1865,  1823,  1908,
    1841,  1604,  1900,  1838,  1839,  1074,     0,  1057,  1543,  1526,
       0,     0,  1518,  1545,     0,  1545,  1520,  1521,  1526,     0,
    1526,  1523,  1540,     0,     0,  2817,  1625,  2719,     0,  2794,
       0,     0,     0,   181,   587,     0,     0,   936,   186,   189,
     187,     0,   188,     0,     0,   447,   446,     0,  1898,   440,
     140,   139,   141,   142,  1662,  1663,  1659,  1660,  1658,  1661,
     144,   143,   138,   951,     0,     0,     0,  1898,   420,   399,
     400,   403,   404,   405,  1034,  1770,  1034,     0,  1770,  1770,
    1034,  1770,     0,     0,  1770,  1770,     0,     0,  1770,     0,
       0,  1034,     0,  1770,     0,  1021,     0,     0,  1770,  1770,
    1770,  1770,  1770,  1034,     0,     0,  1770,  1770,   486,  1770,
       0,     0,  1052,     0,     0,  1770,  1770,  1770,  1770,     0,
       0,  1770,  1770,     0,  1770,   968,  1020,   589,   616,   617,
     933,   967,   969,   981,   482,     0,   999,  1023,  1024,  1022,
       0,     0,     0,     0,   150,  2770,  1099,     0,     0,  1564,
     204,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1898,   429,  2594,
       0,     0,  1770,   389,   406,   407,   410,   411,   412,   413,
     414,   417,   415,   416,     0,  2665,  2667,     0,     0,   891,
       0,     0,     0,  1729,  1809,  1526,  1604,  2088,  1604,     0,
    1808,     0,     0,  1430,  1466,     0,  1492,     0,  1322,   774,
     774,   774,  1475,   759,  1479,  1470,   774,  1471,   774,  1473,
       0,     0,     0,  1282,  1297,     0,     0,     0,     0,     0,
    1437,  1434,     0,     0,     0,     0,  1460,     0,     0,     0,
    1327,     0,  1420,  1442,  1440,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1448,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   841,   847,   850,   851,   853,   845,     0,  1402,  1315,
    1205,  2733,  2735,  1176,     0,  2725,  2727,   927,  1453,     0,
    1243,  1239,     0,  1237,  1610,  1258,  1257,     0,     0,     0,
    1247,  1206,  1416,  1205,     0,  1482,  2082,  1710,   461,   633,
    1708,    75,  1938,     0,  1933,  1936,     0,     0,  2671,     0,
    2682,     0,     0,     0,     0,     0,     0,     0,     0,  2562,
    1635,  1780,     0,  1165,  1169,  2097,  1994,  2555,  2556,  2554,
       0,   502,   503,   505,  1206,   519,   497,     0,   489,   492,
       0,   501,     0,  1092,  1190,     0,  1772,  1757,  1764,  1758,
       0,     0,     0,  1756,  2072,  2071,  2078,  2708,     0,  1570,
       0,     0,  2583,  2660,     0,     0,     0,  2711,  1604,  1604,
    1692,     0,     0,  1182,  1187,  1183,  1186,     0,  1204,  1211,
    1210,  2073,  2080,  2521,     0,     0,     0,     0,  2536,  2530,
    2527,  2528,     0,  2490,  2512,  2496,  2495,  2498,  2500,  1672,
    1673,  1671,  1669,  1670,  1909,  1632,  1861,  1860,  1650,  1638,
    1649,  1640,     0,     0,  1643,  1642,  1834,  1853,  1855,  1910,
    1073,     0,  1080,  1078,     0,  2715,  1538,     0,  1522,  1519,
    1546,     0,  1545,  1545,  1526,     0,  1502,  1784,  1787,     0,
    1501,  1597,  1528,  1190,  2807,  2819,     0,     0,     0,   383,
     382,     0,   145,  2788,     0,     0,   671,   116,   473,   482,
     588,   591,   632,   631,   191,   190,   196,   197,  1676,  1677,
    1674,  1675,   453,   466,  1678,   467,   441,   137,   454,   455,
     421,     0,   401,  1035,   924,   583,  1003,     0,   672,   583,
     875,   880,   880,   583,     0,     0,  1134,     0,     0,  1731,
       0,     0,  1134,     0,     0,     0,  1770,     0,  1014,   963,
       0,  1731,     0,  1731,  1731,  1015,     0,     0,   964,  1770,
       0,     0,     0,     0,     0,  1731,  1134,     0,     0,     0,
     484,     0,  1134,   983,  1055,  1054,  1053,     0,  1134,  1134,
       0,     0,     0,     0,   622,   623,   621,     0,     0,     0,
     614,   590,   819,   965,   483,   966,   671,     0,  1049,   668,
     674,  2083,     0,     0,   160,     0,     0,   953,     0,   153,
     151,   162,     0,     0,  1103,     0,  1102,     0,  1567,     0,
    1568,  1565,  1566,   101,    88,    84,   105,   106,    86,    87,
      91,    90,    92,    93,    96,    97,    94,    89,    95,    85,
     109,   111,   110,    98,   107,   108,    83,   460,   459,   458,
     457,   430,     0,     0,     0,  1898,   408,  2666,  2664,  2663,
       0,   917,   919,   918,   905,   904,   117,   120,   123,     0,
    1604,  1623,  2091,  1800,     0,  1356,  1493,     0,     0,   775,
    1467,   827,  1477,     0,  1478,   761,   760,   776,  1469,  1472,
    1476,  1474,  1321,  1329,  1378,     0,  1295,  1379,     0,  1407,
    1324,  1323,     0,     0,     0,  1362,  1363,     0,  1458,     0,
       0,  1336,     0,  1338,     0,     0,  1422,  1391,  1413,  1365,
    1395,     0,  1341,  1316,     0,  1366,     0,  1371,  1369,     0,
    1345,     0,     0,  1352,     0,  1350,     0,  1351,     0,  1353,
    1399,  1401,     0,     0,   852,   838,   839,   840,     0,   842,
     844,   846,     0,     0,  1536,  2734,  1177,     0,     0,  1455,
    1235,     0,  1244,  1241,     0,  1238,  1207,  1427,  1417,     0,
       0,   296,   291,   299,   293,   295,   294,   300,   301,   302,
     303,   297,   292,   298,   290,   289,  2672,     0,  2591,  2596,
    2653,  2652,  2675,  2675,  2675,     0,  1606,     0,  1737,  1160,
    1165,  1169,     0,  1161,  2005,   506,     0,     0,     0,   526,
       0,   524,   500,     0,  1141,  1205,  1754,  1766,     0,  1774,
       0,     0,  1751,  1761,     0,     0,     0,  1760,   486,     0,
     258,     0,  2580,  2581,  2579,  1634,  1612,     0,     0,  1704,
       0,  1699,  1198,     0,  1209,  1208,     0,  2539,  2538,  2534,
    2533,  2535,  2515,     0,     0,  1852,  1637,  1639,  1632,  1848,
       0,     0,  2721,  1597,  1530,  1526,  1499,  1526,     0,     0,
    1507,  1526,  1503,  1505,     0,  1604,     0,  1562,  1205,  2075,
    1626,  1629,     0,  2795,   386,   384,   385,     0,     0,   206,
     649,   650,   648,   647,     0,   474,     0,     0,     0,   651,
     652,   654,   655,  2005,   481,   819,   592,   402,   673,   925,
    1134,     0,     0,     0,   880,   667,   583,   924,   889,   881,
     583,   583,  1001,  1030,  1031,     0,     0,   600,   597,     0,
     609,   984,   975,   985,   996,   998,     0,   599,   624,     0,
       0,   612,  1731,     0,  1012,     0,     0,   594,     0,     0,
     643,   644,   642,   618,   625,  1032,  1033,   595,   596,     0,
       0,  1619,  1621,  1629,   602,   601,  1683,  1682,   611,     0,
     598,     0,  1018,   991,     0,   640,   638,   635,   637,   636,
     641,   639,   613,   604,   603,   606,   605,   608,   607,   610,
     626,   980,     0,  1034,  1034,  1000,     0,  2086,     0,  1051,
    1002,     0,   656,   669,   657,     0,     0,   630,   629,   627,
     628,   161,   149,     0,     0,   955,   957,     0,     0,   958,
    2772,     0,  2774,  1105,  1106,     0,     0,  1168,     0,     0,
     102,   104,     0,   391,   456,   409,  2668,     0,     0,     0,
    1809,  1802,  1651,     0,  1494,     0,     0,     0,     0,   821,
     832,   830,   824,     0,   828,   829,  1468,     0,     0,   777,
    1480,   741,   774,  1292,   759,  1286,  1288,  1284,     0,   742,
    1287,   774,     0,   827,  1291,  1283,     0,  1438,     0,     0,
    1461,     0,     0,     0,     0,     0,     0,     0,  1319,     0,
    1418,     0,     0,     0,     0,     0,     0,  1349,  1347,  1348,
     836,  1404,     0,   849,   843,   841,   848,     0,  1634,  2715,
     928,  1240,     0,  1428,  1939,  1963,     0,     0,  2680,  2680,
    2680,  1779,  1778,     0,  1777,  1781,  1162,  1170,  2007,  2006,
       0,   504,   507,     0,   499,     0,   523,     0,   490,   568,
       0,     0,     0,  1775,  1763,  2712,  1752,  1755,  2080,  1525,
    1571,  2582,  1189,     0,  1607,  1703,  1700,     0,  1693,  1695,
    1697,     0,  2074,  2497,  2499,  1854,  1079,  1081,  1531,  1529,
    1539,     0,  1495,  1526,  1526,     0,  1495,     0,     0,  1786,
    1623,  1788,  1527,  1559,  1541,     0,  1630,  1631,  1628,     0,
     217,  1205,     0,     0,   207,   209,   210,     0,     0,   471,
     468,   671,   470,   570,   593,   986,     0,   583,   876,   877,
     889,   926,     0,   889,   889,     0,     0,   974,  1005,  1122,
       0,   979,   815,   619,     0,   970,  1013,  1046,     0,   620,
    1007,   972,     0,  1622,   485,   971,   993,   977,  1961,  1004,
    1050,   857,   755,   704,   695,   774,   698,   697,   774,   709,
     759,   757,   727,   759,   759,   734,   733,   751,   737,   717,
     827,   827,   716,   754,   827,   738,   736,   740,     0,   742,
     759,   747,   735,   739,   756,   732,   729,   753,   774,   774,
     774,   713,   752,   827,     0,   745,   774,   675,   778,   715,
     827,   834,     0,     0,   774,   776,  2085,   147,   152,   163,
     164,   946,  2771,     0,  2769,     0,  1111,     0,  1164,  1569,
      99,     0,     0,     0,     0,     0,     0,  1797,  1357,   772,
     770,   773,   771,   823,   822,   826,     0,   825,   834,     0,
       0,  1294,  1289,   743,  1293,  1285,  1290,  1382,  1360,  1361,
       0,  1459,  1450,  1388,     0,  1337,  1419,     0,     0,  1396,
    1367,  1370,  1368,  1373,  1374,     0,  1403,     0,  1197,  1197,
     645,  2728,  1242,     0,  1937,  2683,     0,     0,  2679,  2677,
       0,  2678,  2676,  2644,     0,  2589,  2590,  2588,  2572,     0,
       0,     0,  1205,   512,     0,   529,   528,   525,  1634,  1765,
    1767,  1773,  1762,     0,  1608,  1623,   808,  1696,     0,  1199,
       0,  1508,     0,  1512,  1517,  1513,     0,  1504,     0,  1651,
    1563,     0,  1634,  1629,     0,   220,   218,   219,     0,   213,
     215,   210,  2782,     0,  2789,     0,     0,  2787,   475,  2712,
     587,   653,   571,     0,   988,     0,     0,     0,     0,     0,
       0,  1017,     0,     0,   976,   997,  1019,  1011,  1010,     0,
       0,  1134,  1620,   992,   994,  1089,     0,     0,   861,   703,
     696,   714,   712,   763,   758,     0,   763,   763,   723,   741,
     718,     0,   827,   731,   722,   743,   746,   748,   750,   763,
       0,   827,   711,   710,   720,   707,   763,   786,     0,     0,
       0,     0,   782,     0,   855,     0,   789,     0,   676,   779,
     781,     0,     0,     0,   744,   827,   700,   835,   834,   702,
     827,   834,   763,   763,     0,   154,   959,   323,  2773,  1180,
       0,  2778,     0,  1112,  1108,  1109,  1104,   103,   135,     0,
    1629,   922,     0,     0,  2403,  1652,  1803,   833,   831,     0,
    1462,  1629,     0,  1421,  1423,   837,     0,  1537,   646,     0,
    2650,  2649,  2648,  2645,     0,     0,     0,     0,     0,     0,
    2681,  2685,  1776,     0,     0,     0,   520,     0,     0,   554,
     569,  1616,  1629,     0,  1634,     0,  1701,  1694,  1532,     0,
       0,     0,     0,     0,  1785,  1551,  1552,     0,     0,  1557,
    1561,  1542,  1627,  2786,  2796,   217,     0,     0,   158,     0,
     208,   815,   211,   472,   482,     0,   477,     0,     0,   987,
     670,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1016,  2049,  1049,   486,  1008,   973,     0,   978,   615,
       0,   860,     0,   865,   767,   768,   769,   724,   764,   766,
       0,   726,   694,   719,   749,   725,     0,   721,   708,   792,
     791,  1212,   784,   799,   679,     0,     0,   790,     0,   780,
     788,   783,     0,   699,   701,   705,   706,   692,   693,  2084,
       0,   156,   349,     0,   335,   321,     0,     0,     0,   325,
     165,   168,   166,     0,   167,   173,     0,   174,   175,   176,
     177,   178,   169,   347,   348,   172,   170,   171,     0,  2100,
       0,  2101,  2776,     0,     0,  2775,  1107,     0,  1114,   892,
       0,   921,     0,   894,   896,  1653,     0,  1205,  1798,   762,
       0,  1464,  1335,  1405,  1964,  2646,  2686,  2689,  2687,  2688,
    1655,     0,  2690,  2684,     0,  1523,  1206,     0,   513,     0,
     516,   518,   532,     0,  1770,  1770,     0,     0,  1770,  1770,
    1770,  1770,   547,   555,   557,     0,  1617,  1618,     0,  1613,
    1615,  1609,  1684,   809,  2008,  2715,  1509,     0,  1514,     0,
    1506,  1547,  1547,  1558,   184,   214,     0,     0,   150,   159,
    2790,   797,  2005,     0,  2708,   990,     0,     0,     0,   658,
       0,     0,  2051,  2050,  1006,   982,  1049,     0,   858,     0,
     862,   863,   864,     0,   856,   765,     0,   929,     0,     0,
     798,  1212,   787,  1205,   796,   795,   793,   794,   155,     0,
     148,     0,     0,   334,   337,     0,     0,   340,   330,   329,
     331,     0,   324,   323,   323,   377,   328,   374,   373,   366,
    2712,     0,     0,     0,  1113,  1118,     0,  1115,  1117,     0,
    1770,   118,   893,   913,   912,   898,     0,  1629,     0,     0,
     121,   895,   915,   902,   124,   897,   914,   900,  1654,  1804,
    1629,  1657,  1656,  1782,  1790,     0,  1995,     0,   521,   514,
       0,     0,   530,     0,     0,  1770,  1770,     0,     0,     0,
       0,     0,   527,   556,  1770,  1629,     0,  1188,     0,  2016,
    1533,     0,     0,     0,  1555,  1553,  2797,   216,  1205,   162,
       0,   469,   479,   478,   989,     0,   664,   892,   660,   662,
    1009,     0,   859,     0,     0,   827,     0,   827,  1213,     0,
     785,     0,   157,   350,   361,   364,   356,   336,     0,     0,
       0,   326,   323,     0,   310,   308,   309,   315,   316,   317,
     318,   319,   320,   311,   314,   312,   313,   323,     0,   225,
       0,     0,  2777,     0,  2779,     0,  1110,     0,   907,     0,
    1025,   899,     0,   920,   923,     0,  1025,   903,  1025,   901,
    1463,     0,     0,   808,   508,   520,   517,   540,   533,   536,
       0,   566,   560,     0,     0,   562,   563,   561,   558,   551,
       0,   549,     0,  1614,  1685,     0,     0,     0,     0,  2009,
    2011,     0,  1702,  1511,  1516,     0,  1548,     0,     0,     0,
     194,   193,   185,     0,   323,  2783,     0,  2791,  2712,   666,
     892,   659,   894,   896,     0,   871,     0,   870,     0,   867,
     866,   728,   930,   730,  1214,   680,     0,     0,   323,   357,
       0,   332,     0,     0,     0,     0,   223,   380,     0,   221,
     368,   368,  2780,  2781,  1116,   906,   119,  1027,  1026,   911,
     910,   908,   909,   916,   122,   125,  1789,  1791,  1996,   515,
     540,     0,   538,     0,   534,   531,   535,   564,   565,     0,
     548,     0,   559,     0,     0,     0,     0,     0,  2010,     0,
       0,  2017,  2019,  1550,  1549,  1564,     0,   195,  2798,     0,
     164,   184,   480,   665,   661,   663,   995,   873,   874,   872,
       0,     0,   682,   681,   683,   358,   364,   354,   362,   323,
       0,     0,   322,   341,   376,   224,     0,   378,     0,   323,
       0,   367,   369,   371,  1029,  1028,  2022,   537,     0,   545,
     541,   543,   546,   554,   553,   550,  1205,  2014,  2015,     0,
    2012,     0,     0,  2018,     0,     0,     0,   146,  2792,     0,
       0,     0,   687,   677,   684,   686,     0,   355,     0,     0,
     353,   333,   338,   323,     0,   323,   236,   235,     0,   227,
     304,   375,     0,   226,     0,  2008,   539,     0,     0,   552,
       0,     0,  1688,  1690,  2013,  2021,  2020,  1556,  1554,  2784,
     323,   869,   868,   689,   688,   685,   359,     0,   323,     0,
     323,     0,   323,     0,     0,     0,     0,     0,   222,     0,
    2016,   544,   542,  1206,  1686,  1205,   323,  2793,     0,   351,
     323,   339,   344,   381,     0,   230,   305,   306,     0,   233,
       0,  2024,  1691,  1689,  2785,   323,   323,   340,   343,   379,
       0,     0,   228,   229,   241,   240,   232,     0,  2023,     0,
    2028,   323,   323,   345,   249,   247,   323,   237,   245,   239,
       0,   246,   307,   234,     0,     0,  2035,     0,   231,   248,
    2026,  2027,  2025,  2030,     0,     0,  2032,  2033,     0,  1997,
     238,  2034,  2029,     0,  2036,  2038,     0,  2031,     0,  1205,
    2037,     0,  1206,  2039
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    59,   624,  1534,    60,    61,    62,    63,    64,  1375,
      65,   837,  1293,  1840,  1841,    66,   564,    67,  1601,  2159,
    2160,  3509,  3510,  2161,   662,   663,    68,  2534,  3517,  4450,
    3518,  4456,  3519,  4458,  1618,   627,   535,  2099,  2100,  1538,
    3368,  3087,  3995,  3091,  4151,  4300,  4258,  2117,  3499,  3996,
    3997,  4160,   559,  2532,  1573,  4386,  2079,  4502,  2080,    69,
     660,  1083,  1598,  1599,  3673,  3674,  3906,  3675,  3898,  3899,
    3900,  3901,  4619,  4422,  4539,  4620,  4705,  4740,  4746,  4747,
    4668,  4756,  4757,  4758,  4744,   914,  4759,    70,   587,   588,
     916,  1405,  1855,  1406,    71,    72,   558,  1319,  1320,  1321,
    1322,  2372,  1856,  2367,  2368,  3264,  4669,  4742,  4423,  4424,
    4307,  4425,  4163,  4426,  4311,  4427,  4166,  4428,  4429,  4430,
    4431,  4611,  4432,  4306,  4661,  4419,  4420,  4663,  4722,  4738,
    4433,  4173,  4301,  4526,  4174,  4302,  4606,  4415,  4607,  4656,
    4718,  4416,  4527,  4659,  4530,  4434,  4440,  4621,  4435,  4441,
    4436,  4178,  4318,  4439,  4316,  4438,  4665,  4616,  2971,  3367,
     647,   648,   675,  2185,   649,  1099,  1053,  1575,  2112,  2113,
    2569,  2570,  2683,  2684,  2685,  2104,  2105,  2106,  2171,  2172,
    2173,  2086,  2087,  2088,  1579,  2083,  2084,   650,  1054,  1064,
    2107,  2108,  2109,  2689,  2175,  2176,  2177,  2178,  2110,  1833,
    2111,  2992,  2977,  3910,  3909,  2978,  3682,  4264,  4508,  3383,
    3384,  3074,  3449,  2130,    73,   576,   894,  1372,  2416,  1373,
    2418,  2850,  2851,  2852,  1905,  1906,  3863,  1910,  2415,  4046,
    4465,  4219,  4220,  2854,  4218,  2858,  3290,  3291,  3615,  3865,
    4049,  4470,  4361,  4565,  4468,  4561,  4469,  4563,  4678,  4630,
    4631,  4372,  4480,  4481,  4569,  4633,  4232,  4233,  4234,  2436,
    2864,  3868,  3913,  2165,  1565,  1566,   628,   629,   630,  3397,
      74,  2979,  2626,  2980,  2981,  3472,  2628,  2629,  2818,  1463,
    3462,  3433,  3838,  3374,  3378,  3379,  3380,  3381,  3382,  4397,
    4512,  4513,  4510,  3482,  3395,  3007,  3008,  3079,  3485,  3767,
    3977,  4604,  4653,  4654,  4655,    75,   891,  4081,  3945,  3960,
    3769,  3770,  3771,  3772,  3773,  3774,  3775,  3164,  3165,  4117,
    4118,  4119,  3159,  3160,  3540,  3978,  3979,  3980,  4082,  4132,
    1214,  3533,  1429,  1430,  4056,  1441,  1442,  2464,  1950,  2465,
    1569,  3534,  3535,  3536,  3989,  3223,  3835,  3229,  3230,  3231,
    2781,  2782,  2783,  2784,  2785,  2310,  3981,  3484,  3938,  4110,
    4113,  4284,  4519,  3009,  3396,  3010,  3400,   996,   536,  3011,
    3012,  2191,  2192,  4331,  4340,  4344,  4332,  4345,  4341,  4333,
    4334,  4335,  4347,  4343,  3144,  4009,  4010,  3388,  3398,  3239,
    4286,    76,   130,  2115,  1045,  1056,  1052,  1075,   655,  1585,
    2118,  2644,  3781,   637,  2630,  3931,  3699,  3935,  2631,  3412,
    2632,  3914,  4089,  2633,  3716,  3933,  4107,  3413,  3414,  2634,
    2635,  2636,  3923,  3930,  4276,  4546,  4547,  4548,  3013,  1354,
     652,   653,  1068,  1069,  1070,  2358,  3480,  3057,    77,  2038,
    2033,    78,  1008,  1009,  1010,  1509,  1510,  2036,  2037,  2507,
    2943,    79,   665,  1605,    80,  1383,  2428,  2429,  2430,    81,
    1076,  1589,  1590,  2124,  3096,  3505,  3786,  4006,  4188,  4002,
    4326,  4327,    82,    83,   666,  1612,  1613,  1614,    84,  1366,
     137,    85,   902,  1378,  1380,  1381,    86,   659,  1077,  1078,
    1079,  1080,  2126,    87,  1896,  2400,  2401,  2402,  2403,  1595,
    2648,  1596,  1597,  2135,  3283,    88,    89,   621,  2318,   593,
     926,   594,   595,  1944,  2455,  3839,   937,   938,   939,  2893,
    1419,  1420,  1421,  1902,  2898,  4290,  1146,  1142,   800,   801,
     802,   803,  1239,  1240,  3982,   804,  1249,  1799,  3176,  3555,
    1658,  1659,   805,   806,   807,   808,   809,   810,  1826,  3195,
    3196,  3570,  2345,  2346,  2347,   811,  2232,  3182,  2245,   812,
    1232,  1784,  1714,  3562,  3188,  3820,  4020,  1643,  2208,  2730,
    3167,  2814,  2312,  1168,  1169,  1127,  2215,  1649,  2044,  2045,
    2046,  2047,  2048,  3657,  3658,  4059,  3882,  4061,  3886,  2517,
    2518,  1925,  1926,  2049,  2050,  2944,  3880,  4245,  2313,  2314,
    2315,  3588,  2945,  3345,  2962,  2963,  3892,  2508,  2051,  2951,
    4384,  4068,  4069,  4499,  4498,  4070,  3890,  3891,  3662,  3663,
    3099,  3100,  3101,  2878,  1705,  1706,  1712,  1349,  1350,  1644,
    2397,  2838,  3875,  4053,  2336,  3634,  4051,  4239,  2639,  3441,
    3442,  2457,  2458,  2966,  3360,  3668,  1466,  3840,  2840,  2003,
    2928,  2931,  2929,  3797,  4212,  4745,  2786,  2924,  2993,  1676,
    1677,  3448,  4377,  4573,  4681,  4682,  4683,  3319,  3320,  3638,
    3639,  2459,  2890,  3321,  3876,  4244,    90,   540,    91,  1838,
    2817,  1290,  2364,  1087,  1385,  1630,  1631,   824,   554,    92,
     565,  2398,    93,   583,  1923,   881,   906,  1386,  1387,  2437,
    2865,  2872,  2438,  2877,  3625,  2867,  3296,  3297,  2353,  2354,
    2868,  3299,  3622,  3603,  3604,  3278,  3860,    94,   609,  3355,
    2957,  2958,  4353,  4354,   907,    95,   539,  1114,  2706,  4016,
    1636,  2196,  4198,  1115,  1116,  2199,   684,   685,    96,  1013,
     605,  1489,  1490,  1491,  2021,    97,   597,   997,  2925,  3338,
    1997,   898,  1285,  1470,  1000,  1471,  1983,  2487,  1452,    98,
    1041,  1040,  1560,    99,   633,  1561,   100,   838,  1313,  1851,
    2824,  2825,  3249,  1314,  1315,  2365,  3844,   101,   584,   911,
     912,  1390,  2441,   102,   578,   899,  1916,   103,   568,   886,
    1358,  1895,   104,   105,   106,   888,  3284,  4463,  4626,   572,
    1898,  1362,  3683,  4379,  4489,  4490,  4492,  4581,  4582,  4675,
    4750,  4772,  4766,  4775,  4776,  4779,  4784,  4785,   814,  1022,
     815,  4101,   816,   817,   818,  2873,  2874,  3361,   819,  2875,
     820,  3080,  1088,  1633,   562,   514,   644,  1023,  2846,   822,
    4180,  1048,  1287,  1106,  1107,   516,   517,   107,   596,   954,
    1446,  1436,  1445,  1970,  2481,  1974,  2483,  2484,  3333,  2916,
    3334,  2917,  1002,  1966,  1971,  2918,   957,  1959,  1960,  1961,
    1962,  2909,  1956,  1980,   108,   889,   521,  1364,  1365,  2409,
     109,   608,   110,  1351,  1888,  1889,  2394,  2837,  2395,   111,
     920,   921,   112,   866,  1622,  2378,  1101,  1051,  1102,  1874,
     869,  1325,   870,   871,  1340,  1334,  1343,  1337,  4034,  3852,
    3853,  2382,  1289,  1108,  1935,  2189,  3140,  1109,  1865,  2374,
    2375,  3598,  3855,  3268,  4040,  4041,   113,   138,   524,   668,
    1094,  1413,   114,   115,   116,   117,  1416,  1529,  2451,  1530,
    2319,  1531,  1532,  2058,  1942,  1780,  1781,  3237,  1229,  1230,
    2322,  2790,  2791,   940,  1034,  1548,  1540,   131,   132,   133,
     134,  1073,  1074,  2645,  3093,  3501,  3784,  3785,  4001,  4185,
    1542,  4077,  4589,  4716,  1543,  1544,  3369,  4079,  4390,  4591,
    4690,  1545,  2968,  3670,  4254,  4504,   118,  1024,   618,  1527,
    1522,  1524,  2054,  2525,   119,   120,   121
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -4065
static const int yypact[] =
{
    5621,  2379,    89, -4065,  -185,   949, 57805,   922,  1387,  1387,
     612,  3440, -4065, -4065, -4065, -4065, -4065,  3764, -4065, 57805,
      89,  1148, -4065, 25972, -4065, -4065,   868, -4065,    92,  1387,
      89,   732, -4065, 57805, -4065,   864,  1249,    89, -4065, -4065,
   50809, -4065,   612, 57805, -4065, -4065, -4065, -4065, 50809,   249,
     344,   963,  1128, -4065, -4065, 57805,  2511, -4065,  -171,  1530,
    1391, -4065, -4065,  1221, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065,  1342, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, 26611,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065,  1464, 57805,  1517, 57805,  1540, 57805, 48901, 57805,
   -4065,  1541, -4065, -4065,  1673, -4065, -4065,  1387,   612, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065,  1068, -4065, -4065,  -185, -4065,
   -4065, -4065, -4065, -4065,  1722,  1592, -4065,  1633,  1397, -4065,
   48901, -4065, 57805, -4065, -4065, -4065,  1639,  1680,  1719,   913,
   12328,  1630,  1630,  1630,  1630,  1753,  1630, -4065,  1630, 57805,
   -4065,  1630, -4065,  1630,  1387, -4065, -4065, -4065,  1836, 36817,
   57805,  1491,   199,  -110, 48901,  1329, 57805,  -185,    50, -4065,
    1730, -4065, -4065, -4065,  1387, -4065,  1943,  1789,   236, 57805,
   -4065, -4065,  1387,  1278,   -13,  1392, -4065, -4065,  1546, -4065,
   37453,   187, -4065, -4065, -4065,  2453, 28528,  4966,  1546,  1498,
    -185,   667,  1504,  -185, -4065, -4065, 57805,  -185,  1387,  1723,
   -4065, -4065,   253,   253,   253, -4065,   253, -4065,   253, -4065,
    -171,  1369, -4065, -4065,  1396, 57805, -4065,   322,  1485, -4065,
    1474,  2000,  2333, -4065, -4065,  1420,   -48, -4065,  1489, 41269,
   -4065, 57805, -4065, -4065, -4065, -4065,  1702, -4065, -4065, -4065,
    2564, -4065,  1537,   992, 57805,  1580, -4065, -4065, -4065, 25972,
    1447, 57805,  1536, -4065, -4065, 25972, 25972,   205,   761,  1634,
   57805, 57805, -4065, 45721,  1919, -4065,  2117, 41269,  1592,  1592,
    1592, -4065, -4065, -4065, 51445,   913,  1472,  1486,  1492, 17592,
   -4065,  1494,  1500,  1513, 12328,  1524,  1551,  1557,  1571,  1577,
    1579,  1589,  1593,  1600,  1604,  1606,  1617,  1640,  1643,  1643,
    1643,  1649,  1651,  1655,  1667,  -221,  1672, -4065,  1674,  1676,
    1683, -4065, -4065,  1686,  1690,  1692, -4065, -4065,  1709,  1739,
    1742, 12986,  1746,  1755,  1768, -4065, 22765,  1777,  1792,  1797,
    1811,  1813,  1817,  1820,  1825,  1827, -4065, -4065, 12328,  1649,
   -4065, -4065,  1851, -4065,  1856,  1867,  1870,  1874,  1883,  1889,
    1892,  1920,  1922,  1924,  1936,  1949,  1958,  1963,  1974,  1980,
    1982,  1649, -4065,  1223,  1995,  1997,  1234,  2006, -4065,  2011,
   -4065,   286,  2019,  1643,  1649,  1649,  2021,  2030,  2036,  2038,
    2050,  2057, 17592, 17592, 17592, 12328, -4065, 57805, -4065, 57805,
    2202,  3558, -4065,  3020, 17592,  1021, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065,  1534,  1861, -4065, -4065, -4065, -4065, -4065,
   -4065,  2065,  1532,  2376, 57805, 57805, 57805, 57805, 57805, 57805,
   45721, 48901,  1904, 57805, 46357, -4065,  1630,  1882,  3615, 31718,
    2214,  2195,  1761,  1643, -4065, -4065,   -97,   645,   668,  2302,
   -4065, -4065,  2153,   725,  2311, -4065,   787,   411, -4065,    76,
     828,   833, -4065, -4065, -4065, -4065, -4065, -4065,  2149,  2353,
    2079, -4065, -4065,   140, -4065, -4065, 57805, -4065, -4065, -4065,
   -4065,  2521,  2249, -4065, -4065, -4065,   196,  2708,   203, 25972,
   -4065,  2127, 12328,  1493, -4065,  1027, -4065, -4065,  2498, -4065,
   -4065, 46357, 25972, -4065, -4065, -4065, 23406, -4065, -4065,  2744,
   -4065,  2141, -4065, -4065,  1861,  3717, -4065,  2406,  2214,  2425,
   -4065,  2609, -4065,  2437,  2340,   761,  2253, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065,  2175,  2453, -4065,
   -4065,   194,  2338,  2205,   218,   237, 40633,   854, 48901,   346,
      41, 29166, 41905,  2210, -4065, -4065, -4065,    94,  2349, -4065,
    2685, -4065, -4065,   690, -4065,  2208,  2280,   690, 46993,  2600,
    1304, -4065,   302, -4065,  2684, -4065, -4065, -4065, -4065, -4065,
    2364,  2334,  2392, -4065,   370,  1253, -4065,  -185, -4065,    45,
   -4065, -4065,  2385, -4065,  2600,   690,  1304, -4065,  2634,  2785,
     166,  2755,  -179, -4065, -4065, -4065,   -94,  2864, -4065,  2310,
   -4065, -4065, -4065, 25972, -4065, -4065, -4065,  2521, -4065, -4065,
   -4065, -4065,  2312, -4065,  2610,  2446, -4065, -4065,    33, -4065,
    2348,   -18,  2852, -4065, -4065,   329,  -124,  1673,  1592, -4065,
    2415, 42541, -4065, -4065, -4065,  2884,  2902,  1643,  2371, -4065,
   -4065, -4065, -4065, -4065,  3029, -4065, -4065,  2383,  2922,  2922,
    2922,  3049, -4065, -4065, -4065, 25972, -4065, -4065, -4065,   992,
   -4065, -4065,  2572,  2442, -4065,  1580, 25972,  2815,  2417, -4065,
   -4065,  2678, 12328, -4065, -4065, -4065,    43, -4065, -4065,   179,
   -4065,  3023,  2637, -4065, -4065, -4065, -4065,  2907, -4065, -4065,
    3029,  -265, -4065,  2971,  2922,  2861, -4065,  2866,  2440, -4065,
   57805, 57805, 57805, 25972, -4065,  2447, -4065,  2450, -4065, 12328,
   12328,   315,  3035,  3096,  3096,  3096,  2202,  2485, 12328, 12328,
   12328, 12328, 12328, 12328, 12328, 12328, 12328, 12328, 12328, 12328,
     319,  2459, -4065, -4065, -4065,  1131, -4065,  2462, 12328, 12328,
   -4065, 12328, 12328, 27250, -4065,  3679, 12328,  1119,  2973, 12328,
   12328, 12328, 12328,  3250, 12328, 12328, 12328, 27250,  3110,  2465,
   -4065,  2461,  1482, 12328, 12328,  1522, 12328, 12328, 12328, 12328,
   12328, -4065, -4065, 12328, 12328, 12328, 12328, 17592, 12328, 12328,
   12328, 12328, 12328, 12328,  2470, 12328,  3096,  3096, 12328, 12328,
    1555, -4065, -4065, 12328,  2100,  2100, -4065, 12328,  9038, 12328,
   -4065, -4065, -4065, -4065, -4065,  2471, -4065, -4065, -4065, 27250,
    3096,  3096, 12328, 12328, 12328,  3035,  3035,  3035,   202,  2473,
    1012, 12328, 29804,  2467, -4065, -4065, -4065, -4065, 12328, 12328,
   12328, -4065, 17592, -4065, -4065,  1837, -4065, -4065, -4065, 13644,
   17592, 17592,  2476, 17592, 17592, 17592, 17592, 17592,  2858, 17592,
   17592, 18250, 18908, 17592, 17592, 17592, 17592,  1033,  3035, 48901,
   17592, 12328, -4065, -4065, 57805, -4065, -4065, -4065,  2474,  2763,
    1904, -4065,  2481, -4065,   647,  2977, -4065, -4065, -4065,  2490,
   25972, -4065,  2489, -4065,  2865, -4065, -4065,  2870,  2871,  2875,
   -4065, -4065, -4065, -4065, -4065,  3106,  2880, -4065,  -185,  2883,
   -4065, -4065, -4065, -4065,  2506, -4065, -4065, 19566, 48901, -4065,
    2516, -4065,  3008, -4065, -4065, -4065, -4065, -4065, -4065,  2621,
   -4065, -4065, -4065, -4065,  2522, -4065, 46357,  2522, -4065, -4065,
    2522, -4065, -4065,  2522, 41269,   830,  3737, -4065, -4065, 57805,
   -4065, 58441, -4065, -4065, 23406,  -185, -4065,  2947, 14302, -4065,
   -4065, -4065,  2898,   231,  2528, -4065, 25972, -4065,  2202, -4065,
      97,    97,  2776,  1428, 48901, -4065, -4065,   142,  2529,  2616,
    2536, -4065,  2618, 25972, 25972, -4065, -4065, -4065,  2793, -4065,
    -185,   -13, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065,  2544,  3037,  3004,  2549, 46357,
   41269,   942, -4065, 57805, -4065,  1575, -4065, -4065, -4065,  2550,
   -4065, 12328, -4065, -4065, 57805, -4065, -4065, -4065, -4065, -4065,
    3135, 12328, -4065, 46357,   -82, -4065,  1142,    65,    94, -4065,
   -4065, -4065, -4065, -4065, 57805, 52081,  2553,  9696,  2675,  2962,
    -185, 12328, -4065,  2568,  1592, 57805, 57805, 57805, 25972, 57805,
   25972, -4065,   929,   929, -4065, 43177, -4065, -4065, -4065, -4065,
     690, 57805, 57805,   690, 41269, -4065,  1304,   691, 57805,   690,
   -4065,  2966,  2671, -4065, -4065, -4065,  3038, -4065, -4065,  3033,
    2575, -4065,  3062, -4065, -4065,  2702,  1304, -4065, -4065, 25972,
   -4065, -4065,  1304, -4065,  1304,  1304, 12328,   690,   690, -4065,
    -101, -4065, -4065, -4065,  2729,   667, -4065, -4065, -4065,   997,
     253,  2841, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065,    64, -4065, -4065, -4065, -4065, -4065, -4065,  1581,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065,  1582, -4065, -4065,
   -4065, -4065, -4065,  1580, 25972, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065,   111, -4065, -4065, -4065,  2188,
    3103, -4065, 48901,  2857,   998,   866,  2857,  1999,  -185,  1154,
   -4065,  1154, -4065, -4065, -4065,  2873,   193, 25972, -4065,  2595,
   -4065,  2848, 52717, 25972, -4065, -4065, -4065,  1658,  2599,  2603,
    2202,  4208, -4065, -4065, 25972, -4065, -4065, -4065, -4065,  2653,
   -4065, -4065, -4065, -4065,  1499, -4065, -4065, -4065,   124,  2483,
    3254, 45721, -4065,  2627,  2655,   138, 41269, -4065, -4065, -4065,
    2613, -4065,  2793, -4065,  1123, 57805,  3066, 34266, -4065,   406,
    1194, -4065,  3096,  2615, -4065,  2617,  2619,  2620, 12328,   260,
     350,  1345,  1299,  1417,  1357,   410,  1375,   423, -4065,  1501,
     487,   493,   533,   176, -4065,  2628,  2635, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065,  2630, -4065, -4065, -4065,   666,
     675,  1383,  1406,  2636,  2638, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065,  3077, -4065,  1516, -4065, -4065,
   -4065, -4065,  2633, -4065, -4065,  1413,   729,   851,   235,  2644,
    1607,   875,  1625,  1656,  2654, 27250, 57805,  3096,  2651,  1423,
    1439,  3096,  2657,   953,  1470,  1664,  1677,  1701,  1495,  1509,
     978,  1713,  2760,  1515,   987,  1001,  1521,  1039,  1069, -4065,
    1558,  2661,  2666,  1157,   296,  3096,  2667,   318,  2668,  2669,
    1590, 10354, 11012, 11670,   961,  1161, -4065,  2676, -4065,  2461,
    2679,  2683,   336,   206,  1615, -4065, 12328, -4065, -4065,  1020,
     849,  2711,   149,    65, -4065,  2814, 57805,  2361,   198, -4065,
   -4065, -4065, -4065, -4065, -4065,   831, -4065,  2672, -4065,  2686,
    2265,  2689, 12328,  1022,  2689,  2839,  2128,  2128, 17592,  2874,
    2954, 12986,   639, 12986,   639,  2689,  2689,  2689, -4065, 17592,
    2690, 17592, 17592, -4065,  3035,  2202,  2688,  -277, 57805, 25972,
     647, -4065, -4065, -4065, -4065,    94, 46357,   148, 25972, 48901,
    2691, -4065, -4065, -4065, -4065, -4065, -4065,  -185, -4065, -4065,
    3774, 25972,  2781,  2786,  2788, -4065, 32356, -4065, -4065, -4065,
   -4065, 32356,   -34, -4065, 57805, -4065,  2774, -4065, -4065, -4065,
    -241, 24045, 24045, -4065, 24045, -4065, -4065, -4065, -4065, -4065,
     411, -4065, -4065, -4065, -4065,   242,   297,  3566,  2724, -4065,
   -4065, -4065, -4065, 33630,  2202, -4065, 25972, -4065,  3114,   -39,
   25972,  2705, -4065,  2714, -4065, -4065, -4065, -4065, -4065,   116,
    2816, -4065,  3375, -4065, 12328,  -185, -4065, 46357, 46357, 25972,
   25972,   432, -4065,  1279,  2735, -4065, -4065,  3377, -4065,  3717,
   19566, 45721,  3182,  3199, -4065,  2743, 24045, 24045, 24045, -4065,
   -4065, -4065, -4065, -4065,  1212,  2202, -4065,  2740, -4065, 47629,
   -4065,  2202,    94,  2750,  2767, -4065, -4065,  3140,   718, -4065,
    2769,  2772, -4065,  2768,  2770,  2773, 53353, 12328, -4065,  1142,
   -4065, -4065,    94, -4065, -4065, -4065, 17592,  1674, -4065,  2202,
   -4065, -4065,  -185,  3232, -4065,  2202,  2789, 57805, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065,  1341, -4065,  2972,   -99, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065,   690, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
    3013,  2600,  1253,  2962, -4065,   690,  1304, 25972,   690,   690,
    2202, -4065, -4065, -4065, -4065, -4065,  2794, -4065,  2840, -4065,
   -4065, -4065, -4065, 57805,  2889,  2955, -4065,  2797, -4065, -4065,
   25972, -4065,  2798, -4065,  3260,  3410,  2600, -4065, -4065,  3258,
   57805, 57805,  1592, 57805, 57805, -4065, -4065, -4065,    94,    94,
    3113, -4065,  -185,  2936,  2942,  2945,  2957,  2967,  2988, -4065,
   -4065,  -185,  -185, -4065, -4065,    94, -4065,   733, -4065, -4065,
   -4065, -4065,  -185,  -185,  -185,  -185,  1477,  -185,  -185,  1729,
   -4065, -4065,    94,    94, -4065,   592, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065,  1111, -4065,  4096,   443, -4065,  3031, -4065,
   -4065, -4065, 25972,  3297, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065,  2842, -4065, -4065, 12328,  3331,  3332,
    3333,  3334,  3335,  3337,  3340,  3342,  3345,  3346,  3347,  3348,
    3353,  3363,  3365,  3366,  3368,  3369,  3370,  3371,  3372,  2885,
   -4065, -4065, -4065, -4065, -4065, -4065,   184,    94,    94,    94,
      94, -4065,  2541, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, 41269, -4065, 48901,  3255,  2276,  1178, -4065, -4065, 48901,
   -4065,  1073,  3170,  3177,  3180, 57805,  2943, -4065, 34266, -4065,
   -4065,   997, -4065,  2896, 14960, -4065,  2905, -4065, 12328, -4065,
   -4065, -4065,  1319, 12328, 12328,  3401,  2677, -4065, 48265, -4065,
   -4065, -4065, 12328, -4065, 12328, -4065, 12328, 12328, 12328, 12328,
   48265,  2677, 12328, -4065,  2908, -4065,  3315,  3319, -4065, -4065,
   -4065, -4065, 12328, -4065, 12328, 12328, -4065, 12328, 12328, 12328,
   12328, -4065, 12328, -4065, -4065, 17592, -4065,  2911,  2912, -4065,
   -4065, -4065,  2915, -4065, 12328, -4065, -4065, -4065, -4065, -4065,
   -4065, 12328, -4065, 12328, -4065, 12328, 12328, -4065, 12328, 12328,
   -4065, -4065, -4065, 15618, 12328, 12328,  2920, -4065, -4065, 12328,
   12328, 12328, -4065, 12328,  1619, 12328,  1898, 12328,  2200, 12328,
   -4065, 12328, -4065, -4065, -4065, -4065, 12328,   359,   116,  1477,
    2925, -4065,  1733, -4065, -4065,  2090, -4065,  1020,  2926, -4065,
   -4065,  1575, -4065, -4065, 48901, 12328, -4065, -4065, -4065, -4065,
   -4065, -4065, 17592,   369,  2934, 17592, -4065,  2839,  3250,  3250,
    2313, 12328,  1022,  2839, 12328,  2935,  2937, -4065, 12328, 57805,
   -4065, -4065, -4065, -4065, 48901, -4065, -4065, -4065, -4065,   148,
   -4065,  2489, -4065, -4065,  2705,    57,  3425,  2938, -4065, -4065,
   -4065, -4065, -4065, -4065,  1759, -4065, 41269,  3585, -4065,  2946,
   -4065,  2948,  3021,  3022,  3024, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065,  2600,  1279, -4065,
   -4065,  2951, -4065, -4065,  2678,  3047,  2976,  3336,  3528, -4065,
   -4065, 57805, 17592, -4065,  3569,  2978,  2979,  3455,  2980,  2202,
   -4065,  3048, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
     841, -4065, -4065,  2981,  2981, 21485, -4065, -4065, -4065, 57805,
   -4065, -4065,  3460, -4065, -4065,  3243, 46357, 41269,  3431,  3438,
    3439,  1056, -4065,   701, -4065,   979,  3392,  2600, -4065,  3444,
   49537, -4065, 34902, -4065, -4065, -4065, -4065,   -82,  3080,  3081,
     -59, -4065, -4065,  3389,  3215, -4065, -4065, -4065,    94,  2202,
   -4065,  2553,  9696,  2992, 30442, -4065,  2081, -4065,   283, -4065,
   43813, 43813,  1382, 43813, 43813, -4065,  3278, -4065, -4065,  3232,
   -4065,  2724,  1304, -4065, -4065,  -101,  2421, -4065, -4065,  1079,
    3390,  3402, -4065,  3271,  1237,  3271, -4065, -4065,  1079, 27250,
     997,  2793, -4065,  1477,  3328, -4065, -4065, -4065, 57805, -4065,
    1242, 57805,  3019,  -177,  4648, 47629, 44449, -4065, -4065, -4065,
   -4065,  3556, -4065,  3559,  1006, -4065, -4065,  2573,   866, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065,  1999,  2573,  2573,  1154, -4065,   147,
   -4065, -4065, -4065, -4065,  3025,    94,  3597,  3279,    94,    94,
    3597,    94,  3280,  3285,    94,    94,  3112,  3546,    94,  3428,
    3138,  2236,  3429,    94,  3294, -4065,  3141,  3557,    94,    94,
      94,    94,    94,  3597,  3299,  3653,    94,    94, -4065,    94,
    3302,  3304,   163,  3310,  3312,    94,    94,    94,    94,   969,
   57805,    94,    94,  3314,    94, -4065, -4065,  5994, -4065, -4065,
   -4065, -4065, -4065, -4065,  -119, 24690, -4065, -4065, -4065, -4065,
      94,    -2,  1088,  3130,  1461,  3063, -4065,   345,  3068, 53989,
    2202,  3069,  1477,  -185,  -185,  2081,  -185,  1477,  -185,  -185,
    -185,  -185,  -185,  -185,  -185,  1477,  1477,  -185,   155,  2344,
    -185,  1477,  4208,  -185,   116,  2573,  2573,  2483, -4065, -4065,
    3352,  3507,    94, -4065,  2108, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065,  3167, -4065,   151,   940,   940, -4065,
   25972, 25972, 25972, -4065,  3074,   997,  2724,  1180,  2724,  3089,
   -4065, 12986,  1645, -4065,  2202, 12328,  2202,  1419, -4065,  3086,
    3086,  3086, -4065,  3088, -4065, -4065,  3086,  3494,  3086,  3498,
    3095,  3097,  1781,   498, -4065,  1808,  1862,  1653,  3098,  3104,
    1534, -4065, 12328, 12328,  1659,  1694,  -109,  1181,  1211,   381,
   -4065,  1698,  3007, -4065, -4065,  1718,  1758,  1843,  1853,  1235,
    1900,  1877, 12986,  1918,  1317,   388, -4065,  1953,  1286,  1300,
    1965, 12328,  1976, 12328,  1978, 12328,  2001,  2008,  2015,  3116,
    3116,   164, -4065,  3102, -4065, -4065, -4065,  3111, -4065, -4065,
    2175,  2090, -4065, -4065,  3117, -4065, -4065,  3109,  2202,  3120,
   -4065, -4065, 12328, -4065,  1021, -4065, -4065, 17592,   393,  3121,
   -4065,  2202, -4065, -4065,  3123,  1534, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065,  3350, -4065, -4065,  3634, 32356, -4065, 57805,
    1135,  3382,  3119, 35538, 41269, 41269, 41269,  3131, 12328, -4065,
   -4065,  3409, 25972, -4065,  3560, -4065, -4065, -4065, -4065, -4065,
    3137,  3142, -4065, -4065, -4065,  2839,  3515,  3393, -4065, -4065,
     116, 57805, 46357, -4065,  2453, 27250, -4065,  3145, -4065,  3145,
    1793,  3152,  1939, -4065, -4065, -4065,  3134,  2253,  1951, -4065,
   19566,  3598,  2490, -4065, 41269, 41269, 41269, -4065,  2724,  2724,
     136,  3207,  3562, -4065, -4065, -4065, -4065, 54625, -4065, -4065,
   -4065, -4065,  -274, -4065,  3162,  3163,   263,  3395, -4065, -4065,
   -4065, -4065,  9696, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065,  2600, -4065, -4065, -4065, -4065,
   -4065, -4065, 43813, 43813, -4065, -4065, -4065, -4065, -4065,   690,
   -4065,  3658, -4065,  3169,   989,   849, -4065,  2247, -4065, -4065,
   -4065,  3568,  3271,  3271,  1079,  3573,   -73,  3179, -4065,    94,
   -4065,  2969, -4065,  2453, -4065, -4065, 12328,  3373,  3183, -4065,
   -4065,   106, -4065, -4065,  1519, 25972, 20207, -4065, -4065,  3435,
   -4065,  4068, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065,  1111, -4065, -4065, 27889,  1592, -4065,   252, -4065,  1592,
   -4065,  1658,  1658,  1592, 55261, 27889,    89,  2081,  1477,  1630,
    1477, 55897,    89,  -185,  -185,  2355,    94,  1477, -4065, -4065,
    3575,  1630,  3579,  1630,  1630, -4065, 48901, 57805, -4065,    94,
    1067,  1477, 56533,  2081,  2081,  1630,    89, 27250,   325,  1023,
   -4065,  -185,    89, -4065, -4065, -4065, -4065, 25972,    89,    89,
    3225,  2652,  2895,  2923, -4065, -4065, -4065,  1477,  1023, 55897,
   -4065, -4065,  6967, -4065, -4065, -4065, 20846, 57805,  1216,   503,
   -4065,  3184, 38725,  3430, -4065, 12328, 12328,  3470, 57805,  3471,
   -4065,  3766, 57805,  3830, -4065,   143, -4065, 55897, -4065,  3196,
   -4065,  3200, -4065,  1477, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065,  3198, 57805,  2573,  2276, -4065, -4065, -4065, -4065,
    -185, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, 34266,
    2724,  3472, -4065, -4065,  3250, -4065,  2202, 12328,   118, -4065,
   -4065,   167, -4065,   931, -4065, -4065, -4065,  3203, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065,  2739, -4065, -4065,  2677, -4065,
   -4065, -4065,  3205,  3250,  3250, -4065, -4065,  3809,  3374, 12328,
   12328, -4065, 12328, -4065,   967,  3208,  3233, -4065, -4065, -4065,
   -4065, 12328, -4065, -4065,  3250, -4065, 12328, -4065, -4065, 12328,
   -4065, 12328, 12328, -4065,  2032, -4065,  2034, -4065,  2053, -4065,
   -4065, -4065,   116,  3210,  3592, -4065, -4065, -4065,   116,  3399,
   -4065, -4065,   116,  1477,  2550, -4065, -4065,  1012, 57805, -4065,
   -4065,  1984, -4065, -4065, 12328, -4065, 49537, -4065, -4065,  3688,
    3584, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065,  3660, -4065, -4065,
   -4065, -4065,  -150,  -150,  -150, 16276,  2202,  3721, -4065, -4065,
   -4065,  3560,  3605, -4065,   971, -4065, 57805,  3222,  1527, -4065,
    2003, -4065, -4065,  3223, -4065,  2175,  3224, -4065,    94, 16276,
    2981,  3397, -4065, -4065,  1793, 27250, 34902, -4065, -4065, 57805,
   -4065, 41269,  2743,  2743,  2743,  2600,  3671,  3047,  3047, -4065,
   31080, -4065, -4065,  3398, -4065, -4065, 36174, -4065, -4065, -4065,
   -4065, -4065, -4065, 30442, 53353, -4065, -4065, -4065,  2600, -4065,
    -185,  2327,  1575,  1597, -4065,   997, -4065,  1079,  3625,  3626,
   -4065,  1079, -4065, -4065, 27250,  2724, 16276, -4065,  2175,  2202,
    3237,  1523,  1519, -4065, -4065, -4065, -4065,  3512,  3518, 57805,
   -4065, -4065, -4065, -4065,  3384, -4065, 25972,  3242,  3245,  3246,
   -4065, -4065, -4065,   246, -4065,  7127, -4065, -4065, -4065, -4065,
      89,  3244,  3638,  3641,  1658, -4065,  1592, 27889, -4065, -4065,
    1592,  1592, -4065, -4065, -4065,   100, 55897, -4065, -4065, 27889,
   -4065, -4065, -4065,  3253, -4065, -4065,   116, -4065, -4065, 44449,
    -185, -4065,  1630, 57805, -4065, 27889, 27889, -4065,  3284,  -185,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, 27889,
   55897,  3262, -4065,  1523, -4065, -4065, -4065, -4065, -4065,  1943,
   -4065, 55897, -4065, -4065, 55897, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065,  3266,  1561,  2728, -4065,  3267, -4065, 57805, -4065,
   -4065, 25972, -4065, -4065, -4065,  6696, 57805, -4065, -4065, -4065,
   -4065, -4065,  2202,  3250,  3834, -4065, -4065,  3421,  -185,  3780,
   -4065,  2024, -4065, -4065, -4065,  3692,  3281, -4065, 53989,  2045,
   -4065, -4065,  1999, -4065, -4065, -4065, -4065,  3286,  3287,  3289,
    2896, -4065,  3656,  -273,  2202,  3290,  3291,  3292,  3295,  3898,
     169, -4065,  3899, 48265, -4065, -4065, -4065,  2054,  3578, -4065,
   -4065, -4065,  3086, -4065,  3088, -4065, -4065, -4065,  3877, -4065,
   -4065,  3086,  3693,   167, -4065, -4065,  3296, -4065,  3298,  3301,
   -4065,   253,  3303,  2072,  1308,  2073,  3611,  3689, -4065,  3530,
   -4065,  2115,  1320,  2134,  2145,  2178,  2182, -4065, -4065, -4065,
   -4065, -4065,  3305, -4065, -4065,  1077, -4065,  3307,   160,   849,
   -4065, -4065,  2078, -4065, -4065,  3941,  3577,   482,  3338,  3338,
    3338,  1674,  2202,  2082, -4065, -4065, -4065, -4065, -4065, -4065,
    3714, -4065, -4065,  3311,  3375, 57805, -4065,  3393, -4065,  2550,
   27250, 16276,  3316,  3317, -4065,   -18, -4065, -4065,  3308, -4065,
   -4065,  2743, -4065,  3923,  3755, -4065, -4065, 48901,  3321, -4065,
   -4065,  3644, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
    2797,  3454,  3378,  1079,  1079,  3749,  3380, 12328,  3325, -4065,
    3472, -4065, -4065,    62,  2550, 12328, -4065, -4065, -4065,  3463,
     937, -4065,  3505,  3341,  3344, -4065, -4065,  -185,  3343, -4065,
   -4065, 20846, -4065,  3970, -4065, -4065, 12328,  1592, -4065, -4065,
   -4065, -4065,  3339, -4065, -4065,  3859,  3865, -4065, -4065,  1499,
   57805, -4065,  3135, -4065, 27889,  3253, -4065,   212,  3443, -4065,
   -4065, -4065, 27250, -4065, -4065, -4065, 57805, -4065, 25972, -4065,
   -4065,  3351, -4065,  3086,  3086,  3086, -4065, -4065,  3086, -4065,
    3088,  3589, -4065,  3088,  3088, -4065, -4065, -4065, -4065, -4065,
     167,  2274, -4065, -4065,   167, -4065, -4065, -4065,   172,  1177,
    3088, -4065, -4065, -4065, -4065, -4065, -4065, -4065,  3086,  3086,
    3086, -4065, -4065,   167,  3086, -4065,  3086, -4065,  2965, -4065,
     673,   126,  3086,  3086,  3086,  3203,  3349, -4065, -4065, -4065,
   -4065, -4065, -4065, 57805, -4065,  1083, 57805,   156, -4065, -4065,
   -4065,  1477,  2097, 57805, 57805, 57805, 45085, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, 48265, -4065,  3968,  3635,
    3354, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   12328, -4065, -4065, -4065, 12328, -4065, -4065,  3667,  3827, -4065,
   -4065, -4065, -4065, -4065, -4065,  3357, -4065,  1477,   979,   979,
   -4065, -4065, -4065,  3875, -4065, -4065,  3458,  3461, -4065, -4065,
    3462, -4065, -4065,   141,  2358, -4065, -4065, -4065, -4065, 16276,
    3756,  3469, -4065, -4065,  3376,  3415, -4065, -4065,   160, -4065,
   -4065, -4065, -4065, 12328, -4065,  3472,  2355, -4065, 31080, -4065,
    1012, -4065,  3420, -4065, -4065, -4065,  3422,  2202, 57805,  3656,
   -4065,   806,   160,  1523,  -185, -4065, -4065, -4065,  3379,  3383,
   -4065, -4065, -4065,  1088, -4065, 57805,  6696, -4065, -4065,   -18,
    5994, -4065, -4065,  1085,  -125,  2186,  3381,  3394, 57805,  3400,
    3405, -4065,  3175, 27889, -4065, -4065, -4065, -4065, -4065, 25972,
    6696,    89, -4065, -4065,  3253,   841,  3388, 57805,  3715, -4065,
   -4065, -4065, -4065,  -181, -4065,  3406,  -181,  -181, -4065,  2338,
   -4065,  3417,   167, -4065, -4065,  3427, -4065, -4065, -4065,  -181,
    3407,   167, -4065, -4065, -4065, -4065,  -181, -4065, 48901,  -185,
    3173,  4029, -4065,  3445, -4065,  3920,  3790,  4035, -4065,  2825,
   -4065,  3800,  3695,    94, -4065,   167, -4065, -4065,  3968, -4065,
     167,  3968,  -181,  -181, 57805,  3536, -4065, 64165, -4065, -4065,
    -171,  3437,  2111, -4065, -4065, -4065, -4065, -4065, -4065,  2113,
    1523,  3423,  2157,  2161,  3893,  3599,  3613, -4065, -4065,  3424,
    3426,  1523,  2191, -4065, -4065, -4065,  3436, -4065, -4065,  4013,
   -4065, -4065, -4065, -4065,   174,  3696,  1477,  1477,  1477,   -92,
    2358, -4065, -4065,  3479, 25972, 17592,  3538, 57805,   930,  3153,
   -4065,  1636,  1523, 12328,  2600, 44449, -4065, -4065, -4065, 12328,
    3442, 12328,  3446,  2179, -4065, -4065, -4065,  1658,  1658, -4065,
     806, -4065, -4065, -4065, -4065,    74, 57805, 25972,  3470,  3618,
   -4065,  3135, -4065, -4065,  3435,  3397, -4065,   116,  3393, -4065,
   -4065, 57805, 57805,  2192, 57805, 57805,  2781,  2786,  2788,  2344,
    2344, -4065, -4065,  1216, -4065, -4065, -4065,  3840, -4065, -4065,
    2220, -4065,    68,  3716, -4065, -4065, -4065, -4065,  -181, -4065,
     253, -4065, -4065, -4065, -4065, -4065,   253, -4065, -4065, -4065,
   -4065,  3447, -4065, -4065, -4065,  3726,  3480, -4065,  3450, -4065,
   -4065, -4065, 39361, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   12328,  3945,  3481, 57805,  1217, -4065, 65437, 65437, 57805, -4065,
   -4065, -4065, -4065,  6298, -4065, -4065,   -29, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,  4074, -4065,
    3448, -4065, -4065,  3459,  1367, -4065, -4065, 57805, 57169,  1496,
   57805, -4065,  3742,   150,   216, -4065,  3939,  2175, -4065, -4065,
   12328, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065,  1376, -4065, -4065, 27250,  2793, -4065,   116, -4065,  2228,
   -4065, -4065, -4065,  3551,    94,    94,  3976,  3978,    94,    94,
      94,    94,  3467,  3153, -4065,  3960, -4065, -4065, 12328, -4065,
   -4065,  2202,  3708, -4065,  4053,   849,  2202, 57805,  2202, 57805,
   -4065,  3934,  3934, -4065, -4065, -4065,  6696,  3936,  1461, -4065,
   -4065, -4065,   246,  3482,  2253, -4065,  2230,  2237,  2239, -4065,
    2241,  2263, -4065, -4065, -4065, -4065,  1216,  3484, -4065, 57805,
   -4065, -4065, -4065,   113, -4065, -4065,  2281, -4065,  2283,  2552,
   -4065,  3447, -4065, -4065, -4065, -4065, -4065, -4065,  2202, 12328,
   -4065, 12328,  3506, -4065, -4065,  3940, 57805, -4065, -4065, -4065,
   -4065, 12328, -4065, 64165, 64165, -4065, -4065, -4065, -4065,  4109,
     -18,  4079,  3761,  4081, -4065, -4065,  2286, -4065, -4065,  -185,
      94, -4065,  1496, -4065, -4065, -4065,    94,  1523,  3493,  3751,
   -4065,   150, -4065, -4065, -4065,   216, -4065, -4065, -4065,  2550,
    1523, -4065, -4065,  3497, -4065,    94, -4065,  3499, -4065, -4065,
   57805,  3502, -4065,  -185,  -185,    94,    94,  2995,  2995,   116,
   48901,  3612, -4065, -4065,    94,  1523, 57805, -4065,  1032,  3885,
   -4065,  2290,  2295,  1401, -4065, -4065,  3318, -4065, -4065,  3766,
    6696, -4065, -4065, -4065, -4065,  3725, -4065,  1496, -4065, -4065,
   -4065,  3393, -4065,   908,   908,   167,   253,   167, -4065,  3511,
   -4065,  3516,  2202,  2202, -4065,   266, -4065, -4065,  3924,  4010,
   12328,  2202, 60985,  3520, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, 64801, 12328, -4065,
     -29,  4074, -4065,  3791, -4065,  3804, -4065, 57169, -4065,  1477,
    1019, -4065, 39997, -4065, -4065,  1888,  1019, -4065,  1019, -4065,
   -4065, 27250, 16276,  2355, -4065,  3538, -4065,  3535, -4065, -4065,
     674, -4065, -4065,  -185,  -185, -4065, -4065, -4065, -4065, -4065,
    2316, -4065, 48901, -4065, -4065,  4141,  4142,  4036,  4147,  1032,
   -4065,  1110, -4065, -4065, -4065,  4149, -4065,  4153,  3550,  3553,
   -4065, -4065, -4065,  4065, 64165, -4065,  4060, -4065,   -18, -4065,
    1496, -4065,   150,   216,  2351, -4065,  4205, -4065,   158,  3835,
    3836, -4065, -4065, -4065, -4065,   685,  3583, 12328, 64165, -4065,
    4055, -4065,  3984,  1731,  3927,  3564, -4065,  3563,  2091,  4091,
   65437, 65437, -4065, -4065, -4065, -4065, -4065,  3944,  4213, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065,  2356, -4065, 16934, -4065, -4065, -4065, -4065, -4065, 48901,
   -4065,  3612, -4065,  3588,   253,   253,  4178,   253, -4065,  4184,
    4189,  1110, -4065, -4065, -4065, 53989, 53989, -4065, -4065,  4089,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
    3645,  4112, -4065, -4065,   119, -4065,   275, -4065,  2202, 61621,
    4194, 57805, -4065, -4065, -4065, -4065, 12328, -4065, 50173, 62257,
    3590, -4065, -4065, -4065, -4065, -4065,  3776, -4065,  3535, -4065,
    3596, -4065,  2839,  3153, -4065, -4065,  3602, -4065, -4065,   253,
   -4065,   253,   253, -4065,  3606,  2363,  3785, -4065,  3318,   908,
     908,  -185,  3990, -4065,   119, -4065, 12328, -4065,  4103,  3697,
   -4065,  3609, -4065, 64165,  1487, 64165, -4065, -4065,  4050,  3614,
    1773, -4065,  3607, -4065,  4037,  4053, -4065, 16934,  3617, -4065,
   12328,  3619,  3620, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   64165, -4065, -4065, -4065, -4065, -4065,  2202,  4220, 64165, 57805,
   59077,  3814, 62893,  4082, 57805,  6696,  4083,  4085, -4065,  4235,
    3885, -4065, -4065,  2202, -4065, -4065, 64165, -4065,  3718, -4065,
   59713, -4065,  2869, -4065,  3657, -4065, -4065,  4156,  2851, -4065,
     253,  4057, -4065, -4065, -4065, 64165, 64165, -4065, -4065, -4065,
   38089, 12328, -4065, -4065, -4065, -4065, -4065,  1056, -4065,  3919,
    3639, 60349, 63529, -4065, -4065, -4065, 32994, -4065, -4065, -4065,
    4097, -4065,  2202, -4065,    46, 22124,  3802, 38089, -4065, -4065,
   -4065, -4065, -4065, -4065, 48901,  2373, -4065, -4065, 27250, -4065,
   -4065, -4065, -4065, 25331,  3642, -4065,    94, -4065, 27250, -4065,
   -4065, 16276, -4065, -4065
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -4065, -4065, -4065, -4065, -4065,   131, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065,  1941, -4065, -4065, -4065, -4065, -4065,
    1631, -4065,   506, -2369,  -501,  3322, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065,   792,  1744,  3270,
   -4065,   407, -4065,    54, -4065, -4065, -4065, -2962,   -76,  -276,
   -4065, -4065,   588,    14,  3268,  -275, -3240, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065,   417,   418, -4065, -4065,
     247, -4065, -4065, -2013, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065,  -439,  -396,  1771, -4065, -4065, -4065,  4286, -4065,
    3739, -4065, -1802,  2411, -4065, -4065, -4065, -4065, -4065,  2484,
   -1736, -4065, -4065, -4065,  1520, -4065, -4065, -4065,  -364,   349,
   -4065,   351, -4065,   352, -4065,   353, -4065,   354,   356,   360,
     362, -4065,   364, -4065, -4065,  -395, -4065, -4065, -4065, -4065,
     365, -4065, -4065, -4065, -4065, -4065, -4065, -4065,  -243, -4065,
   -4065,   -50, -4065, -4065,  -240,   371, -4065,  -174,   374, -4065,
     375, -4065,   -68, -4065,   -66, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065,  3275, -4065, -4065,
   -4065, -2325, -4065, -4065, -2217,  2795, -4065, -1867, -4065, -4065,
   -1936, -4065, -4065, -1869,   869, -4065, -4065,  1282,  -375, -4065,
   -1407, -2003, -1963, -4065, -4065, -4065, -2043, -2042,  -788,  2547,
   -1183, -2366, -4065, -4065, -4065, -4065,   117, -4065, -4065,   294,
    1747,  2268, -4065, -2542, -4065, -4065,   935, -4065, -4065,  1529,
     776,  1533, -4065,  1105,  3027, -1263, -4065, -4065, -4065, -4065,
   -4065, -4065,    36,   348,   -65, -4065, -3061,   782, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -2726, -4065, -4065, -4065,
    -272, -4065, -4065,  -170, -4065, -4065,  -231, -4065,   170, -2372,
   -4065, -4065, -4065, -4065,  2790, -1390, -4065,  3779, -4065,  -499,
   -4065,   494,  1779, -2723, -1997, -4065,  -921,  -916, -2966, -4065,
   -4065, -4065, -1931,  1048,  1335, -4065,   731,  1778, -2443, -4065,
   -4065, -4065, -4065, -4065,  1336, -4065, -4065,   495, -4065,   489,
   -4065, -4065, -4065, -4065,  -234, -4065,   128, -3009, -4065, -4065,
   -4065, -2977,  1247,   682, -4065, -4065, -4065, -1306, -3002,  -523,
   -4065,   306, -2491, -2574,   650, -4065, -4065,   447, -3768, -4065,
   -4065,  -575, -2142, -2450,   -36, -4065, -4065,   460, -3456,  1894,
   -4065, -4065, -4065, -3421, -2492,  1650, -4065, -4065,  1202, -4065,
   -1282,  1200, -4065, -4065, -4065,  1209, -4065,    39, -4065, -4065,
   -4065, -4065, -3038, -4065, -4065, -1551, -2751, -4065, -4065,  4425,
    4426, -1581, -3115, -4064,   -74,   -71, -4065, -4065, -4065,  2252,
   -1194,   108,   102,   104,  1750,  -813,   259,  1055, -1872, -4065,
     327, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,  1822,  -601,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -3149, -2886, -4065,
   -4065,  1385, -4065, -4065, -4065, -2328, -2091, -2085, -2427,  3449,
   -4065, -4065, -4065, -4065,  3385, -2263, -3753, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065,  2950,  1002, -4065, -4065,  1962, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065,   528,  2039, -4065, -4065,
   -4065, -4065,  2346, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065,    24, -4065, -4065, -4065,   774,  2860, -4065, -4065, -4065,
     -12, -4065, -4065, -4065, -4065,  2556, -4065, -4065, -4065, -4065,
    2886, -4065, -4065, -4065, -4065, -4065, -4065,  1635, -4065,  2076,
   -4065, -1530, -4065, -4065,  1203, -1038,  2035,  -614,  2164,   486,
   -4065,  3868, -4065, -4065, -4065, -1707, -2513, -4065,  3555,  -794,
   -2719,  2545,  -572, -1910,  1243,   200,  1389,  1512,  4378, -4065,
   -1155, -1182, -4065, -4065,  -668, -4065, -4065, -4065, -4065, -4065,
    2269,  2272,  -597, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065,  1685, -4065, -4065, -4065, -4065, -1255,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065,  1425, -4065, -2101,
   -4065, -4065,  -528, -4065,  3329, -4065, -4065, -4065, -2348, -1890,
    1979,  1156, -4065, -4065, -4065, -4065, -4065, -4065, -4065,  1988,
   -4065, -1623, -4065, -2768, -4065, -4065, -4065, -4065, -4065,  2187,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -1655, -4065, -2025,
     269, -4065,   435, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
     -60,  1003,   -58, -2953, -1118,  1845, -4065, -4065, -1323,  3386,
   -2344, -4065, -4065, -4065,  2185, -4065, -4065, -4065, -4065, -4065,
     817, -3003,  2998, -4065, -4065, -3216,  -956, -2330,  -936, -4065,
   -1410,  1599,  1601,   646, -4065, -1938, -1134, -1597, -2985, -2462,
   -4065,  1466, -4065, -4065, -4065, -4065,  -178, -4065, -4065, -4065,
     658,  2084, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065,  -553,  -913, -4065, -4065,  2343,  -492, -4065,  3501,
   -4065, -4065,  3503, -4065, -4065, -4065, -4065,  3188,  3165,  2152,
   -4065, -4065, -2441, -4065, -4065,  2118, -4065,   933,  -918, -1668,
    1251, -4065, -4065,  1255, -3266, -4065, -4065,  3517, -4065, -4065,
   -4065,  1201, -4065,    95,  3950,  3522, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065,  2929, -1094,  3880, -4065, -4065, -4065,
   -4065, -4065, -4065,  2546, -4065, -4065, -4065, -4065, -4065, -4065,
    3107,  3969,  -593, -1360, -4065,  -790,  2548,  2068,  -862, -4065,
   -4065, -4065, -4065,  3972, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065,  2723,   856, -4065, -4065, -4065, -4065,
    3185, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065,  1291,   -98, -4065,    93,  -132, -4065,     0, -4065,
   -4065, -4065, -4065, -4065,  -200, -4065, -4065,  -204, -4065, -1026,
   -1422,   615, -1303, -2580, -4065,  1281,  3166, -3360,  -683, -1209,
   -1212, -2827,    91, -4065, -4065,  3666,    87,  -475,  -258,    -6,
   -2938,   -87,  -620,  -608,  -723, -4065, -2375, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065,  2107, -4065, -4065, -4065,  1256,
   -4065,  3994, -4065,  2808,  1258,  3997, -1385,  2625,  2121,  2123,
   -4065, -4065,  2130, -1989, -4065, -4065,   175, -4065,  2698, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065,  3769,  -452,  -450,  3192,
    4014,  3690, -4065,  3263, -4065, -4065, -4065, -4065, -4065,   572,
   -4065,   250,  2165, -1280, -2352, -4065, -4065,  2984,  1152, -4065,
    1784,  -212,  -522, -4065, -4065,   574, -4065, -4065,  1554,  4024,
    3691, -4065, -4065, -4065, -4065, -4065, -2782,  -910, -4065, -3491,
   -2847, -1748, -4065, -4065, -2206, -3082, -4065, -4065, -1048, -4065,
   -4065, -4065, -4065, -2080, -4065, -4065, -4065,    -8,  3991,  3992,
    3993, -4065,  -827, -4065, -4065, -4065, -4065, -4065, -4065, -4065,
    3581, -4065, -4065, -4065, -4065,  3586, -4065, -4065, -4065, -4065,
   -4065,  3595, -4065, -4065, -4065, -4065, -4065,  1969, -4065, -4065,
   -4065, -4065, -4065, -4065, -4065, -4065, -4065
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2766
static const yytype_int16 yytable[] =
{
     515,  1097,  1555,   892,   999,  1742,  1030,  1768,   556,  2197,
    1767,  1675,   813,   555,  1858,  1562,  1417,   563,   574,  1049,
     513,   952,   995,  1638,  2637,   582,   670,   577,  1431,  1434,
    2638,  1050,  2320,  1467,   589,  2460,  2461,   592,  1497,  1447,
    1899,   646,   589,  2005,  1284,  1719,  2134,  2193,  2194,   610,
     825,   826,   827,  1170,   829,  2004,   831,  1105,  1467,   833,
    1972,   835,  1857,  2871,  1870,  2131,  3050,  2839,  1800,  1801,
    3427,  3234,  1804,  1805,  1806,  1807,  2731,  1809,  1810,  1812,
    1814,  1815,  1816,  1817,  1818,  2994,  2983,  1790,  2738,  3123,
    3661,   140,  1122,   635,  1798,  3307,  2820,  3488,  3344,  1005,
    1518,  1834,  1012,  2994,  2994,  1461,  1684,   867,  1908,   868,
    2572,  1288,  1086,  1089,   561,  2796,  2012,   638,  2627,   515,
    2366,   515,   645,   651,  1567,  3495,   656,  2895,  2443,  1568,
    2739,  3006,  3816,  1498,  3872,  1267,  2025,  2942,   867,   640,
     922,   642,  2690,  2691,  2028,  2029,  3161,  3162,  3522,  3015,
    2573,  3428,  3168,  3019,  3170,  3589,  3503,  2938,  2560,  4033,
    1347,  2947,  3987,  1591,  3034,  3539,  1234,  1235,  2089,  4004,
    2956,  3138,  1903,  2102,  1914,  2067,  3045,  3389,  1379,  1110,
    1111,  1112,  2687,  3054,   522,  3225,  3350,  2186,  3405,  3529,
     634,  3804,  1341,  1234,  1235,  1225,  1226,  1227,  3553,  2998,
    2999,  2356,  4651,  3530,   573,   667,  1499,  1268,  1541,  1549,
     569,   581,  2174,  2994,  2994,  1234,  1235,  3531,  2549,  1234,
    1235,   867,  2688,  1234,  1235,  1602,  2307,  3713,   961,   942,
     961,   942,  3166,  4329,  3955,  2792,  2678,  2456,  2568,  1606,
    3846,  1502,  3364,  1564,  3002,  1668,  3926,  3525,  1588,  4403,
    3695,  1347,  1234,  1235,  2822,  2406,  1564, -1560,  3386, -2717,
    1427,  3401,   599,  1090,  4313,  2356,  3120,   884,  4280,   874,
    1493, -2087,   896,  -935,  3705,  1963,  2493,  4087,  3187,  4210,
   -2641,  2514,  2608,  3692,  1042,  1512,  -572,  1356,  3317,  2974,
    4598,  1018,  1360,  1525,  1953,  1536,  1100, -1560, -2485,  4329,
     908,  3226, -1600, -2647,  3352,  3893,  1348,  3597,  1669,  3129,
    3130,  2708,   657,  1234,  1235,   619,  1564,  3391,  3895,  3948,
    3953,  4114,  1954,  3954,  1210,  4770,  2119,  3896,  1641,  3055,
    2611,   570,  1641,  4511,   122,  1234,  1235,  1670,  2370,  1272,
    1535,  1465,  3964,  1150,  1291,  2034,  -573,  3329,  1964,  3986,
    4274,  3295,  3365,  1234,  1235,  3870,  1507,   602,  3094,  2453,
   -2117,  1607,  3151,  3083,  3153,  1608,  1620,  1234,  1235, -2717,
    2216,  2787,   135,  2906,  1472,  2250,  1609,  2348,   867,   139,
    2348,   273,  3798,   275, -2268,  2349,  1234,  1235,  3326,  2085,
    2377,  1621,  2091,  2407,  2907,  2779,  2522,  1348,  1234,  1235,
    2535,  2536,  1072, -2294, -2565,  1234,  1235,  1671,  -476,  3526,
    1234,  1235,  4330,  3084,   909,  1626,  2213,  2547,  4083,  4115,
    3095,  2780,  4528,  1234,  1235,  4314,  2035,  1234,  1235,  3302,
    2908,  4528,  3847,  1151,  2565,  2566,  2180,  1465,  1508,  1392,
    1234,  1235,  1478,   674,  2371,  2120,  4593,   273,  3392,   275,
    3358,  2055,  2926,  1280,  2554,   124,  1537,  3444,   136, -2566,
    4021,  1642,  4116,  1539,  1547,  1664,  3897,  3136,  4281,  2103,
    1683,  1603,   865, -2485,  1019,  1020,  3768,   877,  4330,  1338,
    2308,  3608,  1955,   620,  1170,   661,  1492,  1672,  4387,  3527,
    2955,   910,  1830,  2914,  2052,  2284,  1526,  1361, -2765,  2673,
    2674,  2675,  2676,   865,  1234,  1235,  1626,  1211,  1212,  1610,
    1234,  1235, -2413,  4052,  1043,  1234,  1235,  2555,  3175, -2565,
    1967,  4771,  3121,  4400,   645, -1600,   651,  3318,  4599,  4088,
    2641,  4123,  3312,  3313,  3314,  1236,  3353,  3072,  1237,  1554,
    4127,  1044,  1513,   651,  3315,  3316,  2556,  1271,  3846,   897,
    1234,  1235,   876,   645,   872,  4211,  1965,  2494,   645, -2641,
     882,   885,  1236,  2889,  4143,  1237,  2572,  3934,  3391,  4145,
    3389,  4282,  1091,   900, -2566,  3917,  3619,  1795,  1415,  3652,
    1494,  2478,  3698,  3656,   645,  2964,   865,  1503,  1236,  1428,
     953,  1237,  1236,  4042,  3696,  1237,  2057,  2408,  3706,  3707,
    1014,  4315,  1652,  1653,  3377,   664,  2573,  1611,  2007,   139,
    2357,  2010,  3710,  1866,  2425,  2013,  2557,  2016,  2102,  1033,
    2994,  1236,  4507,  1357,  1237,  4261,  2337,  1858,  1707,   590,
    2627,   875,  3227,   645,  1859,  1055,  1720,  2340,  1722,  3664,
    2343,  2690,  2691,  3689,  1567,  2031,  2032,  1834,   515,  1568,
    1735,  1736,  1737,   635,   883,  1084,  1803,  3889,  1741,   635,
     635,  3122,  3684, -1600,  1098,  1055,  2501,   645,  1071,  3393,
   -1560,   645,  2994,  1824,  2357,  1857,  3387,  4072,  1117,  2996,
    2089,  2687,  1236,  1234,  1235,  1237,  1933,   664,  2823, -2117,
     664,  2162,  1234,  1235,  1015,  3529,  2558,  1567,  1342,  1604,
    3000,  3609,  1568,  1673,  1236,  3528,  2571,  1237,  3366,  3530,
    1952,  3235,  2027, -2268,  3104,  4404,  4652,  1915,  3850,  3109,
    1504,  2688,  1236,  3531,  1105,  1237,  2065,  3117,  3118,   836,
    1171,   571, -2294,  3125,   961,   942,  1236,  1837,  3056,  1237,
    3847,  3131,  3841,   865,  1283,  1505,  1234,  1235,  1536,   890,
    1081,  1904,  2896,   600,  2334,  1236, -1898,   903,  1237,  2187,
    3139,  3532,   924,  3805,  3951,  2174,  3629,  1236,  3514,  2188,
    1237,  -935, -2647,  3539,  1236,  2413,  2067,  1237,  2686,  1236,
    3158,  4339,  1237,  1016,  -572,  2230,  1251,  2090,  3956,  1238,
    1049,  1231,  1236,  1233,  4191,  1237,  1236,  3504,  4058,  1237,
   -1600, -2647,  1934,  3001,  1604,  4201,  3521,  1848,  2323,  1236,
    4005,  3228,  1237,  1901,  3925,  3150,  1238,  1021,  1276,   515,
    1278,  1279,  1055,   515,   645,   645,   601,   515,   645,  4442,
    1921,  2179,  2231,  1323,  2085,  1604,  4240,  1473,  1238,  1277,
    4350, -2413,  1238,  1281,  -573,  3848,  1238,  1286,   603,  3394,
    1213,  3330,  2888,  2946,  1049,  1072, -2117,  1775,  1776,  1432,
    2426,  1435,  2309,  3626,  1438,  1443,  2011, -1600,  1234,  1235,
    1352, -2565,  4054,  1236,  2844,  1238,  1237,  3927,  4375,  1236,
   -2268,  1464,  1237,   635,  1236,  3883,  3884,  1237,  2214,  1927,
    1775,  2249,  1234,  1235,  4414,   645,   635, -1898,  2961, -2294,
     635,  3246, -2565,  4605,  2091,  1479,  -476,  3014,  2927,  1537,
    3017,  3018,  2559,  3020,  2103,  1339,  3023,  3024,  3515,  1236,
    3027,  3768,  1237,  3332,  2642,  3036, -2566,  3348,  3349,  2871,
    3040,  3041,  3042,  3043,  3044,  4063,  1238,  4727,  3048,  3049,
     645,  3051,   645,  3481,  3287,   645,   645,  3060,  3061,  3062,
    3063, -2765,  2285,  3067,  3068,  1987,  3070, -2566,  1238,  3631,
    1831,  4515,   645,  2059,  2060,  2061,  1450,  1450,  3811,  3702,
    1234,  1235,  3647,  2288,  2289,  2085,  1238,  3814,  1234,  1235,
    1363,  2637,  1376,  1254,  4521,  3632,  4523,  2638,  3141,  2180,
    1238,  2305,  2306,  1382,  2069,  1234,  1235,  1388,  2572,  3651,
    4564,  4065,  2693,  3655,  1234,  1235,  1105,   635, -2413,  1238,
    3849,  3660,  3566,  1316,  3134,  1831,  2327,  4592,  1234,  1235,
    1427,  1238, -2624,  2425,  2801,  2802,  3850,  4266,  1238,  1553,
    3006,  2575,  1871,  1238,  2467,  1563,  3191,  3192,  2573,  2427,
    3033,  4066,  2256,  3208,  3209, -2628,  1238,  3034,  3243,  3244,
    1238,  1433,  1236,  3166,  2482,  1237,  1234,  1235,  3107,   635,
    3525,  1236,  2204,  1238,  1237,  2497,  2222,  1819,  2005,  2005,
     635,  2005,  2005,  2752,   664,  2627,   664,  3556,  3310,  2224,
    3408,  2930,  3410,  2934,  2935,  1467,  1234,  1235,  1604,  3421,
    4602,  2366,  2690,  2691,  1269,  1269,  2830,  2471,  3225,  1006,
    2527,  1831, -2627,  3434,  1627,  1628,  1629,  1634,  2085,  2710,
    3445,  3447,  3085,  2355,  3064,  1236,  4259,   673,  1237,  3851,
    1467,  4453,   677,  3464,  3466,  3468, -2717,  1238,  1092,  3469,
    3447,   990,  2687,  1238,  4460,   830,  3648,  2102,  1238,  2986,
     834,  2089,  2939,  2227,  1936,  1785,  4501,  1171,   681,  2228,
    2495,  3941,  2554,  2859,  3942,  3446,  1583,  4295,  3142,  4483,
    2299,  1171,  2571,  2500, -2625,  3511,  2503,  2504,   901,   867,
    2399,  2182,  2688,  1238,  1234,  1235,  2891,  2800,  1234,  1235,
    2102,  3895,  1823,  4222,  3961,  3962,  3963,  2041,   141,  2229,
    3896,  4485,  3966,  2335,  2421,  2422,  4557,  2320,  1234,  1235,
    3992,  2328,  4486,  4223,  1632, -2626,  3608,   682,  1093,  1591,
   -2631,  1234,  1235,  1769,  3226,  2555,  1832,  1994,  4308,  4309,
    2805,  2806,  3526,  1768,  2342,  3478,   645,  1066,  1234,  1235,
    2855,  1860,  3939,  3940,  1831,   518, -2717,  1236,  1708,  3166,
    1237,  1709,  3166,  3166,  2556,  1567,   523,  1859,  2567,  1872,
    1568,  2969,  1234,  1235,  2344,   139,   557,  3430,  2987,  3166,
    1668,  1236,  3086,   645,  1237,  2892,  1480,  3532,  1827,  2426,
    2174,  1832,   990,  3965,  2970,  4516,   566,  2686,  1995,  3985,
    3988,  3990,  3991,  2799,   635,  2359,  1820,  1913,  1263,  1264,
    1265,  1266,  3984,  2809,  4381,  3587,  4382,  1481,  1007,  2090,
    3065, -2624,  3537,  1234,  1235,  2600,  1238,  1768,  4603,  1821,
    2959,  1171,   645,  3281,  2557,  1238,  4018,  1234,  1235,  1451,
    1451,  3567,  2236,  1669, -2628,  1234,  1235,  3158,  4560,  3897,
     645,  2237,  2412,  3431,  1234,  1235,  1234,  1235,   645,  1236,
    4514,   683,  1237,  1884,   579,  1887,  2362,  1236,   635,  1428,
    1237,  1482,  1670,  2085,  2472,  2042,  1483,  1832,  3420,  2043,
     635,  1937,  1234,  1235,  1236,  2091,  4520,  1237,   645,  1238,
    4517,  3429,  1067,  1236,  1234,  1235,  1237,   635,   635,  1122,
     567, -2627,  4475,  4476,  2179,  2247,   575,  1236,  1873,  2548,
    1237,  3808,  1234,  1235,  2558,   664,  2085,  2692,  4380,  1957,
    1234,  1235,  4518,   645,   645,   990,  3479,  1939,  4501,  1270,
    1270,  2453,   904,  2329,  4067,  1947,  4304,  4487,  1948,  3143,
    3407,  4321,  1671,  1234,  1235,  1236,  3609,   645,  1237,  2330,
    1234,  1235,  4322,  2103,  3432,  2081,  1234,  1235,  1968,   953,
    1234,  1235,  1891, -2625,  3928,  1388,  3437,  3438,  2427,   515,
     515,   515,   635,   515,   635,  1236,  1234,  1235,  1237,  2006,
    3399,  3399,  2454,   878,  1996,  2008,   515,  4550,   645,  1988,
    1989,  1990,   515,  1992,  1822,  1388,  2103,   664,  4349,   867,
    2511,  2444,  4393,  2041, -2626,  2071,  2009,  1234,  1235, -2631,
    1832,  1238,  2015,   635,  2180,  1641,  4144,  2512,  1778,  4146,
    1873,  2693,  1672,  1468,  1234,  1235,  2316,  2248,  1484,  2952,
    2005,  2005,  1234,  1235,  3206,  1238,  4572,  2490,  3528,  4272,
    4273,   604,  1831,  2930,  3690,  4792,  1234,  1235,  3693,  3694,
     622,  2252,  1234,  1235,   865,  1641,   606,  1984,  1234,  1235,
    3128,  4086,    44,  1236,  3666,  3227,  1237,  1236,   635,  1991,
    1237,  1993,   879,   623,  3272,  3273,  3274,  1469,  2932,  1606,
    2912,  1049,  4275,  2531,  2014,  2041,   645,  1236,  1641,  3999,
    1237,  2431,   905,  2679,  1958,  1234,  1235,  1858,  4305,  4329,
    1236,   635,  2694,  1237,  1485,  3342,  2127,   635,  1940,  2082,
    2026,   139,  -212,  1238,  2571,  4488,   591,  1236,   635,  2055,
    1237,  1238,  4622,  4622,  3089,  4243,  2554,  1234,  1235,  2264,
    2559,  4691,  4692,  3152,  4495,   645,  2300,  1347,  1238,  3090,
     645,  1236,  4181,   880,  1237,  1857,  -671,  1238,  1727,  1117,
     636,  2203,  1234,  1235,  2271,   625,  1234,  1235,  3357,  4579,
     607,  1238,  3003,  2275,  3343,  2066,  1911,  4701,  1486,  3370,
    4323,  2042,  3242,  1768,  3004,  2043,  3298,  2276,  2697,  2491,
    3667,  4496,  1234,  1235,  4017,  2101,  1779,  4351,  1731,  2555,
    1234,  1235,  1236,  4580,  2317,  1237,  1234,  1235,  2121,  1238,
    2994,  1607,  2698,   639,  2129,  1608,  1236,  1710,  1374,  1237,
    1711,  1912,   658,   990,  1236,  2278,  1609,  1237,  2556,  2735,
    2933,  1755, -1600,  1236,  2740,  1236,  1237,  2953,  1237,  1238,
      58,  1234,  1235,  4263,   654,  1234,  1235,  2746,  1673,  1171,
    2257,  1941,  3082,  1288,  4242,  2279,  3292,   273,  2686,   275,
     661,  1236, -1809,  2042,  1237,  1234,  1235,  4000,  2804,  4085,
     667,  4562,  2695,  1236,  4566,  3613,  1237,  4352,  1234,  1235,
    2844,  2761,  2360,   641,  2062,  2062,  1105,  -671,  4330, -1600,
    2090,  1236,   526,  1348,  1237,  2431,  3267,  1487,  2557,  1236,
    3371,  1369,  1237,  2432,  1370,  1234,  1235,  2516,  1832, -1809,
    2326,  4181,  4181,  2063,  2064,  2198,  1674,  1202,  4497, -1809,
    3614,  1626,  1236,  3957, -1600,  1237,  3958,  1238,  1206,  1236,
    2132,  1238,  1237,   519,  1488,  1236,   124,   520,  1237,  1236,
   -1600,   586,  1237,  2283,   676,  3916, -1600,  2301,  2771,   586,
    2815,  1238,  2350,   635,  2133,  1236,   669,  1049,  1237,  1610,
     645,   832,   635,   645,  1238,  1768, -1809,  3189,  3443,  2883,
   -1600,  2320,  2709,  3399,   865,   635,   671, -1600,  2558,  2205,
    1323,  1238,   672,  3511,   580,  1323,  1236, -1600,  2373,  1237,
    1234,  1235,  2466,  4706,   823,  2381,  2381,  3190,  2381, -1600,
    1234,  1235,   873,  1236, -1600,  1238,  1237,  1203,   678,  1234,
    1235,  1236,  3178, -1600,  1237,  4707,  2715,   645,  1207,  2179,
     635,  3201,  2433,  2434,   635,  1236,  2692,  2132,  1237,  4026,
    -578,  1236,  4676,   626,  1237,  2994,  2994,  1236,  2218,   952,
    1237,   645,   645,   635,   635,  1234,  1235,  1234,  1235,   679,
    2351,  2133,  1371,  3033,  1171,   645,  1238,  1611,  1580,  1581,
    2381,  2381,  2381,  2435,   664,  1234,  1235,  4050,  4181,  4181,
    1238,   519,  3211,   645,  1236,   520,  3583,  1237,  1238,  1972,
    3585, -1600,  2693,  3372,  2219,  1271,  3212,  1238,   680,  1238,
     953,  4071,  2380,  2380,  3824,  2380,   828,  1417,  2250,  3335,
    1234,  1235,  3207,  1624, -1600,  3830,  1236,   839,  -671,  1237,
     887,  2489,  1234,  1235, -1600,  1238,  3157,  2404,   895,  1467,
    2994,  1363,   893,  1234,  1235,  1234,  1235,  1238,  1095,  1096,
    2217,  1236,  2420,  1004,  1237,  1236,   913,  1511,  1237,  1011,
    1382,  2424,  2221,  1516,  1517,  1238, -1600,   905,  1234,  1235,
    3649,   635,  1791,  1238,  1031,  1234,  1235,  2380,  2380,  2380,
    2223,  1236,  1234,  1235,  1237,   626,  3523,  2509,  2238,  1236,
     915,  3356,  1237,  1038,   635,  1236,  1238,  4181,  1237,  1234,
    1235,  1234,  1235,  1238,   515,   515,  1032,  2533,   515,  1238,
    3373,  2239,  4181,  1238,  2559,  3558,  3559, -1600,  2246,  2485,
    1234,  1235,  2220,  1271,  2529,  2530,   531,  3339,  2260,  1238,
    1236,  2697,   876,  1237,  1236,  1057,  3572,  1237,  3580,  1234,
    1235, -1600,  1046,  1768,  2261,  1065,  2680,  2773,  4207,  4208,
    4209,  1082,  2696,   927,  1236,  2698,  1072,  1237,  1234,  1235,
    1238,  1085,  3919,  3920,  2092,  1103,   635,  1236,  2502,   273,
    1237,   275,  2383,  1104,  2384,  2265,  1119,  1238,  4554,  4181,
    4555,  1432,  1234,  1235,  2102,  1238, -1925, -1600,  1182,  3294,
    1120,  2521,  1768,  1432,  1236,  2959,  1121,  1237,  1123,  1238,
    2269,  1234,  1235,  4181,  1124,  1238,  2225,  2226,  -671,  2538,
    1201,  1238,  1234,  1235,  2270,  4181,  4181,  1125,  2545,  2546,
    2274,  2243,  1271,  1217,  1218,   645,  2277,   645,  1128,  2550,
    2551,  2552,  2553,   645,  2561,  2562,  2448,  2449,  2450,  2704,
    1271,  2167,  2707, -1600,  1274,  1234,  1235,  1859,  1238,  1234,
    1235,  1095,  1096,  1234,  1235,  1129, -1600,  1792,  1234,  1235,
    2919,  1130,   645,  2280,  1105,  1105,  1105,  1234,  1235,  1234,
    1235,  1143,  1144,  2093,   645,  1131, -1600,  1689, -1600,  1236,
    1238,  1132,  1237,  1133,  4181,  1327,   928,  2797,  3812,  1236,
    4617,  2344,  1237,  1134,  4181,  2292, -1925,  1135,  1236,   961,
     942,  1237, -1600, -1600,  1136,  1238, -1600, -1600,  1137,  1238,
    1138,  2068,  2251,  1271,  1049,  1049,  1049,  2819,  4236,  4237,
    2311,  1139, -1898,  2920,  3241,  1251,  1934,  1934,  1934,  2431,
    2253,  1271,  3701,  2332,  1236,  1238,  1236,  1237,  4181,  1237,
    4181,  2682,  4238,  1238,  1140,  1216,  3529,  1141,  4613,  1238,
    3155,  4437,  2102,  1145,  1236,  1147,  4357,  1237,  3179,  1148,
    3530,  2254,  1725,   929,  3185,  4181,  1328,  3003,   645,  2266,
    1271,  1149,  1329,  4181,  3531,  4181,  1152,  4181,  1153,  1693,
    1154,  2807,  2267,  1271,  1238,   961,  3949,  1155,  1238,  1236,
    1156,  4181,  1237,  2816,  1157,  4181,  1158,  2692,   645,  3186,
    2085,  1236,  2510,  3193,  1237,  1332,  2268,  1271,  1238,  2167,
    4181,  4181,  1236,  1159,  1236,  1237,  1330,  1237,  2272,  1271,
     645,  1238,  2921,  3197,  2005,  3777,  4181,  4181,  1234,  1235,
    3621,  4181,  3645,  1331,  2563,  2564,  4015,  1236,  2789,  1271,
    1237,   122,  2094,  1160,  1236,  1454,  1161,  1237,  1238,  2775,
    1164,  1236,  1467,  2095,  1237,  2853,  2433,  2434,  1768,  1165,
    2096,  3298,  1251,  3198,  2828,  2829,   961,   942,  1236,  1793,
    1236,  1237,  1166,  1237,  3943,  1021,  3152,  3946,  3947,  2876,
    2103,  1172,  3030,  2879,  1694,  1794,  3174,  2226,  1697,  1236,
     645,   645,  1237,   990,  3959,  1698,  1173,  3301,  2466,  1432,
    3419,  1174,  2922,  1455,  2900, -1925,  2902,  4625,  1236,  2682,
    1251,  1237,  4624,  3177,  1271,  1175,   927,  1176,  3471, -1926,
    2168,  1177,  1254,   717,  1178,  2132,  1831,  1236,   953,  1179,
    1237,  1180,  1456,  1238,  2006,  2006, -1925,  2006,  2006,  1867,
    2511,  1292,  1868,  1238,   123,  1869,  3506,  2320,  3199,  2133,
    1768,  1236,  1238,  3443,  1237,  1183,  3390,  2512,  3200,  2097,
    1184,  4545,   124,  1769,  3402,  4609,  4251,  4252,  2085,  2513,
    1236,  1185,  2967,  1237,  1186,   515,  1699,  3409,  1187,   645,
     645,  1236,  3203,  1271,  1237,  3821,   722,  1188,  1238,  3423,
    1238,  3425,  3426,  1189,   611,  2972,  1190,  2899,  1645,  1646,
    1647,    13, -2760,  3439,  1275,  3202,  4363,  4364,  1238,  1571,
    4367,  4368,  4369,  4370,  1236,  1665,  2167,  1237,  1236,  4035,
    1058,  1237,  1236,  3205,  1191,  1237,  1192,  1236,  1193, -1926,
    1237,   125,  1025,  1026,  1701,  1027,  1236,  1028,  1236,  1237,
    1194,  1237,  4356,  1238,  3304,  3305,   612,  1728,  2103,   928,
    1732,  2514, -1925,  1195,  2098,  1238,  3308,  3309,  3210,  1254,
     930,   931,  1196,   933,  3066,   935,  1238,  1197,  1238,  4102,
    3213,  1751,  1752,  1059,  2167,  1756,  2141,  2142,  1198,  3081,
     936,  3215,  1324,  3217,  1199,   735,  1200,  3031,  2168,  3591,
    1271,  1238,  2155,  3102,  1831,  1770,  1771,   990,  1238,  1204,
    4700,  1205,  4702,  3032, -1925,  1238,  3219,  1254,  3616,  3617,
    1208,    25,  4449,  3220,  3565,  1209,   126,  4102,  2923,  1326,
    3221,   613,  1238,  1215,  1238,  1219,   929,  4036,  4037,  3782,
    3783,  1668,  4038,  4039,  1220,  4720,  1333,  3577,  1336,  3578,
    1221,  1049,  1222,  1238,   635,   635,   635,  4473,  4474,  1457,
    3790,  3791,  1668,  1934,  1223, -1898,  4482,  1335,  3579,  3801,
    3809,  1224,  1238,  2719,  1060,   751,  3592,  2515,  2941,  1273,
    2141,  2142,  4751,  4752,  1344,  2085,  1702,  3823,  3825,  1271,
    1345,  1238,  1832,  3842,  1271,  1346,  2155,  3858,  3859,  2720,
    3105,  3106,  1704,  3108,  1669,  3110,  3111,  3112,  3113,  3114,
    3115,  3116,  4008,  2564,  3119,  1238,  1353,  3124,   952,  1359,
    3127,  1355,  1256,  1257,  3135,  1669,  4186,  4187,  4189,  4190,
    3829,  2157,  2158,  1670,  1238,  1261,  1262,  1263,  1264,  1265,
    1266,  2554,  1367,  2085,  3463,  1238,  1377,  2516, -1926,  3831,
    1407,  3146,  3147,  3148,  2988,  1389,  2721,  1391,   127,  2722,
    3832,  3541,  1409,  4732,   273,  3697,   275,  2723,  1410,  3003,
    1256,  1257,  4193,  4190,  1411,   990,  4194,  4190,  1238, -1926,
    1412,  1323,  1238,  2373,  1418,  2724,  1238,  1352,   645,   645,
     645,  1238,  1423,  3833,  4250,  3309,   635,  3834,  1458,  3711,
    1238,  4090,  1238,  1671,  2555,  2168,  4202,  4269,  4190,  1415,
    3715,  1831,  3967,  3717,  1448,  2853,   645,  1449,  3542,  1769,
    1459,  3543,  1453,  2855,  2989,  2157,  2158,  1424,  3532,  3544,
      38,   128,  1444,  2556,  1171,  4278,  4279,  1465,   645,   645,
     645,  1474,  4793,  4359,  4360,  4394,  3617,  3545,  1476,  3950,
    3765,  3325,  4395,  4190,  4396,  4190,  4398,  4190,  3968,  1475,
    1832,    44,  1460,  2168,  1477, -2760,  3346,  1251,  3969,  1831,
    1259,  1260,  1261,  1262,  1263,  1264,  1265,  1266,  4399,  4190,
    1496,  2169,  1500,  1672,  3030,   614,  2006,  2006,  2725,  1061,
    3704,   780,  3546,  3280,   129, -1926,  4405,  4406,  4407,  4406,
    2072,  4446,  4447,  2557,  2990,  4493,  3309,   615,  1501,  2819,
    4494,  3309,  1506,  4265,  2073,  3806,  1514,  3970,  1259,  1260,
    1261,  1262,  1263,  1264,  1265,  1266,  1515,  2132,  1520,   635,
    3081,  4570,  4571,   930,   931,   932,   933,   934,   935,  2169,
    2554,  4012,  4013,   616,  3324,  -678,  1251, -1926,  1521,  1347,
    3547,  2133,  3967,   936,  2510,  1062,  1523,  1063,  3081,  4342,
    4346, -2760,  1768,  1528,  3406,  4355,  4596,  3617,  3404,  3081,
    3416,  4627,  4628,  2273,  1533,  3415,  1564,    54,  4688,  3508,
    1570,  1251,   990,  2558,  2554,  4736,  4737,  3465,  4782,  4783,
     645,  3415,  1572,  2726,  3440,  1574,  3436,  1577,  3968,  1578,
    3451,  1769,   617,  2555,  4027,  4028,  3453,  3454,  3969,  1758,
    1759,   635,  2554,  1582,  1250,  3467,   273,  1586,   275,  3635,
    3636,  3599,  3600,  3415,  1587,  4142,  3375,  2206,  1592,    58,
    3081,  3477,  2556,  1593, -1600,  2170,  3490,  3856,  3857,  1594,
     990,  1615,   515,  4358,  1616,  1617,  3500,  2555,  -854,  1623,
    -671,  3415,  3548, -2110,  4287,  3549,  1626,  3970,  1625,  3902,
    4287,  1251,  3496,  1635,  1254,  4093,  3003,  1832,  1269,  1641,
    3417,  3418,  1637,  1648,  1667,  2555,  2556,  1678,  3004,  1713,
    1724,  1725,  2074,  1726,  1668,  1749,  1766,  3513,  1777,  1786,
    1802, -1600,  2511,  2170,  1808,  1348,  1828,  1621,  3450,  1673,
    1829,  1835,  2557,  3520,  2556,  3032,  1836,  4342,  3452,  2512,
    1839,  4346,  2258,  1842,  1251,  4409,  2262,  1846,  1843,  1844,
    2991,  2513,  1850,  1845, -1600,  1832, -1600,  1251,  1847,  3489,
    3971,  1849,  1861,  3550,  1862,  1863,  1864,  1892,  1909,  2727,
    2286,  1897, -1600,  1254,  1900,  1917,  2557,  1669, -1600,  1095,
    1096,  1918,  1919,  1920,  1924,  3972,   273,  2677,   275,  2075,
    1929,  1931,  3973,  1930, -1600,  1932,  1943,  4408,  1949,  1973,
    1981,   690, -1600,   690,  2557,  1982,  2988,  1986,  1254, -1600,
    2017,  -671,  2558,  2018,  2076,  2019,   526,  3516,  -854, -1600,
    2020,  2022,  3590,  3640,  2023,  4477,  4224,  2024,  2039,  2559,
    2900, -1600,  3974,  2514,  4225,  2070, -1600,  2053,  2728,  1768,
    2116,  2122,  4355,  2123,  2136, -1600,  2163,  1256,  1257,  2137,
    3194,  2181,  2183,  2184,  2132,  2201,  2558,  1234,  1235,  2195,
    2207,  4226,  2209,  1252,  2210,  2211,  2242,  2729,  4267,  4268,
    2853,  4270,  4271,  2233,  2234,  2235,  2989,  2077,  2133,  2244,
    4045,  2240,  2250,  2241,  2558,  4096,  1253,  4096,  1254,  2876,
    3628,  4055,   717,  3630,   717,   645,  2259,  2321,  2255,  2325,
    3551,  3455,  2263,  3456,   645,  3975,  2281, -1898,  4342,  4346,
    2816,  2282,  2287, -1600,  2290,  2291, -1281,   953,   953,  1095,
    1096,  2302,  1432,  2899,  2303,  3972,  1256,  1257,  2304,  3552,
    2331,  1266,  3973, -1424,  2341,  1150, -1600,  2361,  1769,  2376,
    1202,  1254,  1206,  2396,  1417,  2405, -1600,  3457,   721,  2515,
     721,  1604,  2414,  3676,  1254,   722,  2990,   722,  2411,   585,
     635,  1256,  1257,  1685,  1686,  1687,  1688,  1689,  3685,  3458,
    4522,  4632,  3974,  2078,  1095,  1096,  4183,  2417, -1600,  2439,
    2440,  3081,  4227,  2445,   726,   727,   726,   727,  2446,  2447,
    3415,  2072,  2462,  3081,  2468,  1259,  1260,  1261,  1262,  1263,
    1264,  1265,  1266,   645,  2470,  2073,  3459,  3415,  4452,  3081,
    3081,  2469,  3976,  4121,  4122,  2473,  3005,  3646,  2474,  2516,
    2475,  2486,  2476,  3081,  3415,  2477,  4125,  4462,  2559, -1600,
    2496,  2506,  -671,  4128,  2488,  3415,  1432,  2492,  3415,  2519,
    2505,  1256,  1257,  2520,  2523,  3975,  4235,  2524,  4500,  2526,
    2528,  1255,  2539, -1600,   735,  2537,   735,  3678,  2540,  4147,
    4148,  2541,  3720,  2544,  4228,   635,  1690,  1691,  1692,  1693,
    3776,  2643,  2559,  2542,  1259,  1260,  1261,  1262,  1263,  1264,
    1265,  1266,  4229,  2543,  2647,  4632,  2649,  2651,  2652,  2653,
    2654,  2655,  3102,  2656,  1256,  1257,  2657,  3703,  2658, -1600,
    2559,  2659,  2660,  2661,  2662,  4230,  3709,  1256,  1257,  2663,
    1260,  1261,  1262,  1263,  1264,  1265,  1266,   645,   746,  2664,
     746,  2665,  2666,  1258,  2667,  2668,  2669,  2670,  2671,  4131,
     531,  2672,  2681,   750,   751,   750,   751,  2700,  4637,  4638,
    3877,  4640,  2705,  1768,  2701,   525,  4777,  2702,  2709,  2510,
    2713,  2718,  3976,  2741,  2742, -1600,  1768,  2753,  2743,  4786,
    2754,  1768,  3721,  2349,  4777,  2766,  1768, -1600, -1600,  4786,
    2788,  2795,  2991,  2074,  1694,  3779,  1695,  1696,  1697,  2803,
    2812,  2826,  2831,  2813,  2827,  1698,  2834,  2835, -1600,  2836,
   -1600,  1261,  1262,  1263,  1264,  1265,  1266,  2842,  2832,  3866,
    2833,  2845,  2847,  4684,  1769,  4685,  4686,  2849,  2856,  2848,
    3460,  2860,  -671,  2862, -1600, -1600,  2880,  2881, -1600, -1600,
    2884,   645,  2857,  1904,  2861,  2866,  1236,  2885,  2886,  1237,
    4235,   526,  2454,  2453,  2904,  2905,  1957,  1958,  2915,  2936,
    2948,  1294,  1259,  1260,  1261,  1262,  1263,  1264,  1265,  1266,
    2075,  2950,  2949,  2965,  3461,  1259,  1260,  1261,  1262,  1263,
    1264,  1265,  1266,  2973,  2984,  3081,  1699,  2985,  3003,  -885,
    3016,  3021,  1095,  1096,  1295,  2076,  3022,  3025,  3026,  3028,
    3035,  3251,   990,  3029,  3415,  3037,  3038,  2511,  3081,  3039,
    3046,  3252,  3047,  3052,  4748,  3088,  1769,  3053,  4231,  4763,
    3415,  3058,   635,  3059,  2512,  3069,  3253,  3092,  4503,  1432,
    3133,   892,  3097,  3103,  1241,  1242,  2513,   527,  3254,  3255,
    3256,  3137,  2385,  1700,  1701,  3132,  3149,   772,  2202,   772,
    3158,  4097,  3163,  4097,  4098,  3169,  4098,  3257,  2077,  3171,
    3172,   841,  3173,  3180,  1296,   778,  2386,   778,  3232,  3181,
     780,  1243,   780,   781,  3907,   781,  3269,  3233,  3270,  2387,
    3222,  3238,  3236,  1244,  1393,  3240,  3245,  3998,  3248,  1297,
    4003,  2388,  3250,  1298,  1394,  3275,  3277,  4011,  4011,  4011,
    2006,  3640,  3285,  1369,  3289,  3282,  3306,  3311,  3286,  1395,
     645,  3300,  1685,  1686,  1687,  1688,  1689,  3303,  2514,  3322,
    1294,  1396,  1397,  1398,  1245,  3323,  4505,  3327,  3328,  1299,
    4099,  4100,  4099,  4100,  3340,  3341,  1246,  3331,  3347,   528,
    1399,  3881,  2389,  3351,  2390,  3354,  2608,  3363,  3422,  3362,
    1300,   842,  3424,  1295,  2078,  3491,  3486,  3494,  3497,  3498,
    3502,  3507,  3512,  1247,  2510,  1301,  3508,  3538,  3560,  2055,
    3557,  2391,  3561,  3568,  3569,  3581,  2308,  3227,  4789,  3594,
    3595,  3596,   645,   844,  3605,  3607,  1702,  3612,  3618,   541,
    3620,  2466,  2879,  2431,  3633,  3653,  3654,   845,  4055,  3671,
    1238,  1703,  1704,  3665,  3641,  3672,  3677,  3679,  3686,  3676,
    3680,  3687,  3681,  1302,  3688,  1690,  1691,  1692,  1693,  3700,
    1875,   529,  4011,  1296,  1876,  3708,  1248,  3081,  3712,  4106,
    3718,  2641,  3719,   635,  2515,  3778,  1877,  2392,  1303,  3780,
    3787,  4111,   530,  3796,  3803,  3807,  3788,   542,  1297,  3813,
    3793,  3794,  1298,  3795,  3815,  3799,  3800,  3801,   849,  3810,
    3802,  3817,  3826,  3818,  3827,   531,  3819,  3828,  3822,  3843,
    3836,  3845,   645,  3837,  3861,  3862,   543,  3258,  1432,  3854,
    3326,  3871,  3873,  3859,  3874,  3894,   850,  3878,  1299,  3888,
    4503,  4073,  2393,   851,  3259,  3879,  3903, -1510,  4149, -1515,
    3912,  3921,  2511,  3918,  2516,   532,  3904,  3922,  3908,  1300,
    3905,  3929,  3944,   544,  3987,  3937,  4019,  4024,  4023,  2512,
    3809,  3994,  4025,  1694,  1301,  1695,  1696,  1697,  4029,  4043,
    4104,  2513,  4030,   852,  1698,  4031,  4032,  4044,  4048,  4060,
    4047,  4062,  4112,  1304,  4074,  4091,  3984,   533,   635,  4075,
    4235,  4221,  1305,  4109,  4134,   534,  4124,  4135,  4092,   645,
    1400,   545,  4136,  4137,  4094,  4138,  4130,  1306,  4535,  4095,
    4120,  4126,  1302,  4140,  4680,  4141,  4150,  1401,  4184,  4195,
    4256,   635,  4760,  4535,  4196,  1307,  4204,  4192,  4197,  4199,
    4206,  4214,  4200,  4217,  4260,  4011,  4011,  1303,  4011,  4011,
    4277,  4203,  4291,  4283,  4292,  2578,  4247,  2579,  3260,  4760,
    4249,  4289,  2574,  2514,  4293,  1699,  4299,  4317,  2575,  -352,
    2576,  4319,  2577,  4338,  4320,  4348,  3261,  4362,  4365,  1308,
    4366,  4371,  1309,  2578,  4374,  2579,  3885,  4376,  4378,  -819,
    -819,  4383,  2581,  4388,  4414,  4215,  4297,  4392,  4401,  4417,
    4588,  -819,  -370,  4680,  4443,  4444,  4445,  4303,  4454,  4455,
    1310,  2584,  4310,  4461,  4464,  2580,  4467,  1878,  4479,  2585,
    2581,  2582,  1700,  1701,  4491,  3481,  4524,  2583,  4257,   519,
    4532,  4525,  1311,   520,  4531,  4542,  3262,   855,   -67,  2584,
    4536,  4324,  4328,   546,  4011,  1879,  2587,  2585,  4543,  4560,
    4574,  4575,  1304,  1880,  3263,  4576,  4577,  2586,  4583,  1402,
    1564,  1305,  4584,  2588,  4585,  4587,   821,  4586,  1769,  4590,
    4597,  4605,  4600,  4601,  2587,  4610,  1306,  4791,  4612,  2515,
    4614,  1312,  4618,   858,  4615,  2575, -2464,  4639,  1564,  4296,
    2600,  2588,  2593,  4641,  1307,   547,   859,  1881,  4642,  2589,
    2590,  2879,  4636,  2879,  4646,  4535,  2591,  4649,  4650,  4660,
    4673,  4674,  4677,  4694,  2592,  4672,   548, -1687,  -962,  1403,
    2593,  4687,  4689,  4697,  4698,  4699,  4703,  4708,  4723,  4709,
    4704,  2594,  4712,  4402,  4714,  4719,  4715,  1404,  1308,  4725,
    4728,  1309,  4729,  4478,  4730,  4735,  1882,  4739,  4741,  2516,
    4764,  2595,  4749,  4765,  4312,  4769,  4778,  4007,  4788,   273,
    4418,   275,  2821,  3126,  3792,  1702,  1546,  2597,  2997,  1310,
    4078,  1495,  4389,  4506,  4647,  2598,  4648,   862,  4076,   549,
    1703,  1704,  4255,  4080,  1576,   550,  4717,   273,  4780,   275,
    2599,  1311,  4743,  2596,   598,  2597,  4535,  1003,  4535,   863,
    2442,   864,  4753,  2598,   551,  2369,  4161,  3265,  4162,  4164,
    4165,  4167,  4734,  4168,  4221,   821,  4535,  4169,  2599,  4170,
     821,  4171,  4172,  4657,   645,  4529,  4658,  4623,  4175,   552,
    4484,  4176,  4177,  4541,  4540,  1619,  2114,  2352,  4262,  4391,
    1312,  3073,  2600,  2625,  3714,  3288,   553,  4535,  4535,  2601,
    3864,  3611,  4768,  4216,  3293,  2819,  4466,   821,  1907,  3867,
    4559,  4635,  4679,  4373,  4084,  4711,  3071,  2602,  2166,  1039,
    3669,  3476,  3911,  3078,   821,  3483,  4448,  2601,  4103,  4105,
    4695,  4411,  3554,  3952,  4285,  3993,  4139,  4558,  4129,  2982,
    3224,  3584,  3586,  3582,  4509,  2602,   537,   538,  4594,  2603,
    4451,  4328,  4595,  2699,  2138,  4457,  4552,  4459,  3145,  4337,
    4471,  4472,  3691,  4288,  1584,  1769,  3075,  3475,   821,   821,
     821,   821,  2606,  4108,  2607,  2040,  1519,  2940,  2646,  2863,
     821,  4544,  2609,  3924,  2164,  2423,   645,  3279,  2604,  2128,
    2843,  2794,  4634,  2605,  3606,  4182,  2887,  1029,  2452,  3593,
    2606,  4410,  2607,  1422,  2732,  2734,  1723,  2608,  3247,  2960,
    2609,  3650,  2954,  2793,  2139,  4253,  2140,  2141,  2142,  2143,
    2144,  3789,  2145,  2146,  2147,  2148,  2149,  2150,  2151,  2152,
    2153,  4385,  2154,  2155,  2156,  4644,  1666,  2810,  4645,  3932,
    2056,  2610,  3337,  3336,  3470,  4064,  4057,  4733,  2703,  4551,
    2894,  1556,  1890,  1557,  2615,  2611,  2612,  2613,  2614,  1922,
    2841,  3624,  2869,  3869,  3623,  3659,  4556,  1558,   821,  1017,
    4567,  4568,  1559,   645,  2200,  1118,   998,  2937,  2498,  1001,
    1998,  2499,  2615,  2363,  3936,  3610,  1928,  4710,  4731,  3102,
    3102,  4643,  4578,  4787,  4790,  4133,  3627,  1946,  2913,  3643,
     955,  2324,  3644,   956,  2480,  2911,  2910,  2903,  2410,  1282,
    2616,  2617,  2618,  1938,   923,  4662,  4205,  2619,  1408,  1883,
    2190,  2882,  4670,  3266,  4213,   925,  1414,  1550,  1035,  1036,
    1037,     0,  1551,  2620,     0,     0,     0,  2621,  2616,  2617,
    2618,  1552,     0,     0,     0,  2619,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2622,     0,     0,     0,
       0,  2620,  2157,  2158,     0,  2621,     0,     0,     0,     0,
       0,     0,     0,     0,  2624,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2622,  2578,     0,  2579,     0,  2623,
       0,     0,     0,     0,     0,     0,     0,  4781,     0,     0,
       0,     0,  2624,  4721,     0,     0,     0,     0,  4726,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -819,
    -819,     0,  2581,     0,     0,     0,     0,     0,     0,     0,
       0,  -819,     0,     0,  3385,     0,     0,     0,     0,     0,
       0,  2584,     0,     0,  4761,     0,     0,     0,  4693,  2585,
       0,     0,     0,     0,     0,     0,     0,     0,   821,     0,
       0,     0,     0,     0,     0,     0,  -962,     0,     0,  1769,
       0,  4761,     0,     0,     0,     0,  2587,     0,   645,     0,
       0,     0,  1769,     0,     0,     0,     0,  1769,     0,     0,
    1564,     0,  1769,  2588,     0,   821,   821,     0,     0,     0,
       0,     0,     0,     0,   821,   821,   821,   821,   821,   821,
     821,   821,   821,   821,   821,   821,     0,     0,     0,     0,
       0,     0,  2593,     0,   821,   821,     0,   821,   821,     0,
       0,     0,   821,     0,     0,   821,   821,   821,   821,     0,
     821,   821,   821,     0,     0,     0,     0,     0,     0,   821,
     821,     0,   821,   821,   821,   821,   821,     0,     0,   821,
     821,   821,   821,   821,   821,   821,   821,   821,   821,   821,
       0,   821,     0,     0,   821,   821,     0,     0,     0,   821,
       0,     0,     0,   821,   821,   821,     0,     0,     0,   273,
       0,   275,     0,     0,     0,     0,     0,  2597,   821,   821,
     821,     0,     0,     0,     0,  2598,     0,   821,     0,     0,
       0,     0,     0,     0,   821,   821,   821,     0,   821,     0,
    2599,     0,     0,     0,     0,   821,   821,   821,     0,   821,
     821,   821,   821,   821,  2975,   821,   821,   821,   821,   821,
     821,   821,   821,     0,     0,     0,   821,   821,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2601,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   958,
       0,     0,     0,     0,     0,     0,     0,  2602,     0,     0,
       0,   959,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   896,   960,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   821,     0,     0,   961,   942,     0,
       0,     0,     0,     0,     0,   962,     0,     0,     0,     0,
     963,     0,  2606,     0,  2607,     0,     0,     0,     0,     0,
       0,     0,  2609,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   964,     0,   965,     0,
     966,     0,  1126,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   967,     0,     0,     0,     0,   821,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   821,     0,     0,
       0,     0,     0,    14,    15,     0,     0,     0,     0,  1163,
       0,     0,     0,   821,     0,     0,     0,   821,     0,     0,
       0,     0,     0,     0,  2615,     0,  1181,     0,     0, -1898,
     968,     0,     0,     0,     0,   969,     0,     0,   970,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   971,     0,   972,     0,
       0,     0,   821,  1228,     0,     0,   973,     0,   974,     0,
    2616,  2617,  2618,     0,     0,     0,     0,  2619,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2620,   975,   976,   977,  2621,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2622,   978,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2624,     0,     0,     0,     0,   979,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1368,     0,     0,     0,     0,     0,     0,     0,     0,   980,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2976,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   821,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   981,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   982,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   983,   984,     0,     0,   985,   986,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   987,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   821,   821,   821,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   988,     0,     0,
    1600,     0,     0,     0,     0,     0,     0,     0,   821,     0,
     989,     0,     0,     0,   821,     0,     0,   821,     0,   821,
       0,     0,     0,     0,     0,   821,     0,   821,   821,     0,
       0,     0,     0,     0,     0,     0,     0,  1639,  1640,     0,
       0, -2504,     0,     0,     0,   990,  1650,  1651,     0,     0,
    1654,  1655,  1656,  1657,  1660,  1661,  1662,  1663,     0,     0,
       0,     0,     0,   991,   992,     0,  1679,  1680,     0,  1681,
    1682,     0,     0,     0,     0,     0,     0,  1715,  1716,  1717,
    1718,     0,     0,  1721,     0,     0,     0,     0,     0,     0,
       0,  1729,  1730,     0,  1733,  1734,     0,     0,     0,     0,
       0,  1738,  1739,  1740,     0,     0,  1743,  1744,  1745,  1746,
    1747,  1748,   993,  1750,     0,     0,  1753,  1754,     0,     0,
     821,  1757,     0, -2504,     0,  1760,  1764,  1765,     0,     0,
       0,   994,     0,     0,     0,     0,     0,     0,     0,     0,
    1772,  1773,  1774,     0,     0,     0,     0,     0,     0,  1782,
       0,     0,     0,     0,     0,     0,  1787,  1788,  1789,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   821,     0,     1,     0,     2,     0,     0,
       0,     0,   821,     0,     0,     0,     0,     0,     0,  1825,
       0,     0,     0,     0,     3,     0,     0,     0,     4,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     5,     6,     0,     0,     0,     0,     0,     0,
       7,     0,     0,     0,     0,     8,     9,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    10,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    11,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1894,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    12,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      16,    17,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2640,     0,    18,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    19,  1945,
       0,     0,     0,   821,     0,     0,     0,     0,     0,  1951,
       0,     0,     0,     0,     0,    20,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1979,     0,     0,     0,  1985,
      21,     0,    22,     0,     0,     0,     0,    23,     0,     0,
       0,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    25,     0,    26,
     821,     0,     0,     0,   821,     0,     0,     0,     0,   821,
     821,     0,     0,     0,  2030,    27,     0,     0,   821,     0,
     821,     0,   821,   821,   821,   821,     0,     0,   821,     0,
       0,     0,     0,    28,     0,     0,     0,    29,   821,     0,
     821,   821,     0,   821,   821,   821,   821,     0,   821,     0,
       0,   821,     0,     0,     0,     0,     0,     0,     0,     0,
     821,     0,     0,     0,     0,     0,     0,   821,     0,   821,
       0,   821,   821,     0,   821,   821,     0,     0,     0,   821,
     821,   821,     0,     0,     0,   821,   821,   821,     0,   821,
       0,   821,     0,   821,     0,   821,     0,   821,     0,     0,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   821,     0,     0,     0,     0,     0,     0,   821,     0,
       0,   821,     0,    30,     0,     0,     0,   821,     0,     0,
     821,     0,     0,     0,   821,     0,     0,     0,     0,     0,
      31,  2578,    32,  2579,     0,     0,  2212,     0,     0,     0,
       0,     0,     0,     0,     0,    33,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    34,     0,     0,     0,
       0,     0,     0,     0,     0,  -819,  -819,     0,  2581,     0,
       0,     0,     0,     0,     0,     0,     0,  -819,    35,     0,
       0,    36,     0,    37,     0,     0,    38,  2584,   821,    39,
      40,     0,     0,     0,     0,  2585,     0,     0,     0,     0,
      41,     0,     0,    42,     0,     0,     0,     0,     0,     0,
       0,    43,     0,     0,     0,     0,     0,    44,     0,     0,
       0,     0,  2587,     0,     0,    45,     0,     0,     0,     0,
      46,    47,    48,     0,     0,     0,  1564,     0,     0,  2588,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2294,
    2296,  2298,     0,     0,     0,     0,     0,     0,   821,     0,
       0,     0,    49,     0,     0,     0,     0,     0,  2593,    50,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2333,     0,     0,     0,     0,     0,     0,     0,     0,  2338,
       0,  2339,     0,     0,     0,     0,     0,     0,     0,     0,
    2640,     0,     0,     0,    51,     0,     0,     0,     0,     0,
       0,     0,     0,  2995,     0,     0,    52,     0,     0,     0,
      53,     0,     0,    54,     0,   273,     0,   275,     0,    55,
       0,  2995,  2995,  2597,     0,     0,     0,     0,     0,     0,
       0,  2598,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2599,     0,     0,    56,
       0,     0,     0,     0,     0,    57,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    58,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2419,  2640,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     1,     0,     2,  2601,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2602,     0,     4,     0,     0,     0,     0,
       0,  2995,  2995,     0,     0,  2479,     0,     0,     0,     5,
       6,     0,     0,     0,     0,     0,     0,     7,     0,     0,
       0,     0,     8,     9,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   821,     0,     0,
       0,   821,     0,    10,     0,     0,     0,     0,  2606,     0,
    2607,     0,     0,     0,     0,     0,     0,     0,  2609,     0,
       0,     0,    11,     0,     0,     0,     0,     0,   821,   821,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    12,     0,   821,     0,
       0,     0,     0,     0,    13,    14,    15,   821,     0,   821,
       0,   821,     0,     0,     0,     0,     0,    16,    17,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   821,     0,
    2615,     0,     0,   821,     0,    19,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    20,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   821,     0,     0,    21,     0,    22,
       0,     0,     0,     0,    23,  2650,     0,     0,    24,     0,
       0,     0,     0,     0,     0,     0,  2616,  2617,  2618,     0,
       0,     0,     0,  2619,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    25,     0,    26,     0,     0,  2620,
       0,     0,     0,  2621,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2622,     0,     0,     0,     0,     0,   821,     0,
      28,     0,  2712,     0,    29,     0,  2714,     0,     0,     0,
    2624,  2716,  2717,     0,     0,     0,     0,     0,     0,     0,
    1657,     0,  2733,     0,  1657,     0,  2736,  2737,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2744,     0,  2745,     0,     0,  2747,  2748,  2749,  2750,     0,
    2751,     0,   821,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2755,     0,     0,     0,     0,  2640,     0,  2756,
       0,  2757,     0,  2758,  2759,     0,  2760,     0,     0,     0,
       0,  2763,  2764,  2765,     0,     0,     0,  2767,  2768,  2769,
       0,  2770,     0,  2772,     0,  2774,     0,  2776,     0,  2777,
      30,     0,     0,     0,  2778,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    31,     0,    32,
       0,     0,     0,  2798,     0,     0,     0,     0,     0,     0,
       0,     0,    33,     0,     0,     0,     0,     0,     0,  2808,
       0,     0,  2811,    34,     0,     0,     0,     0,     0,     0,
       0,  3722,  3723,     0,     0,     0,     0,  3724,  2640,  3725,
       0,  3726,  3727,     0,     0,    35,     0,     0,    36,     0,
      37,   821,   821,    38,     0,     0,    39,    40,  3541,     0,
       0,     0,     0,     0,     0,     0,     0,    41,     0,     0,
      42,     0,     0,     0,     0,     0,     0,     0,    43,     0,
       0,     0,     0,     0,    44,     0,     0,     0,     0,     0,
       0,     0,    45,     0,     0,     0,     0,    46,    47,    48,
    2995,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3728,     0,     0,  3729,     0,
       0,     0,     0,   821,     0,     0,  3730,     0,     0,    49,
       0,     0,     0,     0,     0,     0,    50,     0,     0,     0,
       0,     0,     0,     0,  3731,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   821,   821,     0,   821,     0,
    1979,  3732,     0,     0,     0,     0,     0,   821,     0,     0,
       0,     0,   821,     0,     0,   821,     0,   821,   821,     0,
       0,    51,     0,     0,     0,     0,     0,  3733,     0,  3734,
       0,     0,     0,    52,     0,     0,     0,    53,     0,     0,
      54,     0,  3735,  3736,     0,     0,    55,     0,     0,     0,
     821,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    56,     0,     0,     0,
       0,   821,    57,     0,     0,     0,     0,  3737,     0,     0,
       0,     0,    58,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   821,     0,     0,     0,     0,
       0,     0,     0,  3473,     0,     0,  3738,     0,     0,  2575,
       0,  2576,     0,     0,     0,  3739,  3740,     0,  3741,     0,
       0,     0,     0,     0,  2578,     0,  2579,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   821,  3742,  3743,  3744,  2580,     0,     0,     0,
       0,  2581,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3745,  3746,  3747,     0,     0,     0,     0,  3748,
    2584,  2640,  3749,     0,     0,     0,     0,     0,  2585,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2586,  3750,
    3751,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2587,     0,     0,     0,  3154,
       0,     0,     0,  3156,     0,     0,     0,     0,     0,  1564,
       0,     0,  2588,     0,     0,  3752,  3753,     0,     0,     0,
    2589,     0,     0,     0,     0,     0,     0,  3474,     0,     0,
    3183,  3184,     0,     0,     0,  2592,     0,     0,     0,     0,
    3754,  2593,     0,     0,     0,     0,     0,     0,     0,     0,
    3204,     0,     0,     0,     0,     0,     0,     0,     0,  3214,
       0,  3216,     0,  3218,  2578,     0,  2579,     0,     0,     0,
       0,     0,  2595,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3755,     0,     0,     0,
    3756,  2581,     0,     0,     0,     0,     0,     0,   273,     0,
     275,     0,     0,     0,  3757,     0,  2597,     0,     0,     0,
    2584,     0,     0,     0,  2598,     0,  3276,     0,  2585,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2599,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2587,     0,     0,     0,     0,
       0,     0,     0,  2600,     0,     0,     0,     0,     0,  1564,
       0,  3758,  2588,     0,  3759,     0,     0,  3760,  3761,  3762,
    3763,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   821,  2601,     0,
    1979,  2593,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2602,     0,     0,     0,
    2603,  3764,  3765,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   821,     0,     0,     0,     0,     0,     0,
       0,   821,     0,     0,     0,     0,     0,     0,  3766,     0,
       0,     0,     0,     0,  3359,     0,     0,     0,     0,     0,
       0,     0,   821,     0,  2605,     0,     0,     0,   273,     0,
     275,  2606,     0,  2607,     0,     0,  2597,     0,     0,     0,
       0,  2609,     0,     0,  2598,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2599,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2612,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3983,     0,     0,     0,     0,     0,
       0,     0,     0,  2615,     0,     0,     0,     0,  2601,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3492,  3493,     0,  2602,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   821,     0,     0,     0,
     821,     0,     0,     0,     0,     0,     0,     0,     0,  2616,
    2617,  2618,     0,     0,     0,     0,  2619,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2606,  2620,  2607,     0,   821,  2621,     0,     0,     0,
       0,  2609,     0,     0,     0,  3524,     0,     0,     0,   821,
       0,     0,     0,     0,     0,  2622,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2624,     0,     0,     0,  3563,  3564,     0,
       0,     0,     0,     0,     0,     0,  2640,     0,     0,  3571,
       0,     0,     0,     0,  3573,     0,     0,  3574,     0,  3575,
    3576,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2615,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3983,     0,     0,     0,     0,
       0,     0,     0,  3602,     0,     0,     0,     0,     0,  2616,
    2617,  2618,     0,  4179,     0,     0,  2619,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3602,     0,     0,
       0,     0,  2620,     0,     0,     0,  2621,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2622,     0,     0,     0,     0,
       0,   821,     0,     0,     0,     0,     0,     0,     0,   821,
       0,     0,     0,  2624,     0,   821,     0,   821,     0,     0,
       0,     0,     0,     0,  3602,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   821,     0,     0,     0,
       0,     0,  4179,  4179,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4336,     0,     0,     0,  4336,
    4336,     0,     0,     0,     0,     0,   821,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   821,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   821,     0,   821,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   821,     0,  4179,
    4179,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4336,  3602,
       0,     0,     0,     0,     0,     0,     0,  4336,     0,     0,
       0,  4336,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3887,     0,     0,     0,     0,
       0,     0,     0,  3359,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4336,  3915,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   821,     0,  4179,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4179,   821,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4553,     0,     0,     0,     0,     0,     0,   821,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4179,     0,     0,     0,     0,     0,  4336,     0,  4336,  4336,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   821,  4179,     0,     0,     0,  3359,     0,
       0,     0,  4022,     0,     0,     0,  4179,  4179,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   821,
       0,     0,     0,     0,     0,     0,     0,  3602,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3359,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4179,     0,     0,     0,     0,
       0,     0,   821,     0,     0,  4179,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   821,     0,     0,     0,     0,     0,     0,  4179,
       0,  4179,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   821,     0,     0,   821,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4179,     0,     0,     0,
       0,     0,     0,     0,  4179,     0,  4179,     0,  4179,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4179,     0,     0,     0,  4179,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4179,  4179,     0,     0,     0,     0,   821,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4179,  4179,     0,
       0,     0,  4179,     0,     0,     0,     0,     0,     0,     0,
       0,  4241,     0,     0,     0,     0,     0,  4246,     0,  4248,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   821,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4298,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3359,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3359,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4412,     0,  4413,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4421,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4533,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4538,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3602,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4608,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4664,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4696,     0,     0,     0,     0,     0,
       0,     0,     0,   142,     0,   143,   686,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,  4713,     0,
     687,     0,   152,   153,   154,   155,   156,   157,   688,   159,
       0,   160,     0,     0,   689,   161,   690,   691,   692,   162,
     693,     0,   163,   164,   165,  1761,   166,     0,   167,   168,
       0,     0,   169,   694,   695,   170,   171,     0,   172,   696,
     697,   174,   175,     0,   176,   177,   178,   179,   180,   698,
     182,     0,   699,   184,   700,   701,   702,   703,   704,  4762,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   705,   204,     0,   205,   706,
     707,   206,     0,     0,   207,   708,   208,   709,   710,   209,
       0,   210,   711,   712,     0,   211,   212,   213,   713,   714,
     715,     0,     0,     0,     0,   716,   216,   717,     0,  3602,
     718,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   719,     0,   244,   245,
     246,   247,   720,   721,   248,   249,     0,   250,   251,   252,
     722,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   723,   260,   724,   262,   263,     0,
     264,     0,   725,     0,   265,   266,   267,     0,   268,   726,
     727,     0,   269,   270,     0,     0,     0,   728,   272,   273,
     274,   275,   729,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,   730,   281,   282,   731,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   732,     0,  1762,   292,     0,
     733,   293,   294,     0,     0,     0,     0,     0,   734,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,   735,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   736,     0,   321,   322,   323,
     324,   737,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   738,   332,     0,     0,   739,   334,   740,   335,
       0,   336,   741,   742,   743,   744,   745,   341,   342,   343,
     344,   345,     0,   746,   346,   347,     0,     0,   348,   349,
     350,   351,   747,   748,   749,   352,   353,     0,   750,   751,
     354,     0,   355,   356,   752,     0,   358,   359,   360,   361,
       0,   362,   363,     0,     0,     0,     0,     0,     0,     0,
       0,   364,   365,   366,     0,   753,   367,     0,   368,     0,
     369,   370,   754,   372,   373,   374,   375,   755,   756,   378,
     757,     0,   379,   380,   381,     0,   382,     0,   383,   384,
     385,   386,   387,     0,   758,   389,   390,     0,     0,   391,
       0,     0,     0,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,   400,   401,     0,   402,   403,     0,   404,
     405,   406,   759,   760,   407,     0,   408,     0,   409,   410,
       0,   411,   412,     0,   413,     0,   761,     0,   762,   415,
     416,   417,   418,   419,   420,   763,   764,   423,   424,   425,
     426,     0,   765,   428,     0,     0,     0,   429,   430,   431,
     432,     0,     0,     0,   433,     0,     0,     0,   434,     0,
     435,   436,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,     0,     0,     0,     0,   447,
     448,     0,   449,     0,     0,   450,     0,     0,   451,   452,
       0,     0,     0,   453,   766,   767,   454,   455,     0,   456,
     457,   768,   459,   460,   461,   769,   770,   462,   463,   464,
     465,   771,   466,   467,     0,   468,     0,   469,   470,   471,
     472,     0,   772,   473,   474,     0,   773,   774,   775,   776,
       0,     0,     0,     0,  1763,   479,   480,   481,     0,   777,
     778,   779,   483,   484,   485,   780,   486,   487,   781,   488,
     489,     0,   490,   491,     0,     0,   492,     0,     0,   493,
       0,   494,     0,   782,   496,   497,     0,     0,   783,   784,
     785,   786,   498,     0,     0,   499,   787,     0,   788,   500,
     501,   502,   503,   504,   789,   790,     0,     0,     0,     0,
       0,     0,   507,   508,     0,   509,   510,   511,     0,     0,
     791,     0,     0,     0,     0,   792,   793,     0,     0,     0,
       0,   794,   795,     0,     0,   796,   797,     0,     0,   798,
     799,   142,     0,   143,   686,   145,   146,   147,   148,  1975,
       0,   149,     0,     0,     0,   150,     0,     0,   687,     0,
     152,   153,   154,   155,   156,   157,   688,   159,     0,   160,
       0,     0,  1976,   161,   690,   691,   692,   162,   693,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,   694,   695,   170,   171,     0,   172,   696,   697,   174,
     175,     0,   176,   177,   178,   179,   180,   698,   182,     0,
     699,   184,   700,   701,   702,   703,   704,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   705,   204,     0,   205,   706,   707,   206,
       0,     0,   207,   708,   208,   709,   710,   209,     0,   210,
     711,   712,     0,   211,   212,   213,   713,   714,   715,     0,
       0,     0,     0,   716,   216,   717,     0,     0,  1977,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,   719,     0,   244,   245,   246,   247,
     720,   721,   248,   249,     0,   250,   251,   252,   722,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   723,   260,   724,   262,   263,     0,   264,     0,
     725,     0,   265,   266,   267,     0,   268,   726,   727,     0,
     269,   270,     0,     0,     0,   728,   272,   273,   274,   275,
     729,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,   730,   281,   282,   731,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   732,     0,     0,   292,     0,   733,   293,
     294,     0,     0,     0,     0,     0,   734,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,   735,     0,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,   736,     0,   321,   322,   323,   324,   737,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     738,   332,     0,     0,   739,   334,   740,   335,     0,   336,
     741,   742,   743,   744,   745,   341,   342,   343,   344,   345,
       0,   746,   346,   347,     0,     0,   348,   349,   350,   351,
     747,   748,   749,   352,   353,     0,   750,   751,   354,     0,
     355,   356,   752,  1978,   358,   359,   360,   361,     0,   362,
     363,     0,     0,     0,     0,     0,     0,     0,     0,   364,
     365,   366,     0,   753,   367,     0,   368,     0,   369,   370,
     754,   372,   373,   374,   375,   755,   756,   378,   757,     0,
     379,   380,   381,     0,   382,     0,   383,   384,   385,   386,
     387,     0,   758,   389,   390,     0,     0,   391,     0,     0,
       0,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,   400,   401,     0,   402,   403,     0,   404,   405,   406,
     759,   760,   407,     0,   408,     0,   409,   410,     0,   411,
     412,     0,   413,     0,   761,     0,   762,   415,   416,   417,
     418,   419,   420,   763,   764,   423,   424,   425,   426,     0,
     765,   428,     0,     0,     0,   429,   430,   431,   432,     0,
       0,     0,   433,     0,     0,     0,   434,     0,   435,   436,
     437,   438,   439,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,     0,     0,     0,     0,   447,   448,     0,
     449,     0,     0,   450,     0,     0,   451,   452,     0,     0,
       0,   453,   766,   767,   454,   455,     0,   456,   457,   768,
     459,   460,   461,   769,   770,   462,   463,   464,   465,   771,
     466,   467,     0,   468,     0,   469,   470,   471,   472,     0,
     772,   473,   474,     0,   773,   774,   775,   776,     0,     0,
       0,     0,     0,   479,   480,   481,     0,   777,   778,   779,
     483,   484,   485,   780,   486,   487,   781,   488,   489,     0,
     490,   491,     0,     0,   492,     0,     0,   493,     0,   494,
       0,   782,   496,   497,     0,     0,   783,   784,   785,   786,
     498,     0,     0,   499,   787,     0,   788,   500,   501,   502,
     503,   504,   789,   790,     0,     0,     0,     0,     0,     0,
     507,   508,     0,   509,   510,   511,     0,     0,   791,     0,
       0,     0,     0,   792,   793,     0,     0,     0,     0,   794,
     795,     0,     0,   796,   797,     0,     0,   798,   799,   142,
       0,   143,   686,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   687,     0,   152,   153,
     154,   155,   156,   157,   688,   159,     0,   160,     0,     0,
     689,   161,   690,   691,   692,   162,   693,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,   694,
     695,   170,   171,     0,   172,   696,   697,   174,   175,     0,
     176,   177,   178,   179,   180,   698,   182,     0,   699,   184,
     700,   701,   702,   703,   704,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   705,   204,     0,   205,   706,   707,   206,     0,     0,
     207,   708,   208,   709,   710,   209,     0,   210,   711,   712,
       0,   211,   212,   213,   713,   714,   715,     0,     0,     0,
       0,   716,   216,   717,     0,     0,   718,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,   719,     0,   244,   245,   246,   247,   720,   721,
     248,   249,     0,   250,   251,   252,   722,     0,   253,     0,
       0,     0,   254,  2293,   255,     0,   256,     0,   257,   258,
     723,   260,   724,   262,   263,     0,   264,     0,   725,     0,
     265,   266,   267,     0,   268,   726,   727,     0,   269,   270,
       0,     0,     0,   728,   272,   273,   274,   275,   729,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
     730,   281,   282,   731,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   732,     0,     0,   292,     0,   733,   293,   294,     0,
       0,     0,     0,     0,   734,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,   735,     0,     0,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,   736,     0,   321,   322,   323,   324,   737,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   738,   332,
       0,     0,   739,   334,   740,   335,     0,   336,   741,   742,
     743,   744,   745,   341,   342,   343,   344,   345,     0,   746,
     346,   347,     0,     0,   348,   349,   350,   351,   747,   748,
     749,   352,   353,     0,   750,   751,   354,     0,   355,   356,
     752,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,   753,   367,     0,   368,     0,   369,   370,   754,   372,
     373,   374,   375,   755,   756,   378,   757,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     758,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,   759,   760,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   761,     0,   762,   415,   416,   417,   418,   419,
     420,   763,   764,   423,   424,   425,   426,     0,   765,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
     766,   767,   454,   455,     0,   456,   457,   768,   459,   460,
     461,   769,   770,   462,   463,   464,   465,   771,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,   772,   473,
     474,     0,   773,   774,   775,   776,     0,     0,     0,     0,
       0,   479,   480,   481,     0,   777,   778,   779,   483,   484,
     485,   780,   486,   487,   781,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   782,
     496,   497,     0,     0,   783,   784,   785,   786,   498,     0,
       0,   499,   787,     0,   788,   500,   501,   502,   503,   504,
     789,   790,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,     0,   791,     0,     0,     0,
       0,   792,   793,     0,     0,     0,     0,   794,   795,     0,
       0,   796,   797,     0,     0,   798,   799,   142,     0,   143,
     686,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   687,     0,   152,   153,   154,   155,
     156,   157,   688,   159,     0,   160,     0,     0,   689,   161,
     690,   691,   692,   162,   693,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,   694,   695,   170,
     171,     0,   172,   696,   697,   174,   175,     0,   176,   177,
     178,   179,   180,   698,   182,     0,   699,   184,   700,   701,
     702,   703,   704,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   705,
     204,     0,   205,   706,   707,   206,     0,     0,   207,   708,
     208,   709,   710,   209,     0,   210,   711,   712,     0,   211,
     212,   213,   713,   714,   715,     0,     0,     0,     0,   716,
     216,   717,     0,     0,   718,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
     719,     0,   244,   245,   246,   247,   720,   721,   248,   249,
       0,   250,   251,   252,   722,     0,   253,     0,     0,     0,
     254,  2295,   255,     0,   256,     0,   257,   258,   723,   260,
     724,   262,   263,     0,   264,     0,   725,     0,   265,   266,
     267,     0,   268,   726,   727,     0,   269,   270,     0,     0,
       0,   728,   272,   273,   274,   275,   729,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,   730,   281,
     282,   731,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   732,
       0,     0,   292,     0,   733,   293,   294,     0,     0,     0,
       0,     0,   734,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,   735,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,   736,
       0,   321,   322,   323,   324,   737,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   738,   332,     0,     0,
     739,   334,   740,   335,     0,   336,   741,   742,   743,   744,
     745,   341,   342,   343,   344,   345,     0,   746,   346,   347,
       0,     0,   348,   349,   350,   351,   747,   748,   749,   352,
     353,     0,   750,   751,   354,     0,   355,   356,   752,     0,
     358,   359,   360,   361,     0,   362,   363,     0,     0,     0,
       0,     0,     0,     0,     0,   364,   365,   366,     0,   753,
     367,     0,   368,     0,   369,   370,   754,   372,   373,   374,
     375,   755,   756,   378,   757,     0,   379,   380,   381,     0,
     382,     0,   383,   384,   385,   386,   387,     0,   758,   389,
     390,     0,     0,   391,     0,     0,     0,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,   400,   401,     0,
     402,   403,     0,   404,   405,   406,   759,   760,   407,     0,
     408,     0,   409,   410,     0,   411,   412,     0,   413,     0,
     761,     0,   762,   415,   416,   417,   418,   419,   420,   763,
     764,   423,   424,   425,   426,     0,   765,   428,     0,     0,
       0,   429,   430,   431,   432,     0,     0,     0,   433,     0,
       0,     0,   434,     0,   435,   436,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,     0,
       0,     0,     0,   447,   448,     0,   449,     0,     0,   450,
       0,     0,   451,   452,     0,     0,     0,   453,   766,   767,
     454,   455,     0,   456,   457,   768,   459,   460,   461,   769,
     770,   462,   463,   464,   465,   771,   466,   467,     0,   468,
       0,   469,   470,   471,   472,     0,   772,   473,   474,     0,
     773,   774,   775,   776,     0,     0,     0,     0,     0,   479,
     480,   481,     0,   777,   778,   779,   483,   484,   485,   780,
     486,   487,   781,   488,   489,     0,   490,   491,     0,     0,
     492,     0,     0,   493,     0,   494,     0,   782,   496,   497,
       0,     0,   783,   784,   785,   786,   498,     0,     0,   499,
     787,     0,   788,   500,   501,   502,   503,   504,   789,   790,
       0,     0,     0,     0,     0,     0,   507,   508,     0,   509,
     510,   511,     0,     0,   791,     0,     0,     0,     0,   792,
     793,     0,     0,     0,     0,   794,   795,     0,     0,   796,
     797,     0,     0,   798,   799,   142,     0,   143,   686,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   687,     0,   152,   153,   154,   155,   156,   157,
     688,   159,     0,   160,     0,     0,   689,   161,   690,   691,
     692,   162,   693,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,   694,   695,   170,   171,     0,
     172,   696,   697,   174,   175,     0,   176,   177,   178,   179,
     180,   698,   182,     0,   699,   184,   700,   701,   702,   703,
     704,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   705,   204,     0,
     205,   706,   707,   206,     0,     0,   207,   708,   208,   709,
     710,   209,     0,   210,   711,   712,     0,   211,   212,   213,
     713,   714,   715,     0,     0,     0,     0,   716,   216,   717,
       0,     0,   718,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   719,     0,
     244,   245,   246,   247,   720,   721,   248,   249,     0,   250,
     251,   252,   722,     0,   253,     0,     0,     0,   254,  2297,
     255,     0,   256,     0,   257,   258,   723,   260,   724,   262,
     263,     0,   264,     0,   725,     0,   265,   266,   267,     0,
     268,   726,   727,     0,   269,   270,     0,     0,     0,   728,
     272,   273,   274,   275,   729,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,   730,   281,   282,   731,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   732,     0,     0,
     292,     0,   733,   293,   294,     0,     0,     0,     0,     0,
     734,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,   735,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   736,     0,   321,
     322,   323,   324,   737,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   738,   332,     0,     0,   739,   334,
     740,   335,     0,   336,   741,   742,   743,   744,   745,   341,
     342,   343,   344,   345,     0,   746,   346,   347,     0,     0,
     348,   349,   350,   351,   747,   748,   749,   352,   353,     0,
     750,   751,   354,     0,   355,   356,   752,     0,   358,   359,
     360,   361,     0,   362,   363,     0,     0,     0,     0,     0,
       0,     0,     0,   364,   365,   366,     0,   753,   367,     0,
     368,     0,   369,   370,   754,   372,   373,   374,   375,   755,
     756,   378,   757,     0,   379,   380,   381,     0,   382,     0,
     383,   384,   385,   386,   387,     0,   758,   389,   390,     0,
       0,   391,     0,     0,     0,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,   400,   401,     0,   402,   403,
       0,   404,   405,   406,   759,   760,   407,     0,   408,     0,
     409,   410,     0,   411,   412,     0,   413,     0,   761,     0,
     762,   415,   416,   417,   418,   419,   420,   763,   764,   423,
     424,   425,   426,     0,   765,   428,     0,     0,     0,   429,
     430,   431,   432,     0,     0,     0,   433,     0,     0,     0,
     434,     0,   435,   436,   437,   438,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,     0,     0,     0,
       0,   447,   448,     0,   449,     0,     0,   450,     0,     0,
     451,   452,     0,     0,     0,   453,   766,   767,   454,   455,
       0,   456,   457,   768,   459,   460,   461,   769,   770,   462,
     463,   464,   465,   771,   466,   467,     0,   468,     0,   469,
     470,   471,   472,     0,   772,   473,   474,     0,   773,   774,
     775,   776,     0,     0,     0,     0,     0,   479,   480,   481,
       0,   777,   778,   779,   483,   484,   485,   780,   486,   487,
     781,   488,   489,     0,   490,   491,     0,     0,   492,     0,
       0,   493,     0,   494,     0,   782,   496,   497,     0,     0,
     783,   784,   785,   786,   498,     0,     0,   499,   787,     0,
     788,   500,   501,   502,   503,   504,   789,   790,     0,     0,
       0,     0,     0,     0,   507,   508,     0,   509,   510,   511,
       0,     0,   791,     0,     0,     0,     0,   792,   793,     0,
       0,     0,     0,   794,   795,     0,     0,   796,   797,     0,
       0,   798,   799,   142,     0,   143,   686,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     687,     0,   152,   153,   154,   155,   156,   157,   688,   159,
       0,   160,     0,     0,   689,   161,   690,   691,   692,   162,
     693,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,   694,   695,   170,   171,     0,   172,   696,
     697,   174,   175,     0,   176,   177,   178,   179,   180,   698,
     182,     0,   699,   184,   700,   701,   702,   703,   704,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   705,   204,     0,   205,   706,
     707,   206,     0,     0,   207,   708,   208,   709,   710,   209,
       0,   210,   711,   712,     0,   211,   212,   213,   713,   714,
     715,     0,     0,     0,     0,   716,   216,   717,     0,     0,
     718,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   719,     0,   244,   245,
     246,   247,   720,   721,   248,   249,     0,   250,   251,   252,
     722,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   723,   260,   724,   262,   263,     0,
     264,     0,   725,     0,   265,   266,   267,     0,   268,   726,
     727,     0,   269,   270,     0,     0,     0,   728,   272,   273,
     274,   275,   729,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,   730,   281,   282,   731,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   732,     0,     0,   292,     0,
     733,   293,   294,     0,     0,     0,     0,     0,   734,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,   735,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   736,     0,   321,   322,   323,
     324,   737,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   738,   332,     0,     0,   739,   334,   740,   335,
       0,   336,   741,   742,   743,   744,   745,   341,   342,   343,
     344,   345,     0,   746,   346,   347,     0,     0,   348,   349,
     350,   351,   747,   748,   749,   352,   353,     0,   750,   751,
     354,     0,   355,   356,   752,     0,   358,   359,   360,   361,
       0,   362,   363,     0,     0,     0,     0,     0,     0,     0,
       0,   364,   365,   366,     0,   753,   367,     0,   368,     0,
     369,   370,   754,   372,   373,   374,   375,   755,   756,   378,
     757,     0,   379,   380,   381,     0,   382,     0,   383,   384,
     385,   386,   387,     0,   758,   389,   390,     0,     0,   391,
       0,     0,     0,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,   400,   401,     0,   402,   403,     0,   404,
     405,   406,   759,   760,   407,     0,   408,     0,   409,   410,
       0,   411,   412,     0,   413,     0,   761,     0,   762,   415,
     416,   417,   418,   419,   420,   763,   764,   423,   424,   425,
     426,     0,   765,   428,     0,     0,     0,   429,   430,   431,
     432,     0,     0,     0,   433,     0,     0,     0,   434,     0,
     435,   436,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,     0,     0,     0,     0,   447,
     448,     0,   449,     0,     0,   450,     0,     0,   451,   452,
       0,     0,     0,   453,   766,   767,   454,   455,     0,   456,
     457,   768,   459,   460,   461,   769,   770,   462,   463,   464,
     465,   771,   466,   467,     0,   468,     0,   469,   470,   471,
     472,     0,   772,   473,   474,     0,   773,   774,   775,   776,
       0,     0,     0,     0,     0,   479,   480,   481,     0,   777,
     778,   779,   483,   484,   485,   780,   486,   487,   781,   488,
     489,     0,   490,   491,     0,     0,   492,     0,     0,   493,
       0,   494,     0,   782,   496,   497,     0,     0,   783,   784,
     785,   786,   498,     0,     0,   499,   787,     0,   788,   500,
     501,   502,   503,   504,   789,   790,     0,     0,     0,     0,
       0,     0,   507,   508,     0,   509,   510,   511,     0,     0,
     791,     0,     0,     0,     0,   792,   793,     0,     0,     0,
       0,   794,   795,     0,     0,   796,   797,     0,     0,   798,
     799,   142,     0,   143,   686,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   687,     0,
     152,   153,   154,   155,   156,   157,   688,   159,     0,   160,
       0,     0,   689,   161,   690,   691,   692,   162,   693,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,   694,   695,   170,   171,     0,   172,   696,   697,   174,
     175,     0,   176,   177,   178,   179,   180,   698,   182,     0,
     699,   184,   700,   701,   702,   703,   704,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   705,   204,     0,   205,   706,   707,   206,
       0,     0,   207,   708,   208,   709,   710,   209,     0,   210,
     711,   712,     0,   211,   212,   213,   713,   714,   715,     0,
       0,     0,     0,   716,   216,   717,     0,     0,   718,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,   719,     0,   244,   245,   246,   247,
     720,   721,   248,   249,     0,   250,   251,   252,   722,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   723,   260,   724,   262,   263,     0,   264,     0,
     725,     0,   265,   266,   267,     0,   268,   726,   727,     0,
     269,   270,     0,     0,     0,   728,   272,   273,   274,   275,
     729,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,   730,   281,   282,   731,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   732,     0,     0,   292,     0,   733,   293,
     294,     0,     0,     0,     0,     0,   734,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,   735,     0,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,   736,     0,   321,   322,   323,   324,   737,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     738,   332,     0,     0,   739,   334,   740,   335,     0,   336,
     741,   742,   743,   744,   745,   341,   342,   343,   344,   345,
       0,   746,   346,   347,     0,     0,   348,   349,   350,   351,
     747,   748,   749,   352,   353,     0,   750,   751,   354,     0,
     355,   356,   752,     0,   358,   359,   360,   361,     0,   362,
     363,     0,     0,     0,     0,     0,     0,     0,     0,   364,
     365,   366,     0,   753,   367,     0,   368,     0,   369,   370,
     754,   372,   373,   374,   375,   755,   756,   378,   757,     0,
     379,   380,   381,     0,   382,     0,   383,   384,   385,   386,
     387,     0,   758,   389,   390,     0,     0,   391,     0,     0,
       0,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,   400,   401,     0,   402,   403,     0,   404,   405,   406,
     759,   760,   407,     0,   408,     0,   409,   410,     0,   411,
     412,     0,   413,     0,   761,     0,   762,   415,   416,   417,
     418,   419,   420,   763,   764,   423,   424,   425,   426,     0,
     765,   428,     0,     0,     0,   429,   430,   431,   432,     0,
       0,     0,   433,     0,     0,     0,   434,     0,   435,   436,
     437,   438,   439,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,     0,     0,     0,     0,   447,   448,     0,
     449,     0,     0,   450,     0,     0,   451,   452,     0,     0,
       0,   453,   766,   767,   454,   455,     0,   456,   457,   768,
     459,   460,   461,   769,   770,   462,   463,   464,   465,   771,
     466,   467,     0,   468,     0,   469,   470,   471,   472,     0,
     772,   473,   474,     0,   773,   774,   775,   776,     0,     0,
       0,     0,     0,   479,   480,   481,     0,   777,   778,   779,
     483,   484,   485,   780,   486,   487,   781,   488,   489,     0,
     490,   491,     0,     0,   492,     0,     0,   493,     0,   494,
       0,   782,   496,   497,     0,     0,   783,   784,   785,   786,
     498,     0,     0,   499,   787,     0,   788,   500,   501,   502,
     503,   504,   789,   790,     0,     0,     0,     0,     0,     0,
     507,   508,     0,   509,   510,   511,     0,     0,   791,     0,
       0,     0,     0,   792,   793,     0,     0,     0,     0,   794,
    1162,     0,     0,   796,   797,     0,     0,   798,   799,   142,
       0,   143,   686,   145,   146,   147,   148,  1796,     0,   149,
       0,     0,     0,  1797,     0,     0,   687,     0,   152,   153,
     154,   155,   156,   157,   688,   159,     0,   160,     0,     0,
     689,   161,   690,   691,   692,   162,   693,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,   694,
     695,   170,   171,     0,   172,   696,   697,   174,   175,     0,
     176,   177,   178,   179,   180,   698,   182,     0,   699,   184,
     700,   701,   702,   703,   704,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   705,   204,     0,   205,   706,   707,   206,     0,     0,
     207,   708,   208,   709,   710,   209,     0,   210,   711,   712,
       0,   211,   212,   213,   713,   714,   715,     0,     0,     0,
       0,   716,   216,   717,     0,     0,   718,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,   719,     0,   244,   245,   246,   247,   720,   721,
     248,   249,     0,   250,   251,   252,   722,     0,   253,     0,
       0,     0,   254,     0,   255,     0,   256,     0,   257,   258,
     723,   260,   724,   262,   263,     0,   264,     0,   725,     0,
     265,   266,   267,     0,   268,   726,   727,     0,   269,   270,
       0,     0,     0,   728,   272,   273,   274,   275,   729,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
     730,   281,   282,   731,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   732,     0,     0,   292,     0,   733,   293,   294,     0,
       0,     0,     0,     0,   734,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,   735,     0,     0,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,   736,     0,   321,   322,   323,   324,   737,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   738,   332,
       0,     0,   739,   334,   740,   335,     0,   336,   741,   742,
     743,   744,   745,   341,   342,   343,   344,   345,     0,   746,
     346,   347,     0,     0,   348,   349,   350,   351,   747,     0,
     749,   352,   353,     0,   750,   751,   354,     0,   355,   356,
     752,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,   753,   367,     0,   368,     0,   369,   370,   754,   372,
     373,   374,   375,   755,   756,   378,   757,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     758,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,   759,   760,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   761,     0,   762,   415,   416,   417,   418,   419,
     420,   763,   764,   423,   424,   425,   426,     0,   765,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
     766,   767,   454,   455,     0,   456,   457,   768,   459,   460,
     461,   769,   770,   462,   463,   464,   465,   771,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,   772,   473,
     474,     0,   773,   774,   775,   776,     0,     0,     0,     0,
       0,   479,   480,   481,     0,   777,   778,   779,   483,   484,
     485,   780,   486,   487,   781,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   782,
     496,   497,     0,     0,   783,   784,   785,   786,   498,     0,
       0,   499,   787,     0,   788,   500,   501,   502,   503,   504,
     789,   790,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,     0,   791,     0,     0,     0,
       0,   792,   793,     0,     0,     0,     0,   794,   795,     0,
       0,   796,   797,     0,     0,   798,   799,   142,     0,   143,
     686,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   687,     0,   152,   153,   154,   155,
     156,   157,   688,   159,     0,   160,     0,     0,   689,   161,
     690,   691,   692,   162,   693,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,   694,   695,   170,
     171,     0,   172,   696,   697,   174,   175,     0,   176,   177,
     178,   179,   180,   698,   182,     0,   699,   184,   700,   701,
     702,   703,   704,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   705,
     204,     0,   205,   706,   707,   206,     0,     0,   207,   708,
     208,   709,   710,   209,     0,   210,   711,   712,     0,   211,
     212,   213,   713,   714,   715,     0,     0,     0,     0,   716,
     216,   717,     0,     0,   718,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
     719,     0,   244,   245,   246,   247,   720,   721,   248,   249,
       0,   250,   251,   252,   722,     0,   253,     0,     0,     0,
     254,     0,   255,     0,   256,     0,   257,   258,   723,   260,
     724,   262,   263,     0,   264,     0,   725,     0,   265,   266,
     267,     0,   268,   726,   727,     0,   269,   270,     0,     0,
       0,   728,   272,   273,   274,   275,   729,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,   730,   281,
     282,   731,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   732,
       0,     0,   292,     0,   733,   293,   294,     0,     0,     0,
       0,     0,   734,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,   735,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,   736,
       0,   321,   322,   323,   324,   737,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   738,   332,     0,     0,
     739,   334,   740,   335,     0,   336,   741,   742,   743,   744,
     745,   341,   342,   343,   344,   345,     0,   746,   346,   347,
       0,     0,   348,   349,   350,   351,   747,   748,   749,   352,
     353,     0,   750,   751,   354,     0,   355,   356,   752,     0,
     358,   359,   360,   361,     0,   362,   363,     0,     0,     0,
       0,     0,     0,     0,     0,   364,   365,   366,     0,   753,
     367,     0,   368,     0,   369,   370,   754,   372,   373,   374,
     375,   755,   756,   378,   757,     0,   379,   380,   381,     0,
     382,     0,   383,   384,   385,   386,   387,     0,   758,   389,
     390,     0,     0,   391,     0,     0,     0,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,   400,   401,     0,
     402,   403,     0,   404,   405,   406,   759,   760,   407,     0,
     408,     0,   409,   410,     0,   411,   412,     0,   413,     0,
     761,     0,   762,   415,   416,   417,   418,   419,   420,   763,
     764,   423,   424,   425,   426,     0,   765,   428,     0,     0,
       0,   429,   430,   431,   432,     0,     0,     0,   433,     0,
       0,     0,   434,     0,   435,   436,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,     0,
       0,     0,     0,   447,   448,     0,   449,     0,     0,   450,
       0,     0,   451,   452,     0,     0,     0,   453,   766,   767,
     454,   455,     0,   456,   457,   768,   459,   460,   461,   769,
     770,   462,   463,   464,   465,   771,   466,   467,     0,   468,
       0,   469,   470,   471,   472,     0,   772,   473,   474,     0,
     773,   774,   775,   776,     0,     0,     0,     0,     0,   479,
     480,   481,     0,   777,   778,   779,   483,   484,   485,   780,
     486,   487,   781,   488,   489,     0,   490,   491,     0,     0,
     492,     0,     0,   493,     0,   494,     0,  1893,   496,   497,
       0,     0,   783,   784,   785,   786,   498,     0,     0,   499,
     787,     0,   788,   500,   501,   502,   503,   504,   789,   790,
       0,     0,     0,     0,     0,     0,   507,   508,     0,   509,
     510,   511,     0,     0,   791,     0,     0,     0,     0,   792,
     793,     0,     0,     0,     0,   794,   795,     0,     0,   796,
     797,     0,     0,   798,   799,   142,     0,   143,   686,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   687,     0,   152,   153,   154,   155,   156,   157,
     688,   159,     0,   160,     0,     0,   689,   161,   690,   691,
     692,   162,   693,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,   694,   695,   170,   171,     0,
     172,   696,   697,   174,   175,     0,   176,   177,   178,   179,
     180,   698,   182,     0,   699,   184,   700,   701,   702,   703,
     704,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   705,   204,     0,
     205,   706,   707,   206,     0,     0,   207,   708,   208,   709,
     710,   209,     0,   210,   711,   712,     0,   211,   212,   213,
     713,   714,   715,     0,     0,     0,     0,   716,   216,   717,
       0,     0,   718,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   719,     0,
     244,   245,   246,   247,   720,   721,   248,   249,     0,   250,
     251,   252,   722,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   723,   260,   724,   262,
     263,     0,   264,     0,   725,     0,   265,   266,   267,     0,
     268,   726,   727,     0,   269,   270,     0,     0,     0,   728,
     272,   273,   274,   275,   729,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,   730,   281,   282,  2711,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   732,     0,     0,
     292,     0,   733,   293,   294,     0,     0,     0,     0,     0,
     734,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,   735,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   736,     0,   321,
     322,   323,   324,   737,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   738,   332,     0,     0,   739,   334,
     740,   335,     0,   336,   741,   742,   743,   744,   745,   341,
     342,   343,   344,   345,     0,   746,   346,   347,     0,     0,
     348,   349,   350,   351,   747,   748,   749,   352,   353,     0,
     750,   751,   354,     0,   355,   356,   752,     0,   358,   359,
     360,   361,     0,   362,   363,     0,     0,     0,     0,     0,
       0,     0,     0,   364,   365,   366,     0,   753,   367,     0,
     368,     0,   369,   370,   754,   372,   373,   374,   375,   755,
     756,   378,   757,     0,   379,   380,   381,     0,   382,     0,
     383,   384,   385,   386,   387,     0,   758,   389,   390,     0,
       0,   391,     0,     0,     0,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,   400,   401,     0,   402,   403,
       0,   404,   405,   406,   759,   760,   407,     0,   408,     0,
     409,   410,     0,   411,   412,     0,   413,     0,   761,     0,
     762,   415,   416,   417,   418,   419,   420,   763,   764,   423,
     424,   425,   426,     0,   765,   428,     0,     0,     0,   429,
     430,   431,   432,     0,     0,     0,   433,     0,     0,     0,
     434,     0,   435,   436,   437,   438,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,     0,     0,     0,
       0,   447,   448,     0,   449,     0,     0,   450,     0,     0,
     451,   452,     0,     0,     0,   453,   766,   767,   454,   455,
       0,   456,   457,   768,   459,   460,   461,   769,   770,   462,
     463,   464,   465,   771,   466,   467,     0,   468,     0,   469,
     470,   471,   472,     0,   772,   473,   474,     0,   773,   774,
     775,   776,     0,     0,     0,     0,     0,   479,   480,   481,
       0,   777,   778,   779,   483,   484,   485,   780,   486,   487,
     781,   488,   489,     0,   490,   491,     0,     0,   492,     0,
       0,   493,     0,   494,     0,   782,   496,   497,     0,     0,
     783,   784,   785,   786,   498,     0,     0,   499,   787,     0,
     788,   500,   501,   502,   503,   504,   789,   790,     0,     0,
       0,     0,     0,     0,   507,   508,     0,   509,   510,   511,
       0,     0,   791,     0,     0,     0,     0,   792,   793,     0,
       0,     0,     0,   794,   795,     0,     0,   796,   797,     0,
       0,   798,   799,   142,     0,   143,   686,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     687,     0,   152,   153,   154,   155,   156,   157,   688,   159,
       0,   160,     0,     0,   689,   161,   690,   691,   692,   162,
     693,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,   694,   695,   170,   171,     0,   172,   696,
     697,   174,   175,     0,   176,   177,   178,   179,   180,   698,
     182,     0,   699,   184,   700,   701,   702,   703,   704,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   705,   204,     0,   205,   706,
     707,   206,     0,     0,   207,   708,   208,   709,   710,   209,
       0,   210,   711,   712,     0,   211,   212,   213,   713,   714,
     715,     0,     0,     0,     0,   716,   216,   717,     0,     0,
     718,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   719,     0,   244,   245,
     246,   247,   720,   721,   248,   249,     0,   250,   251,   252,
     722,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   723,   260,   724,   262,   263,     0,
     264,     0,   725,     0,   265,   266,   267,     0,   268,   726,
     727,     0,   269,   270,     0,     0,     0,   728,   272,   273,
     274,   275,   729,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,   730,   281,   282,  2762,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   732,     0,     0,   292,     0,
     733,   293,   294,     0,     0,     0,     0,     0,   734,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,   735,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   736,     0,   321,   322,   323,
     324,   737,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   738,   332,     0,     0,   739,   334,   740,   335,
       0,   336,   741,   742,   743,   744,   745,   341,   342,   343,
     344,   345,     0,   746,   346,   347,     0,     0,   348,   349,
     350,   351,   747,   748,   749,   352,   353,     0,   750,   751,
     354,     0,   355,   356,   752,     0,   358,   359,   360,   361,
       0,   362,   363,     0,     0,     0,     0,     0,     0,     0,
       0,   364,   365,   366,     0,   753,   367,     0,   368,     0,
     369,   370,   754,   372,   373,   374,   375,   755,   756,   378,
     757,     0,   379,   380,   381,     0,   382,     0,   383,   384,
     385,   386,   387,     0,   758,   389,   390,     0,     0,   391,
       0,     0,     0,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,   400,   401,     0,   402,   403,     0,   404,
     405,   406,   759,   760,   407,     0,   408,     0,   409,   410,
       0,   411,   412,     0,   413,     0,   761,     0,   762,   415,
     416,   417,   418,   419,   420,   763,   764,   423,   424,   425,
     426,     0,   765,   428,     0,     0,     0,   429,   430,   431,
     432,     0,     0,     0,   433,     0,     0,     0,   434,     0,
     435,   436,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,     0,     0,     0,     0,   447,
     448,     0,   449,     0,     0,   450,     0,     0,   451,   452,
       0,     0,     0,   453,   766,   767,   454,   455,     0,   456,
     457,   768,   459,   460,   461,   769,   770,   462,   463,   464,
     465,   771,   466,   467,     0,   468,     0,   469,   470,   471,
     472,     0,   772,   473,   474,     0,   773,   774,   775,   776,
       0,     0,     0,     0,     0,   479,   480,   481,     0,   777,
     778,   779,   483,   484,   485,   780,   486,   487,   781,   488,
     489,     0,   490,   491,     0,     0,   492,     0,     0,   493,
       0,   494,     0,   782,   496,   497,     0,     0,   783,   784,
     785,   786,   498,     0,     0,   499,   787,     0,   788,   500,
     501,   502,   503,   504,   789,   790,     0,     0,     0,     0,
       0,     0,   507,   508,     0,   509,   510,   511,     0,     0,
     791,     0,     0,     0,     0,   792,   793,     0,     0,     0,
       0,   794,   795,     0,     0,   796,   797,     0,     0,   798,
     799,   142,     0,   143,   686,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   687,     0,
     152,   153,   154,   155,   156,   157,   688,   159,     0,   160,
       0,     0,   689,   161,   690,   691,   692,   162,   693,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,   694,   695,   170,   171,     0,   172,   696,   697,   174,
     175,     0,   176,   177,   178,   179,   180,   698,   182,     0,
     699,   184,   700,   701,   702,   703,   704,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   705,   204,     0,   205,   706,   707,   206,
       0,     0,   207,   708,   208,   709,   710,   209,     0,   210,
     711,   712,     0,   211,   212,   213,   713,   714,   715,     0,
       0,     0,     0,   716,   216,   717,     0,     0,  3601,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,   719,     0,   244,   245,   246,   247,
     720,   721,   248,   249,     0,   250,   251,   252,   722,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   723,   260,   724,   262,   263,     0,   264,     0,
     725,     0,   265,   266,   267,     0,   268,   726,   727,     0,
     269,   270,     0,     0,     0,   728,   272,   273,   274,   275,
     729,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,   730,   281,   282,   731,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   732,     0,     0,   292,     0,   733,   293,
     294,     0,     0,     0,     0,     0,   734,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,   735,     0,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,   736,     0,   321,   322,   323,   324,   737,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     738,   332,     0,     0,   739,   334,   740,   335,     0,   336,
     741,   742,   743,   744,   745,   341,   342,   343,   344,   345,
       0,   746,   346,   347,     0,     0,   348,   349,   350,   351,
     747,   748,   749,   352,   353,     0,   750,   751,   354,     0,
     355,   356,   752,     0,   358,   359,   360,   361,     0,   362,
     363,     0,     0,     0,     0,     0,     0,     0,     0,   364,
     365,   366,     0,   753,   367,     0,   368,     0,   369,   370,
     754,   372,   373,   374,   375,   755,   756,   378,   757,     0,
     379,   380,   381,     0,   382,     0,   383,   384,   385,   386,
     387,     0,   758,   389,   390,     0,     0,   391,     0,     0,
       0,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,   400,   401,     0,   402,   403,     0,   404,   405,   406,
     759,   760,   407,     0,   408,     0,   409,   410,     0,   411,
     412,     0,   413,     0,   761,     0,   762,   415,   416,   417,
     418,   419,   420,   763,   764,   423,   424,   425,   426,     0,
     765,   428,     0,     0,     0,   429,   430,   431,   432,     0,
       0,     0,   433,     0,     0,     0,   434,     0,   435,   436,
     437,   438,   439,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,     0,     0,     0,     0,   447,   448,     0,
     449,     0,     0,   450,     0,     0,   451,   452,     0,     0,
       0,   453,   766,   767,   454,   455,     0,   456,   457,   768,
     459,   460,   461,   769,   770,   462,   463,   464,   465,   771,
     466,   467,     0,   468,     0,   469,   470,   471,   472,     0,
     772,   473,   474,     0,   773,   774,   775,   776,     0,     0,
       0,     0,     0,   479,   480,   481,     0,   777,   778,   779,
     483,   484,   485,   780,   486,   487,   781,   488,   489,     0,
     490,   491,     0,     0,   492,     0,     0,   493,     0,   494,
       0,   782,   496,   497,     0,     0,   783,   784,   785,   786,
     498,     0,     0,   499,   787,     0,   788,   500,   501,   502,
     503,   504,   789,   790,     0,     0,     0,     0,     0,     0,
     507,   508,     0,   509,   510,   511,     0,     0,   791,     0,
       0,     0,     0,   792,   793,     0,     0,     0,     0,   794,
     795,     0,     0,   796,   797,     0,     0,   798,   799,   142,
       0,   143,   686,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   687,     0,   152,   153,
     154,   155,   156,   157,   688,   159,     0,   160,     0,     0,
     689,   161,   690,   691,   692,   162,   693,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,   694,
     695,   170,   171,     0,   172,   696,   697,   174,   175,     0,
     176,   177,   178,   179,   180,   698,   182,     0,   699,   184,
     700,   701,   702,   703,   704,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   705,   204,     0,   205,   706,   707,   206,     0,     0,
     207,   708,   208,   709,   710,   209,     0,   210,   711,   712,
       0,   211,   212,   213,   713,   714,   715,     0,     0,     0,
       0,   716,   216,   717,     0,     0,   718,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,   719,     0,   244,   245,   246,   247,   720,   721,
     248,   249,     0,   250,   251,   252,   722,     0,   253,     0,
       0,     0,   254,     0,   255,     0,   256,     0,   257,   258,
     723,   260,   724,   262,   263,     0,   264,     0,   725,     0,
     265,   266,   267,     0,   268,   726,   727,     0,   269,   270,
       0,     0,     0,   728,   272,   273,   274,   275,   729,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
     730,   281,   282,   731,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   732,     0,     0,   292,     0,   733,   293,   294,     0,
       0,     0,     0,     0,   734,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,   735,     0,     0,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,   736,     0,   321,   322,   323,   324,   737,   325,   326,
    4629,     0,     0,     0,   327,   328,   329,   330,   738,   332,
       0,     0,   739,   334,   740,   335,     0,   336,   741,   742,
     743,   744,   745,   341,   342,   343,   344,   345,     0,   746,
     346,   347,     0,     0,   348,   349,   350,   351,   747,     0,
     749,   352,   353,     0,   750,   751,   354,     0,   355,   356,
     752,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,   753,   367,     0,   368,     0,   369,   370,   754,   372,
     373,   374,   375,   755,   756,   378,   757,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     758,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,   759,   760,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   761,     0,   762,   415,   416,   417,   418,   419,
     420,   763,   764,   423,   424,   425,   426,     0,   765,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
     766,   767,   454,   455,     0,   456,   457,   768,   459,   460,
     461,   769,   770,   462,   463,   464,   465,   771,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,   772,   473,
     474,     0,   773,   774,   775,   776,     0,     0,     0,     0,
       0,   479,   480,   481,     0,   777,   778,   779,   483,   484,
     485,   780,   486,   487,   781,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   782,
     496,   497,     0,     0,   783,   784,   785,   786,   498,     0,
       0,   499,   787,     0,   788,   500,   501,   502,   503,   504,
     789,   790,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,     0,   791,     0,     0,     0,
       0,   792,   793,     0,     0,     0,     0,   794,   795,     0,
       0,   796,   797,     0,     0,   798,   799,   142,     0,   143,
     686,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   687,     0,   152,   153,   154,   155,
     156,   157,   688,   159,     0,   160,     0,     0,   689,   161,
     690,   691,   692,   162,   693,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,   694,   695,   170,
     171,     0,   172,   696,   697,   174,   175,     0,   176,   177,
     178,   179,   180,   698,   182,     0,   699,   184,   700,   701,
     702,   703,   704,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   705,
     204,     0,   205,   706,   707,   206,     0,     0,   207,   708,
     208,   709,   710,   209,     0,   210,   711,   712,     0,   211,
     212,   213,   713,   714,   715,     0,     0,     0,     0,   716,
     216,   717,     0,     0,   718,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
     719,     0,   244,   245,   246,   247,   720,   721,   248,   249,
       0,   250,   251,   252,   722,     0,   253,     0,     0,     0,
     254,     0,   255,     0,   256,     0,   257,   258,   723,   260,
     724,   262,   263,     0,   264,     0,   725,     0,   265,   266,
     267,     0,   268,   726,   727,     0,   269,   270,     0,     0,
       0,   728,   272,   273,   274,   275,   729,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,   730,   281,
     282,   731,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   732,
       0,     0,   292,     0,   733,   293,   294,     0,     0,     0,
       0,     0,   734,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,   735,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,   736,
       0,   321,   322,   323,   324,   737,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   738,   332,     0,     0,
     739,   334,   740,   335,     0,   336,   741,   742,   743,   744,
     745,   341,   342,   343,   344,   345,     0,   746,   346,   347,
       0,     0,   348,   349,   350,   351,   747,     0,   749,   352,
     353,     0,   750,   751,   354,     0,   355,   356,   752,     0,
     358,   359,   360,   361,     0,   362,   363,     0,     0,     0,
       0,     0,     0,     0,     0,   364,   365,   366,     0,   753,
     367,     0,   368,     0,   369,   370,   754,   372,   373,   374,
     375,   755,   756,   378,   757,     0,   379,   380,   381,     0,
     382,     0,   383,   384,   385,   386,   387,     0,   758,   389,
     390,     0,     0,   391,     0,     0,     0,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,   400,   401,     0,
     402,   403,     0,   404,   405,   406,   759,   760,   407,     0,
     408,     0,   409,   410,     0,   411,   412,     0,   413,     0,
     761,     0,   762,   415,   416,   417,   418,   419,   420,   763,
     764,   423,   424,   425,   426,     0,   765,   428,     0,     0,
       0,   429,   430,   431,   432,     0,     0,     0,   433,     0,
       0,     0,   434,     0,   435,   436,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,     0,
       0,     0,     0,   447,   448,     0,   449,     0,     0,   450,
       0,     0,   451,   452,     0,     0,     0,   453,   766,   767,
     454,   455,     0,   456,   457,   768,   459,   460,   461,   769,
     770,   462,   463,   464,   465,   771,   466,   467,     0,   468,
       0,   469,   470,   471,   472,     0,   772,   473,   474,     0,
     773,   774,   775,   776,     0,     0,     0,     0,     0,   479,
     480,   481,     0,   777,   778,   779,   483,   484,   485,   780,
     486,   487,   781,   488,   489,     0,   490,   491,     0,     0,
     492,     0,     0,   493,     0,   494,     0,   782,   496,   497,
       0,     0,   783,   784,   785,   786,   498,     0,     0,   499,
     787,     0,   788,   500,   501,   502,   503,   504,   789,   790,
       0,     0,     0,     0,     0,     0,   507,   508,     0,   509,
     510,   511,     0,     0,   791,     0,     0,     0,     0,   792,
     793,     0,     0,     0,     0,   794,   795,     0,     0,   796,
     797,     0,     0,   798,   799,   142,     0,   143,   686,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   687,     0,   152,   153,   154,   155,   156,   157,
     688,   159,     0,   160,     0,     0,   689,   161,   690,   691,
     692,   162,   693,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,   694,   695,   170,   171,     0,
     172,   696,   697,   174,   175,     0,   176,   177,   178,   179,
     180,   698,   182,     0,   699,   184,   700,   701,   702,   703,
     704,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   705,   204,     0,
     205,   706,   707,   206,     0,     0,   207,   708,   208,   709,
     710,   209,     0,   210,   711,   712,     0,   211,   212,   213,
     713,   714,   715,     0,     0,     0,     0,   716,   216,   717,
       0,     0,   718,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   719,     0,
     244,   245,   246,   247,   720,   721,   248,   249,     0,   250,
     251,   252,   722,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   723,   260,   724,   262,
     263,     0,   264,     0,   725,     0,   265,   266,   267,     0,
     268,   726,   727,     0,   269,   270,     0,     0,     0,   728,
     272,   273,   274,   275,   729,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,   730,   281,   282,  1811,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   732,     0,     0,
     292,     0,   733,   293,   294,     0,     0,     0,     0,     0,
     734,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,   735,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   736,     0,   321,
     322,   323,   324,   737,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   738,   332,     0,     0,   739,   334,
     740,   335,     0,   336,   741,   742,   743,   744,   745,   341,
     342,   343,   344,   345,     0,   746,   346,   347,     0,     0,
     348,   349,   350,   351,   747,     0,   749,   352,   353,     0,
     750,   751,   354,     0,   355,   356,   752,     0,   358,   359,
     360,   361,     0,   362,   363,     0,     0,     0,     0,     0,
       0,     0,     0,   364,   365,   366,     0,   753,   367,     0,
     368,     0,   369,   370,   754,   372,   373,   374,   375,   755,
     756,   378,   757,     0,   379,   380,   381,     0,   382,     0,
     383,   384,   385,   386,   387,     0,   758,   389,   390,     0,
       0,   391,     0,     0,     0,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,   400,   401,     0,   402,   403,
       0,   404,   405,   406,   759,   760,   407,     0,   408,     0,
     409,   410,     0,   411,   412,     0,   413,     0,   761,     0,
     762,   415,   416,   417,   418,   419,   420,   763,   764,   423,
     424,   425,   426,     0,   765,   428,     0,     0,     0,   429,
     430,   431,   432,     0,     0,     0,   433,     0,     0,     0,
     434,     0,   435,   436,   437,   438,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,     0,     0,     0,
       0,   447,   448,     0,   449,     0,     0,   450,     0,     0,
     451,   452,     0,     0,     0,   453,   766,   767,   454,   455,
       0,   456,   457,   768,   459,   460,   461,   769,   770,   462,
     463,   464,   465,   771,   466,   467,     0,   468,     0,   469,
     470,   471,   472,     0,   772,   473,   474,     0,   773,   774,
     775,   776,     0,     0,     0,     0,     0,   479,   480,   481,
       0,   777,   778,   779,   483,   484,   485,   780,   486,   487,
     781,   488,   489,     0,   490,   491,     0,     0,   492,     0,
       0,   493,     0,   494,     0,   782,   496,   497,     0,     0,
     783,   784,   785,   786,   498,     0,     0,   499,   787,     0,
     788,   500,   501,   502,   503,   504,   789,   790,     0,     0,
       0,     0,     0,     0,   507,   508,     0,   509,   510,   511,
       0,     0,   791,     0,     0,     0,     0,   792,   793,     0,
       0,     0,     0,   794,   795,     0,     0,   796,   797,     0,
       0,   798,   799,   142,     0,   143,   686,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     687,     0,   152,   153,   154,   155,   156,   157,   688,   159,
       0,   160,     0,     0,   689,   161,   690,   691,   692,   162,
     693,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,   694,   695,   170,   171,     0,   172,   696,
     697,   174,   175,     0,   176,   177,   178,   179,   180,   698,
     182,     0,   699,   184,   700,   701,   702,   703,   704,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   705,   204,     0,   205,   706,
     707,   206,     0,     0,   207,   708,   208,   709,   710,   209,
       0,   210,   711,   712,     0,   211,   212,   213,   713,   714,
     715,     0,     0,     0,     0,   716,   216,   717,     0,     0,
     718,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   719,     0,   244,   245,
     246,   247,   720,   721,   248,   249,     0,   250,   251,   252,
     722,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   723,   260,   724,   262,   263,     0,
     264,     0,   725,     0,   265,   266,   267,     0,   268,   726,
     727,     0,   269,   270,     0,     0,     0,   728,   272,   273,
     274,   275,   729,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,   730,   281,   282,  1813,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   732,     0,     0,   292,     0,
     733,   293,   294,     0,     0,     0,     0,     0,   734,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,   735,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   736,     0,   321,   322,   323,
     324,   737,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   738,   332,     0,     0,   739,   334,   740,   335,
       0,   336,   741,   742,   743,   744,   745,   341,   342,   343,
     344,   345,     0,   746,   346,   347,     0,     0,   348,   349,
     350,   351,   747,     0,   749,   352,   353,     0,   750,   751,
     354,     0,   355,   356,   752,     0,   358,   359,   360,   361,
       0,   362,   363,     0,     0,     0,     0,     0,     0,     0,
       0,   364,   365,   366,     0,   753,   367,     0,   368,     0,
     369,   370,   754,   372,   373,   374,   375,   755,   756,   378,
     757,     0,   379,   380,   381,     0,   382,     0,   383,   384,
     385,   386,   387,     0,   758,   389,   390,     0,     0,   391,
       0,     0,     0,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,   400,   401,     0,   402,   403,     0,   404,
     405,   406,   759,   760,   407,     0,   408,     0,   409,   410,
       0,   411,   412,     0,   413,     0,   761,     0,   762,   415,
     416,   417,   418,   419,   420,   763,   764,   423,   424,   425,
     426,     0,   765,   428,     0,     0,     0,   429,   430,   431,
     432,     0,     0,     0,   433,     0,     0,     0,   434,     0,
     435,   436,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,     0,     0,     0,     0,   447,
     448,     0,   449,     0,     0,   450,     0,     0,   451,   452,
       0,     0,     0,   453,   766,   767,   454,   455,     0,   456,
     457,   768,   459,   460,   461,   769,   770,   462,   463,   464,
     465,   771,   466,   467,     0,   468,     0,   469,   470,   471,
     472,     0,   772,   473,   474,     0,   773,   774,   775,   776,
       0,     0,     0,     0,     0,   479,   480,   481,     0,   777,
     778,   779,   483,   484,   485,   780,   486,   487,   781,   488,
     489,     0,   490,   491,     0,     0,   492,     0,     0,   493,
       0,   494,     0,   782,   496,   497,     0,     0,   783,   784,
     785,   786,   498,     0,     0,   499,   787,     0,   788,   500,
     501,   502,   503,   504,   789,   790,     0,     0,     0,     0,
       0,     0,   507,   508,     0,   509,   510,   511,     0,     0,
     791,     0,     0,     0,     0,   792,   793,     0,     0,     0,
       0,   794,   795,     0,     0,   796,   797,     0,     0,   798,
     799,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,     0,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,     0,     0,   161,   690,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,     0,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   203,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,  1852,     0,
       0,     0,     0,   215,   216,   717,     0,     0,     0,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,     0,   244,   245,   246,   247,
       0,   721,   248,   249,     0,   250,   251,   252,   722,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
       0,     0,   265,   266,   267,     0,   268,   726,   727,     0,
     269,   270,     0,     0,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,     0,   281,   282,     0,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   291,     0,     0,   292,     0,     0,   293,
     294,     0,     0,     0,     0,     0,   295,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,   735,     0,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,     0,     0,   321,   322,   323,   324,     0,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,   335,     0,   336,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,   746,   346,   347,     0,     0,   348,   349,   350,   351,
       0,     0,     0,   352,   353,     0,   750,   751,   354,     0,
     355,   356,   357,     0,   358,   359,   360,   361,     0,   362,
     363,     0,     0,     0,     0,     0,     0,     0,     0,   364,
     365,   366,     0,     0,   367,     0,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,     0,     0,
     379,   380,   381,     0,   382,     0,   383,   384,   385,   386,
     387,     0,   388,   389,   390,     0,     0,   391,     0,     0,
       0,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,   400,   401,     0,   402,   403,     0,   404,   405,   406,
       0,     0,   407,     0,   408,     0,   409,   410,     0,   411,
     412,     0,   413,     0,   414,     0,     0,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,     0,   429,   430,   431,   432,     0,
       0,     0,   433,     0,     0,     0,   434,     0,   435,   436,
     437,   438,   439,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,     0,     0,     0,     0,   447,   448,     0,
     449,     0,     0,   450,     0,     0,   451,   452,     0,     0,
       0,   453,     0,     0,   454,   455,     0,   456,   457,   458,
     459,   460,   461,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,     0,   469,   470,   471,   472,     0,
     772,   473,   474,     0,  1853,   476,   477,  1854,     0,     0,
       0,     0,     0,   479,   480,   481,     0,     0,   778,   482,
     483,   484,   485,   780,   486,   487,   781,   488,   489,     0,
     490,   491,     0,     0,   492,     0,     0,   493,     0,   494,
       0,   495,   496,   497,     0,     0,     0,     0,     0,     0,
     498,     0,     0,   499,     0,     0,     0,   500,   501,   502,
     503,   504,   505,   506,     0,     0,     0,     0,     0,     0,
     507,   508,     0,   509,   510,   511,     0,     0,   512,     0,
       0,     0,   142,     0,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,   798,   799,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,     0,     0,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,   167,   168,     0,
       0,   169,     0,     0,   170,   171,     0,   172,   173,     0,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,   199,
    3004,   200,   201,   202,   203,   204,     0,   205,     0,     0,
     206,     0,     0,   207,     0,   208,     0,     0,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,   216,     0,     0,     0,     0,
     217,     0,   218,     0,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,   225,     0,     0,   226,
     227,   228,     0,     0,     0,   229,     0,   230,   231,     0,
     232,   233,   234,     0,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,   254,     0,   255,   526,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,     0,     0,   265,   266,   267,     0,   268,     0,     0,
       0,   269,   270,     0,     0,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,  2132,   279,     0,   280,
       0,     0,     0,     0,   281,   282,     0,     0,     0,   283,
       0,   284,   285,     0,   286,   287,     0,     0,     0,   288,
    2133,     0,   289,   290,   291,     0,     0,   292,     0,     0,
     293,   294,     0,  3376,     0,     0,     0,   295,   296,     0,
     297,     0,   298,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,     0,     0,   348,   349,   350,
     351,     0,     0,     0,   352,   353,     0,     0,     0,   354,
       0,   355,   356,   357,     0,   358,   359,   360,   361,     0,
     362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     364,   365,   366,     0,     0,   367,     0,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
       0,   379,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,     0,   404,   405,
     406,     0,     0,   407,     0,   408,     0,   409,   410,     0,
     411,   412,     0,   413,     0,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,  2431,     0,     0,   429,   430,   431,   432,
       0,     0,     0,   433,     0,     0,     0,   434,     0,   435,
     436,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,   531,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,   452,     0,
       0,     0,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,     0,
       0,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,   488,   489,
       0,   490,   491,     0,     0,   492,     0,     0,   493,     0,
     494,     0,   495,   496,   497,     0,     0,     0,     0,     0,
       0,   498,     0,     0,   499,     0,     0,     0,   500,   501,
     502,   503,   504,   505,   506,     0,     0,     0,     0,     0,
       0,   507,   508,     0,   509,   510,   511,     0,     0,   512,
       0,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,  3077,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,     0,     0,   161,     0,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,     0,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,  3004,
     200,   201,   202,   203,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,   214,     0,
       0,     0,     0,   215,   216,     0,     0,     0,     0,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,     0,   244,   245,   246,   247,
       0,     0,   248,   249,     0,   250,   251,   252,     0,     0,
     253,     0,     0,     0,   254,     0,   255,   526,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
       0,     0,   265,   266,   267,     0,   268,     0,     0,     0,
     269,   270,     0,     0,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   277,   278,  2132,   279,     0,   280,     0,
       0,     0,     0,   281,   282,     0,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,  2133,
       0,   289,   290,   291,     0,     0,   292,     0,     0,   293,
     294,     0,     0,     0,     0,     0,   295,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,     0,     0,   321,   322,   323,   324,     0,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,   335,     0,   336,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,   347,     0,     0,   348,   349,   350,   351,
       0,     0,     0,   352,   353,     0,     0,     0,   354,     0,
     355,   356,   357,     0,   358,   359,   360,   361,     0,   362,
     363,     0,     0,     0,     0,     0,     0,     0,     0,   364,
     365,   366,     0,     0,   367,     0,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,     0,     0,
     379,   380,   381,     0,   382,     0,   383,   384,   385,   386,
     387,     0,   388,   389,   390,     0,     0,   391,     0,     0,
       0,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,   400,   401,     0,   402,   403,     0,   404,   405,   406,
       0,     0,   407,     0,   408,     0,   409,   410,     0,   411,
     412,     0,   413,     0,   414,     0,     0,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,     0,   429,   430,   431,   432,     0,
       0,     0,   433,     0,     0,     0,   434,     0,   435,   436,
     437,   438,   439,   440,     0,   441,   442,   443,   444,   445,
     446,   531,     0,     0,     0,     0,     0,   447,   448,     0,
     449,     0,     0,   450,     0,     0,   451,   452,     0,     0,
       0,   453,     0,     0,   454,   455,     0,   456,   457,   458,
     459,   460,   461,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,     0,   469,   470,   471,   472,     0,
       0,   473,   474,     0,   475,   476,   477,   478,     0,     0,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
     483,   484,   485,     0,   486,   487,     0,   488,   489,     0,
     490,   491,     0,     0,   492,     0,     0,   493,     0,   494,
       0,   495,   496,   497,     0,     0,     0,     0,     0,     0,
     498,     0,     0,   499,     0,     0,     0,   500,   501,   502,
     503,   504,   505,   506,     0,     0,     0,     0,     0,     0,
     507,   508,     0,   509,   510,   511,     0,     0,   512,     0,
     142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,  3077,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,   347,     0,     0,   348,   349,   350,   351,     0,
       0,     0,   352,   353,     0,     0,     0,   354,     0,   355,
     356,   357,     0,   358,   359,   360,   361,     0,   362,   363,
       0,     0,     0,     0,     0,     0,     0,     0,   364,   365,
     366,     0,     0,   367,     0,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,     0,   379,
     380,   381,     0,   382,     0,   383,   384,   385,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,     0,     0,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,     0,   404,   405,   406,     0,
       0,   407,     0,   408,     0,   409,   410,     0,   411,   412,
       0,   413,     0,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,   427,
     428,  2431,     0,     0,   429,   430,   431,   432,     0,     0,
       0,   433,     0,     0,     0,   434,     0,   435,   436,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,     0,     0,     0,     0,   447,   448,     0,   449,
       0,     0,   450,     0,     0,   451,   452,     0,     0,     0,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,     0,   469,   470,   471,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,     0,     0,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,   488,   489,     0,   490,
     491,     0,     0,   492,     0,     0,   493,     0,   494,     0,
     495,   496,   497,     0,     0,     0,     0,     0,     0,   498,
       0,     0,   499,     0,     0,     0,   500,   501,   502,   503,
     504,   505,   506,     0,     0,     0,     0,     0,     0,   507,
     508,     0,   509,   510,   511,     0,     0,   512,     0,   142,
       0,   143,   144,   145,   146,   147,   148,     0,     0,   149,
    2870,     0,     0,   150,     0,     0,   151,   799,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,     0,     0,
       0,   161,     0,     0,     0,   162,     0,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,     0,
       0,   170,   171,     0,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   203,   204,     0,   205,     0,     0,   206,     0,     0,
     207,     0,   208,     0,     0,   209,     0,   210,     0,     0,
       0,   211,   212,   213,     0,     0,   214,     0,     0,     0,
       0,   215,   216,     0,     0,     0,     0,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,     0,   244,   245,   246,   247,     0,     0,
     248,   249,     0,   250,   251,   252,     0,     0,   253,     0,
       0,     0,   254,     0,   255,     0,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,     0,     0,
     265,   266,   267,     0,   268,     0,     0,     0,   269,   270,
       0,     0,     0,   271,   272,   273,   274,   275,     0,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
       0,   281,   282,     0,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   291,     0,     0,   292,     0,     0,   293,   294,     0,
       0,     0,     0,     0,   295,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,     0,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,     0,   512,     0,     0,     0,
     142,     0,   143,   144,   145,   146,   147,   148,     0,  4773,
     149,     0,     0,     0,   150,  4774,   799,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,   347,     0,     0,   348,   349,   350,   351,     0,
       0,     0,   352,   353,     0,     0,     0,   354,     0,   355,
     356,   357,     0,   358,   359,   360,   361,     0,   362,   363,
       0,     0,     0,     0,     0,     0,     0,     0,   364,   365,
     366,     0,     0,   367,     0,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,     0,   379,
     380,   381,     0,   382,     0,   383,   384,   385,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,     0,     0,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,     0,   404,   405,   406,     0,
       0,   407,     0,   408,     0,   409,   410,     0,   411,   412,
       0,   413,     0,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,     0,   429,   430,   431,   432,     0,     0,
       0,   433,     0,     0,     0,   434,     0,   435,   436,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,     0,     0,     0,     0,   447,   448,     0,   449,
       0,     0,   450,     0,     0,   451,   452,     0,     0,     0,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,     0,   469,   470,   471,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,     0,     0,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,   488,   489,     0,   490,
     491,     0,     0,   492,     0,     0,   493,     0,   494,     0,
     495,   496,   497,     0,     0,     0,     0,     0,     0,   498,
       0,     0,   499,     0,     0,     0,   500,   501,   502,   503,
     504,   505,   506,     0,     0,     0,     0,     0,     0,   507,
     508,     0,   509,   510,   511,     0,     0,   512,     0,     0,
       0,   142,     0,   143,   144,   145,   146,   147,   148,  1167,
       0,   149,     0,     0,     0,   150,     0,   799,   151,     0,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,     0,     0,   161,     0,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,     0,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   203,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,   214,     0,
       0,     0,     0,   215,   216,     0,     0,     0,     0,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,     0,   244,   245,   246,   247,
       0,     0,   248,   249,     0,   250,   251,   252,     0,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
       0,     0,   265,   266,   267,     0,   268,     0,     0,     0,
     269,   270,     0,     0,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,     0,   281,   282,     0,  1384,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   291,     0,     0,   292,     0,     0,   293,
     294,     0,     0,     0,     0,     0,   295,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,     0,     0,   321,   322,   323,   324,     0,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,   335,     0,   336,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,   347,     0,     0,   348,   349,   350,   351,
       0,     0,     0,   352,   353,     0,     0,     0,   354,     0,
     355,   356,   357,     0,   358,   359,   360,   361,     0,   362,
     363,     0,     0,     0,     0,     0,     0,     0,     0,   364,
     365,   366,     0,     0,   367,     0,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,     0,     0,
     379,   380,   381,     0,   382,     0,   383,   384,   385,   386,
     387,     0,   388,   389,   390,     0,     0,   391,     0,     0,
       0,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,   400,   401,     0,   402,   403,     0,   404,   405,   406,
       0,     0,   407,     0,   408,     0,   409,   410,     0,   411,
     412,     0,   413,     0,   414,     0,     0,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,     0,   429,   430,   431,   432,     0,
       0,     0,   433,     0,     0,     0,   434,     0,   435,   436,
     437,   438,   439,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,     0,     0,     0,     0,   447,   448,     0,
     449,     0,     0,   450,     0,     0,   451,   452,     0,     0,
       0,   453,     0,     0,   454,   455,     0,   456,   457,   458,
     459,   460,   461,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,     0,   469,   470,   471,   472,     0,
       0,   473,   474,     0,   475,   476,   477,   478,     0,     0,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
     483,   484,   485,     0,   486,   487,     0,   488,   489,     0,
     490,   491,     0,     0,   492,     0,     0,   493,     0,   494,
       0,   495,   496,   497,     0,     0,     0,     0,     0,     0,
     498,     0,     0,   499,     0,     0,     0,   500,   501,   502,
     503,   504,   505,   506,     0,     0,     0,     0,     0,     0,
     507,   508,     0,   509,   510,   511,     0,     0,   512,     0,
     142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,   560,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,   347,     0,     0,   348,   349,   350,   351,     0,
       0,     0,   352,   353,     0,     0,     0,   354,     0,   355,
     356,   357,     0,   358,   359,   360,   361,     0,   362,   363,
       0,     0,     0,     0,     0,     0,     0,     0,   364,   365,
     366,     0,     0,   367,     0,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,     0,   379,
     380,   381,     0,   382,     0,   383,   384,   385,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,     0,     0,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,     0,   404,   405,   406,     0,
       0,   407,     0,   408,     0,   409,   410,     0,   411,   412,
       0,   413,     0,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,     0,   429,   430,   431,   432,     0,     0,
       0,   433,     0,     0,     0,   434,     0,   435,   436,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,     0,     0,     0,     0,   447,   448,     0,   449,
       0,     0,   450,     0,     0,   451,   452,     0,     0,     0,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,     0,   469,   470,   471,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,     0,     0,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,   488,   489,     0,   490,
     491,     0,     0,   492,     0,     0,   493,     0,   494,     0,
     495,   496,   497,     0,     0,     0,     0,     0,     0,   498,
       0,     0,   499,     0,     0,     0,   500,   501,   502,   503,
     504,   505,   506,     0,     0,     0,     0,     0,     0,   507,
     508,     0,   509,   510,   511,     0,     0,   512,     0,     0,
       0,     0,     0,     0,  2379,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,   560,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,     0,   321,
     322,   323,   324,     0,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,   335,     0,   336,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,   347,     0,     0,
     348,   349,   350,   351,     0,     0,     0,   352,   353,     0,
       0,     0,   354,     0,   355,   356,   357,     0,   358,   359,
     360,   361,     0,   362,   363,     0,     0,     0,     0,     0,
       0,     0,     0,   364,   365,   366,     0,     0,   367,     0,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,     0,     0,   379,   380,   381,     0,   382,     0,
     383,   384,   385,   386,   387,     0,   388,   389,   390,     0,
       0,   391,     0,     0,     0,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,   400,   401,     0,   402,   403,
       0,   404,   405,   406,     0,     0,   407,     0,   408,     0,
     409,   410,     0,   411,   412,     0,   413,     0,   414,     0,
       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,   427,   428,     0,     0,     0,   429,
     430,   431,   432,     0,     0,     0,   433,     0,     0,     0,
     434,     0,   435,   436,   437,   438,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,     0,     0,     0,
       0,   447,   448,     0,   449,     0,     0,   450,     0,     0,
     451,   452,     0,     0,     0,   453,     0,     0,   454,   455,
       0,   456,   457,   458,   459,   460,   461,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,     0,   469,
     470,   471,   472,     0,     0,   473,   474,     0,   475,   476,
     477,   478,     0,     0,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   483,   484,   485,     0,   486,   487,
       0,   488,   489,     0,   490,   491,     0,     0,   492,     0,
       0,   493,     0,   494,     0,   495,   496,   497,     0,     0,
       0,     0,     0,     0,   498,     0,     0,   499,     0,     0,
       0,   500,   501,   502,   503,   504,   505,   506,     0,     0,
       0,     0,     0,     0,   507,   508,     0,   509,   510,   511,
       0,     0,   512,     0,     0,     0,   142,     0,   143,   144,
     145,   146,   147,   148,  3076,     0,   149,     0,     0,     0,
     150,     0,  3077,   151,     0,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,     0,     0,   170,   171,
       0,   172,   173,     0,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   203,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,   216,
       0,     0,     0,     0,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,     0,   265,   266,   267,
       0,   268,     0,     0,     0,   269,   270,     0,     0,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,   282,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,     0,     0,   289,   290,   291,     0,
       0,   292,     0,     0,   293,   294,     0,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,     0,
       0,   348,   349,   350,   351,     0,     0,     0,   352,   353,
       0,     0,     0,   354,     0,   355,   356,   357,     0,   358,
     359,   360,   361,     0,   362,   363,     0,     0,     0,     0,
       0,     0,     0,     0,   364,   365,   366,     0,     0,   367,
       0,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,     0,   379,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,     0,   404,   405,   406,     0,     0,   407,     0,   408,
       0,   409,   410,     0,   411,   412,     0,   413,     0,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,     0,
     429,   430,   431,   432,     0,     0,     0,   433,     0,     0,
       0,   434,     0,   435,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,   452,     0,     0,     0,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,     0,     0,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,   488,   489,     0,   490,   491,     0,     0,   492,
       0,     0,   493,     0,   494,     0,   495,   496,   497,     0,
       0,     0,     0,     0,     0,   498,     0,     0,   499,     0,
       0,     0,   500,   501,   502,   503,   504,   505,   506,     0,
       0,     0,     0,     0,     0,   507,   508,     0,   509,   510,
     511,     0,     0,   512,     0,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,  4774,   799,   151,     0,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,     0,     0,   161,
       0,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,     0,     0,   170,
     171,     0,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   203,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,     0,     0,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,   214,     0,     0,     0,     0,   215,
     216,     0,     0,     0,     0,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,     0,   244,   245,   246,   247,     0,     0,   248,   249,
       0,   250,   251,   252,     0,     0,   253,     0,     0,     0,
     254,     0,   255,     0,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,     0,     0,   265,   266,
     267,     0,   268,     0,     0,     0,   269,   270,     0,     0,
       0,   271,   272,   273,   274,   275,     0,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,     0,   281,
     282,     0,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   291,
       0,     0,   292,     0,     0,   293,   294,     0,     0,     0,
       0,     0,   295,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,     0,
       0,   321,   322,   323,   324,     0,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,   335,     0,   336,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,   347,
       0,     0,   348,   349,   350,   351,     0,     0,     0,   352,
     353,     0,     0,     0,   354,     0,   355,   356,   357,     0,
     358,   359,   360,   361,     0,   362,   363,     0,     0,     0,
       0,     0,     0,     0,     0,   364,   365,   366,     0,     0,
     367,     0,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,     0,     0,   379,   380,   381,     0,
     382,     0,   383,   384,   385,   386,   387,     0,   388,   389,
     390,     0,     0,   391,     0,     0,     0,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,   400,   401,     0,
     402,   403,     0,   404,   405,   406,     0,     0,   407,     0,
     408,     0,   409,   410,     0,   411,   412,     0,   413,     0,
     414,     0,     0,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,   427,   428,     0,     0,
       0,   429,   430,   431,   432,     0,     0,     0,   433,     0,
       0,     0,   434,     0,   435,   436,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,     0,
       0,     0,     0,   447,   448,     0,   449,     0,     0,   450,
       0,     0,   451,   452,     0,     0,     0,   453,     0,     0,
     454,   455,     0,   456,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
       0,   469,   470,   471,   472,     0,     0,   473,   474,     0,
     475,   476,   477,   478,     0,     0,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,   483,   484,   485,     0,
     486,   487,     0,   488,   489,     0,   490,   491,     0,     0,
     492,     0,     0,   493,     0,   494,     0,   495,   496,   497,
       0,     0,     0,     0,     0,     0,   498,     0,     0,   499,
       0,     0,     0,   500,   501,   502,   503,   504,   505,   506,
       0,     0,     0,     0,     0,     0,   507,   508,     0,   509,
     510,   511,     0,     0,   512,     0,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,   151,   560,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,     0,     0,   170,   171,
       0,   172,   173,     0,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   203,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,   216,
       0,     0,     0,     0,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   631,   247,     0,     0,   248,   249,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,     0,   265,   266,   267,
       0,   268,     0,     0,     0,   269,   270,     0,     0,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,   282,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,     0,     0,   289,   290,   291,     0,
       0,   292,     0,     0,   293,   294,     0,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,     0,
       0,   348,   349,   350,   351,     0,     0,     0,   352,   353,
       0,     0,     0,   354,     0,   355,   356,   357,     0,   358,
     359,   360,   361,     0,   362,   363,     0,     0,     0,     0,
       0,     0,     0,     0,   364,   365,   366,     0,     0,   367,
       0,   368,     0,   632,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,     0,   379,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,     0,   404,   405,   406,     0,     0,   407,     0,   408,
       0,   409,   410,     0,   411,   412,     0,   413,     0,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,     0,
     429,   430,   431,   432,     0,     0,     0,   433,     0,     0,
       0,   434,     0,   435,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,   452,     0,     0,     0,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,     0,     0,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,   488,   489,     0,   490,   491,     0,     0,   492,
       0,     0,   493,     0,   494,     0,   495,   496,   497,     0,
       0,     0,     0,     0,     0,   498,     0,     0,   499,     0,
       0,     0,   500,   501,   502,   503,   504,   505,   506,     0,
       0,     0,     0,     0,     0,   507,   508,     0,   509,   510,
     511,     0,     0,   512,     0,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,   560,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,     0,   321,
     322,   323,   324,     0,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,   335,     0,   336,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,   347,     0,     0,
     348,   349,   350,   351,     0,     0,     0,   352,   353,     0,
       0,     0,   354,     0,   355,   356,   357,     0,   358,   359,
     360,   361,     0,   362,   363,     0,     0,     0,     0,     0,
       0,     0,     0,   364,   365,   366,     0,     0,   367,     0,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,     0,     0,   379,   380,   381,     0,   382,     0,
     383,   384,   385,   386,   387,     0,   388,   389,   390,     0,
       0,   391,     0,     0,     0,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,   400,   401,     0,   402,   403,
       0,   404,   405,   406,     0,     0,   407,     0,   408,     0,
     409,   410,     0,   411,   412,     0,   413,     0,   414,     0,
       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,   427,   428,     0,     0,     0,   429,
     430,   431,   432,     0,     0,     0,   433,     0,     0,     0,
     434,     0,   435,   436,   437,   438,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,     0,     0,     0,
       0,   447,   448,     0,   449,     0,     0,   450,     0,     0,
     451,   452,     0,     0,     0,   453,     0,     0,   454,   455,
       0,   456,   457,   458,   459,   460,   461,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,     0,   469,
     470,   471,   472,     0,     0,   473,   474,     0,   475,   476,
     477,   478,     0,     0,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   483,   484,   485,     0,   486,   487,
       0,   488,   489,     0,   490,   491,     0,     0,   492,     0,
       0,   493,     0,   494,     0,   495,   496,   497,     0,     0,
       0,     0,     0,     0,   498,     0,     0,   499,     0,     0,
       0,   500,   501,   502,   503,   504,   505,   506,     0,     0,
       0,     0,     0,     0,   507,   508,     0,   509,   510,   511,
       0,     0,   512,     0,   142,     0,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   151,   799,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,     0,     0,   161,     0,     0,     0,
     162,     0,     0,   163,   164,   165,     0,   166,     0,   167,
     168,     0,     0,   169,     0,     0,   170,   171,     0,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,   199,     0,   200,   201,   202,   203,   204,     0,   205,
       0,     0,   206,     0,     0,   207,     0,   208,     0,     0,
     209,     0,   210,     0,     0,     0,   211,   212,   213,     0,
       0,   214,     0,     0,     0,     0,   215,   216,     0,     0,
       0,     0,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,   225,     0,
       0,   226,   227,   228,     0,     0,     0,   229,     0,   230,
     231,     0,   232,   233,   234,     0,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,     0,     0,   265,   266,   267,     0,   268,
       0,     0,     0,   269,   270,     0,     0,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,   282,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,     0,     0,
       0,   288,     0,     0,   289,   290,   291,     0,     0,   292,
       0,     0,   293,   294,     0,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
       0,   512,     0,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     151,  3077,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,     0,     0,   161,     0,     0,     0,   162,
       0,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,     0,     0,   170,   171,     0,   172,   941,
     942,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   203,   204,     0,   205,     0,
       0,   206,     0,     0,   207,     0,   208,     0,     0,   209,
       0,   210,     0,     0,     0,   211,   212,   213,     0,     0,
     214,     0,     0,     0,     0,   215,   216,     0,     0,     0,
     943,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,     0,   244,   245,
     246,   247,     0,     0,   248,   249,     0,   250,   251,   252,
       0,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   259,   260,   261,   262,   944,     0,
     264,     0,     0,     0,   265,   266,   267,     0,   268,     0,
       0,     0,   269,   270,     0,     0,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,     0,   281,   282,     0,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   291,     0,     0,   292,     0,
       0,   293,   294,     0,     0,     0,     0,     0,   295,   296,
       0,   945,     0,   298,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,     0,     0,   321,   322,   323,
     324,     0,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,   335,
       0,   336,     0,   337,   338,   339,   340,   341,   342,   946,
     344,   345,     0,     0,   346,   347,     0,     0,   348,   349,
     350,   351,     0,     0,     0,   352,   353,     0,     0,     0,
     354,     0,   355,   356,   357,     0,   358,   359,   360,   361,
       0,   362,   363,     0,     0,     0,     0,     0,     0,     0,
       0,   364,   365,   366,     0,     0,   367,     0,   368,     0,
     369,   370,   947,   372,   373,   374,   375,   376,   377,   378,
       0,     0,   379,   380,   381,     0,   382,     0,   383,   384,
     385,   386,   387,     0,   388,   389,   390,     0,     0,   391,
       0,     0,     0,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,   400,   401,     0,   402,   403,     0,   404,
     405,   406,     0,     0,   407,     0,   408,     0,   409,   410,
       0,   411,   412,     0,   413,     0,   414,     0,     0,   948,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,   427,   428,     0,     0,     0,   429,   430,   949,
     432,     0,     0,     0,   433,     0,     0,     0,   434,     0,
     435,   436,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,     0,     0,     0,     0,   447,
     448,     0,   449,     0,     0,   450,     0,     0,   451,   452,
       0,     0,     0,   453,     0,     0,   454,   455,     0,   456,
     457,   458,   459,   460,   461,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,     0,   469,   470,   471,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
       0,     0,     0,     0,     0,   950,   480,   481,     0,     0,
       0,   482,   483,   484,   485,     0,   486,   487,     0,   488,
     489,     0,   490,   491,     0,     0,   492,     0,     0,   493,
       0,   494,     0,   495,   496,   497,     0,     0,     0,     0,
       0,     0,   498,     0,     0,   499,     0,     0,     0,   500,
     501,   502,   503,   504,   505,   506,     0,     0,     0,     0,
       0,     0,   507,   508,     0,   509,   510,   511,     0,     0,
     512,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,   951,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,     0,     0,   161,     0,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,     0,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   203,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,   214,     0,
       0,     0,     0,   215,   216,     0,     0,     0,     0,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,     0,   244,   245,   246,   247,
       0,     0,   248,   249,     0,   250,   251,   252,     0,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
       0,     0,   265,   266,   267,     0,   268,     0,     0,     0,
     269,   270,     0,     0,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,     0,   281,   282,     0,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   291,     0,     0,   292,     0,     0,   293,
     294,   643,     0,     0,     0,     0,   295,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,     0,     0,   321,   322,   323,   324,     0,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,   335,     0,   336,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,   347,     0,     0,   348,   349,   350,   351,
       0,     0,     0,   352,   353,     0,     0,     0,   354,     0,
     355,   356,   357,     0,   358,   359,   360,   361,     0,   362,
     363,     0,     0,     0,     0,     0,     0,     0,     0,   364,
     365,   366,     0,     0,   367,     0,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,     0,     0,
     379,   380,   381,     0,   382,     0,   383,   384,   385,   386,
     387,     0,   388,   389,   390,     0,     0,   391,     0,     0,
       0,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,   400,   401,     0,   402,   403,     0,   404,   405,   406,
       0,     0,   407,     0,   408,     0,   409,   410,     0,   411,
     412,     0,   413,     0,   414,     0,     0,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,     0,   429,   430,   431,   432,     0,
       0,     0,   433,     0,     0,     0,   434,     0,   435,   436,
     437,   438,   439,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,     0,     0,     0,     0,   447,   448,     0,
     449,     0,     0,   450,     0,     0,   451,   452,     0,     0,
       0,   453,     0,     0,   454,   455,     0,   456,   457,   458,
     459,   460,   461,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,     0,   469,   470,   471,   472,     0,
     139,   473,   474,     0,   475,   476,   477,   478,     0,     0,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
     483,   484,   485,     0,   486,   487,     0,   488,   489,     0,
     490,   491,     0,     0,   492,     0,     0,   493,     0,   494,
       0,   495,   496,   497,     0,     0,     0,     0,     0,     0,
     498,     0,     0,   499,     0,     0,     0,   500,   501,   502,
     503,   504,   505,   506,     0,     0,     0,     0,     0,     0,
     507,   508,     0,   509,   510,   511,     0,     0,   512,   142,
       0,   143,   144,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   151,  1437,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,     0,     0,
       0,   161,     0,     0,     0,   162,     0,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,     0,
       0,   170,   171,     0,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   203,   204,     0,   205,     0,     0,   206,     0,     0,
     207,     0,   208,     0,     0,   209,     0,   210,     0,     0,
       0,   211,   212,   213,     0,     0,   214,     0,     0,     0,
       0,   215,   216,     0,     0,     0,     0,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,     0,   244,   245,   246,   247,     0,     0,
     248,   249,     0,   250,   251,   252,     0,     0,   253,     0,
       0,     0,   254,     0,   255,     0,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,     0,     0,
     265,   266,   267,     0,   268,     0,     0,     0,   269,   270,
       0,     0,     0,   271,   272,   273,   274,   275,     0,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
       0,   281,   282,     0,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   291,     0,     0,   292,     0,     0,   293,   294,   643,
       0,     0,     0,     0,   295,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,     0,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,   139,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,     0,   512,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   151,  1783,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,     0,     0,   161,
       0,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,     0,     0,   170,
     171,     0,   172,   941,   942,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   203,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,     0,     0,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,   214,     0,     0,     0,     0,   215,
     216,     0,     0,     0,   943,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,     0,   244,   245,   246,   247,     0,     0,   248,   249,
       0,   250,   251,   252,     0,     0,   253,     0,     0,     0,
     254,     0,   255,     0,   256,     0,   257,   258,   259,   260,
     261,   262,   944,     0,   264,     0,     0,     0,   265,   266,
     267,     0,   268,     0,     0,     0,   269,   270,     0,     0,
       0,   271,   272,   273,   274,   275,     0,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,     0,   281,
     282,     0,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   291,
       0,     0,   292,     0,     0,   293,   294,     0,     0,     0,
       0,     0,   295,   296,     0,   945,     0,   298,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,     0,
       0,   321,   322,   323,   324,     0,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,   335,     0,   336,     0,   337,   338,   339,
     340,   341,   342,   946,   344,   345,     0,     0,   346,   347,
       0,     0,   348,   349,   350,   351,     0,     0,     0,   352,
     353,     0,     0,     0,   354,     0,   355,   356,   357,     0,
     358,   359,   360,   361,     0,   362,   363,     0,     0,     0,
       0,     0,     0,     0,     0,   364,   365,   366,     0,     0,
     367,     0,   368,     0,   369,   370,   947,   372,   373,   374,
     375,   376,   377,   378,     0,     0,   379,   380,   381,     0,
     382,     0,   383,   384,   385,   386,   387,     0,   388,   389,
     390,     0,     0,   391,     0,     0,     0,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,   400,   401,     0,
     402,   403,     0,   404,   405,   406,     0,     0,   407,     0,
     408,     0,   409,   410,     0,   411,   412,     0,   413,     0,
     414,     0,     0,   948,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,   427,   428,     0,     0,
       0,   429,   430,   949,   432,     0,     0,     0,   433,     0,
       0,     0,   434,     0,   435,   436,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,     0,
       0,     0,     0,   447,   448,     0,   449,     0,     0,   450,
       0,     0,   451,   452,     0,     0,     0,   453,     0,     0,
     454,   455,     0,   456,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
       0,   469,   470,   471,   472,     0,     0,   473,   474,     0,
     475,   476,   477,   478,     0,     0,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,   483,   484,   485,     0,
     486,   487,     0,   488,   489,     0,   490,   491,     0,     0,
     492,     0,     0,   493,     0,   494,     0,   495,   496,   497,
       0,     0,     0,     0,     0,     0,   498,     0,     0,   499,
       0,     0,     0,   500,   501,   502,   503,   504,   505,   506,
       0,     0,     0,     0,     0,     0,   507,   508,     0,   509,
     510,   511,     0,     0,   512,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,   951,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,   643,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,     0,   321,
     322,   323,   324,     0,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,   335,     0,   336,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,   347,     0,     0,
     348,   349,   350,   351,     0,     0,     0,   352,   353,     0,
       0,     0,   354,     0,   355,   356,   357,     0,   358,   359,
     360,   361,     0,   362,   363,     0,     0,     0,     0,     0,
       0,     0,     0,   364,   365,   366,     0,     0,   367,     0,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,     0,     0,   379,   380,   381,     0,   382,     0,
     383,   384,   385,   386,   387,     0,   388,   389,   390,     0,
       0,   391,     0,     0,     0,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,   400,   401,     0,   402,   403,
       0,   404,   405,   406,     0,     0,   407,     0,   408,     0,
     409,   410,     0,   411,   412,     0,   413,     0,   414,     0,
       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,   427,   428,     0,     0,     0,   429,
     430,   431,   432,     0,     0,     0,   433,     0,     0,     0,
     434,     0,   435,   436,   437,   438,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,     0,     0,     0,
       0,   447,   448,     0,   449,     0,     0,   450,     0,     0,
     451,   452,     0,     0,     0,   453,     0,     0,   454,   455,
       0,   456,   457,   458,   459,   460,   461,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,     0,   469,
     470,   471,   472,     0,   139,   473,   474,     0,   475,   476,
     477,   478,     0,     0,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   483,   484,   485,     0,   486,   487,
       0,   488,   489,     0,   490,   491,     0,     0,   492,     0,
       0,   493,     0,   494,     0,   495,   496,   497,     0,     0,
       0,     0,     0,     0,   498,     0,     0,   499,     0,     0,
       0,   500,   501,   502,   503,   504,   505,   506,     0,     0,
       0,     0,     0,     0,   507,   508,     0,   509,   510,   511,
       0,     0,   512,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     151,  3637,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,     0,     0,   161,     0,     0,     0,   162,
       0,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,     0,     0,   170,   171,     0,   172,   173,
       0,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,  1317,   198,
     199,     0,   200,   201,   202,   203,   204,     0,   205,     0,
       0,   206,     0,     0,   207,     0,   208,     0,     0,   209,
       0,   210,     0,     0,     0,   211,   212,   213,     0,     0,
     214,     0,     0,     0,     0,   215,   216,     0,     0,     0,
       0,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,     0,   244,   245,
     246,   247,     0,     0,   248,   249,     0,   250,   251,   252,
       0,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,   267,     0,   268,     0,
       0,     0,   269,   270,     0,     0,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,     0,   281,   282,     0,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   291,     0,     0,   292,     0,
       0,   293,   294,     0,     0,     0,     0,     0,   295,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,     0,     0,   321,   322,   323,
     324,     0,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,   335,
       0,   336,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,   347,     0,     0,   348,   349,
     350,   351,     0,     0,     0,   352,   353,     0,     0,     0,
     354,     0,   355,   356,   357,     0,   358,   359,   360,   361,
       0,   362,   363,     0,     0,     0,     0,     0,     0,     0,
       0,   364,   365,   366,     0,     0,   367,     0,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
       0,     0,   379,   380,   381,     0,   382,     0,   383,   384,
     385,   386,   387,     0,   388,   389,   390,     0,     0,   391,
       0,     0,     0,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,   400,   401,     0,   402,   403,     0,   404,
     405,   406,     0,     0,   407,     0,   408,     0,   409,   410,
       0,   411,   412,     0,   413,     0,   414,     0,     0,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,   427,   428,     0,     0,     0,   429,   430,   431,
     432,     0,     0,     0,   433,     0,     0,     0,   434,     0,
     435,   436,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,     0,     0,     0,     0,   447,
     448,     0,   449,     0,     0,   450,     0,     0,   451,   452,
       0,     0,     0,   453,     0,     0,   454,   455,     0,   456,
     457,   458,   459,   460,   461,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,     0,   469,   470,   471,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
       0,     0,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,   483,   484,   485,     0,   486,   487,     0,   488,
     489,     0,   490,   491,     0,     0,   492,     0,     0,   493,
       0,   494,     0,   495,   496,   497,     0,     0,     0,     0,
       0,     0,   498,     0,     0,   499,     0,     0,     0,   500,
     501,   502,   503,   504,   505,   506,     0,     0,     0,     0,
       0,     0,   507,   508,     0,   509,   510,   511,     0,     0,
     512,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,  1318,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,     0,     0,   161,     0,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,     0,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   203,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,   214,     0,
       0,     0,     0,   215,   216,     0,     0,     0,     0,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,     0,   244,   245,   246,   247,
       0,     0,   248,   249,     0,   250,   251,   252,     0,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
       0,     0,   265,   266,   267,     0,   268,     0,     0,     0,
     269,   270,     0,     0,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,     0,   281,   282,     0,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   291,     0,     0,   292,     0,     0,   293,
     294,     0,     0,     0,     0,     0,   295,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,     0,     0,   321,   322,   323,   324,     0,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,   335,     0,   336,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,   347,     0,     0,   348,   349,   350,   351,
       0,     0,     0,   352,   353,     0,     0,     0,   354,     0,
     355,   356,   357,     0,   358,   359,   360,   361,     0,   362,
     363,     0,     0,     0,     0,     0,     0,     0,     0,   364,
     365,   366,     0,     0,   367,     0,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,     0,     0,
     379,   380,   381,     0,   382,     0,   383,   384,   385,   386,
     387,     0,   388,   389,   390,     0,     0,   391,     0,     0,
       0,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,   400,   401,     0,   402,   403,     0,   404,   405,   406,
       0,     0,   407,     0,   408,     0,   409,   410,     0,   411,
     412,     0,   413,     0,   414,     0,     0,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,     0,   429,   430,   431,   432,     0,
       0,     0,   433,     0,     0,     0,   434,     0,   435,   436,
     437,   438,   439,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,     0,     0,     0,     0,   447,   448,     0,
     449,     0,     0,   450,     0,     0,   451,   452,     0,     0,
       0,   453,     0,     0,   454,   455,     0,   456,   457,   458,
     459,   460,   461,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,     0,   469,   470,   471,   472,     0,
       0,   473,   474,     0,   475,   476,   477,   478,     0,     0,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
     483,   484,   485,     0,   486,   487,     0,   488,   489,     0,
     490,   491,     0,     0,   492,     0,     0,   493,     0,   494,
       0,   495,   496,   497,     0,     0,     0,     0,     0,     0,
     498,     0,     0,   499,     0,     0,     0,   500,   501,   502,
     503,   504,   505,   506,     0,     0,     0,     0,     0,     0,
     507,   508,     0,   509,   510,   511,     0,     0,   512,   142,
       0,   143,   144,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,     0,  1318,   152,   153,
     154,   155,   156,   157,   158,     0,     0,  -372,     0,     0,
       0,   161,     0,     0,     0,   162,     0,     0,   163,   164,
     165,     0,   166,     0,     0,     0,     0,     0,   169,  4152,
       0,   170,   171,     0,   172,     0,     0,     0,     0,     0,
     176,   177,   178,   179,  4153,   181,   182,     0,   183,   184,
       0,     0,     0,     0,     0,     0,   190,     0,   192,     0,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,     0,   204,     0,   205,     0,     0,   206,     0,     0,
     207,     0,   208,     0,     0,   209,     0,   210,     0,     0,
       0,   211,   212,   213,     0,     0,   214,     0,     0,     0,
       0,   215,     0,     0,     0,     0,     0,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,     0,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,     0,   231,     0,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   244,   245,   246,   247,     0,     0,
     248,   249,  4154,   250,   251,   252,     0,     0,     0,     0,
       0,     0,   254,     0,   255,     0,   256,     0,   257,   258,
     259,   260,   261,     0,   263,     0,   264,     0,     0,     0,
       0,   266,   267,     0,     0,     0,     0,     0,     0,   270,
       0,     0,     0,   271,   272,   273,   274,   275,  4155,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
       0,   281,     0,     0,     0,     0,   283,     0,   284,   285,
       0,   286,   287,  4156,     0,     0,   288,     0,     0,     0,
     290,   291,     0,     0,   292,  4157,     0,   293,   294,     0,
       0,     0,     0,     0,   295,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,     0,     0,  -327,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,     0,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,     0,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,  4158,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   365,   366,
       0,     0,     0,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,     0,     0,     0,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,     0,     0,   404,     0,   406,  -327,     0,
     407,     0,     0,     0,   409,     0,     0,   411,   412,     0,
     413,  4159,   414,     0,     0,   415,     0,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,     0,   427,     0,
       0,     0,     0,   429,   430,   431,     0,     0,     0,     0,
     433,     0,     0,     0,     0,     0,     0,   436,     0,     0,
     439,   440,     0,   441,     0,   443,     0,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,     0,     0,     0,     0,   453,
       0,     0,     0,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,     0,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,     0,     0,
       0,     0,   492,     0,     0,   493,     0,     0,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,  -327,     0,     0,     0,   507,     0,
       0,   509,     0,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
    4767,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,  1047,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,   643,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,     0,   321,
     322,   323,   324,     0,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,   335,     0,   336,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,   347,     0,     0,
     348,   349,   350,   351,     0,     0,     0,   352,   353,     0,
       0,     0,   354,     0,   355,   356,   357,     0,   358,   359,
     360,   361,     0,   362,   363,     0,     0,     0,     0,     0,
       0,     0,     0,   364,   365,   366,     0,     0,   367,     0,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,     0,     0,   379,   380,   381,     0,   382,     0,
     383,   384,   385,   386,   387,     0,   388,   389,   390,     0,
       0,   391,     0,     0,     0,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,   400,   401,     0,   402,   403,
       0,   404,   405,   406,     0,     0,   407,     0,   408,     0,
     409,   410,     0,   411,   412,     0,   413,     0,   414,     0,
       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,   427,   428,     0,     0,     0,   429,
     430,   431,   432,     0,     0,     0,   433,     0,     0,     0,
     434,     0,   435,   436,   437,   438,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,     0,     0,     0,
       0,   447,   448,     0,   449,     0,     0,   450,     0,     0,
     451,   452,     0,     0,     0,   453,     0,     0,   454,   455,
       0,   456,   457,   458,   459,   460,   461,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,     0,   469,
     470,   471,   472,     0,   139,   473,   474,     0,   475,   476,
     477,   478,     0,     0,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   483,   484,   485,     0,   486,   487,
       0,   488,   489,     0,   490,   491,     0,     0,   492,     0,
       0,   493,     0,   494,     0,   495,   496,   497,     0,     0,
       0,     0,     0,     0,   498,     0,     0,   499,     0,     0,
       0,   500,   501,   502,   503,   504,   505,   506,     0,     0,
       0,     0,     0,     0,   507,   508,     0,   509,   510,   511,
       0,   142,   512,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,  1215,   150,     0,     0,   151,     0,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,     0,     0,   161,     0,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,     0,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   203,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,   214,     0,
       0,     0,     0,   215,   216,     0,     0,     0,     0,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,     0,   244,   245,   246,   247,
       0,     0,   248,   249,     0,   250,   251,   252,     0,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
       0,     0,   265,   266,   267,     0,   268,     0,     0,     0,
     269,   270,     0,     0,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,     0,   281,   282,     0,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   291,     0,     0,   292,     0,     0,   293,
     294,     0,     0,     0,     0,     0,   295,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,     0,     0,   321,   322,   323,   324,     0,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,   335,     0,   336,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,   346,   347,     0,     0,   348,   349,   350,   351,
       0,     0,     0,   352,   353,     0,     0,     0,   354,     0,
     355,   356,   357,     0,   358,   359,   360,   361,     0,   362,
     363,     0,     0,     0,     0,     0,     0,     0,     0,   364,
     365,   366,     0,     0,   367,     0,   368,     0,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,     0,     0,
     379,   380,   381,     0,   382,     0,   383,   384,   385,   386,
     387,     0,   388,   389,   390,     0,     0,   391,     0,     0,
       0,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,   400,   401,     0,   402,   403,     0,   404,   405,   406,
       0,     0,   407,     0,   408,     0,   409,   410,     0,   411,
     412,     0,   413,     0,   414,     0,     0,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,     0,   429,   430,   431,   432,     0,
       0,     0,   433,     0,     0,     0,   434,     0,   435,   436,
     437,   438,   439,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,     0,     0,     0,     0,   447,   448,     0,
     449,     0,     0,   450,     0,     0,   451,   452,     0,     0,
       0,   453,     0,     0,   454,   455,     0,   456,   457,   458,
     459,   460,   461,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,     0,   469,   470,   471,   472,     0,
       0,   473,   474,     0,   475,   476,   477,   478,     0,     0,
       0,     0,     0,   479,   480,   481,     0,     0,     0,   482,
     483,   484,   485,     0,   486,   487,     0,   488,   489,     0,
     490,   491,     0,     0,   492,     0,     0,   493,     0,   494,
       0,   495,   496,   497,     0,     0,     0,     0,     0,     0,
     498,     0,     0,   499,     0,     0,     0,   500,   501,   502,
     503,   504,   505,   506,     0,     0,     0,     0,     0,     0,
     507,   508,     0,   509,   510,   511,     0,   142,   512,   143,
     144,   145,   146,   147,   148,  2202,     0,   149,     0,     0,
       0,   150,     0,     0,   151,     0,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,     0,     0,   161,
       0,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,     0,     0,   170,
     171,     0,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   203,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,     0,     0,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,   214,     0,     0,     0,     0,   215,
     216,     0,     0,     0,     0,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,     0,   244,   245,   246,   247,     0,     0,   248,   249,
       0,   250,   251,   252,     0,     0,   253,     0,     0,     0,
     254,     0,   255,     0,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,     0,     0,   265,   266,
     267,     0,   268,     0,     0,     0,   269,   270,     0,     0,
       0,   271,   272,   273,   274,   275,     0,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,     0,   281,
     282,     0,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   291,
       0,     0,   292,     0,     0,   293,   294,     0,     0,     0,
       0,     0,   295,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,     0,
       0,   321,   322,   323,   324,     0,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,   335,     0,   336,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,   347,
       0,     0,   348,   349,   350,   351,     0,     0,     0,   352,
     353,     0,     0,     0,   354,     0,   355,   356,   357,     0,
     358,   359,   360,   361,     0,   362,   363,     0,     0,     0,
       0,     0,     0,     0,     0,   364,   365,   366,     0,     0,
     367,     0,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,     0,     0,   379,   380,   381,     0,
     382,     0,   383,   384,   385,   386,   387,     0,   388,   389,
     390,     0,     0,   391,     0,     0,     0,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,   400,   401,     0,
     402,   403,     0,   404,   405,   406,     0,     0,   407,     0,
     408,     0,   409,   410,     0,   411,   412,     0,   413,     0,
     414,     0,     0,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,   427,   428,     0,     0,
       0,   429,   430,   431,   432,     0,     0,     0,   433,     0,
       0,     0,   434,     0,   435,   436,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,     0,
       0,     0,     0,   447,   448,     0,   449,     0,     0,   450,
       0,     0,   451,   452,     0,     0,     0,   453,     0,     0,
     454,   455,     0,   456,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
       0,   469,   470,   471,   472,     0,     0,   473,   474,     0,
     475,   476,   477,   478,     0,     0,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,   483,   484,   485,     0,
     486,   487,     0,   488,   489,     0,   490,   491,     0,     0,
     492,     0,     0,   493,     0,   494,     0,   495,   496,   497,
       0,     0,     0,     0,     0,     0,   498,     0,     0,   499,
       0,     0,     0,   500,   501,   502,   503,   504,   505,   506,
       0,     0,     0,     0,     0,     0,   507,   508,     0,   509,
     510,   511,     0,   142,   512,   143,   144,   145,   146,   147,
     148,  2901,     0,   149,     0,     0,     0,   150,     0,     0,
     151,     0,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,     0,     0,   161,     0,     0,     0,   162,
       0,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,     0,     0,   170,   171,     0,   172,   173,
       0,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   203,   204,     0,   205,     0,
       0,   206,     0,     0,   207,     0,   208,     0,     0,   209,
       0,   210,     0,     0,     0,   211,   212,   213,     0,     0,
     214,     0,     0,     0,     0,   215,   216,     0,     0,     0,
       0,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,     0,   244,   245,
     246,   247,     0,     0,   248,   249,     0,   250,   251,   252,
       0,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,   267,     0,   268,     0,
       0,     0,   269,   270,     0,     0,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,     0,   281,   282,     0,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   291,     0,     0,   292,     0,
       0,   293,   294,     0,     0,     0,     0,     0,   295,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,     0,     0,   321,   322,   323,
     324,     0,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,   335,
       0,   336,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,   347,     0,     0,   348,   349,
     350,   351,     0,     0,     0,   352,   353,     0,     0,     0,
     354,     0,   355,   356,   357,     0,   358,   359,   360,   361,
       0,   362,   363,     0,     0,     0,     0,     0,     0,     0,
       0,   364,   365,   366,     0,     0,   367,     0,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
       0,     0,   379,   380,   381,     0,   382,     0,   383,   384,
     385,   386,   387,     0,   388,   389,   390,     0,     0,   391,
       0,     0,     0,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,   400,   401,     0,   402,   403,     0,   404,
     405,   406,     0,     0,   407,     0,   408,     0,   409,   410,
       0,   411,   412,     0,   413,     0,   414,     0,     0,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,   427,   428,     0,     0,     0,   429,   430,   431,
     432,     0,     0,     0,   433,     0,     0,     0,   434,     0,
     435,   436,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,     0,     0,     0,     0,   447,
     448,     0,   449,     0,     0,   450,     0,     0,   451,   452,
       0,     0,     0,   453,     0,     0,   454,   455,     0,   456,
     457,   458,   459,   460,   461,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,     0,   469,   470,   471,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
       0,     0,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,   483,   484,   485,     0,   486,   487,     0,   488,
     489,     0,   490,   491,     0,     0,   492,     0,     0,   493,
       0,   494,     0,   495,   496,   497,     0,     0,     0,     0,
       0,     0,   498,     0,     0,   499,     0,     0,     0,   500,
     501,   502,   503,   504,   505,   506,     0,     0,     0,     0,
       0,     0,   507,   508,     0,   509,   510,   511,     0,   142,
     512,   143,   144,   145,   146,   147,   148,  3271,     0,   149,
       0,     0,     0,   150,     0,     0,   151,     0,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,     0,     0,
       0,   161,     0,     0,     0,   162,     0,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,     0,
       0,   170,   171,     0,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   203,   204,     0,   205,     0,     0,   206,     0,     0,
     207,     0,   208,     0,     0,   209,     0,   210,     0,     0,
       0,   211,   212,   213,     0,     0,   214,     0,     0,     0,
       0,   215,   216,     0,     0,     0,     0,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,     0,   244,   245,   246,   247,     0,     0,
     248,   249,     0,   250,   251,   252,     0,     0,   253,     0,
       0,     0,   254,     0,   255,     0,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,     0,     0,
     265,   266,   267,     0,   268,     0,     0,     0,   269,   270,
       0,     0,     0,   271,   272,   273,   274,   275,     0,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
       0,   281,   282,     0,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   291,     0,     0,   292,     0,     0,   293,   294,     0,
       0,     0,     0,     0,   295,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,     0,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,     0,   512,     0,     0,     0,
       0,     0,   142,  3642,   143,   144,   145,   146,   147,   148,
     840,   841,   149,     0,     0,     0,   150,     0,     0,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,     0,     0,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,   167,   168,     0,
       0,   169,     0,     0,   170,   171,     0,   172,   173,     0,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,   203,   204,     0,   205,     0,     0,
     206,   842,     0,   207,     0,   208,     0,   843,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,   216,     0,     0,     0,     0,
     217,     0,   218,   844,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,   225,   845,     0,   226,
     227,   228,     0,     0,     0,   229,     0,   230,   231,     0,
     232,   233,   234,     0,     0,   235,   236,     0,   237,   238,
     846,   240,   241,   242,   847,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,     0,   848,   251,   252,     0,
       0,   253,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   259,   260,   261,   262,   263,   849,   264,
       0,     0,     0,   265,   266,   267,     0,   268,     0,     0,
       0,   269,   270,     0,     0,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,   850,   279,     0,   280,
       0,     0,     0,   851,   281,   282,     0,     0,     0,   283,
       0,   284,   285,     0,   286,   287,     0,     0,     0,   288,
       0,     0,   289,   290,   291,     0,     0,   292,     0,     0,
     293,   294,   643,     0,     0,     0,     0,   295,   296,     0,
     297,     0,   298,   852,   299,   300,     0,     0,     0,     0,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,     0,     0,   348,   349,   350,
     351,     0,     0,     0,   352,   353,     0,     0,     0,   354,
       0,   355,   356,   357,     0,   358,   359,   360,   361,     0,
     362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     364,   365,   366,     0,     0,   367,     0,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
       0,   379,   380,   381,     0,   382,     0,   853,   384,   385,
     386,   854,     0,   388,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,   855,     0,   397,
     398,   399,   400,   401,     0,   856,   403,     0,   404,   405,
     406,     0,     0,   857,     0,   408,     0,   409,   410,     0,
     411,   412,     0,   413,     0,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,   858,     0,     0,   429,   430,   431,   432,
       0,     0,     0,   433,     0,     0,   859,   860,     0,   435,
     436,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,   452,     0,
       0,     0,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,     0,     0,   861,   463,   464,   465,
       0,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,   139,   473,   474,     0,   475,   476,   477,   478,     0,
       0,     0,     0,     0,   479,   480,   481,   862,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,   488,   489,
       0,   490,   491,     0,     0,   492,     0,     0,   493,   863,
     494,   864,   495,   496,   497,     0,     0,     0,     0,     0,
       0,   498,     0,     0,   499,     0,     0,     0,   500,   501,
     502,   503,   504,   505,   506,     0,     0,     0,     0,     0,
       0,   507,   508,     0,   509,   510,   511,     0,   142,   512,
     917,   144,   145,   146,   147,   148,   918,   841,   149,     0,
       0,     0,   150,     0,     0,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,   167,   168,     0,     0,   169,     0,     0,
     170,   171,     0,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
     203,   204,     0,   205,     0,     0,   206,   842,     0,   207,
       0,   208,     0,   843,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,   216,     0,     0,     0,     0,   217,     0,   218,   844,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,   225,   845,     0,   226,   227,   228,     0,     0,
       0,   229,     0,   230,   231,     0,   232,   233,   234,     0,
       0,   235,   236,     0,   237,   238,   846,   240,   241,   242,
     847,     0,     0,   244,   245,   246,   247,     0,     0,   248,
     249,     0,   848,   251,   252,     0,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,   262,   263,   849,   264,     0,     0,     0,   265,
     266,   267,     0,   268,     0,     0,     0,   269,   270,     0,
       0,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,   850,   279,     0,   280,     0,     0,     0,   851,
     281,   282,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,     0,     0,     0,   288,     0,     0,   289,   290,
     291,     0,     0,   292,     0,     0,   293,   294,   643,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,   852,
     299,   300,     0,     0,     0,     0,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
     347,     0,     0,   348,   349,   350,   351,     0,     0,     0,
     352,   353,     0,     0,     0,   354,     0,   355,   356,   357,
       0,   358,   359,   360,   361,     0,   362,   363,     0,     0,
       0,     0,     0,     0,     0,     0,   364,   365,   366,     0,
       0,   367,     0,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,     0,     0,   379,   380,   381,
       0,   382,     0,   853,   384,   385,   386,   919,     0,   388,
     389,   390,     0,     0,   391,     0,     0,     0,   392,   393,
     394,   395,   396,   855,     0,   397,   398,   399,   400,   401,
       0,   856,   403,     0,   404,   405,   406,     0,     0,   857,
       0,   408,     0,   409,   410,     0,   411,   412,     0,   413,
       0,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,   427,   428,   858,
       0,     0,   429,   430,   431,   432,     0,     0,     0,   433,
       0,     0,   859,   860,     0,   435,   436,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
       0,     0,     0,     0,   447,   448,     0,   449,     0,     0,
     450,     0,     0,   451,   452,     0,     0,     0,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,   460,   461,
       0,     0,   861,   463,   464,   465,     0,   466,   467,     0,
     468,     0,   469,   470,   471,   472,     0,   139,   473,   474,
       0,   475,   476,   477,   478,     0,     0,     0,     0,     0,
     479,   480,   481,   862,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,   488,   489,     0,   490,   491,     0,
       0,   492,     0,     0,   493,   863,   494,   864,   495,   496,
     497,     0,     0,     0,     0,     0,     0,   498,     0,     0,
     499,     0,     0,     0,   500,   501,   502,   503,   504,   505,
     506,     0,     0,     0,     0,     0,     0,   507,   508,     0,
     509,   510,   511,     0,   142,   512,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   151,     0,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,     0,     0,   161,     0,     0,     0,
     162,     0,     0,   163,   164,   165,     0,   166,     0,   167,
     168,     0,     0,   169,     0,     0,   170,   171,     0,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,   199,     0,   200,   201,   202,   203,   204,     0,   205,
       0,     0,   206,     0,     0,   207,     0,   208,     0,     0,
     209,     0,   210,     0,     0,     0,   211,   212,   213,     0,
       0,   214,     0,     0,     0,     0,   215,   216,  2554,     0,
       0,     0,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,   225,     0,
       0,   226,   227,   228,     0,     0,     0,   229,     0,   230,
     231,     0,   232,   233,   234,     0,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,     0,   250,   251,
     252,  2555,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,     0,     0,   265,   266,   267,     0,   268,
    2556,     0,     0,   269,   270,     0,     0,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,   282,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,     0,     0,
       0,   288,     0,     0,   289,   290,   291,     0,     0,   292,
       0,     0,   293,   294,     0,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
    2557,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,  1095,  1096,     0,   352,   353,     0,     0,
    2558,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,  4754,   585,  4755,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,  2559,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,  1668,     0,     0,  3487,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,  1669,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,  2988,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,  2989,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,   347,     0,     0,   348,   349,   350,   351,     0,
       0,     0,   352,   353,     0,     0,  2990,   354,     0,   355,
     356,   357,     0,   358,   359,   360,   361,     0,   362,   363,
       0,     0,     0,     0,     0,     0,     0,     0,   364,   365,
     366,     0,     0,   367,     0,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,     0,   379,
     380,   381,     0,   382,     0,   383,   384,   385,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,     0,     0,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,     0,   404,   405,   406,     0,
       0,   407,     0,   408,     0,   409,   410,     0,   411,   412,
       0,   413,     0,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,     0,   429,   430,   431,   432,     0,     0,
       0,   433,     0,     0,     0,   434,     0,   435,   436,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,     0,     0,     0,     0,   447,   448,     0,   449,
       0,     0,   450,     0,     0,   451,   452,     0,     0,     0,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,     0,   469,   470,   471,   472,     0,   139,
     473,   474,     0,   475,   476,   477,   478,     0,     0,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   483,
     484,   485,  2991,   486,   487,     0,   488,   489,     0,   490,
     491,     0,     0,   492,     0,     0,   493,     0,   494,     0,
     495,   496,   497,     0,     0,     0,     0,     0,     0,   498,
       0,     0,   499,     0,     0,     0,   500,   501,   502,   503,
     504,   505,   506,     0,     0,     0,     0,     0,     0,   507,
     508,     0,   509,   510,   511,     0,   142,   512,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,   151,     0,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,     0,     0,   170,   171,
       0,   172,   173,     0,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   203,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,   216,
    1668,     0,     0,  4294,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,     0,
     250,   251,   252,  1669,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,     0,   265,   266,   267,
       0,   268,  2988,     0,     0,   269,   270,     0,     0,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,   282,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,     0,     0,   289,   290,   291,     0,
       0,   292,     0,     0,   293,   294,     0,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,  2989,     0,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,     0,
       0,   348,   349,   350,   351,     0,     0,     0,   352,   353,
       0,     0,  2990,   354,     0,   355,   356,   357,     0,   358,
     359,   360,   361,     0,   362,   363,     0,     0,     0,     0,
       0,     0,     0,     0,   364,   365,   366,     0,     0,   367,
       0,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,     0,   379,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,     0,   404,   405,   406,     0,     0,   407,     0,   408,
       0,   409,   410,     0,   411,   412,     0,   413,     0,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,     0,
     429,   430,   431,   432,     0,     0,     0,   433,     0,     0,
       0,   434,     0,   435,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,   452,     0,     0,     0,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,   139,   473,   474,     0,   475,
     476,   477,   478,     0,     0,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,   483,   484,   485,  2991,   486,
     487,     0,   488,   489,     0,   490,   491,     0,     0,   492,
       0,     0,   493,     0,   494,     0,   495,   496,   497,     0,
       0,     0,     0,     0,     0,   498,     0,     0,   499,     0,
       0,     0,   500,   501,   502,   503,   504,   505,   506,     0,
       0,     0,     0,     0,     0,   507,   508,     0,   509,   510,
     511,     0,   142,   512,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,     0,     0,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,   167,   168,     0,
       0,   169,     0,     0,   170,   171,     0,   172,   173,     0,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,   203,   204,     0,   205,     0,     0,
     206,     0,     0,   207,     0,   208,     0,     0,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,   216,  1668,     0,     0,  4549,
     217,     0,   218,     0,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,   225,     0,     0,   226,
     227,   228,     0,     0,     0,   229,     0,   230,   231,     0,
     232,   233,   234,     0,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,     0,   250,   251,   252,  1669,
       0,   253,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,     0,     0,   265,   266,   267,     0,   268,  2988,     0,
       0,   269,   270,     0,     0,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,     0,   279,     0,   280,
       0,     0,     0,     0,   281,   282,     0,     0,     0,   283,
       0,   284,   285,     0,   286,   287,     0,     0,     0,   288,
       0,     0,   289,   290,   291,     0,     0,   292,     0,     0,
     293,   294,     0,     0,     0,     0,     0,   295,   296,     0,
     297,     0,   298,     0,   299,   300,     0,     0,  2989,     0,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,     0,     0,   348,   349,   350,
     351,     0,     0,     0,   352,   353,     0,     0,  2990,   354,
       0,   355,   356,   357,     0,   358,   359,   360,   361,     0,
     362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     364,   365,   366,     0,     0,   367,     0,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
       0,   379,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,     0,   404,   405,
     406,     0,     0,   407,     0,   408,     0,   409,   410,     0,
     411,   412,     0,   413,     0,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,     0,   429,   430,   431,   432,
       0,     0,     0,   433,     0,     0,     0,   434,     0,   435,
     436,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,   452,     0,
       0,     0,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,   139,   473,   474,     0,   475,   476,   477,   478,     0,
       0,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,   483,   484,   485,  2991,   486,   487,     0,   488,   489,
       0,   490,   491,     0,     0,   492,     0,     0,   493,     0,
     494,     0,   495,   496,   497,     0,     0,     0,     0,     0,
       0,   498,     0,     0,   499,     0,     0,     0,   500,   501,
     502,   503,   504,   505,   506,     0,     0,     0,     0,     0,
       0,   507,   508,     0,   509,   510,   511,     0,   142,   512,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,     0,  1425,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,   167,   168,     0,     0,   169,     0,     0,
     170,   171,     0,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
     203,   204,     0,   205,     0,     0,   206,     0,     0,   207,
       0,   208,     0,     0,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,   216,     0,     0,     0,  1426,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,   225,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,   230,   231,     0,   232,   233,   234,  1427,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,     0,   244,   245,   246,   247,     0,     0,   248,
     249,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,     0,     0,   265,
     266,   267,     0,   268,     0,     0,     0,   269,   270,     0,
       0,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,     0,
     281,   282,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,     0,     0,     0,   288,     0,     0,   289,   290,
     291,     0,     0,   292,     0,     0,   293,   294,   643,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
     347,     0,     0,   348,   349,   350,   351,     0,     0,     0,
     352,   353,     0,     0,     0,   354,     0,   355,   356,   357,
       0,   358,   359,   360,   361,     0,   362,   363,     0,     0,
       0,     0,     0,     0,     0,     0,   364,   365,   366,     0,
       0,   367,     0,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,     0,     0,   379,   380,   381,
       0,   382,     0,   383,   384,   385,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,     0,     0,   392,   393,
     394,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,   403,     0,   404,   405,   406,     0,     0,   407,
       0,   408,     0,   409,   410,     0,   411,   412,     0,   413,
       0,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,     0,   429,   430,   431,   432,     0,     0,  1428,   433,
       0,     0,     0,   434,     0,   435,   436,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
       0,     0,     0,     0,   447,   448,     0,   449,     0,     0,
     450,     0,     0,   451,   452,     0,     0,     0,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,     0,   469,   470,   471,   472,     0,   139,   473,   474,
       0,   475,   476,   477,   478,     0,     0,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,   488,   489,     0,   490,   491,     0,
       0,   492,     0,     0,   493,     0,   494,     0,   495,   496,
     497,     0,     0,     0,     0,     0,     0,   498,     0,     0,
     499,     0,     0,     0,   500,   501,   502,   503,   504,   505,
     506,     0,     0,     0,     0,     0,     0,   507,   508,     0,
     509,   510,   511,     0,   142,   512,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   151,     0,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,     0,     0,   161,     0,     0,     0,
     162,     0,     0,   163,   164,   165,     0,   166,     0,   167,
     168,     0,     0,   169,     0,     0,   170,   171,     0,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,   199,     0,   200,   201,   202,   203,   204,     0,   205,
       0,     0,   206,     0,     0,   207,     0,   208,  1047,   843,
     209,     0,   210,     0,     0,     0,   211,   212,   213,     0,
       0,   214,     0,     0,     0,     0,   215,   216,     0,     0,
       0,     0,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,   225,     0,
       0,   226,   227,   228,     0,     0,     0,   229,     0,   230,
     231,     0,   232,   233,   234,     0,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,     0,     0,   265,   266,   267,     0,   268,
       0,     0,     0,   269,   270,     0,     0,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,   282,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,     0,     0,
       0,   288,     0,     0,   289,   290,   291,     0,     0,   292,
       0,     0,   293,   294,   643,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,   139,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,  1439,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,  1440,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
     643,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,   347,     0,     0,   348,   349,   350,   351,     0,
       0,     0,   352,   353,     0,     0,     0,   354,     0,   355,
     356,   357,     0,   358,   359,   360,   361,     0,   362,   363,
       0,     0,     0,     0,     0,     0,     0,     0,   364,   365,
     366,     0,     0,   367,     0,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,     0,   379,
     380,   381,     0,   382,     0,   383,   384,   385,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,     0,     0,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,     0,   404,   405,   406,     0,
       0,   407,     0,   408,     0,   409,   410,     0,   411,   412,
       0,   413,     0,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,     0,   429,   430,   431,   432,     0,     0,
       0,   433,     0,     0,     0,   434,     0,   435,   436,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,     0,     0,     0,     0,   447,   448,     0,   449,
       0,     0,   450,     0,     0,   451,   452,     0,     0,     0,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,     0,   469,   470,   471,   472,     0,   139,
     473,   474,     0,   475,   476,   477,   478,     0,     0,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,   488,   489,     0,   490,
     491,     0,     0,   492,     0,     0,   493,     0,   494,     0,
     495,   496,   497,     0,     0,     0,     0,     0,     0,   498,
       0,     0,   499,     0,     0,     0,   500,   501,   502,   503,
     504,   505,   506,     0,     0,     0,     0,     0,     0,   507,
     508,     0,   509,   510,   511,     0,   142,   512,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,   151,     0,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,     0,     0,   161,  1018,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,     0,     0,   170,   171,
       0,   172,   173,     0,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   203,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,   216,
       0,     0,     0,     0,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,     0,   265,   266,   267,
       0,   268,  1019,  1020,     0,   269,   270,     0,     0,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,   282,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,     0,     0,   289,   290,   291,     0,
       0,   292,     0,     0,   293,   294,     0,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,     0,
       0,   348,   349,   350,   351,     0,     0,     0,   352,   353,
       0,     0,     0,   354,     0,   355,   356,   357,     0,   358,
     359,   360,   361,     0,   362,   363,     0,     0,     0,     0,
       0,     0,     0,     0,   364,   365,   366,     0,     0,   367,
       0,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,     0,   379,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,     0,   404,   405,   406,     0,     0,   407,     0,   408,
       0,   409,   410,     0,   411,   412,     0,   413,     0,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,     0,
     429,   430,   431,   432,     0,     0,     0,   433,     0,     0,
       0,   434,     0,   435,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,   452,     0,     0,     0,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,  1021,   473,   474,     0,   475,
     476,   477,   478,     0,     0,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,   488,   489,     0,   490,   491,     0,     0,   492,
       0,     0,   493,     0,   494,     0,   495,   496,   497,     0,
       0,     0,     0,     0,     0,   498,     0,     0,   499,     0,
       0,     0,   500,   501,   502,   503,   504,   505,   506,     0,
       0,     0,     0,     0,     0,   507,   508,     0,   509,   510,
     511,     0,   142,   512,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,     0,     0,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,   167,   168,     0,
       0,   169,     0,     0,   170,   171,     0,   172,   173,     0,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,   203,   204,     0,   205,     0,     0,
     206,     0,     0,   207,     0,   208,     0,     0,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,   216,     0,     0,     0,     0,
     217,     0,   218,     0,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,   225,     0,     0,   226,
     227,   228,     0,     0,     0,   229,     0,   230,   231,     0,
     232,   233,   234,     0,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,     0,     0,   265,   266,   267,     0,   268,     0,     0,
       0,   269,   270,     0,     0,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,     0,   279,     0,   280,
       0,     0,     0,     0,   281,   282,     0,     0,     0,   283,
       0,   284,   285,     0,   286,   287,     0,     0,     0,   288,
       0,     0,   289,   290,   291,     0,     0,   292,     0,     0,
     293,   294,     0,     0,     0,     0,     0,   295,   296,     0,
     297,     0,   298,     0,   299,   300,     0,     0,  1999,     0,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,     0,     0,   348,   349,   350,
     351,     0,     0,     0,   352,   353,     0,     0,  2000,   354,
       0,   355,   356,   357,     0,   358,   359,   360,   361,     0,
     362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     364,   365,   366,     0,   753,   367,     0,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
       0,   379,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,     0,   404,   405,
     406,     0,     0,   407,     0,   408,     0,   409,   410,     0,
     411,   412,     0,   413,     0,   414,     0,     0,   415,   416,
     417,   418,  2001,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,     0,   429,   430,   431,   432,
       0,     0,     0,   433,     0,     0,     0,   434,     0,   435,
     436,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,   452,     0,
       0,     0,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,     0,
       0,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,   483,   484,   485,  2002,   486,   487,     0,   488,   489,
       0,   490,   491,     0,     0,   492,     0,     0,   493,     0,
     494,     0,   495,   496,   497,     0,     0,     0,     0,     0,
       0,   498,     0,     0,   499,     0,     0,     0,   500,   501,
     502,   503,   504,   505,   506,     0,     0,     0,     0,     0,
       0,   507,   508,     0,   509,   510,   511,     0,   142,   512,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,   167,   168,     0,     0,   169,     0,     0,
     170,   171,     0,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
     203,   204,     0,   205,     0,     0,   206,     0,     0,   207,
       0,   208,     0,     0,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,   216,     0,     0,     0,     0,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,   225,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,   230,   231,     0,   232,   233,   234,     0,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,     0,   244,   245,   246,   247,     0,     0,   248,
     249,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,     0,     0,   265,
     266,   267,     0,   268,     0,     0,     0,   269,   270,     0,
       0,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,     0,
     281,   282,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,     0,     0,     0,   288,     0,     0,   289,   290,
     291,     0,     0,   292,     0,     0,   293,   294,     0,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,  1999,     0,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
     347,     0,     0,   348,   349,   350,   351,     0,     0,     0,
     352,   353,     0,     0,  2000,   354,     0,   355,   356,   357,
       0,   358,   359,   360,   361,     0,   362,   363,     0,     0,
       0,     0,     0,     0,     0,     0,   364,   365,   366,     0,
     753,   367,     0,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,     0,     0,   379,   380,   381,
       0,   382,     0,   383,   384,   385,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,     0,     0,   392,   393,
     394,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,   403,     0,   404,   405,   406,     0,     0,   407,
       0,   408,     0,   409,   410,     0,   411,   412,     0,   413,
       0,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,     0,   429,   430,   431,   432,     0,     0,     0,   433,
       0,     0,     0,   434,     0,   435,   436,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
       0,     0,     0,     0,   447,   448,     0,   449,     0,     0,
     450,     0,     0,   451,   452,     0,     0,     0,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,     0,   469,   470,   471,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,     0,     0,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,   483,   484,   485,
    2002,   486,   487,     0,   488,   489,     0,   490,   491,     0,
       0,   492,     0,     0,   493,     0,   494,     0,   495,   496,
     497,     0,     0,     0,     0,     0,     0,   498,     0,     0,
     499,     0,     0,     0,   500,   501,   502,   503,   504,   505,
     506,     0,     0,     0,     0,     0,     0,   507,   508,     0,
     509,   510,   511,     0,   142,   512,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   151,     0,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,     0,  1425,   161,     0,     0,     0,
     162,     0,     0,   163,   164,   165,     0,   166,     0,   167,
     168,     0,     0,   169,     0,     0,   170,   171,     0,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,   199,     0,   200,   201,   202,   203,   204,     0,   205,
       0,     0,   206,     0,     0,   207,     0,   208,     0,     0,
     209,     0,   210,     0,     0,     0,   211,   212,   213,     0,
       0,   214,     0,     0,     0,     0,   215,   216,     0,     0,
       0,  1426,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,   225,     0,
       0,   226,   227,   228,     0,     0,     0,   229,     0,   230,
     231,     0,   232,   233,   234,     0,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,     0,     0,   265,   266,   267,     0,   268,
       0,     0,     0,   269,   270,     0,     0,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,   282,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,     0,     0,
       0,   288,     0,     0,   289,   290,   291,     0,     0,   292,
       0,     0,   293,   294,   643,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,   139,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,  1999,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,   347,     0,     0,   348,   349,   350,   351,     0,
       0,     0,   352,   353,     0,     0,  2000,   354,     0,   355,
     356,   357,     0,   358,   359,   360,   361,     0,   362,   363,
       0,     0,     0,     0,     0,     0,     0,     0,   364,   365,
     366,     0,   753,   367,     0,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,     0,   379,
     380,   381,     0,   382,     0,   383,   384,   385,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,     0,     0,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,     0,   404,   405,   406,     0,
       0,   407,     0,   408,     0,   409,   410,     0,   411,   412,
       0,   413,     0,   414,     0,     0,   415,   416,   417,   418,
    4014,   420,   421,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,     0,   429,   430,   431,   432,     0,     0,
       0,   433,     0,     0,     0,   434,     0,   435,   436,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,     0,     0,     0,     0,   447,   448,     0,   449,
       0,     0,   450,     0,     0,   451,   452,     0,     0,     0,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,     0,   469,   470,   471,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,     0,     0,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   483,
     484,   485,  2002,   486,   487,     0,   488,   489,     0,   490,
     491,     0,     0,   492,     0,     0,   493,     0,   494,     0,
     495,   496,   497,     0,     0,     0,     0,     0,     0,   498,
       0,     0,   499,     0,     0,     0,   500,   501,   502,   503,
     504,   505,   506,     0,     0,     0,     0,     0,     0,   507,
     508,     0,   509,   510,   511,     0,   142,   512,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,   151,     0,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,     0,     0,   170,   171,
       0,   172,   173,     0,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   203,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,   843,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,   216,
       0,     0,     0,     0,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,     0,   265,   266,   267,
       0,   268,     0,     0,     0,   269,   270,     0,     0,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,   282,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,     0,     0,   289,   290,   291,     0,
       0,   292,     0,     0,   293,   294,   643,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,     0,
       0,   348,   349,   350,   351,     0,     0,     0,   352,   353,
       0,     0,     0,   354,     0,   355,   356,   357,     0,   358,
     359,   360,   361,     0,   362,   363,     0,     0,     0,     0,
       0,     0,     0,     0,   364,   365,   366,     0,     0,   367,
       0,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,     0,   379,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,     0,   404,   405,   406,     0,     0,   407,     0,   408,
       0,   409,   410,     0,   411,   412,     0,   413,     0,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,     0,
     429,   430,   431,   432,     0,     0,     0,   433,     0,     0,
       0,   434,     0,   435,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,   452,     0,     0,     0,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,   139,   473,   474,     0,   475,
     476,   477,   478,     0,     0,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,   488,   489,     0,   490,   491,     0,     0,   492,
       0,     0,   493,     0,   494,     0,   495,   496,   497,     0,
       0,     0,     0,     0,     0,   498,     0,     0,   499,     0,
       0,     0,   500,   501,   502,   503,   504,   505,   506,     0,
       0,     0,     0,     0,     0,   507,   508,     0,   509,   510,
     511,     0,   142,   512,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,     0,     0,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,   167,   168,     0,
       0,   169,     0,     0,   170,   171,     0,   172,   173,     0,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,   203,   204,     0,   205,     0,     0,
     206,     0,     0,   207,     0,   208,  1047,     0,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,   216,     0,     0,     0,     0,
     217,     0,   218,     0,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,   225,     0,     0,   226,
     227,   228,     0,     0,     0,   229,     0,   230,   231,     0,
     232,   233,   234,     0,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,     0,     0,   265,   266,   267,     0,   268,     0,     0,
       0,   269,   270,     0,     0,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,     0,   279,     0,   280,
       0,     0,     0,     0,   281,   282,     0,     0,     0,   283,
       0,   284,   285,     0,   286,   287,     0,     0,     0,   288,
       0,     0,   289,   290,   291,     0,     0,   292,     0,     0,
     293,   294,   643,     0,     0,     0,     0,   295,   296,     0,
     297,     0,   298,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,     0,     0,   348,   349,   350,
     351,     0,     0,     0,   352,   353,     0,     0,     0,   354,
       0,   355,   356,   357,     0,   358,   359,   360,   361,     0,
     362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     364,   365,   366,     0,     0,   367,     0,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
       0,   379,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,     0,   404,   405,
     406,     0,     0,   407,     0,   408,     0,   409,   410,     0,
     411,   412,     0,   413,     0,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,     0,   429,   430,   431,   432,
       0,     0,     0,   433,     0,     0,     0,   434,     0,   435,
     436,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,   452,     0,
       0,     0,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,   139,   473,   474,     0,   475,   476,   477,   478,     0,
       0,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,   488,   489,
       0,   490,   491,     0,     0,   492,     0,     0,   493,     0,
     494,     0,   495,   496,   497,     0,     0,     0,     0,     0,
       0,   498,     0,     0,   499,     0,     0,     0,   500,   501,
     502,   503,   504,   505,   506,     0,     0,     0,     0,     0,
       0,   507,   508,     0,   509,   510,   511,     0,   142,   512,
     143,   144,   145,   146,   147,   148,  1462,     0,   149,     0,
       0,     0,   150,     0,     0,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,   167,   168,     0,     0,   169,     0,     0,
     170,   171,     0,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
     203,   204,     0,   205,     0,     0,   206,     0,     0,   207,
       0,   208,     0,     0,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,   216,     0,     0,     0,     0,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,   225,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,   230,   231,     0,   232,   233,   234,     0,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,     0,   244,   245,   246,   247,     0,     0,   248,
     249,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,     0,     0,   265,
     266,   267,     0,   268,     0,     0,     0,   269,   270,     0,
       0,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,     0,
     281,   282,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,     0,     0,     0,   288,     0,     0,   289,   290,
     291,     0,     0,   292,     0,     0,   293,   294,   643,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
     347,     0,     0,   348,   349,   350,   351,     0,     0,     0,
     352,   353,     0,     0,     0,   354,     0,   355,   356,   357,
       0,   358,   359,   360,   361,     0,   362,   363,     0,     0,
       0,     0,     0,     0,     0,     0,   364,   365,   366,     0,
       0,   367,     0,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,     0,     0,   379,   380,   381,
       0,   382,     0,   383,   384,   385,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,     0,     0,   392,   393,
     394,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,   403,     0,   404,   405,   406,     0,     0,   407,
       0,   408,     0,   409,   410,     0,   411,   412,     0,   413,
       0,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,     0,   429,   430,   431,   432,     0,     0,     0,   433,
       0,     0,     0,   434,     0,   435,   436,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
       0,     0,     0,     0,   447,   448,     0,   449,     0,     0,
     450,     0,     0,   451,   452,     0,     0,     0,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,     0,   469,   470,   471,   472,     0,   139,   473,   474,
       0,   475,   476,   477,   478,     0,     0,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,   488,   489,     0,   490,   491,     0,
       0,   492,     0,     0,   493,     0,   494,     0,   495,   496,
     497,     0,     0,     0,     0,     0,     0,   498,     0,     0,
     499,     0,     0,     0,   500,   501,   502,   503,   504,   505,
     506,     0,     0,     0,     0,     0,     0,   507,   508,     0,
     509,   510,   511,     0,   142,   512,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   151,     0,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,     0,     0,   161,     0,     0,     0,
     162,     0,     0,   163,   164,   165,     0,   166,     0,   167,
     168,     0,     0,   169,     0,     0,   170,   171,     0,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,   199,     0,   200,   201,   202,   203,   204,     0,   205,
       0,     0,   206,     0,     0,   207,     0,   208,     0,     0,
     209,     0,   210,     0,     0,     0,   211,   212,   213,     0,
       0,   214,     0,     0,     0,     0,   215,   216,     0,     0,
       0,  2463,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,   225,     0,
       0,   226,   227,   228,     0,     0,     0,   229,     0,   230,
     231,     0,   232,   233,   234,     0,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,     0,     0,   265,   266,   267,     0,   268,
       0,     0,     0,   269,   270,     0,     0,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,   282,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,     0,     0,
       0,   288,     0,     0,   289,   290,   291,     0,     0,   292,
       0,     0,   293,   294,   643,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,   139,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,  1425,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
     643,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,   347,     0,     0,   348,   349,   350,   351,     0,
       0,     0,   352,   353,     0,     0,     0,   354,     0,   355,
     356,   357,     0,   358,   359,   360,   361,     0,   362,   363,
       0,     0,     0,     0,     0,     0,     0,     0,   364,   365,
     366,     0,     0,   367,     0,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,     0,   379,
     380,   381,     0,   382,     0,   383,   384,   385,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,     0,     0,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,     0,   404,   405,   406,     0,
       0,   407,     0,   408,     0,   409,   410,     0,   411,   412,
       0,   413,     0,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,     0,   429,   430,   431,   432,     0,     0,
       0,   433,     0,     0,     0,   434,     0,   435,   436,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,     0,     0,     0,     0,   447,   448,     0,   449,
       0,     0,   450,     0,     0,   451,   452,     0,     0,     0,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,     0,   469,   470,   471,   472,     0,   139,
     473,   474,     0,   475,   476,   477,   478,     0,     0,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,   488,   489,     0,   490,
     491,     0,     0,   492,     0,     0,   493,     0,   494,     0,
     495,   496,   497,     0,     0,     0,     0,     0,     0,   498,
       0,     0,   499,     0,     0,     0,   500,   501,   502,   503,
     504,   505,   506,     0,     0,     0,     0,     0,     0,   507,
     508,     0,   509,   510,   511,     0,   142,   512,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,   151,     0,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,     0,     0,   170,   171,
       0,   172,   173,     0,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   203,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,   216,
       0,     0,     0,     0,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,     0,   265,   266,   267,
       0,   268,     0,     0,     0,   269,   270,     0,     0,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,   282,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,     0,     0,   289,   290,   291,     0,
       0,   292,     0,     0,   293,   294,   643,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,     0,
       0,   348,   349,   350,   351,     0,     0,     0,   352,   353,
       0,     0,     0,   354,     0,   355,   356,   357,     0,   358,
     359,   360,   361,     0,   362,   363,     0,     0,     0,     0,
       0,     0,     0,     0,   364,   365,   366,     0,     0,   367,
       0,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,     0,   379,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,     0,   404,   405,   406,     0,     0,   407,     0,   408,
       0,   409,   410,     0,   411,   412,     0,   413,     0,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,     0,
     429,   430,   431,   432,     0,     0,     0,   433,     0,     0,
       0,   434,     0,   435,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,   452,     0,     0,     0,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,   139,   473,   474,     0,   475,
     476,   477,   478,     0,     0,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,   488,   489,     0,   490,   491,     0,     0,   492,
       0,     0,   493,     0,   494,     0,   495,   496,   497,     0,
       0,     0,     0,     0,     0,   498,     0,     0,   499,     0,
       0,     0,   500,   501,   502,   503,   504,   505,   506,     0,
       0,     0,     0,     0,     0,   507,   508,     0,   509,   510,
     511,     0,   142,   512,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,  2897,     0,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,     0,     0,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,   167,   168,     0,
       0,   169,     0,     0,   170,   171,     0,   172,   173,     0,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,   203,   204,     0,   205,     0,     0,
     206,     0,     0,   207,     0,   208,     0,     0,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,   216,     0,     0,     0,     0,
     217,     0,   218,     0,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,   225,     0,     0,   226,
     227,   228,     0,     0,     0,   229,     0,   230,   231,     0,
     232,   233,   234,     0,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,     0,     0,   265,   266,   267,     0,   268,     0,     0,
       0,   269,   270,     0,     0,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,     0,   279,     0,   280,
       0,     0,     0,     0,   281,   282,     0,     0,     0,   283,
       0,   284,   285,     0,   286,   287,     0,     0,     0,   288,
       0,     0,   289,   290,   291,     0,     0,   292,     0,     0,
     293,   294,     0,     0,     0,     0,     0,   295,   296,     0,
     297,     0,   298,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,     0,     0,   348,   349,   350,
     351,     0,     0,     0,   352,   353,     0,     0,     0,   354,
       0,   355,   356,   357,     0,   358,   359,   360,   361,     0,
     362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     364,   365,   366,     0,     0,   367,     0,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
       0,   379,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,     0,   404,   405,
     406,     0,     0,   407,     0,   408,     0,   409,   410,     0,
     411,   412,     0,   413,     0,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,     0,   429,   430,   431,   432,
       0,     0,     0,   433,     0,     0,     0,   434,     0,   435,
     436,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,   452,     0,
       0,     0,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,   139,   473,   474,     0,   475,   476,   477,   478,     0,
       0,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,   488,   489,
       0,   490,   491,     0,     0,   492,     0,     0,   493,     0,
     494,     0,   495,   496,   497,     0,     0,     0,     0,     0,
       0,   498,     0,     0,   499,     0,     0,     0,   500,   501,
     502,   503,   504,   505,   506,     0,     0,     0,     0,     0,
       0,   507,   508,     0,   509,   510,   511,     0,   142,   512,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,   167,   168,     0,     0,   169,     0,     0,
     170,   171,     0,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
     203,   204,  4666,   205,     0,     0,   206,     0,     0,   207,
       0,   208,     0,     0,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,   216,     0,     0,     0,     0,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,   225,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,   230,   231,     0,   232,   233,   234,     0,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,  4667,   244,   245,   246,   247,     0,     0,   248,
     249,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,     0,     0,   265,
     266,   267,     0,   268,     0,     0,     0,   269,   270,     0,
       0,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,     0,
     281,   282,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,     0,     0,     0,   288,     0,     0,   289,   290,
     291,     0,     0,   292,     0,     0,   293,   294,     0,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
     347,     0,     0,   348,   349,   350,   351,     0,     0,     0,
     352,   353,     0,     0,     0,   354,     0,   355,   356,   357,
       0,   358,   359,   360,   361,     0,   362,   363,     0,     0,
       0,     0,     0,     0,     0,     0,   364,   365,   366,     0,
       0,   367,     0,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,     0,     0,   379,   380,   381,
       0,   382,     0,   383,   384,   385,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,     0,     0,   392,   393,
     394,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,   403,     0,   404,   405,   406,     0,     0,   407,
       0,   408,     0,   409,   410,     0,   411,   412,     0,   413,
       0,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,     0,   429,   430,   431,   432,     0,     0,     0,   433,
       0,     0,     0,   434,     0,   435,   436,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
       0,     0,     0,     0,   447,   448,     0,   449,     0,     0,
     450,     0,     0,   451,   452,     0,     0,     0,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,     0,   469,   470,   471,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,     0,     0,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,   488,   489,     0,   490,   491,     0,
       0,   492,     0,     0,   493,     0,   494,     0,   495,   496,
     497,     0,     0,     0,     0,     0,     0,   498,     0,     0,
     499,     0,     0,     0,   500,   501,   502,   503,   504,   505,
     506,     0,     0,     0,     0,     0,     0,   507,   508,     0,
     509,   510,   511,     0,   142,   512,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   151,     0,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,     0,     0,   161,     0,     0,     0,
     162,     0,     0,   163,   164,   165,     0,   166,     0,   167,
     168,     0,     0,   169,     0,     0,   170,   171,     0,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,   199,     0,   200,   201,   202,   203,   204,     0,   205,
       0,     0,   206,     0,     0,   207,     0,   208,     0,     0,
     209,     0,   210,     0,     0,     0,   211,   212,   213,     0,
       0,   214,     0,     0,     0,     0,   215,   216,     0,     0,
       0,     0,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,   225,     0,
       0,   226,   227,   228,     0,     0,     0,   229,     0,   230,
     231,     0,   232,   233,   234,     0,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,     0,     0,   265,   266,   267,     0,   268,
       0,     0,     0,   269,   270,     0,     0,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,   282,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,     0,     0,
       0,   288,     0,     0,   289,   290,   291,     0,     0,   292,
       0,     0,   293,   294,     0,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,   585,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,  1113,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,   347,     0,     0,   348,   349,   350,   351,     0,
       0,     0,   352,   353,     0,     0,     0,   354,     0,   355,
     356,   357,     0,   358,   359,   360,   361,     0,   362,   363,
       0,     0,     0,     0,     0,     0,     0,     0,   364,   365,
     366,     0,     0,   367,     0,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,     0,   379,
     380,   381,     0,   382,     0,   383,   384,   385,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,     0,     0,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,     0,   404,   405,   406,     0,
       0,   407,     0,   408,     0,   409,   410,     0,   411,   412,
       0,   413,     0,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,     0,   429,   430,   431,   432,     0,     0,
       0,   433,     0,     0,     0,   434,     0,   435,   436,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,     0,     0,     0,     0,   447,   448,     0,   449,
       0,     0,   450,     0,     0,   451,   452,     0,     0,     0,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,     0,   469,   470,   471,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,     0,     0,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,   488,   489,     0,   490,
     491,     0,     0,   492,     0,     0,   493,     0,   494,     0,
     495,   496,   497,     0,     0,     0,     0,     0,     0,   498,
       0,     0,   499,     0,     0,     0,   500,   501,   502,   503,
     504,   505,   506,     0,     0,     0,     0,     0,     0,   507,
     508,     0,   509,   510,   511,     0,   142,   512,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,   151,     0,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,     0,     0,   170,   171,
       0,   172,   173,     0,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   203,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,   216,
       0,     0,     0,   943,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,     0,   265,   266,   267,
       0,   268,     0,     0,     0,   269,   270,     0,     0,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,   282,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,     0,     0,   289,   290,   291,     0,
       0,   292,     0,     0,   293,   294,     0,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,     0,
       0,   348,   349,   350,   351,     0,     0,     0,   352,   353,
       0,     0,     0,   354,     0,   355,   356,   357,     0,   358,
     359,   360,   361,     0,   362,   363,     0,     0,     0,     0,
       0,     0,     0,     0,   364,   365,   366,     0,     0,   367,
       0,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,     0,   379,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,     0,   404,   405,   406,     0,     0,   407,     0,   408,
       0,   409,   410,     0,   411,   412,     0,   413,     0,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,     0,
     429,   430,   431,   432,     0,     0,     0,   433,     0,     0,
       0,   434,     0,   435,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,   452,     0,     0,     0,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,     0,     0,     0,     0,     0,  1969,   480,
     481,     0,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,   488,   489,     0,   490,   491,     0,     0,   492,
       0,     0,   493,     0,   494,     0,   495,   496,   497,     0,
       0,     0,     0,     0,     0,   498,     0,     0,   499,     0,
       0,     0,   500,   501,   502,   503,   504,   505,   506,     0,
       0,     0,     0,     0,     0,   507,   508,     0,   509,   510,
     511,     0,   142,   512,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,     0,     0,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,   167,   168,     0,
       0,   169,     0,     0,   170,   171,     0,   172,   173,     0,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,   203,   204,     0,   205,     0,     0,
     206,     0,     0,   207,     0,   208,     0,     0,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,   216,     0,     0,     0,  2125,
     217,     0,   218,     0,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,   225,     0,     0,   226,
     227,   228,     0,     0,     0,   229,     0,   230,   231,     0,
     232,   233,   234,     0,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,     0,     0,   265,   266,   267,     0,   268,     0,     0,
       0,   269,   270,     0,     0,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,     0,   279,     0,   280,
       0,     0,     0,     0,   281,   282,     0,     0,     0,   283,
       0,   284,   285,     0,   286,   287,     0,     0,     0,   288,
       0,     0,   289,   290,   291,     0,     0,   292,     0,     0,
     293,   294,     0,     0,     0,     0,     0,   295,   296,     0,
     297,     0,   298,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,     0,     0,   348,   349,   350,
     351,     0,     0,     0,   352,   353,     0,     0,     0,   354,
       0,   355,   356,   357,     0,   358,   359,   360,   361,     0,
     362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     364,   365,   366,     0,     0,   367,     0,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
       0,   379,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,     0,   404,   405,
     406,     0,     0,   407,     0,   408,     0,   409,   410,     0,
     411,   412,     0,   413,     0,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,     0,   429,   430,   431,   432,
       0,     0,     0,   433,     0,     0,     0,   434,     0,   435,
     436,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,   452,     0,
       0,     0,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,     0,
       0,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,   488,   489,
       0,   490,   491,     0,     0,   492,     0,     0,   493,     0,
     494,     0,   495,   496,   497,     0,     0,     0,     0,     0,
       0,   498,     0,     0,   499,     0,     0,     0,   500,   501,
     502,   503,   504,   505,   506,     0,     0,     0,     0,     0,
       0,   507,   508,     0,   509,   510,   511,     0,   142,   512,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,   167,   168,     0,     0,   169,     0,     0,
     170,   171,     0,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
     203,   204,     0,   205,     0,     0,   206,     0,     0,   207,
       0,   208,     0,     0,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,   216,     0,     0,     0,   943,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,   225,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,   230,   231,     0,   232,   233,   234,     0,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,     0,   244,   245,   246,   247,     0,     0,   248,
     249,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,     0,     0,   265,
     266,   267,     0,   268,     0,     0,     0,   269,   270,     0,
       0,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,     0,
     281,   282,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,     0,     0,     0,   288,     0,     0,   289,   290,
     291,     0,     0,   292,     0,     0,   293,   294,     0,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
     347,     0,     0,   348,   349,   350,   351,     0,     0,     0,
     352,   353,     0,     0,     0,   354,     0,   355,   356,   357,
       0,   358,   359,   360,   361,     0,   362,   363,     0,     0,
       0,     0,     0,     0,     0,     0,   364,   365,   366,     0,
       0,   367,     0,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,     0,     0,   379,   380,   381,
       0,   382,     0,   383,   384,   385,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,     0,     0,   392,   393,
     394,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,   403,     0,   404,   405,   406,     0,     0,   407,
       0,   408,     0,   409,   410,     0,   411,   412,     0,   413,
       0,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,     0,   429,   430,   431,   432,     0,     0,     0,   433,
       0,     0,     0,   434,     0,   435,   436,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
       0,     0,     0,     0,   447,   448,     0,   449,     0,     0,
     450,     0,     0,   451,   452,     0,     0,     0,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,     0,   469,   470,   471,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,     0,     0,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,   488,   489,     0,   490,   491,     0,
       0,   492,     0,     0,   493,     0,   494,     0,   495,   496,
     497,     0,     0,     0,     0,     0,     0,   498,     0,     0,
     499,     0,     0,     0,   500,   501,   502,   503,   504,   505,
     506,     0,     0,     0,     0,     0,     0,   507,   508,     0,
     509,   510,   511,     0,   142,   512,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   151,     0,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,     0,     0,   161,     0,     0,     0,
     162,     0,     0,   163,   164,   165,     0,   166,     0,   167,
     168,     0,     0,   169,     0,     0,   170,   171,     0,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,   199,     0,   200,   201,   202,   203,   204,     0,   205,
       0,     0,   206,     0,     0,   207,     0,   208,     0,     0,
     209,     0,   210,     0,     0,     0,   211,   212,   213,     0,
       0,   214,     0,     0,     0,     0,   215,   216,     0,     0,
       0,     0,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,   225,     0,
       0,   226,   227,   228,     0,     0,     0,   229,     0,   230,
     231,     0,   232,   233,   234,     0,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,     0,     0,   265,   266,   267,     0,   268,
       0,     0,     0,   269,   270,     0,     0,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,   282,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,     0,     0,
       0,   288,     0,     0,   289,   290,   291,     0,     0,   292,
       0,     0,   293,   294,     0,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,  3098,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,   347,     0,     0,   348,   349,   350,   351,     0,
       0,     0,   352,   353,     0,     0,     0,   354,     0,   355,
     356,   357,     0,   358,   359,   360,   361,     0,   362,   363,
       0,     0,     0,     0,     0,     0,     0,     0,   364,   365,
     366,     0,     0,   367,     0,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,     0,   379,
     380,   381,     0,   382,     0,   383,   384,   385,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,     0,     0,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,     0,   404,   405,   406,     0,
       0,   407,     0,   408,     0,   409,   410,     0,   411,   412,
       0,   413,     0,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,     0,   429,   430,   431,   432,     0,     0,
       0,   433,     0,     0,     0,   434,     0,   435,   436,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,     0,     0,     0,     0,   447,   448,     0,   449,
       0,     0,   450,     0,     0,   451,   452,     0,     0,     0,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,     0,   469,   470,   471,   472,     0,   139,
     473,   474,     0,   475,   476,   477,   478,     0,     0,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,   488,   489,     0,   490,
     491,     0,     0,   492,     0,     0,   493,     0,   494,     0,
     495,   496,   497,     0,     0,     0,     0,     0,     0,   498,
       0,     0,   499,     0,     0,     0,   500,   501,   502,   503,
     504,   505,   506,     0,     0,     0,     0,     0,     0,   507,
     508,     0,   509,   510,   511,     0,   142,   512,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,   151,     0,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,     0,     0,   170,   171,
       0,   172,   173,     0,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   203,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,   216,
       0,     0,     0,  3403,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,     0,   265,   266,   267,
       0,   268,     0,     0,     0,   269,   270,     0,     0,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,   282,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,     0,     0,   289,   290,   291,     0,
       0,   292,     0,     0,   293,   294,     0,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,     0,
       0,   348,   349,   350,   351,     0,     0,     0,   352,   353,
       0,     0,     0,   354,     0,   355,   356,   357,     0,   358,
     359,   360,   361,     0,   362,   363,     0,     0,     0,     0,
       0,     0,     0,     0,   364,   365,   366,     0,     0,   367,
       0,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,     0,   379,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,     0,   404,   405,   406,     0,     0,   407,     0,   408,
       0,   409,   410,     0,   411,   412,     0,   413,     0,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,     0,
     429,   430,   431,   432,     0,     0,     0,   433,     0,     0,
       0,   434,     0,   435,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,   452,     0,     0,     0,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,     0,     0,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,   488,   489,     0,   490,   491,     0,     0,   492,
       0,     0,   493,     0,   494,     0,   495,   496,   497,     0,
       0,     0,     0,     0,     0,   498,     0,     0,   499,     0,
       0,     0,   500,   501,   502,   503,   504,   505,   506,     0,
       0,     0,     0,     0,     0,   507,   508,     0,   509,   510,
     511,     0,   142,   512,   143,   144,   145,   146,   147,   148,
    3411,     0,   149,     0,     0,     0,   150,     0,     0,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,     0,     0,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,   167,   168,     0,
       0,   169,     0,     0,   170,   171,     0,   172,   173,     0,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,   203,   204,     0,   205,     0,     0,
     206,     0,     0,   207,     0,   208,     0,     0,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,   216,     0,     0,     0,     0,
     217,     0,   218,     0,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,   225,     0,     0,   226,
     227,   228,     0,     0,     0,   229,     0,   230,   231,     0,
     232,   233,   234,     0,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,     0,     0,   265,   266,   267,     0,   268,     0,     0,
       0,   269,   270,     0,     0,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,     0,   279,     0,   280,
       0,     0,     0,     0,   281,   282,     0,     0,     0,   283,
       0,   284,   285,     0,   286,   287,     0,     0,     0,   288,
       0,     0,   289,   290,   291,     0,     0,   292,     0,     0,
     293,   294,     0,     0,     0,     0,     0,   295,   296,     0,
     297,     0,   298,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,     0,     0,   348,   349,   350,
     351,     0,     0,     0,   352,   353,     0,     0,     0,   354,
       0,   355,   356,   357,     0,   358,   359,   360,   361,     0,
     362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     364,   365,   366,     0,     0,   367,     0,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
       0,   379,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,     0,   404,   405,
     406,     0,     0,   407,     0,   408,     0,   409,   410,     0,
     411,   412,     0,   413,     0,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,     0,   429,   430,   431,   432,
       0,     0,     0,   433,     0,     0,     0,   434,     0,   435,
     436,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,   452,     0,
       0,     0,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,     0,
       0,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,   488,   489,
       0,   490,   491,     0,     0,   492,     0,     0,   493,     0,
     494,     0,   495,   496,   497,     0,     0,     0,     0,     0,
       0,   498,     0,     0,   499,     0,     0,     0,   500,   501,
     502,   503,   504,   505,   506,     0,     0,     0,     0,     0,
       0,   507,   508,     0,   509,   510,   511,     0,   142,   512,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,   167,   168,     0,     0,   169,     0,     0,
     170,   171,     0,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
     203,   204,     0,   205,     0,     0,   206,     0,     0,   207,
       0,   208,     0,     0,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,   216,     0,     0,     0,  3435,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,   225,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,   230,   231,     0,   232,   233,   234,     0,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,     0,   244,   245,   246,   247,     0,     0,   248,
     249,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,     0,     0,   265,
     266,   267,     0,   268,     0,     0,     0,   269,   270,     0,
       0,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,     0,
     281,   282,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,     0,     0,     0,   288,     0,     0,   289,   290,
     291,     0,     0,   292,     0,     0,   293,   294,     0,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
     347,     0,     0,   348,   349,   350,   351,     0,     0,     0,
     352,   353,     0,     0,     0,   354,     0,   355,   356,   357,
       0,   358,   359,   360,   361,     0,   362,   363,     0,     0,
       0,     0,     0,     0,     0,     0,   364,   365,   366,     0,
       0,   367,     0,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,     0,     0,   379,   380,   381,
       0,   382,     0,   383,   384,   385,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,     0,     0,   392,   393,
     394,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,   403,     0,   404,   405,   406,     0,     0,   407,
       0,   408,     0,   409,   410,     0,   411,   412,     0,   413,
       0,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,     0,   429,   430,   431,   432,     0,     0,     0,   433,
       0,     0,     0,   434,     0,   435,   436,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
       0,     0,     0,     0,   447,   448,     0,   449,     0,     0,
     450,     0,     0,   451,   452,     0,     0,     0,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,     0,   469,   470,   471,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,     0,     0,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,   488,   489,     0,   490,   491,     0,
       0,   492,     0,     0,   493,     0,   494,     0,   495,   496,
     497,     0,     0,     0,     0,     0,     0,   498,     0,     0,
     499,     0,     0,     0,   500,   501,   502,   503,   504,   505,
     506,     0,     0,     0,     0,     0,     0,   507,   508,     0,
     509,   510,   511,     0,   142,   512,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   151,     0,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,     0,     0,   161,     0,     0,     0,
     162,     0,     0,   163,   164,   165,     0,   166,     0,   167,
     168,     0,     0,   169,     0,     0,   170,   171,     0,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,   199,     0,   200,   201,   202,   203,   204,     0,   205,
       0,     0,   206,     0,     0,   207,     0,   208,     0,     0,
     209,     0,   210,     0,     0,     0,   211,   212,   213,     0,
       0,   214,     0,     0,     0,     0,   215,   216,     0,     0,
       0,     0,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,   225,     0,
       0,   226,   227,   228,     0,     0,     0,   229,     0,   230,
     231,     0,   232,   233,   234,     0,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,     0,     0,   265,   266,   267,     0,   268,
       0,     0,     0,   269,   270,     0,     0,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,   282,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,     0,     0,
       0,   288,     0,     0,   289,   290,   291,     0,     0,   292,
       0,     0,   293,   294,     0,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,  4325,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,   347,     0,     0,   348,   349,   350,   351,     0,
       0,     0,   352,   353,     0,     0,     0,   354,     0,   355,
     356,   357,     0,   358,   359,   360,   361,     0,   362,   363,
       0,     0,     0,     0,     0,     0,     0,     0,   364,   365,
     366,     0,     0,   367,     0,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,     0,   379,
     380,   381,     0,   382,     0,   383,   384,   385,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,     0,     0,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,     0,   404,   405,   406,     0,
       0,   407,     0,   408,     0,   409,   410,     0,   411,   412,
       0,   413,     0,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,     0,   429,   430,   431,   432,     0,     0,
       0,   433,     0,     0,     0,   434,     0,   435,   436,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,     0,     0,     0,     0,   447,   448,     0,   449,
       0,     0,   450,     0,     0,   451,   452,     0,     0,     0,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,     0,   469,   470,   471,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,     0,     0,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,   488,   489,     0,   490,
     491,     0,     0,   492,     0,     0,   493,     0,   494,     0,
     495,   496,   497,     0,     0,     0,     0,     0,     0,   498,
       0,     0,   499,     0,     0,     0,   500,   501,   502,   503,
     504,   505,   506,     0,     0,     0,     0,     0,     0,   507,
     508,     0,   509,   510,   511,     0,   142,   512,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,   151,     0,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,     0,     0,   170,   171,
       0,   172,   173,     0,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   203,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,   216,
       0,     0,     0,     0,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,     0,
     250,  1885,   252,     0,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,     0,   265,   266,   267,
       0,   268,     0,     0,     0,   269,   270,     0,     0,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,   282,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,     0,     0,   289,   290,   291,     0,
       0,   292,     0,     0,   293,   294,     0,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,     0,
       0,   348,  1886,   350,   351,     0,     0,     0,   352,   353,
       0,     0,     0,   354,     0,   355,   356,   357,     0,   358,
     359,   360,   361,     0,   362,   363,     0,     0,     0,     0,
       0,     0,     0,     0,   364,   365,   366,     0,     0,   367,
       0,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,     0,   379,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,     0,   404,   405,   406,     0,     0,   407,     0,   408,
       0,   409,   410,     0,   411,   412,     0,   413,     0,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,     0,
     429,   430,   431,   432,     0,     0,     0,   433,     0,     0,
       0,   434,     0,   435,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,   452,     0,     0,     0,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,     0,     0,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,   488,   489,     0,   490,   491,     0,     0,   492,
       0,     0,   493,     0,   494,     0,   495,   496,   497,     0,
       0,     0,     0,     0,     0,   498,     0,     0,   499,     0,
       0,     0,   500,   501,   502,   503,   504,   505,   506,     0,
       0,     0,     0,     0,     0,   507,   508,     0,   509,   510,
     511,     0,   142,   512,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,     0,
       0,   152,   153,   154,   155,   156,   157,   158,     0,     0,
    -372,     0,     0,     0,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,     0,     0,     0,
       0,   169,  4152,     0,   170,   171,     0,   172,     0,     0,
       0,     0,     0,   176,   177,   178,   179,  4153,   181,   182,
       0,   183,   184,     0,     0,     0,     0,     0,     0,   190,
       0,   192,     0,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,     0,   204,     0,   205,     0,     0,
     206,     0,     0,   207,     0,   208,     0,     0,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,     0,     0,     0,     0,     0,
     217,     0,   218,     0,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,     0,     0,     0,   226,
     227,   228,     0,  -342,  -342,   229,     0,  -342,   231,     0,
     232,   233,   234,     0,     0,   235,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,  4154,   250,   251,   252,     0,
       0,     0,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   259,   260,   261,     0,   263,     0,   264,
       0,     0,     0,     0,   266,   267,     0,     0,     0,     0,
       0,     0,   270,     0,     0,     0,   271,   272,   273,   274,
     275,  4155,     0,   276,   277,   278,     0,   279,     0,   280,
       0,     0,     0,     0,   281,     0,     0,     0,     0,   283,
       0,   284,   285,     0,   286,   287,  4156,     0,     0,   288,
       0,     0,     0,   290,   291,     0,     0,   292,  4157,     0,
     293,   294,     0,     0,     0,     0,     0,   295,   296,     0,
     297,     0,   298,     0,   299,   300,     0,     0,     0,     0,
    -327,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,     0,     0,   348,   349,   350,
     351,     0,     0,     0,     0,   353,     0,     0,     0,   354,
       0,   355,   356,   357,     0,   358,   359,   360,  4158,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   365,   366,     0,     0,     0,     0,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,     0,     0,
       0,     0,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,     0,     0,   404,     0,
     406,  -327,     0,   407,     0,     0,     0,   409,     0,     0,
     411,   412,     0,   413,  4159,   414,     0,     0,   415,     0,
     417,   418,   419,   420,   421,   422,   423,     0,   425,   426,
       0,   427,     0,     0,     0,     0,   429,   430,   431,     0,
       0,     0,     0,   433,     0,     0,     0,     0,     0,     0,
     436,     0,     0,   439,   440,     0,   441,     0,   443,     0,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,     0,     0,
       0,     0,   453,     0,     0,     0,   455,     0,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,     0,
       0,     0,     0,     0,   479,   480,   481,     0,     0,     0,
       0,   483,   484,   485,     0,   486,   487,     0,   488,   489,
       0,     0,     0,     0,     0,   492,     0,     0,   493,     0,
       0,     0,   495,   496,   497,     0,     0,     0,     0,     0,
       0,   498,     0,     0,   499,     0,     0,     0,   500,   501,
     502,   503,   504,   505,   506,     0,     0,  -327,     0,     0,
       0,   507,     0,     0,   509,     0,   511,     0,   142,   512,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,     0,     0,  -372,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,     0,     0,     0,     0,   169,  4152,     0,
     170,   171,     0,   172,     0,     0,     0,     0,     0,   176,
     177,   178,   179,  4153,   181,   182,     0,   183,   184,     0,
       0,     0,     0,     0,     0,   190,     0,   192,     0,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
       0,   204,     0,   205,     0,     0,   206,     0,     0,   207,
       0,   208,     0,     0,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,     0,     0,     0,     0,     0,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,     0,     0,     0,   226,   227,   228,     0,  -363,
       0,   229,     0,  -363,   231,     0,   232,   233,   234,     0,
       0,   235,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,   244,   245,   246,   247,     0,     0,   248,
     249,  4154,   250,   251,   252,     0,     0,     0,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,     0,   263,     0,   264,     0,     0,     0,     0,
     266,   267,     0,     0,     0,     0,     0,     0,   270,     0,
       0,     0,   271,   272,   273,   274,   275,  4155,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,     0,
     281,     0,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,  4156,     0,     0,   288,     0,     0,     0,   290,
     291,     0,     0,   292,  4157,     0,   293,   294,     0,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,     0,     0,  -327,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
     347,     0,     0,   348,   349,   350,   351,     0,     0,     0,
       0,   353,     0,     0,     0,   354,     0,   355,   356,   357,
       0,   358,   359,   360,  4158,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   365,   366,     0,
       0,     0,     0,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,   377,     0,     0,     0,     0,   380,   381,
       0,   382,     0,   383,   384,   385,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,     0,     0,   392,   393,
     394,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,     0,     0,   404,     0,   406,  -327,     0,   407,
       0,     0,     0,   409,     0,     0,   411,   412,     0,   413,
    4159,   414,     0,     0,   415,     0,   417,   418,   419,   420,
     421,   422,   423,     0,   425,   426,     0,   427,     0,     0,
       0,     0,   429,   430,   431,     0,     0,     0,     0,   433,
       0,     0,     0,     0,     0,     0,   436,     0,     0,   439,
     440,     0,   441,     0,   443,     0,   445,   446,     0,     0,
       0,     0,     0,     0,   447,   448,     0,   449,     0,     0,
     450,     0,     0,   451,     0,     0,     0,     0,   453,     0,
       0,     0,   455,     0,   456,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,     0,   469,   470,   471,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,     0,     0,     0,     0,     0,
     479,   480,   481,     0,     0,     0,     0,   483,   484,   485,
       0,   486,   487,     0,   488,   489,     0,     0,     0,     0,
       0,   492,     0,     0,   493,     0,     0,     0,   495,   496,
     497,     0,     0,     0,     0,     0,     0,   498,     0,     0,
     499,     0,     0,     0,   500,   501,   502,   503,   504,   505,
     506,  -363,     0,  -327,     0,     0,     0,   507,     0,     0,
     509,     0,   511,     0,   142,   512,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,     0,     0,   152,   153,   154,   155,   156,   157,   158,
       0,     0,  -372,     0,     0,     0,   161,     0,     0,     0,
     162,     0,     0,   163,   164,   165,     0,   166,     0,     0,
       0,     0,     0,   169,  4152,     0,   170,   171,     0,   172,
       0,     0,     0,     0,     0,   176,   177,   178,   179,  4153,
     181,   182,     0,   183,   184,     0,     0,     0,     0,     0,
       0,   190,     0,   192,     0,   194,   195,   196,   197,     0,
     198,   199,     0,   200,   201,   202,     0,   204,     0,   205,
       0,     0,   206,     0,     0,   207,     0,   208,     0,     0,
     209,     0,   210,     0,     0,     0,   211,   212,   213,     0,
       0,   214,     0,     0,     0,     0,   215,     0,     0,     0,
       0,     0,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,     0,     0,
       0,   226,   227,   228,     0,  -360,     0,   229,     0,  -360,
     231,     0,   232,   233,   234,     0,     0,   235,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,  4154,   250,   251,
     252,     0,     0,     0,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,     0,   263,
       0,   264,     0,     0,     0,     0,   266,   267,     0,     0,
       0,     0,     0,     0,   270,     0,     0,     0,   271,   272,
     273,   274,   275,  4155,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,     0,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,  4156,     0,
       0,   288,     0,     0,     0,   290,   291,     0,     0,   292,
    4157,     0,   293,   294,     0,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
       0,     0,  -327,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,     0,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
    4158,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   365,   366,     0,     0,     0,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
       0,     0,     0,     0,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,     0,     0,
     404,     0,   406,  -327,     0,   407,     0,     0,     0,   409,
       0,     0,   411,   412,     0,   413,  4159,   414,     0,     0,
     415,     0,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,     0,   427,     0,     0,     0,     0,   429,   430,
     431,     0,     0,     0,     0,   433,     0,     0,     0,     0,
       0,     0,   436,     0,     0,   439,   440,     0,   441,     0,
     443,     0,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
       0,     0,     0,     0,   453,     0,     0,     0,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,     0,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,     0,     0,     0,     0,   492,     0,     0,
     493,     0,     0,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,  -360,     0,  -327,
       0,     0,     0,   507,     0,     0,   509,     0,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,     0,  -372,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,     0,     0,     0,     0,   169,
    4152,     0,   170,   171,     0,   172,     0,     0,     0,     0,
       0,   176,   177,   178,   179,  4153,   181,   182,     0,   183,
     184,     0,     0,     0,     0,     0,     0,   190,     0,   192,
       0,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,     0,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,     0,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,     0,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,  4534,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,  4154,   250,   251,   252,     0,     0,     0,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,     0,   263,     0,   264,     0,     0,
       0,     0,   266,   267,     0,     0,     0,     0,     0,     0,
     270,     0,     0,     0,   271,   272,   273,   274,   275,  4155,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,     0,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,  4156,     0,     0,   288,     0,     0,
       0,   290,   291,     0,     0,   292,  4157,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,  -327,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,   347,     0,     0,   348,   349,   350,   351,     0,
       0,     0,     0,   353,     0,     0,     0,   354,     0,   355,
     356,   357,     0,   358,   359,   360,  4158,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   365,
     366,     0,     0,     0,     0,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,   377,     0,     0,     0,     0,
     380,   381,     0,   382,     0,   383,   384,   385,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,     0,     0,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,     0,     0,   404,     0,   406,  -327,
       0,   407,     0,     0,     0,   409,     0,     0,   411,   412,
       0,   413,  4159,   414,     0,     0,   415,     0,   417,   418,
     419,   420,   421,   422,   423,     0,   425,   426,     0,   427,
       0,     0,     0,     0,   429,   430,   431,     0,     0,     0,
       0,   433,     0,     0,     0,     0,     0,     0,   436,     0,
       0,   439,   440,     0,   441,     0,   443,     0,   445,   446,
       0,     0,     0,     0,     0,     0,   447,   448,     0,   449,
       0,     0,   450,     0,     0,   451,     0,     0,     0,     0,
     453,     0,     0,     0,   455,     0,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,     0,   469,   470,   471,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,     0,     0,     0,
       0,     0,   479,   480,   481,     0,     0,     0,     0,   483,
     484,   485,     0,   486,   487,     0,   488,   489,     0,     0,
       0,     0,     0,   492,     0,     0,   493,     0,     0,     0,
     495,   496,   497,     0,     0,     0,     0,     0,     0,   498,
       0,     0,   499,     0,     0,     0,   500,   501,   502,   503,
     504,   505,   506,     0,     0,  -327,     0,     0,     0,   507,
       0,     0,   509,     0,   511,     0,   142,   512,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,     0,     0,   152,   153,   154,   155,   156,
     157,   158,     0,     0,  -372,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,     0,     0,     0,     0,   169,  4152,     0,   170,   171,
       0,   172,     0,     0,     0,     0,     0,   176,   177,   178,
     179,  4153,   181,   182,     0,   183,   184,     0,     0,     0,
       0,     0,     0,   190,     0,   192,     0,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,     0,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,     0,
       0,     0,     0,     0,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
       0,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,  -365,   231,     0,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,  4154,
     250,   251,   252,     0,     0,     0,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
       0,   263,     0,   264,     0,     0,     0,     0,   266,   267,
       0,     0,     0,     0,     0,     0,   270,     0,     0,     0,
     271,   272,   273,   274,   275,  4155,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,     0,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
    4156,     0,     0,   288,     0,     0,     0,   290,   291,     0,
       0,   292,  4157,     0,   293,   294,     0,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,     0,     0,  -327,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,     0,
       0,   348,   349,   350,   351,     0,     0,     0,     0,   353,
       0,     0,     0,   354,     0,   355,   356,   357,     0,   358,
     359,   360,  4158,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   365,   366,     0,     0,     0,
       0,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,   377,     0,     0,     0,     0,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
       0,     0,   404,     0,   406,  -327,     0,   407,     0,     0,
       0,   409,     0,     0,   411,   412,     0,   413,  4159,   414,
       0,     0,   415,     0,   417,   418,   419,   420,   421,   422,
     423,     0,   425,   426,     0,   427,     0,     0,     0,     0,
     429,   430,   431,     0,     0,     0,     0,   433,     0,     0,
       0,     0,     0,     0,   436,     0,     0,   439,   440,     0,
     441,     0,   443,     0,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,     0,     0,     0,     0,   453,     0,     0,     0,
     455,     0,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,     0,     0,     0,     0,     0,   479,   480,
     481,     0,     0,     0,     0,   483,   484,   485,     0,   486,
     487,     0,   488,   489,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   495,   496,   497,     0,
       0,     0,     0,     0,     0,   498,     0,     0,   499,     0,
       0,     0,   500,   501,   502,   503,   504,   505,   506,     0,
       0,  -327,     0,     0,     0,   507,     0,     0,   509,     0,
     511,     0,   142,   512,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,     0,
       0,   152,   153,   154,   155,   156,   157,   158,     0,     0,
    -372,     0,     0,     0,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,     0,     0,     0,
       0,   169,  4152,     0,   170,   171,     0,   172,     0,     0,
       0,     0,     0,   176,   177,   178,   179,  4153,   181,   182,
       0,   183,   184,     0,     0,     0,     0,     0,     0,   190,
       0,   192,     0,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,     0,   204,     0,   205,     0,     0,
     206,     0,     0,   207,     0,   208,     0,     0,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,     0,     0,     0,     0,     0,
     217,     0,   218,     0,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,     0,     0,     0,   226,
     227,   228,     0,     0,     0,   229,     0,  4671,   231,     0,
     232,   233,   234,     0,     0,   235,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,  4154,   250,   251,   252,     0,
       0,     0,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   259,   260,   261,     0,   263,     0,   264,
       0,     0,     0,     0,   266,   267,     0,     0,     0,     0,
       0,     0,   270,     0,     0,     0,   271,   272,   273,   274,
     275,  4155,     0,   276,   277,   278,     0,   279,     0,   280,
       0,     0,     0,     0,   281,     0,     0,     0,     0,   283,
       0,   284,   285,     0,   286,   287,  4156,     0,     0,   288,
       0,     0,     0,   290,   291,     0,     0,   292,  4157,     0,
     293,   294,     0,     0,     0,     0,     0,   295,   296,     0,
     297,     0,   298,     0,   299,   300,     0,     0,     0,     0,
    -327,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,     0,     0,   348,   349,   350,
     351,     0,     0,     0,     0,   353,     0,     0,     0,   354,
       0,   355,   356,   357,     0,   358,   359,   360,  4158,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   365,   366,     0,     0,     0,     0,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,     0,     0,
       0,     0,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,     0,     0,   404,     0,
     406,  -327,     0,   407,     0,     0,     0,   409,     0,     0,
     411,   412,     0,   413,  4159,   414,     0,     0,   415,     0,
     417,   418,   419,   420,   421,   422,   423,     0,   425,   426,
       0,   427,     0,     0,     0,     0,   429,   430,   431,     0,
       0,     0,     0,   433,     0,     0,     0,     0,     0,     0,
     436,     0,     0,   439,   440,     0,   441,     0,   443,     0,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,     0,     0,
       0,     0,   453,     0,     0,     0,   455,     0,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,     0,
       0,     0,     0,     0,   479,   480,   481,     0,     0,     0,
       0,   483,   484,   485,     0,   486,   487,     0,   488,   489,
       0,     0,     0,     0,     0,   492,     0,     0,   493,     0,
       0,     0,   495,   496,   497,     0,     0,     0,     0,     0,
       0,   498,     0,     0,   499,     0,     0,     0,   500,   501,
     502,   503,   504,   505,   506,     0,     0,  -327,     0,     0,
       0,   507,     0,     0,   509,     0,   511,     0,   142,   512,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,     0,     0,  -372,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,     0,     0,     0,     0,   169,  4152,     0,
     170,   171,     0,   172,     0,     0,     0,     0,     0,   176,
     177,   178,   179,  4153,   181,   182,     0,   183,   184,     0,
       0,     0,     0,     0,     0,   190,     0,   192,     0,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
       0,   204,     0,   205,     0,     0,   206,     0,     0,   207,
       0,   208,     0,     0,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,     0,     0,     0,     0,     0,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,     0,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,  4724,   231,     0,   232,   233,   234,     0,
       0,   235,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,   244,   245,   246,   247,     0,     0,   248,
     249,  4154,   250,   251,   252,     0,     0,     0,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,     0,   263,     0,   264,     0,     0,     0,     0,
     266,   267,     0,     0,     0,     0,     0,     0,   270,     0,
       0,     0,   271,   272,   273,   274,   275,  4155,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,     0,
     281,     0,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,  4156,     0,     0,   288,     0,     0,     0,   290,
     291,     0,     0,   292,  4157,     0,   293,   294,     0,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,     0,     0,  -327,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
     347,     0,     0,   348,   349,   350,   351,     0,     0,     0,
       0,   353,     0,     0,     0,   354,     0,   355,   356,   357,
       0,   358,   359,   360,  4158,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   365,   366,     0,
       0,     0,     0,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,   377,     0,     0,     0,     0,   380,   381,
       0,   382,     0,   383,   384,   385,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,     0,     0,   392,   393,
     394,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,     0,     0,   404,     0,   406,  -327,     0,   407,
       0,     0,     0,   409,     0,     0,   411,   412,     0,   413,
    4159,   414,     0,     0,   415,     0,   417,   418,   419,   420,
     421,   422,   423,     0,   425,   426,     0,   427,     0,     0,
       0,     0,   429,   430,   431,     0,     0,     0,     0,   433,
       0,     0,     0,     0,     0,     0,   436,     0,     0,   439,
     440,     0,   441,     0,   443,     0,   445,   446,     0,     0,
       0,     0,     0,     0,   447,   448,     0,   449,     0,     0,
     450,     0,     0,   451,     0,     0,     0,     0,   453,     0,
       0,     0,   455,     0,   456,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,     0,   469,   470,   471,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,     0,     0,     0,     0,     0,
     479,   480,   481,     0,     0,     0,     0,   483,   484,   485,
       0,   486,   487,     0,   488,   489,     0,     0,     0,     0,
       0,   492,     0,     0,   493,     0,     0,     0,   495,   496,
     497,     0,     0,     0,     0,     0,     0,   498,     0,     0,
     499,     0,     0,     0,   500,   501,   502,   503,   504,   505,
     506,     0,     0,  -327,     0,     0,     0,   507,     0,     0,
     509,     0,   511,     0,   142,   512,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,     0,     0,   152,   153,   154,   155,   156,   157,   158,
       0,     0,  -372,     0,     0,     0,   161,     0,     0,     0,
     162,     0,     0,   163,   164,   165,     0,   166,     0,     0,
       0,     0,     0,   169,  4152,     0,   170,   171,     0,   172,
       0,     0,     0,     0,     0,   176,   177,   178,   179,  4153,
     181,   182,     0,   183,   184,     0,     0,     0,     0,     0,
       0,   190,     0,   192,     0,   194,   195,   196,   197,     0,
     198,   199,     0,   200,   201,   202,     0,   204,     0,   205,
       0,     0,   206,     0,     0,   207,     0,   208,     0,     0,
     209,     0,   210,     0,     0,     0,   211,   212,   213,     0,
       0,   214,     0,     0,     0,     0,   215,     0,     0,     0,
       0,     0,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,     0,     0,
       0,   226,   227,   228,     0,     0,     0,   229,     0,  -346,
     231,     0,   232,   233,   234,     0,     0,   235,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,  4154,   250,   251,
     252,     0,     0,     0,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,     0,   263,
       0,   264,     0,     0,     0,     0,   266,   267,     0,     0,
       0,     0,     0,     0,   270,     0,     0,     0,   271,   272,
     273,   274,   275,  4155,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,     0,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,  4156,     0,
       0,   288,     0,     0,     0,   290,   291,     0,     0,   292,
    4157,     0,   293,   294,     0,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
       0,     0,  -327,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,     0,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
    4158,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   365,   366,     0,     0,     0,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
       0,     0,     0,     0,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,     0,     0,
     404,     0,   406,  -327,     0,   407,     0,     0,     0,   409,
       0,     0,   411,   412,     0,   413,  4159,   414,     0,     0,
     415,     0,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,     0,   427,     0,     0,     0,     0,   429,   430,
     431,     0,     0,     0,     0,   433,     0,     0,     0,     0,
       0,     0,   436,     0,     0,   439,   440,     0,   441,     0,
     443,     0,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
       0,     0,     0,     0,   453,     0,     0,     0,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,     0,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,     0,     0,     0,     0,   492,     0,     0,
     493,     0,     0,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,  -327,
       0,     0,     0,   507,     0,     0,   509,     0,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,     0,  -372,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,     0,     0,     0,     0,   169,
    4152,     0,   170,   171,     0,   172,     0,     0,     0,     0,
       0,   176,   177,   178,   179,  4153,   181,   182,     0,   183,
     184,     0,     0,     0,     0,     0,     0,   190,     0,   192,
       0,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,     0,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,     0,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,     0,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,     0,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,  4154,   250,   251,   252,     0,     0,     0,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,     0,   263,     0,   264,     0,     0,
       0,     0,   266,   267,     0,     0,     0,     0,     0,     0,
     270,     0,     0,     0,   271,   272,   273,   274,   275,  4155,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,     0,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,  4156,     0,     0,   288,     0,     0,
       0,   290,   291,     0,     0,   292,  4157,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,  -327,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,   347,     0,     0,   348,   349,   350,   351,     0,
       0,     0,     0,   353,     0,     0,     0,   354,     0,   355,
     356,   357,     0,   358,   359,   360,  4158,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   365,
     366,     0,     0,     0,     0,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,   377,     0,     0,     0,     0,
     380,   381,     0,   382,     0,   383,   384,   385,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,     0,     0,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,     0,     0,   404,     0,   406,  -327,
       0,   407,     0,     0,     0,   409,     0,     0,   411,   412,
       0,   413,  4159,   414,     0,     0,   415,     0,   417,   418,
     419,   420,   421,   422,   423,     0,   425,   426,     0,   427,
       0,     0,     0,     0,   429,   430,   431,     0,     0,     0,
       0,   433,     0,     0,     0,     0,     0,     0,   436,     0,
       0,   439,   440,     0,   441,     0,   443,     0,   445,   446,
       0,     0,     0,     0,     0,     0,   447,   448,     0,   449,
       0,     0,   450,     0,     0,   451,     0,     0,     0,     0,
     453,     0,     0,     0,   455,     0,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,     0,   469,   470,   471,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,     0,     0,     0,
       0,     0,   479,   480,   481,     0,     0,     0,     0,   483,
     484,   485,     0,   486,   487,     0,   488,   489,     0,     0,
       0,     0,     0,   492,     0,     0,   493,     0,     0,     0,
     495,   496,   497,     0,     0,     0,     0,     0,     0,   498,
       0,     0,   499,     0,     0,     0,   500,   501,   502,   503,
     504,   505,   506,     0,     0,  -327,     0,     0,     0,   507,
       0,     0,   509,     0,   511,     0,   142,   512,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,     0,     0,   152,   153,   154,   155,   156,
     157,   158,     0,     0,  -372,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,     0,     0,     0,     0,   169,  4152,     0,   170,   171,
       0,   172,     0,     0,     0,     0,     0,   176,   177,   178,
     179,  4153,   181,   182,     0,   183,   184,     0,     0,     0,
       0,     0,     0,   190,     0,   192,     0,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,     0,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,     0,
       0,     0,     0,     0,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
       0,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,     0,   231,     0,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,  4154,
     250,   251,   252,     0,     0,     0,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
       0,   263,     0,   264,     0,     0,     0,     0,   266,   267,
       0,     0,     0,     0,     0,     0,   270,     0,     0,     0,
     271,   272,   273,   274,   275,  4155,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,     0,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
    4156,     0,     0,   288,     0,     0,     0,   290,   291,     0,
       0,   292,  4157,     0,   293,   294,     0,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,     0,     0,  -327,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,     0,
       0,   348,   349,   350,   351,     0,     0,     0,     0,   353,
       0,     0,     0,   354,     0,   355,   356,   357,     0,   358,
     359,   360,  4158,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   365,   366,     0,     0,     0,
       0,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,   377,     0,     0,     0,     0,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
       0,     0,   404,     0,   406,  -327,     0,   407,     0,     0,
       0,   409,     0,     0,   411,   412,     0,   413,  4159,   414,
       0,     0,   415,     0,   417,   418,   419,   420,   421,   422,
     423,     0,   425,   426,     0,   427,     0,     0,     0,     0,
     429,   430,   431,     0,     0,     0,     0,   433,     0,     0,
       0,     0,     0,     0,   436,     0,     0,   439,   440,     0,
     441,     0,   443,     0,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,     0,     0,     0,     0,   453,     0,     0,     0,
     455,     0,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,     0,     0,     0,     0,     0,   479,   480,
     481,     0,     0,     0,     0,   483,   484,   485,     0,   486,
     487,     0,   488,   489,     0,     0,     0,     0,     0,   492,
       0,     0,  4537,     0,     0,     0,   495,   496,   497,     0,
       0,     0,     0,     0,     0,   498,     0,     0,   499,     0,
       0,     0,   500,   501,   502,   503,   504,   505,   506,     0,
       0,  -327,     0,     0,     0,   507,     0,     0,   509,     0,
     511,     0,   142,   512,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,     0,
       0,   152,   153,   154,   155,   156,   157,   158,     0,     0,
       0,     0,     0,     0,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,     0,     0,     0,
       0,   169,     0,     0,   170,   171,     0,   172,     0,     0,
       0,     0,     0,   176,   177,   178,   179,     0,   181,   182,
       0,   183,   184,     0,     0,     0,     0,     0,     0,   190,
       0,   192,     0,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,     0,   204,     0,   205,     0,     0,
     206,     0,     0,   207,     0,   208,     0,     0,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,     0,     0,     0,     0,     0,
     217,     0,   218,     0,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,     0,     0,     0,   226,
     227,   228,     0,     0,     0,   229,     0,     0,   231,     0,
     232,   233,   234,     0,     0,   235,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,     0,   250,   251,   252,     0,
       0,     0,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   259,   260,   261,     0,   263,     0,   264,
       0,     0,     0,     0,   266,   267,     0,     0,     0,     0,
       0,     0,   270,     0,     0,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,     0,   279,     0,   280,
       0,     0,     0,     0,   281,     0,     0,     0,     0,   283,
       0,   284,   285,     0,   286,   287,     0,     0,     0,   288,
       0,     0,     0,   290,   291,     0,     0,   292,     0,     0,
     293,   294,     0,     0,     0,     0,     0,   295,   296,     0,
     297,     0,   298,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,     0,     0,   348,   349,   350,
     351,     0,     0,     0,     0,   353,     0,     0,     0,   354,
       0,   355,   356,   357,     0,   358,   359,   360,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   365,   366,     0,     0,     0,     0,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,     0,     0,
       0,     0,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,     0,     0,   404,     0,
     406,     0,     0,   407,     0,     0,     0,   409,     0,     0,
     411,   412,     0,   413,     0,   414,     0,     0,   415,     0,
     417,   418,   419,   420,   421,   422,   423,     0,   425,   426,
       0,   427,     0,     0,     0,     0,   429,   430,   431,     0,
       0,     0,     0,   433,     0,     0,     0,     0,     0,     0,
     436,     0,     0,   439,   440,     0,   441,     0,   443,     0,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,     0,     0,
       0,     0,   453,     0,     0,     0,   455,     0,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,     0,
       0,     0,     0,     0,   479,   480,   481,     0,     0,     0,
       0,   483,   484,   485,     0,   486,   487,     0,   488,   489,
       0,     0,     0,     0,     0,   492,     0,     0,   493,     0,
       0,     0,   495,   496,   497,     0,     0,     0,     0,     0,
       0,   498,     0,     0,   499,     0,     0,     0,   500,   501,
     502,   503,   504,   505,   506,     0,     0,     0,     0,     0,
       0,   507,     0,     0,   509,     0,   511,     0,     0,   512
};

static const yytype_int16 yycheck[] =
{
       6,   669,  1040,   575,   597,  1187,   620,  1219,    20,  1632,
    1219,  1145,   540,    19,  1317,  1041,   926,    23,    30,   639,
       6,   596,   597,  1117,  2115,    37,   525,    33,   946,   947,
    2115,   639,  1780,   969,    40,  1945,  1946,    43,   994,   957,
    1363,   128,    48,  1465,   832,  1163,  1597,  1628,  1629,    55,
     542,   543,   544,   736,   546,  1465,   548,   677,   994,   551,
    1445,   553,  1317,  2435,  1344,  1595,  2608,  2397,  1250,  1251,
    3036,  2790,  1254,  1255,  1256,  1257,  2218,  1259,  1260,  1261,
    1262,  1263,  1264,  1265,  1266,  2547,  2536,  1242,  2230,  2669,
    3356,     4,   689,    99,  1249,  2877,  2359,  3082,  2945,   600,
    1013,  1284,   603,  2565,  2566,   967,  1154,   559,  1371,   559,
    2113,   834,   665,   666,    23,  2321,  1476,   123,  2115,   125,
    1856,   127,   128,   129,  1045,  3087,   134,  2457,  1930,  1045,
    2231,  2574,  3553,   995,  3625,   803,  1496,  2506,   590,   125,
     590,   127,  2185,  2185,  1504,  1505,  2720,  2721,  3151,  2576,
    2113,  3037,  2726,  2580,  2728,  3237,    13,  2501,  2096,    18,
      20,  2509,    36,  1076,  2591,  3167,    17,    18,  1575,    13,
    2518,    20,    75,    26,    32,  1565,  2603,  3004,   901,   678,
     679,   680,  2185,    20,     9,    21,  2954,    49,  3015,    22,
      99,    22,   116,    17,    18,   792,   793,   794,  3175,  2565,
    2566,    53,    83,    36,    29,    18,   996,   804,  1035,  1036,
     118,    36,  1619,  2675,  2676,    17,    18,    50,  2087,    17,
      18,   673,  2185,    17,    18,   182,    20,  3443,    61,    62,
      61,    62,  2723,    83,    62,  2315,  2172,  1944,  2105,    60,
      66,    75,   136,   132,  2569,   129,  3702,   129,  1075,   136,
     150,    20,    17,    18,   197,   294,   132,   195,  2981,   277,
     166,  3012,    13,    58,   293,    53,   111,   217,   200,    70,
     225,   381,    36,   162,  3423,   210,   375,   402,   387,   371,
     377,   354,   401,  3398,   332,   379,   162,    91,   152,   466,
     132,    38,    89,   260,   376,   419,   671,   235,   257,    83,
     313,   137,   162,   162,   377,  3665,   166,   457,   192,  2675,
    2676,  2201,   137,    17,    18,   486,   132,    65,   244,  3740,
    3741,   502,   404,  3744,    38,   279,   133,   253,    13,   166,
     449,   239,    13,  4397,    12,    17,    18,   221,   372,   814,
      11,   277,  3763,   564,   836,   446,   162,    84,   283,  3770,
    4103,  2864,   246,    17,    18,  3621,   535,    13,    13,   199,
     166,   182,  2706,   365,  2708,   186,   631,    17,    18,   387,
      20,  2309,   283,   432,    72,   648,   197,   654,   830,   564,
     654,   231,   655,   233,   166,   662,    17,    18,   662,   242,
     631,   656,  1575,   432,   453,    36,  2051,   166,    17,    18,
    2068,  2069,   526,   166,   162,    17,    18,   291,   162,   291,
      17,    18,   262,   415,   427,   656,   156,  2085,  3909,   600,
      75,    62,   156,    17,    18,   454,   527,    17,    18,  2870,
     489,   156,   258,   654,  2102,  2103,  1619,   277,   617,   914,
      17,    18,    72,   530,   478,   252,  4510,   231,   196,   233,
    2963,   387,   169,   828,   129,   133,   580,   132,   369,   162,
    3820,   146,   643,  1035,  1036,   146,   392,  2684,   400,   322,
    1153,   428,   559,   432,   221,   222,  3485,   564,   262,    68,
     274,   235,   564,   654,  1167,   662,   987,   371,  4256,   371,
    2515,   504,  1280,  2482,  1520,   199,   463,   294,   622,  2167,
    2168,  2169,  2170,   590,    17,    18,   656,   221,   222,   330,
      17,    18,   166,  3873,   562,    17,    18,   192,    20,   277,
    1438,   475,   367,  4276,   530,   294,   532,   391,   370,   654,
      87,  3952,  2884,  2885,  2886,   386,   609,   656,   389,  1038,
    3961,   589,   636,   549,  2888,  2889,   221,   656,    66,   313,
      17,    18,   662,   559,   560,   647,   491,   656,   564,   656,
     566,   511,   386,  2453,  3985,   389,  2569,  3716,    65,  3990,
    3397,   503,   367,   579,   277,  3690,  3295,  1245,   596,  3347,
     535,  1966,  3409,  3351,   590,  2523,   673,   421,   386,   495,
     596,   389,   386,  3859,   494,   389,  1532,   636,  3425,  3426,
     606,   630,  1130,  1131,  2976,   518,  2569,   428,  1470,   564,
     462,  1473,  3439,  1336,   182,  1477,   291,  1479,    26,   625,
    3082,   386,  4390,   427,   389,  4081,  1808,  1930,  1156,    41,
    2627,   432,   468,   639,  1317,   641,  1164,  1819,  1166,  3358,
    1822,  2684,  2684,  3394,  1565,  1507,  1508,  1830,   654,  1565,
    1178,  1179,  1180,   659,   567,   661,  1253,  3660,  1186,   665,
     666,   506,  3385,   432,   670,   671,  2026,   673,   654,   417,
     608,   677,  3134,  1270,   462,  1930,  3001,  3893,   684,  2548,
    2087,  2684,   386,    17,    18,   389,  1409,   600,   631,   495,
     603,  1604,    17,    18,   607,    22,   371,  1618,   622,   656,
    2567,   455,  1618,   587,   386,   587,  2113,   389,   602,    36,
    1433,  2791,  1502,   495,  2652,   602,   597,   575,   544,  2657,
     554,  2684,   386,    50,  1344,   389,  1553,  2665,  2666,   554,
     736,   639,   495,  2671,    61,    62,   386,  1290,   575,   389,
     258,  2677,  3589,   830,   831,   579,    17,    18,   419,   574,
     659,   654,  2459,   504,  1802,   386,   164,   582,   389,   621,
     609,   594,   575,   594,  3741,  2172,  3308,   386,  3134,   631,
     389,   660,   631,  3775,   386,  1909,  2166,   389,  2185,   386,
     654,   631,   389,   608,   660,   609,   147,  1575,   616,   640,
    1410,   797,   386,   799,  4010,   389,   386,   654,  3880,   389,
     660,   660,  1410,   656,   656,  4021,  3150,  1308,   659,   386,
     654,   647,   389,  1366,  3700,  2705,   640,   564,   824,   825,
     826,   827,   828,   829,   830,   831,   577,   833,   834,  4320,
    1383,  1619,   656,   839,   242,   656,  4052,   535,   640,   825,
    4200,   495,   640,   829,   660,   363,   640,   833,   504,   597,
     564,   588,   151,  2508,  1474,   526,   662,   655,   656,   946,
     428,   948,   656,  3304,   951,   952,  1474,   636,    17,    18,
     876,   629,  3875,   386,  2404,   640,   389,  3704,  4238,   386,
     662,   968,   389,   889,   386,  3653,  3654,   389,   628,  1390,
     655,   656,    17,    18,   628,   901,   902,   164,  2521,   662,
     906,  2811,   660,   628,  2087,   535,   660,  2575,   625,   580,
    2578,  2579,   587,  2581,   322,   504,  2584,  2585,  3135,   386,
    2588,  3930,   389,  2912,   481,  2593,   629,  2952,  2953,  3301,
    2598,  2599,  2600,  2601,  2602,  3888,   640,  4705,  2606,  2607,
     946,  2609,   948,   440,  2854,   951,   952,  2615,  2616,  2617,
    2618,   622,   656,  2621,  2622,  1454,  2624,   660,   640,  3311,
     368,    53,   968,  1535,  1536,  1537,   276,   276,  3542,  3419,
      17,    18,  3341,   655,   656,   242,   640,  3551,    17,    18,
     889,  3072,   895,   344,  4405,  3315,  4407,  3072,    48,  2172,
     640,   655,   656,   902,  1569,    17,    18,   906,  3001,  3347,
     326,   195,  2185,  3351,    17,    18,  1626,  1013,   662,   640,
     528,  3355,    45,   838,  2682,   368,   185,  4508,    17,    18,
     166,   640,   377,   182,   655,   656,   544,  4088,   640,  1037,
    3473,    12,   202,   640,  1952,  1041,   655,   656,  3001,   607,
    2591,   235,  1725,   655,   656,   377,   640,  3474,   655,   656,
     640,   197,   386,  3544,  1972,   389,    17,    18,  2655,  1065,
     129,   386,   656,   640,   389,  2021,   656,    34,  2490,  2491,
    1076,  2493,  2494,  2255,   987,  3072,   989,  3178,  2880,   656,
    3018,  2491,  3020,  2493,  2494,  2021,    17,    18,   656,  3027,
     405,  2827,  3135,  3135,    73,    73,  2376,   379,    21,   432,
    2056,   368,   377,  3041,  1110,  1111,  1112,  1113,   242,  2203,
    3048,  3049,    24,  1836,   145,   386,  4078,   529,   389,   637,
    2056,  4337,   534,  3061,  3062,  3063,   277,   640,   367,  3067,
    3068,   539,  3135,   640,  4350,   547,  3342,    26,   640,   133,
     552,  2548,  2502,   656,   202,  1232,  4386,  1153,   235,   656,
    2012,  3725,   129,  2416,  3728,   132,  1065,  4142,   218,  4375,
     199,  1167,  2569,  2025,   377,  3103,  2028,  2029,   580,  1621,
    1893,  1621,  3135,   640,    17,    18,   197,  2332,    17,    18,
      26,   244,  1269,   253,  3758,  3759,  3760,   486,   239,   656,
     253,   159,  3766,   171,  1917,  1918,  4462,  2945,    17,    18,
    3774,   370,   170,   273,  1113,   377,   235,   294,   447,  2122,
     377,    17,    18,  1219,   137,   192,   624,   288,  4156,  4157,
    2338,  2339,   291,  2435,  1821,     9,  1232,   235,    17,    18,
    2412,  1318,  3723,  3724,   368,   313,   387,   386,   119,  3730,
     389,   122,  3733,  3734,   221,  2166,   634,  1930,   656,   419,
    2166,     9,    17,    18,  1826,   564,   108,   190,   252,  3750,
     129,   386,   174,  1269,   389,   286,    13,   594,  1274,   428,
    2677,   624,   539,  3764,    32,   367,   408,  2684,   349,  3770,
    3771,  3772,  3773,  2331,  1290,  1838,   253,  1374,   649,   650,
     651,   652,   619,  2341,  4247,  3233,  4249,    44,   631,  2087,
     331,   656,   371,    17,    18,   286,   640,  2519,   623,   276,
    2519,  1317,  1318,  2843,   291,   640,  3808,    17,    18,   629,
     629,   354,   656,   192,   656,    17,    18,   654,   654,   392,
    1336,   656,  1904,   266,    17,    18,    17,    18,  1344,   386,
    4401,   428,   389,  1349,   480,  1351,  1847,   386,  1354,   495,
     389,    98,   221,   242,   636,   654,   103,   624,  3026,   658,
    1366,   419,    17,    18,   386,  2548,  4404,   389,  1374,   640,
     462,  3039,   380,   386,    17,    18,   389,  1383,  1384,  1976,
     512,   656,  4367,  4368,  2172,   656,   654,   386,   558,   656,
     389,  3533,    17,    18,   371,  1308,   242,  2185,  4245,   257,
      17,    18,   494,  1409,  1410,   539,   190,  1413,  4648,   388,
     388,   199,   134,   582,   608,  1421,   199,   385,  1424,   479,
    3017,    54,   291,    17,    18,   386,   455,  1433,   389,   598,
      17,    18,    65,   322,   367,   437,    17,    18,  1444,  1445,
      17,    18,  1355,   656,  3707,  1354,  3043,  3044,   607,  1455,
    1456,  1457,  1458,  1459,  1460,   386,    17,    18,   389,  1465,
    3011,  3012,   250,   134,   535,  1471,  1472,  4452,  1474,  1455,
    1456,  1457,  1478,  1459,   441,  1384,   322,  1390,  4197,  1931,
     243,  1931,  4264,   486,   656,  1572,  1472,    17,    18,   656,
     624,   640,  1478,  1499,  2677,    13,  3988,   260,   486,  3991,
     558,  2684,   371,   199,    17,    18,   486,   656,   255,   272,
    2932,  2933,    17,    18,   197,   640,  4482,   176,   587,  4099,
    4100,   558,   368,  2933,  3396,  4791,    17,    18,  3400,  3401,
       0,   656,    17,    18,  1621,    13,   408,  1450,    17,    18,
    2674,  3913,   486,   386,    21,   468,   389,   386,  1554,  1458,
     389,  1460,   223,   162,  2834,  2835,  2836,   253,   176,    60,
    2478,  2181,  4104,  2062,  1477,   486,  1572,   386,    13,   486,
     389,   486,   294,  2181,   432,    17,    18,  2880,   361,    83,
     386,  1587,   404,   389,   331,   596,  1592,  1593,    13,   591,
    1499,   564,   655,   640,  3001,   563,    42,   386,  1604,   387,
     389,   640,  4540,  4541,   143,  4055,   129,    17,    18,   656,
     587,  4649,  4650,  2707,   213,  1621,   655,    20,   640,   158,
    1626,   386,  3997,   294,   389,  2880,    65,   640,   146,  1635,
     166,  1637,    17,    18,   656,   414,    17,    18,  2961,   529,
     512,   640,    81,   656,   655,  1554,   218,   160,   395,   130,
     283,   654,  2807,  2865,    93,   658,  2865,   656,   585,   318,
     137,   260,    17,    18,  3806,  1578,   654,   291,   146,   192,
      17,    18,   386,   563,   654,   389,    17,    18,  1587,   640,
    4142,   182,   609,   166,  1593,   186,   386,   568,   661,   389,
     571,   263,   138,   539,   386,   656,   197,   389,   221,  2227,
     318,   146,   105,   386,  2232,   386,   389,   470,   389,   640,
     654,    17,    18,  4085,   173,    17,    18,  2245,   587,  1725,
    1726,   146,  2640,  2446,  4054,   656,  2860,   231,  3135,   233,
     662,   386,   609,   654,   389,    17,    18,   654,  2335,   654,
      18,  4467,   564,   386,  4470,   218,   389,   371,    17,    18,
    3280,  2279,  1839,   213,   173,   173,  2376,   196,   262,   162,
    2548,   386,   201,   166,   389,   486,   631,   514,   291,   386,
     251,   278,   389,   494,   281,    17,    18,   540,   624,   656,
    1786,  4156,  4157,   202,   202,   662,   655,   564,   387,   609,
     263,   656,   386,   616,   197,   389,   619,   640,   564,   386,
     239,   640,   389,   554,   551,   386,   133,   558,   389,   386,
     213,    40,   389,   656,   532,  3687,   219,   656,   199,    48,
    2348,   640,  1828,  1829,   263,   386,   234,  2447,   389,   330,
    1836,   549,  1838,  1839,   640,  3047,   656,   656,  3047,  2447,
     243,  3589,   662,  3394,  1931,  1851,   213,   250,   371,   655,
    1856,   640,   455,  3791,   605,  1861,   386,   260,  1864,   389,
      17,    18,  1949,    90,   234,  1871,  1872,   656,  1874,   272,
      17,    18,   381,   386,   277,   640,   389,   654,   239,    17,
      18,   386,    20,   286,   389,   112,   567,  1893,   654,  2677,
    1896,   656,   613,   614,  1900,   386,  2684,   239,   389,  3837,
     558,   386,  4628,   561,   389,  4367,  4368,   386,   609,  2484,
     389,  1917,  1918,  1919,  1920,    17,    18,    17,    18,   239,
    1829,   263,   429,  3474,  1930,  1931,   640,   428,  1059,  1060,
    1936,  1937,  1938,   654,  1847,    17,    18,  3868,  4313,  4314,
     640,   554,   656,  1949,   386,   558,  3228,   389,   640,  3334,
    3232,   354,  3135,   434,   655,   656,   656,   640,   239,   640,
    1966,  3892,  1871,  1872,   656,  1874,   213,  2877,   648,  2925,
      17,    18,   655,  1104,   377,   655,   386,   141,   417,   389,
     250,  1987,    17,    18,   387,   640,   567,  1896,   199,  2925,
    4452,  1900,    49,    17,    18,    17,    18,   640,   364,   365,
     655,   386,  1915,   505,   389,   386,   614,  1005,   389,   505,
    1919,  1920,   655,  1011,  1012,   640,   419,   294,    17,    18,
    3343,  2027,   185,   640,   655,    17,    18,  1936,  1937,  1938,
     655,   386,    17,    18,   389,   561,  3154,  2043,   655,   386,
     494,  2959,   389,   558,  2050,   386,   640,  4422,   389,    17,
      18,    17,    18,   640,  2060,  2061,   660,  2063,  2064,   640,
     541,   655,  4437,   640,   587,  3183,  3184,   470,   655,  1982,
      17,    18,   655,   656,  2060,  2061,   515,  2939,   655,   640,
     386,   585,   662,   389,   386,   383,  3204,   389,  3222,    17,
      18,   494,   603,  3305,   655,   558,  2183,   199,  4036,  4037,
    4038,   654,  2189,    13,   386,   609,   526,   389,    17,    18,
     640,   575,  3693,  3694,   115,   196,  2122,   386,  2027,   231,
     389,   233,  1872,     6,  1874,   655,   654,   640,  4456,  4504,
    4458,  2218,    17,    18,    26,   640,   136,   540,   749,  2862,
     654,  2050,  3354,  2230,   386,  3354,   654,   389,   654,   640,
     655,    17,    18,  4528,   654,   640,   655,   656,   597,  2072,
     771,   640,    17,    18,   655,  4540,  4541,   654,  2081,  2082,
     655,   655,   656,   784,   785,  2181,   655,  2183,   654,  2092,
    2093,  2094,  2095,  2189,  2097,  2098,  1936,  1937,  1938,  2195,
     656,    83,  2198,   596,   662,    17,    18,  2880,   640,    17,
      18,   364,   365,    17,    18,   654,   609,   370,    17,    18,
     129,   654,  2218,   655,  2834,  2835,  2836,    17,    18,    17,
      18,   709,   710,   224,  2230,   654,   629,   127,   631,   386,
     640,   654,   389,   654,  4609,   474,   146,  2324,  3544,   386,
     149,  2813,   389,   654,  4619,   655,   246,   654,   386,    61,
      62,   389,   655,   656,   654,   640,   659,   660,   654,   640,
     654,    73,   655,   656,  2884,  2885,  2886,  2354,   632,   633,
     655,   654,   164,   192,  2802,   147,  2884,  2885,  2886,   486,
     655,   656,  3416,    18,   386,   640,   386,   389,  4663,   389,
    4665,   183,   656,   640,   654,   783,    22,   654,   567,   640,
     655,  4314,    26,   654,   386,   654,  4216,   389,   655,   654,
      36,   655,   656,   223,   655,  4690,   555,    81,  2324,   655,
     656,   654,   561,  4698,    50,  4700,   654,  4702,   654,   229,
     654,    18,   655,   656,   640,    61,    62,   654,   640,   386,
     654,  4716,   389,  2349,   654,  4720,   654,  3135,  2354,   655,
     242,   386,   105,   655,   389,   843,   655,   656,   640,    83,
    4735,  4736,   386,   654,   386,   389,   605,   389,   655,   656,
    2376,   640,   291,   655,  3796,  3493,  4751,  4752,    17,    18,
    3298,  4756,  3338,   622,   655,   656,  3796,   386,   655,   656,
     389,    12,   393,   654,   386,   115,   654,   389,   640,   199,
     654,   386,  3338,   404,   389,  2411,   613,   614,  3620,   654,
     411,  3620,   147,   655,   655,   656,    61,    62,   386,   582,
     386,   389,   654,   389,  3730,   564,  3520,  3733,  3734,  2435,
     322,   654,   196,  2439,   334,   598,   655,   656,   338,   386,
    2446,  2447,   389,   539,  3750,   345,   654,   654,  2535,  2536,
    3025,   654,   371,   173,  2460,   455,  2462,  4548,   386,   183,
     147,   389,  4547,   655,   656,   654,    13,   654,  3069,   136,
     362,   654,   344,   129,   654,   239,   368,   386,  2484,   654,
     389,   654,   202,   640,  2490,  2491,   486,  2493,  2494,  1337,
     243,   609,  1340,   640,   115,  1343,  3097,  4245,   655,   263,
    3712,   386,   640,  3712,   389,   654,  3005,   260,   655,   510,
     654,  4449,   133,  2519,  3013,  4528,  4067,  4068,   242,   272,
     386,   654,  2528,   389,   654,  2531,   426,  3019,   654,  2535,
    2536,   386,   655,   656,   389,  3561,   192,   654,   640,  3031,
     640,  3033,  3034,   654,    33,  2531,   654,  2460,  1123,  1124,
    1125,   136,   173,  3045,   178,   655,  4224,  4225,   640,  1047,
    4228,  4229,  4230,  4231,   386,  1140,    83,   389,   386,   211,
       6,   389,   386,   655,   654,   389,   654,   386,   654,   246,
     389,   202,   613,   614,   484,   616,   386,   618,   386,   389,
     654,   389,  4215,   640,   655,   656,    85,  1172,   322,   146,
    1175,   354,   602,   654,   605,   640,   655,   656,   655,   344,
     520,   521,   654,   523,  2620,   525,   640,   654,   640,  3922,
     655,  1196,  1197,    59,    83,  1200,   299,   300,   654,  2635,
     540,   655,   418,   655,   654,   291,   654,   401,   362,   655,
     656,   640,   315,  2649,   368,  1220,  1221,   539,   640,   654,
    4663,   654,  4665,   417,   654,   640,   655,   344,   655,   656,
     654,   246,  4330,   655,  3192,   654,   287,  3970,   587,   474,
     655,   160,   640,   654,   640,   654,   223,   319,   320,   655,
     656,   129,   324,   325,   654,  4698,   384,   655,   377,   655,
     654,  3311,   654,   640,  2700,  2701,  2702,  4365,  4366,   419,
     655,   656,   129,  3311,   654,   164,  4374,   554,   655,   655,
     656,   654,   640,    36,   150,   371,  3244,   470,   297,   654,
     299,   300,  4735,  4736,   575,   242,   626,   655,   655,   656,
     377,   640,   624,   655,   656,   656,   315,   655,   656,    62,
    2653,  2654,   642,  2656,   192,  2658,  2659,  2660,  2661,  2662,
    2663,  2664,   655,   656,  2667,   640,   235,  2670,  3333,    51,
    2673,   512,   497,   498,   656,   192,   655,   656,   655,   656,
     655,   444,   445,   221,   640,   647,   648,   649,   650,   651,
     652,   129,   655,   242,   132,   640,   288,   540,   455,   655,
     384,  2700,  2701,  2702,   221,    51,   119,   656,   419,   122,
     655,    62,   377,  4713,   231,  3406,   233,   130,   199,    81,
     497,   498,   655,   656,   377,   539,   655,   656,   640,   486,
     480,  2827,   640,  2829,   649,   148,   640,  2833,  2834,  2835,
    2836,   640,   494,   655,   655,   656,  2842,   655,   558,  3440,
     640,   655,   640,   291,   192,   362,   655,   655,   656,   596,
    3451,   368,    27,  3454,   505,  2861,  2862,   172,   119,  2865,
     580,   122,   654,  4045,   291,   444,   445,   662,   594,   130,
     455,   492,   662,   221,  2880,   655,   656,   277,  2884,  2885,
    2886,   197,  4792,   655,   656,   655,   656,   148,   554,   615,
     616,  2897,   655,   656,   655,   656,   655,   656,    73,   535,
     624,   486,   622,   362,   512,   526,   659,   147,    83,   368,
     645,   646,   647,   648,   649,   650,   651,   652,   655,   656,
     535,   438,   288,   371,   196,   414,  2932,  2933,   251,   365,
    3422,   587,   193,  2842,   555,   602,   655,   656,   655,   656,
      83,   655,   656,   291,   371,   655,   656,   436,   163,  3036,
     655,   656,   197,  4087,    97,  3530,    92,   132,   645,   646,
     647,   648,   649,   650,   651,   652,   656,   239,   656,  2975,
    2976,   655,   656,   520,   521,   522,   523,   524,   525,   438,
     129,  3794,  3795,   472,  2897,    20,   147,   654,   378,    20,
     251,   263,    27,   540,   105,   431,   550,   433,  3004,  4193,
    4194,   622,  4214,   655,  3016,  4214,   655,   656,  3014,  3015,
    3022,   655,   656,   253,   162,  3021,   132,   602,   655,   656,
     118,   147,   539,   371,   129,   156,   157,   132,   655,   656,
    3036,  3037,   661,   356,  3046,     6,  3042,   654,    73,   117,
    3052,  3047,   531,   192,  3838,  3839,  3058,  3059,    83,  1204,
    1205,  3057,   129,     4,    34,   132,   231,   485,   233,  3317,
    3318,  3273,  3274,  3069,   622,  3983,  2975,  1642,   253,   654,
    3076,  3077,   221,   656,   105,   592,  3082,  3599,  3600,   401,
     539,    58,  3088,  4217,   447,   178,  3092,   192,   263,   118,
      65,  3097,   353,   232,  4120,   356,   656,   132,   232,  3671,
    4126,   147,  3088,   656,   344,  3918,    81,   624,    73,    13,
    3023,  3024,   662,   628,   655,   192,   221,   655,    93,   146,
      10,   656,   265,   662,   129,   655,   655,  3133,   655,   662,
     654,   162,   243,   592,   276,   166,   662,   656,  3051,   587,
     377,   164,   291,  3149,   221,   417,   656,  4341,  3057,   260,
     661,  4345,  1727,   288,   147,  4289,  1731,    51,   288,   288,
     587,   272,   656,   288,   195,   624,   197,   147,   288,  3082,
     205,   288,   656,   434,   166,   554,   654,   230,   402,   502,
    1755,   283,   213,   344,   656,   656,   291,   192,   219,   364,
     365,   575,   656,   575,   401,   370,   231,   656,   233,   342,
     656,   197,   377,   166,   235,   656,   656,   655,    73,   656,
     535,    38,   243,    38,   291,   253,   221,   649,   344,   250,
     254,   196,   371,   552,   367,   187,   201,  3140,   263,   260,
     197,   656,  3238,  3320,   172,  4369,    83,   535,   509,   587,
    3246,   272,   417,   354,    91,   142,   277,   406,   571,  4461,
     377,   656,  4461,   405,   655,   286,   603,   497,   498,   656,
     253,     7,   635,   608,   239,   199,   371,    17,    18,   656,
     655,   118,   655,   253,   655,   655,   199,   600,  4091,  4092,
    3286,  4094,  4095,   655,   649,   655,   291,   430,   263,   656,
    3862,   655,   648,   655,   371,   122,   276,   122,   344,  3305,
    3306,  3876,   129,  3309,   129,  3311,   655,   596,   654,   495,
     571,    86,   655,    88,  3320,   490,   655,   164,  4512,  4513,
    3326,   655,   655,   354,   656,   656,   654,  3333,  3334,   364,
     365,   655,  3419,  3246,   655,   370,   497,   498,   655,   600,
     654,   652,   377,   655,   654,   564,   377,   656,  3354,   575,
     564,   344,   564,   629,  4264,   241,   387,   132,   185,   470,
     185,   656,   546,  3369,   344,   192,   371,   192,   654,   518,
    3376,   497,   498,   123,   124,   125,   126,   127,  3390,   154,
    4406,  4563,   417,   526,   364,   365,  4000,    12,   419,   654,
      13,  3397,   239,   211,   221,   222,   221,   222,   199,   656,
    3406,    83,   662,  3409,   654,   645,   646,   647,   648,   649,
     650,   651,   652,  3419,   274,    97,   191,  3423,  4336,  3425,
    3426,   654,   597,  3946,  3947,   656,   401,  3340,   656,   540,
     662,   199,   662,  3439,  3440,   662,  3959,  4355,   587,   470,
     427,   601,   417,  3966,   655,  3451,  3533,   475,  3454,   494,
     656,   497,   498,   656,   656,   490,  4049,   197,   140,    49,
     202,   441,   526,   494,   291,   352,   291,  3376,   526,  3992,
    3993,   526,  3478,   485,   321,  3481,   226,   227,   228,   229,
    3486,   450,   587,   526,   645,   646,   647,   648,   649,   650,
     651,   652,   339,   526,   197,  4677,   654,   166,   166,   166,
     166,   166,  3508,   166,   497,   498,   166,  3420,   166,   540,
     587,   166,   166,   166,   166,   362,  3429,   497,   498,   166,
     646,   647,   648,   649,   650,   651,   652,  3533,   355,   166,
     355,   166,   166,   513,   166,   166,   166,   166,   166,   366,
     515,   656,   287,   370,   371,   370,   371,   377,  4574,  4575,
    3637,  4577,   609,  4765,   377,   115,  4765,   377,   662,   105,
     655,   160,   597,   655,   249,   596,  4778,   655,   249,  4778,
     655,  4783,  3481,   662,  4783,   655,  4788,   608,   609,  4788,
     655,   655,   587,   265,   334,  3498,   336,   337,   338,   655,
     655,   166,     7,   656,   656,   345,   575,   575,   629,   575,
     631,   647,   648,   649,   650,   651,   652,   656,   662,  3615,
     662,   564,   636,  4639,  3620,  4641,  4642,    89,    49,   283,
     395,   166,   597,   575,   655,   656,   166,   384,   659,   660,
     199,  3637,   654,   654,   654,   654,   386,   199,   199,   389,
    4233,   201,   250,   199,   564,   564,   257,   432,   656,   371,
     260,    36,   645,   646,   647,   648,   649,   650,   651,   652,
     342,   390,   260,   335,   439,   645,   646,   647,   648,   649,
     650,   651,   652,   654,   118,  3681,   426,   118,    81,   239,
     401,   401,   364,   365,    69,   367,   401,   575,   142,   261,
     261,    57,   539,   555,  3700,   401,   555,   243,  3704,   142,
     401,    67,    49,   401,  4730,   575,  3712,   403,   555,  4747,
    3716,   401,  3718,   401,   260,   401,    82,   654,  4386,  3806,
     213,  4293,   654,   654,   166,   167,   272,   287,    94,    95,
      96,   564,   166,   483,   484,   383,   662,   564,   649,   564,
     654,   568,   654,   568,   571,   251,   571,   113,   430,   251,
     655,    14,   655,   655,   139,   582,   190,   582,   656,   655,
     587,   203,   587,   590,  3677,   590,   384,   656,   649,   203,
     654,   662,   655,   215,    57,   655,   655,  3783,   655,   164,
    3786,   215,   432,   168,    67,   654,   377,  3793,  3794,  3795,
    3796,  3878,   655,   278,   401,   235,   662,   199,   656,    82,
    3806,   656,   123,   124,   125,   126,   127,   655,   354,   602,
      36,    94,    95,    96,   256,   253,  4388,   655,   655,   204,
     647,   648,   647,   648,   166,   656,   268,   432,   260,   389,
     113,   377,   266,   260,   268,   656,   401,   654,   263,   466,
     225,   104,   263,    69,   526,   415,   662,   377,   377,    83,
      20,   655,   654,   295,   105,   240,   656,   654,    49,   387,
     655,   295,   488,   655,   631,   655,   274,   468,  4786,   181,
     286,   211,  3878,   136,   153,   270,   626,   655,   655,   115,
     656,  3968,  3888,   486,   213,   260,   260,   150,  4463,   377,
     640,   641,   642,   656,   496,   377,   512,   655,   654,  3905,
     655,   263,   656,   288,   263,   226,   227,   228,   229,   656,
     173,   471,  3918,   139,   177,   631,   358,  3923,   656,  3931,
     654,    87,   655,  3929,   470,   504,   189,   361,   313,   149,
     238,  3937,   492,   277,    36,    36,   655,   173,   164,    62,
     654,   654,   168,   654,   251,   655,   655,   655,   211,   371,
     655,   655,   341,   655,   265,   515,   655,   427,   655,    18,
     655,   384,  3968,   656,   250,   654,   202,   333,  4055,   631,
     662,   655,    49,   656,   219,   512,   239,   656,   204,   654,
    4648,  3894,   416,   246,   350,   341,   481,   609,  3994,   609,
      20,   132,   243,   654,   540,   555,   655,   132,   655,   225,
     656,   558,   413,   239,    36,   654,   371,   180,   341,   260,
     656,   662,   655,   334,   240,   336,   337,   338,   143,   263,
    3929,   272,   564,   286,   345,   564,   564,   558,   613,   609,
     654,   609,   317,   418,   655,   654,   619,   597,  4044,   656,
    4633,  4047,   427,   655,    15,   605,   619,   602,   654,  4055,
     333,   287,   132,   263,   654,    20,  3969,   442,  4422,   654,
     654,   654,   288,   263,  4636,   370,   530,   350,   631,   176,
    4076,  4077,  4740,  4437,   475,   460,    63,   654,   465,   655,
     384,   602,   656,   545,   466,  4091,  4092,   313,  4094,  4095,
     250,   655,   366,   377,   614,    27,   654,    29,   464,  4767,
     654,   654,     6,   354,   654,   426,   161,    33,    12,   628,
      14,   663,    16,   371,   655,   176,   482,   566,   142,   504,
     142,   654,   507,    27,   164,    29,   377,   419,    75,    61,
      62,   197,    64,   197,   628,  4044,  4142,   655,   654,   199,
    4504,    73,    33,  4715,    65,   384,    65,  4153,   655,   398,
     535,    83,  4158,   656,   655,    59,   654,   420,   546,    91,
      64,    65,   483,   484,   279,   440,   655,    71,  4077,   554,
     160,   655,   557,   558,   250,   384,   542,   440,   414,    83,
     660,  4187,  4188,   419,  4190,   448,   118,    91,   384,   654,
      49,    49,   418,   456,   560,   159,    49,   101,    49,   482,
     132,   427,    49,   135,   654,   140,   540,   654,  4214,   149,
       5,   628,   377,   377,   118,   160,   442,  4789,   234,   470,
     293,   606,   131,   486,   660,    12,   663,    49,   132,  4142,
     286,   135,   164,    49,   460,   471,   499,   500,    49,   143,
     144,  4247,   654,  4249,   155,  4609,   150,   602,   136,    55,
     660,   475,   656,   263,   158,  4619,   492,   655,   162,   542,
     164,   655,   477,   160,   567,   656,   216,   660,   454,   232,
     656,   175,   655,  4279,   655,    55,   656,   560,   504,   197,
     197,   507,   197,  4370,    49,   567,   549,   630,   132,   540,
     371,   195,   235,   654,  4163,   198,   494,  3791,   656,   231,
    4306,   233,  2361,  2672,  3512,   626,  1036,   239,  2564,   535,
    3903,   989,  4258,  4389,  4590,   247,  4591,   580,  3901,   555,
     641,   642,  4075,  3905,  1056,   561,  4690,   231,  4767,   233,
     262,   557,  4728,   237,    48,   239,  4700,   598,  4702,   602,
    1929,   604,  4737,   247,   580,  1861,  3997,  2827,  3997,  3997,
    3997,  3997,  4716,  3997,  4360,   689,  4720,  3997,   262,  3997,
     694,  3997,  3997,  4606,  4370,  4415,  4606,  4541,  3997,   605,
    4376,  3997,  3997,  4441,  4440,  1100,  1581,  1830,  4084,  4262,
     606,  2634,   286,  2115,  3449,  2856,   622,  4751,  4752,   321,
    3614,  3286,  4756,  4045,  2861,  4482,  4360,   731,  1371,  3617,
    4465,  4571,  4633,  4233,  3910,  4677,  2627,   339,  1618,   630,
    3362,  3076,  3681,  2635,   748,  3079,  4329,   321,  3923,  3930,
    4654,  4293,  3175,  3741,  4118,  3775,  3979,  4463,  3968,  2535,
    2780,  3229,  3232,  3224,  4395,   339,    11,    11,  4512,   343,
    4332,  4447,  4513,  2191,   236,  4341,  4452,  4345,  2698,  4190,
    4363,  4364,  3397,  4126,  1069,  4461,  2634,  3072,   792,   793,
     794,   795,   394,  3935,   396,  1515,  1017,  2505,  2122,  2430,
     804,  4447,   404,  3699,  1614,  1919,  4482,  2842,   382,  1593,
    2404,  2317,  4569,   387,  3281,  3999,  2451,   619,  1943,  3246,
     394,  4291,   396,   938,  2222,  2226,  1167,   401,  2813,  2520,
     404,  3345,  2514,  2316,   296,  4070,   298,   299,   300,   301,
     302,  3508,   304,   305,   306,   307,   308,   309,   310,   311,
     312,  4252,   314,   315,   316,  4585,  1140,  2342,  4586,  3712,
    1532,   435,  2933,  2932,  3068,  3889,  3878,  4715,  2195,  4452,
    2456,  1040,  1354,  1040,   476,   449,   450,   451,   452,  1384,
    2398,  3300,  2434,  3620,  3299,  3354,  4461,  1040,   892,   609,
    4473,  4474,  1040,  4569,  1635,   685,   597,  2499,  2022,   597,
    1463,  2023,   476,  1850,  3718,  3284,  1391,  4675,  4710,  4585,
    4586,  4581,  4489,  4783,  4788,  3970,  3305,  1421,  2481,  3333,
     596,  1783,  3334,   596,  1969,  2474,  2473,  2467,  1900,   830,
     532,   533,   534,  1411,   590,  4611,  4034,   539,   918,  1346,
    1626,  2446,  4618,  2829,  4040,   591,   925,  1036,   627,   627,
     627,    -1,  1036,   555,    -1,    -1,    -1,   559,   532,   533,
     534,  1036,    -1,    -1,    -1,   539,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   578,    -1,    -1,    -1,
      -1,   555,   444,   445,    -1,   559,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   578,    27,    -1,    29,    -1,   583,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4774,    -1,    -1,
      -1,    -1,   596,  4699,    -1,    -1,    -1,    -1,  4704,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      62,    -1,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    73,    -1,    -1,   656,    -1,    -1,    -1,    -1,    -1,
      -1,    83,    -1,    -1,  4740,    -1,    -1,    -1,  4651,    91,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1082,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   660,    -1,    -1,  4765,
      -1,  4767,    -1,    -1,    -1,    -1,   118,    -1,  4774,    -1,
      -1,    -1,  4778,    -1,    -1,    -1,    -1,  4783,    -1,    -1,
     132,    -1,  4788,   135,    -1,  1119,  1120,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1128,  1129,  1130,  1131,  1132,  1133,
    1134,  1135,  1136,  1137,  1138,  1139,    -1,    -1,    -1,    -1,
      -1,    -1,   164,    -1,  1148,  1149,    -1,  1151,  1152,    -1,
      -1,    -1,  1156,    -1,    -1,  1159,  1160,  1161,  1162,    -1,
    1164,  1165,  1166,    -1,    -1,    -1,    -1,    -1,    -1,  1173,
    1174,    -1,  1176,  1177,  1178,  1179,  1180,    -1,    -1,  1183,
    1184,  1185,  1186,  1187,  1188,  1189,  1190,  1191,  1192,  1193,
      -1,  1195,    -1,    -1,  1198,  1199,    -1,    -1,    -1,  1203,
      -1,    -1,    -1,  1207,  1208,  1209,    -1,    -1,    -1,   231,
      -1,   233,    -1,    -1,    -1,    -1,    -1,   239,  1222,  1223,
    1224,    -1,    -1,    -1,    -1,   247,    -1,  1231,    -1,    -1,
      -1,    -1,    -1,    -1,  1238,  1239,  1240,    -1,  1242,    -1,
     262,    -1,    -1,    -1,    -1,  1249,  1250,  1251,    -1,  1253,
    1254,  1255,  1256,  1257,   276,  1259,  1260,  1261,  1262,  1263,
    1264,  1265,  1266,    -1,    -1,    -1,  1270,  1271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   321,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,
      -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    37,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1358,    -1,    -1,    61,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,
      74,    -1,   394,    -1,   396,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   404,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,
     104,    -1,   694,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   116,    -1,    -1,    -1,    -1,  1421,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1431,    -1,    -1,
      -1,    -1,    -1,   137,   138,    -1,    -1,    -1,    -1,   731,
      -1,    -1,    -1,  1447,    -1,    -1,    -1,  1451,    -1,    -1,
      -1,    -1,    -1,    -1,   476,    -1,   748,    -1,    -1,   163,
     164,    -1,    -1,    -1,    -1,   169,    -1,    -1,   172,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,    -1,
      -1,    -1,  1506,   795,    -1,    -1,   210,    -1,   212,    -1,
     532,   533,   534,    -1,    -1,    -1,    -1,   539,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   555,   238,   239,   240,   559,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   578,   261,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,    -1,    -1,   283,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     892,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   313,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   654,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1648,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   407,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   418,   419,    -1,    -1,   422,   423,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   443,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1761,  1762,  1763,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1776,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   491,    -1,    -1,
    1082,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1802,    -1,
     504,    -1,    -1,    -1,  1808,    -1,    -1,  1811,    -1,  1813,
      -1,    -1,    -1,    -1,    -1,  1819,    -1,  1821,  1822,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1119,  1120,    -1,
      -1,   535,    -1,    -1,    -1,   539,  1128,  1129,    -1,    -1,
    1132,  1133,  1134,  1135,  1136,  1137,  1138,  1139,    -1,    -1,
      -1,    -1,    -1,   557,   558,    -1,  1148,  1149,    -1,  1151,
    1152,    -1,    -1,    -1,    -1,    -1,    -1,  1159,  1160,  1161,
    1162,    -1,    -1,  1165,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1173,  1174,    -1,  1176,  1177,    -1,    -1,    -1,    -1,
      -1,  1183,  1184,  1185,    -1,    -1,  1188,  1189,  1190,  1191,
    1192,  1193,   606,  1195,    -1,    -1,  1198,  1199,    -1,    -1,
    1914,  1203,    -1,   617,    -1,  1207,  1208,  1209,    -1,    -1,
      -1,   625,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1222,  1223,  1224,    -1,    -1,    -1,    -1,    -1,    -1,  1231,
      -1,    -1,    -1,    -1,    -1,    -1,  1238,  1239,  1240,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1967,    -1,    14,    -1,    16,    -1,    -1,
      -1,    -1,  1976,    -1,    -1,    -1,    -1,    -1,    -1,  1271,
      -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      59,    -1,    -1,    -1,    -1,    64,    65,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1358,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,   150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2115,    -1,   162,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,  1421,
      -1,    -1,    -1,  2137,    -1,    -1,    -1,    -1,    -1,  1431,
      -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1447,    -1,    -1,    -1,  1451,
     209,    -1,   211,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,   220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   246,    -1,   248,
    2204,    -1,    -1,    -1,  2208,    -1,    -1,    -1,    -1,  2213,
    2214,    -1,    -1,    -1,  1506,   264,    -1,    -1,  2222,    -1,
    2224,    -1,  2226,  2227,  2228,  2229,    -1,    -1,  2232,    -1,
      -1,    -1,    -1,   282,    -1,    -1,    -1,   286,  2242,    -1,
    2244,  2245,    -1,  2247,  2248,  2249,  2250,    -1,  2252,    -1,
      -1,  2255,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2264,    -1,    -1,    -1,    -1,    -1,    -1,  2271,    -1,  2273,
      -1,  2275,  2276,    -1,  2278,  2279,    -1,    -1,    -1,  2283,
    2284,  2285,    -1,    -1,    -1,  2289,  2290,  2291,    -1,  2293,
      -1,  2295,    -1,  2297,    -1,  2299,    -1,  2301,    -1,    -1,
      -1,    -1,  2306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2325,    -1,    -1,    -1,    -1,    -1,    -1,  2332,    -1,
      -1,  2335,    -1,   382,    -1,    -1,    -1,  2341,    -1,    -1,
    2344,    -1,    -1,    -1,  2348,    -1,    -1,    -1,    -1,    -1,
     399,    27,   401,    29,    -1,    -1,  1648,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   414,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    62,    -1,    64,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,   447,    -1,
      -1,   450,    -1,   452,    -1,    -1,   455,    83,  2412,   458,
     459,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,
     469,    -1,    -1,   472,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   480,    -1,    -1,    -1,    -1,    -1,   486,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   494,    -1,    -1,    -1,    -1,
     499,   500,   501,    -1,    -1,    -1,   132,    -1,    -1,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1761,
    1762,  1763,    -1,    -1,    -1,    -1,    -1,    -1,  2482,    -1,
      -1,    -1,   531,    -1,    -1,    -1,    -1,    -1,   164,   538,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1802,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1811,
      -1,  1813,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2534,    -1,    -1,    -1,   583,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2547,    -1,    -1,   595,    -1,    -1,    -1,
     599,    -1,    -1,   602,    -1,   231,    -1,   233,    -1,   608,
      -1,  2565,  2566,   239,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   247,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   262,    -1,    -1,   638,
      -1,    -1,    -1,    -1,    -1,   644,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   654,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1914,  2627,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    14,    -1,    16,   321,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   339,    -1,    37,    -1,    -1,    -1,    -1,
      -1,  2675,  2676,    -1,    -1,  1967,    -1,    -1,    -1,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,
      -1,    -1,    64,    65,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2711,    -1,    -1,
      -1,  2715,    -1,    85,    -1,    -1,    -1,    -1,   394,    -1,
     396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,    -1,
      -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,  2742,  2743,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   128,    -1,  2762,    -1,
      -1,    -1,    -1,    -1,   136,   137,   138,  2771,    -1,  2773,
      -1,  2775,    -1,    -1,    -1,    -1,    -1,   149,   150,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2802,    -1,
     476,    -1,    -1,  2807,    -1,   177,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2838,    -1,    -1,   209,    -1,   211,
      -1,    -1,    -1,    -1,   216,  2137,    -1,    -1,   220,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   532,   533,   534,    -1,
      -1,    -1,    -1,   539,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   246,    -1,   248,    -1,    -1,   555,
      -1,    -1,    -1,   559,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   578,    -1,    -1,    -1,    -1,    -1,  2912,    -1,
     282,    -1,  2204,    -1,   286,    -1,  2208,    -1,    -1,    -1,
     596,  2213,  2214,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2222,    -1,  2224,    -1,  2226,    -1,  2228,  2229,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2242,    -1,  2244,    -1,    -1,  2247,  2248,  2249,  2250,    -1,
    2252,    -1,  2966,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2264,    -1,    -1,    -1,    -1,  2981,    -1,  2271,
      -1,  2273,    -1,  2275,  2276,    -1,  2278,    -1,    -1,    -1,
      -1,  2283,  2284,  2285,    -1,    -1,    -1,  2289,  2290,  2291,
      -1,  2293,    -1,  2295,    -1,  2297,    -1,  2299,    -1,  2301,
     382,    -1,    -1,    -1,  2306,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   399,    -1,   401,
      -1,    -1,    -1,  2325,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   414,    -1,    -1,    -1,    -1,    -1,    -1,  2341,
      -1,    -1,  2344,   425,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    35,    36,    -1,    -1,    -1,    -1,    41,  3072,    43,
      -1,    45,    46,    -1,    -1,   447,    -1,    -1,   450,    -1,
     452,  3085,  3086,   455,    -1,    -1,   458,   459,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   469,    -1,    -1,
     472,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   480,    -1,
      -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   494,    -1,    -1,    -1,    -1,   499,   500,   501,
    3134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,  3157,    -1,    -1,   130,    -1,    -1,   531,
      -1,    -1,    -1,    -1,    -1,    -1,   538,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   148,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3189,  3190,    -1,  3192,    -1,
    2482,   165,    -1,    -1,    -1,    -1,    -1,  3201,    -1,    -1,
      -1,    -1,  3206,    -1,    -1,  3209,    -1,  3211,  3212,    -1,
      -1,   583,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,
      -1,    -1,    -1,   595,    -1,    -1,    -1,   599,    -1,    -1,
     602,    -1,   206,   207,    -1,    -1,   608,    -1,    -1,    -1,
    3244,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,    -1,
      -1,  3275,   644,    -1,    -1,    -1,    -1,   251,    -1,    -1,
      -1,    -1,   654,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3299,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     6,    -1,    -1,   280,    -1,    -1,    12,
      -1,    14,    -1,    -1,    -1,   289,   290,    -1,   292,    -1,
      -1,    -1,    -1,    -1,    27,    -1,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3356,   327,   328,   329,    59,    -1,    -1,    -1,
      -1,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   346,   347,   348,    -1,    -1,    -1,    -1,   353,
      83,  3385,   356,    -1,    -1,    -1,    -1,    -1,    91,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,   373,
     374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,  2711,
      -1,    -1,    -1,  2715,    -1,    -1,    -1,    -1,    -1,   132,
      -1,    -1,   135,    -1,    -1,   409,   410,    -1,    -1,    -1,
     143,    -1,    -1,    -1,    -1,    -1,    -1,   150,    -1,    -1,
    2742,  2743,    -1,    -1,    -1,   158,    -1,    -1,    -1,    -1,
     434,   164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2762,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2771,
      -1,  2773,    -1,  2775,    27,    -1,    29,    -1,    -1,    -1,
      -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   490,    -1,    -1,    -1,
     494,    64,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,
     233,    -1,    -1,    -1,   508,    -1,   239,    -1,    -1,    -1,
      83,    -1,    -1,    -1,   247,    -1,  2838,    -1,    91,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,   132,
      -1,   565,   135,    -1,   568,    -1,    -1,   571,   572,   573,
     574,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3621,   321,    -1,
    2912,   164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,    -1,
     343,   615,   616,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3657,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3665,    -1,    -1,    -1,    -1,    -1,    -1,   642,    -1,
      -1,    -1,    -1,    -1,  2966,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3686,    -1,   387,    -1,    -1,    -1,   231,    -1,
     233,   394,    -1,   396,    -1,    -1,   239,    -1,    -1,    -1,
      -1,   404,    -1,    -1,   247,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   450,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3768,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   476,    -1,    -1,    -1,    -1,   321,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3085,  3086,    -1,   339,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3820,    -1,    -1,    -1,
    3824,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   532,
     533,   534,    -1,    -1,    -1,    -1,   539,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,   555,   396,    -1,  3859,   559,    -1,    -1,    -1,
      -1,   404,    -1,    -1,    -1,  3157,    -1,    -1,    -1,  3873,
      -1,    -1,    -1,    -1,    -1,   578,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   596,    -1,    -1,    -1,  3189,  3190,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3910,    -1,    -1,  3201,
      -1,    -1,    -1,    -1,  3206,    -1,    -1,  3209,    -1,  3211,
    3212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   476,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3979,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3275,    -1,    -1,    -1,    -1,    -1,   532,
     533,   534,    -1,  3997,    -1,    -1,   539,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3299,    -1,    -1,
      -1,    -1,   555,    -1,    -1,    -1,   559,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   578,    -1,    -1,    -1,    -1,
      -1,  4045,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4053,
      -1,    -1,    -1,   596,    -1,  4059,    -1,  4061,    -1,    -1,
      -1,    -1,    -1,    -1,  3356,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4150,    -1,    -1,    -1,
      -1,    -1,  4156,  4157,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4189,    -1,    -1,    -1,  4193,
    4194,    -1,    -1,    -1,    -1,    -1,  4200,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4238,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4299,    -1,  4301,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4311,    -1,  4313,
    4314,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4332,  3621,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4341,    -1,    -1,
      -1,  4345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3657,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3665,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4397,  3686,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4420,    -1,  4422,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4437,  4438,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4455,    -1,    -1,    -1,    -1,    -1,    -1,  4462,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4504,    -1,    -1,    -1,    -1,    -1,  4510,    -1,  4512,  4513,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4527,  4528,    -1,    -1,    -1,  3820,    -1,
      -1,    -1,  3824,    -1,    -1,    -1,  4540,  4541,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4563,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3859,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3873,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4609,    -1,    -1,    -1,    -1,
      -1,    -1,  4616,    -1,    -1,  4619,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4656,    -1,    -1,    -1,    -1,    -1,    -1,  4663,
      -1,  4665,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4677,    -1,    -1,  4680,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4690,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4698,    -1,  4700,    -1,  4702,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4716,    -1,    -1,    -1,  4720,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4735,  4736,    -1,    -1,    -1,    -1,  4741,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4751,  4752,    -1,
      -1,    -1,  4756,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4053,    -1,    -1,    -1,    -1,    -1,  4059,    -1,  4061,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4791,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4150,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4200,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4238,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4299,    -1,  4301,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4311,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4420,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4438,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4462,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4527,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4616,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4656,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,  4680,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    39,    40,    41,
      42,    -1,    44,    45,    46,    47,    48,    -1,    50,    51,
      -1,    -1,    54,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,  4741,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
      -1,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,  4791,
     132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,    -1,
     212,    -1,   214,    -1,   216,   217,   218,    -1,   220,   221,
     222,    -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,
     232,   233,   234,    -1,   236,   237,   238,    -1,   240,    -1,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,   269,   270,    -1,
     272,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,
      -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,   291,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,    -1,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,    -1,   355,   356,   357,    -1,    -1,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,   397,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,   530,   531,
      -1,    -1,    -1,   535,   536,   537,   538,   539,    -1,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,   554,   555,    -1,   557,    -1,   559,   560,   561,
     562,    -1,   564,   565,   566,    -1,   568,   569,   570,   571,
      -1,    -1,    -1,    -1,   576,   577,   578,   579,    -1,   581,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,
      -1,   603,    -1,   605,   606,   607,    -1,    -1,   610,   611,
     612,   613,   614,    -1,    -1,   617,   618,    -1,   620,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,    -1,
     642,    -1,    -1,    -1,    -1,   647,   648,    -1,    -1,    -1,
      -1,   653,   654,    -1,    -1,   657,   658,    -1,    -1,   661,
     662,     5,    -1,     7,     8,     9,    10,    11,    12,    13,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    36,    37,    38,    39,    40,    41,    42,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    55,    56,    57,    58,    -1,    60,    61,    62,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,    -1,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,    -1,   212,    -1,
     214,    -1,   216,   217,   218,    -1,   220,   221,   222,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
     234,    -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,   272,   273,
     274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,   291,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,   355,   356,   357,    -1,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,   397,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,
      -1,   535,   536,   537,   538,   539,    -1,   541,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
     554,   555,    -1,   557,    -1,   559,   560,   561,   562,    -1,
     564,   565,   566,    -1,   568,   569,   570,   571,    -1,    -1,
      -1,    -1,    -1,   577,   578,   579,    -1,   581,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,    -1,
     594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,
      -1,   605,   606,   607,    -1,    -1,   610,   611,   612,   613,
     614,    -1,    -1,   617,   618,    -1,   620,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,
      -1,    -1,    -1,   647,   648,    -1,    -1,    -1,    -1,   653,
     654,    -1,    -1,   657,   658,    -1,    -1,   661,   662,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      36,    37,    38,    39,    40,    41,    42,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,    -1,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,   200,    -1,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,    -1,   212,    -1,   214,    -1,
     216,   217,   218,    -1,   220,   221,   222,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,   234,    -1,
     236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,   272,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,   291,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,    -1,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,   355,
     356,   357,    -1,    -1,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,   397,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,   530,   531,    -1,    -1,    -1,   535,
     536,   537,   538,   539,    -1,   541,   542,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
      -1,   557,    -1,   559,   560,   561,   562,    -1,   564,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,   581,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,   607,    -1,    -1,   610,   611,   612,   613,   614,    -1,
      -1,   617,   618,    -1,   620,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,
      -1,   647,   648,    -1,    -1,    -1,    -1,   653,   654,    -1,
      -1,   657,   658,    -1,    -1,   661,   662,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    36,    37,
      38,    39,    40,    41,    42,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
      58,    -1,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,    -1,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,   199,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,    -1,   212,    -1,   214,    -1,   216,   217,
     218,    -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,
      -1,   229,   230,   231,   232,   233,   234,    -1,   236,   237,
     238,    -1,   240,    -1,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,
      -1,    -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,
      -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,
     288,    -1,    -1,   291,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
      -1,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,    -1,   355,   356,   357,
      -1,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,   397,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,   530,   531,    -1,    -1,    -1,   535,   536,   537,
     538,   539,    -1,   541,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,   554,   555,    -1,   557,
      -1,   559,   560,   561,   562,    -1,   564,   565,   566,    -1,
     568,   569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,
     578,   579,    -1,   581,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,    -1,   594,   595,    -1,    -1,
     598,    -1,    -1,   601,    -1,   603,    -1,   605,   606,   607,
      -1,    -1,   610,   611,   612,   613,   614,    -1,    -1,   617,
     618,    -1,   620,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,    -1,   642,    -1,    -1,    -1,    -1,   647,
     648,    -1,    -1,    -1,    -1,   653,   654,    -1,    -1,   657,
     658,    -1,    -1,   661,   662,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    36,    37,    38,    39,
      40,    41,    42,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    55,    56,    57,    58,    -1,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,    -1,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,   214,    -1,   216,   217,   218,    -1,
     220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,   291,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,    -1,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,    -1,   355,   356,   357,    -1,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,   397,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
     530,   531,    -1,    -1,    -1,   535,   536,   537,   538,   539,
      -1,   541,   542,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,   553,   554,   555,    -1,   557,    -1,   559,
     560,   561,   562,    -1,   564,   565,   566,    -1,   568,   569,
     570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,
      -1,   581,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,
      -1,   601,    -1,   603,    -1,   605,   606,   607,    -1,    -1,
     610,   611,   612,   613,   614,    -1,    -1,   617,   618,    -1,
     620,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,    -1,   642,    -1,    -1,    -1,    -1,   647,   648,    -1,
      -1,    -1,    -1,   653,   654,    -1,    -1,   657,   658,    -1,
      -1,   661,   662,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    39,    40,    41,
      42,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
      -1,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,    -1,
     212,    -1,   214,    -1,   216,   217,   218,    -1,   220,   221,
     222,    -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,
     232,   233,   234,    -1,   236,   237,   238,    -1,   240,    -1,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,
     272,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,
      -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,   291,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,    -1,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,    -1,   355,   356,   357,    -1,    -1,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,   397,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,   530,   531,
      -1,    -1,    -1,   535,   536,   537,   538,   539,    -1,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,   554,   555,    -1,   557,    -1,   559,   560,   561,
     562,    -1,   564,   565,   566,    -1,   568,   569,   570,   571,
      -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,   581,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,
      -1,   603,    -1,   605,   606,   607,    -1,    -1,   610,   611,
     612,   613,   614,    -1,    -1,   617,   618,    -1,   620,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,    -1,
     642,    -1,    -1,    -1,    -1,   647,   648,    -1,    -1,    -1,
      -1,   653,   654,    -1,    -1,   657,   658,    -1,    -1,   661,
     662,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    36,    37,    38,    39,    40,    41,    42,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    55,    56,    57,    58,    -1,    60,    61,    62,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,    -1,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,    -1,   212,    -1,
     214,    -1,   216,   217,   218,    -1,   220,   221,   222,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
     234,    -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,   272,   273,
     274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,   291,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,   355,   356,   357,    -1,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,   397,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,
      -1,   535,   536,   537,   538,   539,    -1,   541,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
     554,   555,    -1,   557,    -1,   559,   560,   561,   562,    -1,
     564,   565,   566,    -1,   568,   569,   570,   571,    -1,    -1,
      -1,    -1,    -1,   577,   578,   579,    -1,   581,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,    -1,
     594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,
      -1,   605,   606,   607,    -1,    -1,   610,   611,   612,   613,
     614,    -1,    -1,   617,   618,    -1,   620,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,
      -1,    -1,    -1,   647,   648,    -1,    -1,    -1,    -1,   653,
     654,    -1,    -1,   657,   658,    -1,    -1,   661,   662,     5,
      -1,     7,     8,     9,    10,    11,    12,    13,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      36,    37,    38,    39,    40,    41,    42,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,    -1,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,    -1,   212,    -1,   214,    -1,
     216,   217,   218,    -1,   220,   221,   222,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,   234,    -1,
     236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,   272,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,   291,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,    -1,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,   355,
     356,   357,    -1,    -1,   360,   361,   362,   363,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,   397,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,   530,   531,    -1,    -1,    -1,   535,
     536,   537,   538,   539,    -1,   541,   542,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
      -1,   557,    -1,   559,   560,   561,   562,    -1,   564,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,   581,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,   607,    -1,    -1,   610,   611,   612,   613,   614,    -1,
      -1,   617,   618,    -1,   620,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,
      -1,   647,   648,    -1,    -1,    -1,    -1,   653,   654,    -1,
      -1,   657,   658,    -1,    -1,   661,   662,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    36,    37,
      38,    39,    40,    41,    42,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
      58,    -1,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,    -1,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,    -1,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,    -1,   212,    -1,   214,    -1,   216,   217,
     218,    -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,
      -1,   229,   230,   231,   232,   233,   234,    -1,   236,   237,
     238,    -1,   240,    -1,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,
      -1,    -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,
      -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,
     288,    -1,    -1,   291,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
      -1,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,    -1,   355,   356,   357,
      -1,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,   397,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,   530,   531,    -1,    -1,    -1,   535,   536,   537,
     538,   539,    -1,   541,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,   554,   555,    -1,   557,
      -1,   559,   560,   561,   562,    -1,   564,   565,   566,    -1,
     568,   569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,
     578,   579,    -1,   581,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,    -1,   594,   595,    -1,    -1,
     598,    -1,    -1,   601,    -1,   603,    -1,   605,   606,   607,
      -1,    -1,   610,   611,   612,   613,   614,    -1,    -1,   617,
     618,    -1,   620,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,    -1,   642,    -1,    -1,    -1,    -1,   647,
     648,    -1,    -1,    -1,    -1,   653,   654,    -1,    -1,   657,
     658,    -1,    -1,   661,   662,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    36,    37,    38,    39,
      40,    41,    42,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    55,    56,    57,    58,    -1,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,    -1,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,   214,    -1,   216,   217,   218,    -1,
     220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,   291,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,    -1,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,    -1,   355,   356,   357,    -1,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,   397,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
     530,   531,    -1,    -1,    -1,   535,   536,   537,   538,   539,
      -1,   541,   542,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,   553,   554,   555,    -1,   557,    -1,   559,
     560,   561,   562,    -1,   564,   565,   566,    -1,   568,   569,
     570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,
      -1,   581,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,
      -1,   601,    -1,   603,    -1,   605,   606,   607,    -1,    -1,
     610,   611,   612,   613,   614,    -1,    -1,   617,   618,    -1,
     620,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,    -1,   642,    -1,    -1,    -1,    -1,   647,   648,    -1,
      -1,    -1,    -1,   653,   654,    -1,    -1,   657,   658,    -1,
      -1,   661,   662,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    39,    40,    41,
      42,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
      -1,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,    -1,
     212,    -1,   214,    -1,   216,   217,   218,    -1,   220,   221,
     222,    -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,
     232,   233,   234,    -1,   236,   237,   238,    -1,   240,    -1,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,
     272,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,
      -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,   291,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,    -1,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,    -1,   355,   356,   357,    -1,    -1,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,   397,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,   530,   531,
      -1,    -1,    -1,   535,   536,   537,   538,   539,    -1,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,   554,   555,    -1,   557,    -1,   559,   560,   561,
     562,    -1,   564,   565,   566,    -1,   568,   569,   570,   571,
      -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,   581,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,
      -1,   603,    -1,   605,   606,   607,    -1,    -1,   610,   611,
     612,   613,   614,    -1,    -1,   617,   618,    -1,   620,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,    -1,
     642,    -1,    -1,    -1,    -1,   647,   648,    -1,    -1,    -1,
      -1,   653,   654,    -1,    -1,   657,   658,    -1,    -1,   661,
     662,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    36,    37,    38,    39,    40,    41,    42,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    55,    56,    57,    58,    -1,    60,    61,    62,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,    -1,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,    -1,   212,    -1,
     214,    -1,   216,   217,   218,    -1,   220,   221,   222,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
     234,    -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,   272,   273,
     274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,   291,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,   355,   356,   357,    -1,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,   397,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,
      -1,   535,   536,   537,   538,   539,    -1,   541,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
     554,   555,    -1,   557,    -1,   559,   560,   561,   562,    -1,
     564,   565,   566,    -1,   568,   569,   570,   571,    -1,    -1,
      -1,    -1,    -1,   577,   578,   579,    -1,   581,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,    -1,
     594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,
      -1,   605,   606,   607,    -1,    -1,   610,   611,   612,   613,
     614,    -1,    -1,   617,   618,    -1,   620,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,
      -1,    -1,    -1,   647,   648,    -1,    -1,    -1,    -1,   653,
     654,    -1,    -1,   657,   658,    -1,    -1,   661,   662,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      36,    37,    38,    39,    40,    41,    42,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,    -1,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,    -1,   212,    -1,   214,    -1,
     216,   217,   218,    -1,   220,   221,   222,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,   234,    -1,
     236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,   272,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,   291,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,    -1,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,   355,
     356,   357,    -1,    -1,   360,   361,   362,   363,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,   397,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,   530,   531,    -1,    -1,    -1,   535,
     536,   537,   538,   539,    -1,   541,   542,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
      -1,   557,    -1,   559,   560,   561,   562,    -1,   564,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,   581,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,   607,    -1,    -1,   610,   611,   612,   613,   614,    -1,
      -1,   617,   618,    -1,   620,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,
      -1,   647,   648,    -1,    -1,    -1,    -1,   653,   654,    -1,
      -1,   657,   658,    -1,    -1,   661,   662,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    36,    37,
      38,    39,    40,    41,    42,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
      58,    -1,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,    -1,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,    -1,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,    -1,   212,    -1,   214,    -1,   216,   217,
     218,    -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,
      -1,   229,   230,   231,   232,   233,   234,    -1,   236,   237,
     238,    -1,   240,    -1,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,
      -1,    -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,
      -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,
     288,    -1,    -1,   291,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
      -1,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,    -1,   355,   356,   357,
      -1,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
     368,    -1,   370,   371,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,   397,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,   530,   531,    -1,    -1,    -1,   535,   536,   537,
     538,   539,    -1,   541,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,   554,   555,    -1,   557,
      -1,   559,   560,   561,   562,    -1,   564,   565,   566,    -1,
     568,   569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,
     578,   579,    -1,   581,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,    -1,   594,   595,    -1,    -1,
     598,    -1,    -1,   601,    -1,   603,    -1,   605,   606,   607,
      -1,    -1,   610,   611,   612,   613,   614,    -1,    -1,   617,
     618,    -1,   620,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,    -1,   642,    -1,    -1,    -1,    -1,   647,
     648,    -1,    -1,    -1,    -1,   653,   654,    -1,    -1,   657,
     658,    -1,    -1,   661,   662,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    36,    37,    38,    39,
      40,    41,    42,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    55,    56,    57,    58,    -1,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,    -1,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,   214,    -1,   216,   217,   218,    -1,
     220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,   291,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,    -1,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,    -1,   355,   356,   357,    -1,    -1,
     360,   361,   362,   363,   364,    -1,   366,   367,   368,    -1,
     370,   371,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,   397,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
     530,   531,    -1,    -1,    -1,   535,   536,   537,   538,   539,
      -1,   541,   542,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,   553,   554,   555,    -1,   557,    -1,   559,
     560,   561,   562,    -1,   564,   565,   566,    -1,   568,   569,
     570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,
      -1,   581,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,
      -1,   601,    -1,   603,    -1,   605,   606,   607,    -1,    -1,
     610,   611,   612,   613,   614,    -1,    -1,   617,   618,    -1,
     620,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,    -1,   642,    -1,    -1,    -1,    -1,   647,   648,    -1,
      -1,    -1,    -1,   653,   654,    -1,    -1,   657,   658,    -1,
      -1,   661,   662,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    39,    40,    41,
      42,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
      -1,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,    -1,
     212,    -1,   214,    -1,   216,   217,   218,    -1,   220,   221,
     222,    -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,
     232,   233,   234,    -1,   236,   237,   238,    -1,   240,    -1,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,
     272,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,
      -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,   291,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,    -1,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,    -1,   355,   356,   357,    -1,    -1,   360,   361,
     362,   363,   364,    -1,   366,   367,   368,    -1,   370,   371,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,   397,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,   530,   531,
      -1,    -1,    -1,   535,   536,   537,   538,   539,    -1,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,   554,   555,    -1,   557,    -1,   559,   560,   561,
     562,    -1,   564,   565,   566,    -1,   568,   569,   570,   571,
      -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,   581,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,
      -1,   603,    -1,   605,   606,   607,    -1,    -1,   610,   611,
     612,   613,   614,    -1,    -1,   617,   618,    -1,   620,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,    -1,
     642,    -1,    -1,    -1,    -1,   647,   648,    -1,    -1,    -1,
      -1,   653,   654,    -1,    -1,   657,   658,    -1,    -1,   661,
     662,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    38,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,   183,
      -1,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,   218,    -1,   220,   221,   222,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
      -1,    -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,
      -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,
     274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,   291,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,    -1,   319,   320,   321,   322,    -1,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,   355,   356,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,   370,   371,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,
      -1,   535,    -1,    -1,   538,   539,    -1,   541,   542,   543,
     544,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
     554,   555,    -1,   557,    -1,   559,   560,   561,   562,    -1,
     564,   565,   566,    -1,   568,   569,   570,   571,    -1,    -1,
      -1,    -1,    -1,   577,   578,   579,    -1,    -1,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,    -1,
     594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,
      -1,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,   661,   662,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
     183,    -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,
      -1,   194,    -1,    -1,    -1,   198,    -1,   200,   201,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,   232,
     233,    -1,    -1,   236,   237,   238,   239,   240,    -1,   242,
      -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,
     263,    -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,
     273,   274,    -1,   276,    -1,    -1,    -1,   280,   281,    -1,
     283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,    -1,   319,   320,   321,   322,
      -1,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,    -1,   356,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,   486,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,
      -1,    -1,   535,    -1,    -1,   538,   539,    -1,   541,   542,
     543,   544,   545,   546,    -1,    -1,   549,   550,   551,   552,
      -1,   554,   555,    -1,   557,    -1,   559,   560,   561,   562,
      -1,    -1,   565,   566,    -1,   568,   569,   570,   571,    -1,
      -1,    -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,
     583,   584,   585,   586,    -1,   588,   589,    -1,   591,   592,
      -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,
     603,    -1,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,    -1,   642,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   662,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,   183,
      -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,
     194,    -1,    -1,    -1,   198,    -1,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
      -1,    -1,   236,   237,   238,   239,   240,    -1,   242,    -1,
      -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,   263,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,
     274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,    -1,   319,   320,   321,   322,    -1,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,    -1,   356,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,   515,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,
      -1,   535,    -1,    -1,   538,   539,    -1,   541,   542,   543,
     544,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
     554,   555,    -1,   557,    -1,   559,   560,   561,   562,    -1,
      -1,   565,   566,    -1,   568,   569,   570,   571,    -1,    -1,
      -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,
     584,   585,   586,    -1,   588,   589,    -1,   591,   592,    -1,
     594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,
      -1,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,   662,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,    -1,   319,   320,   321,   322,    -1,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
      -1,   356,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,   486,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,    -1,
     535,    -1,    -1,   538,   539,    -1,   541,   542,   543,   544,
     545,   546,    -1,    -1,   549,   550,   551,   552,    -1,   554,
     555,    -1,   557,    -1,   559,   560,   561,   562,    -1,    -1,
     565,   566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,
      -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,
     585,   586,    -1,   588,   589,    -1,   591,   592,    -1,   594,
     595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,
     605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
     655,    -1,    -1,    19,    -1,    -1,    22,   662,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,
      -1,    57,    58,    -1,    60,    61,    -1,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
     236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,    -1,   319,   320,   321,   322,    -1,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,    -1,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,   530,   531,    -1,    -1,    -1,   535,
      -1,    -1,   538,   539,    -1,   541,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,   551,   552,    -1,   554,   555,
      -1,   557,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,   655,
      15,    -1,    -1,    -1,    19,   661,   662,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,    -1,   319,   320,   321,   322,    -1,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
      -1,   356,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,    -1,
     535,    -1,    -1,   538,   539,    -1,   541,   542,   543,   544,
     545,   546,    -1,    -1,   549,   550,   551,   552,    -1,   554,
     555,    -1,   557,    -1,   559,   560,   561,   562,    -1,    -1,
     565,   566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,
      -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,
     585,   586,    -1,   588,   589,    -1,   591,   592,    -1,   594,
     595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,
     605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,   654,
      -1,    15,    -1,    -1,    -1,    19,    -1,   662,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,   183,
      -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,
     194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
      -1,    -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,
      -1,    -1,    -1,   247,   248,    -1,   250,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,
     274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,    -1,   319,   320,   321,   322,    -1,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,    -1,   356,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,
      -1,   535,    -1,    -1,   538,   539,    -1,   541,   542,   543,
     544,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
     554,   555,    -1,   557,    -1,   559,   560,   561,   562,    -1,
      -1,   565,   566,    -1,   568,   569,   570,   571,    -1,    -1,
      -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,
     584,   585,   586,    -1,   588,   589,    -1,   591,   592,    -1,
     594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,
      -1,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,   662,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,    -1,   319,   320,   321,   322,    -1,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
      -1,   356,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,    -1,
     535,    -1,    -1,   538,   539,    -1,   541,   542,   543,   544,
     545,   546,    -1,    -1,   549,   550,   551,   552,    -1,   554,
     555,    -1,   557,    -1,   559,   560,   561,   562,    -1,    -1,
     565,   566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,
      -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,
     585,   586,    -1,   588,   589,    -1,   591,   592,    -1,   594,
     595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,
     605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,
      -1,    -1,    -1,    -1,   649,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,   662,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,    -1,   319,
     320,   321,   322,    -1,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,    -1,    -1,   356,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,
      -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
     530,   531,    -1,    -1,    -1,   535,    -1,    -1,   538,   539,
      -1,   541,   542,   543,   544,   545,   546,    -1,    -1,   549,
     550,   551,   552,    -1,   554,   555,    -1,   557,    -1,   559,
     560,   561,   562,    -1,    -1,   565,   566,    -1,   568,   569,
     570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,
      -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,   589,
      -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,
      -1,   601,    -1,   603,    -1,   605,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,    -1,   642,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,   654,    -1,    15,    -1,    -1,    -1,
      19,    -1,   662,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
      -1,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,   236,   237,   238,
      -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,
     319,   320,   321,   322,    -1,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,   530,   531,    -1,    -1,    -1,   535,    -1,    -1,   538,
     539,    -1,   541,   542,   543,   544,   545,   546,    -1,    -1,
     549,   550,   551,   552,    -1,   554,   555,    -1,   557,    -1,
     559,   560,   561,   562,    -1,    -1,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,    -1,   642,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,   661,   662,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    -1,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,   187,
      -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,
     198,    -1,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,   229,   230,   231,   232,   233,    -1,    -1,   236,   237,
     238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,
      -1,    -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,
      -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
      -1,   319,   320,   321,   322,    -1,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,    -1,   341,    -1,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,    -1,    -1,   356,   357,
      -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,
     368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,    -1,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,   530,   531,    -1,    -1,    -1,   535,    -1,    -1,
     538,   539,    -1,   541,   542,   543,   544,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,   554,   555,    -1,   557,
      -1,   559,   560,   561,   562,    -1,    -1,   565,   566,    -1,
     568,   569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,
     578,   579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,
     588,   589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,
     598,    -1,    -1,   601,    -1,   603,    -1,   605,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,    -1,    -1,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,    -1,   642,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   662,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
      -1,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,   236,   237,   238,
      -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,
     319,   320,   321,   322,    -1,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,   530,   531,    -1,    -1,    -1,   535,    -1,    -1,   538,
     539,    -1,   541,   542,   543,   544,   545,   546,    -1,    -1,
     549,   550,   551,   552,    -1,   554,   555,    -1,   557,    -1,
     559,   560,   561,   562,    -1,    -1,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,    -1,   642,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   662,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,    -1,   319,
     320,   321,   322,    -1,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,    -1,    -1,   356,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,
      -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
     530,   531,    -1,    -1,    -1,   535,    -1,    -1,   538,   539,
      -1,   541,   542,   543,   544,   545,   546,    -1,    -1,   549,
     550,   551,   552,    -1,   554,   555,    -1,   557,    -1,   559,
     560,   561,   562,    -1,    -1,   565,   566,    -1,   568,   569,
     570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,
      -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,   589,
      -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,
      -1,   601,    -1,   603,    -1,   605,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,    -1,   642,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   662,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,   236,   237,   238,    -1,   240,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,    -1,   319,   320,
     321,   322,    -1,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,   530,
     531,    -1,    -1,    -1,   535,    -1,    -1,   538,   539,    -1,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,    -1,   557,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
      -1,   642,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,   662,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
     182,   183,    -1,    -1,   186,   187,    -1,   189,   190,   191,
      -1,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,
     232,   233,    -1,    -1,   236,   237,   238,    -1,   240,    -1,
     242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,
      -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,
      -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,    -1,   319,   320,   321,
     322,    -1,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,    -1,   341,
      -1,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,    -1,    -1,   356,   357,    -1,    -1,   360,   361,
     362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,   530,   531,
      -1,    -1,    -1,   535,    -1,    -1,   538,   539,    -1,   541,
     542,   543,   544,   545,   546,    -1,    -1,   549,   550,   551,
     552,    -1,   554,   555,    -1,   557,    -1,   559,   560,   561,
     562,    -1,    -1,   565,   566,    -1,   568,   569,   570,   571,
      -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,    -1,
      -1,   583,   584,   585,   586,    -1,   588,   589,    -1,   591,
     592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,
      -1,   603,    -1,   605,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,    -1,
     642,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   661,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,   183,
      -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,
     194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
      -1,    -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,
      -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,
     274,   275,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,    -1,   319,   320,   321,   322,    -1,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,    -1,   356,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,
      -1,   535,    -1,    -1,   538,   539,    -1,   541,   542,   543,
     544,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
     554,   555,    -1,   557,    -1,   559,   560,   561,   562,    -1,
     564,   565,   566,    -1,   568,   569,   570,   571,    -1,    -1,
      -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,
     584,   585,   586,    -1,   588,   589,    -1,   591,   592,    -1,
     594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,
      -1,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   661,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,
      -1,    57,    58,    -1,    60,    61,    -1,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
     236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,   275,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,    -1,   319,   320,   321,   322,    -1,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,    -1,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,   530,   531,    -1,    -1,    -1,   535,
      -1,    -1,   538,   539,    -1,   541,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,   551,   552,    -1,   554,   555,
      -1,   557,    -1,   559,   560,   561,   562,    -1,   564,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,    -1,   642,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,   661,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,   187,
      -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,
     198,    -1,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,   229,   230,   231,   232,   233,    -1,    -1,   236,   237,
     238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,
      -1,    -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,
      -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
      -1,   319,   320,   321,   322,    -1,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,    -1,   341,    -1,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,    -1,    -1,   356,   357,
      -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,
     368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,    -1,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,   530,   531,    -1,    -1,    -1,   535,    -1,    -1,
     538,   539,    -1,   541,   542,   543,   544,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,   554,   555,    -1,   557,
      -1,   559,   560,   561,   562,    -1,    -1,   565,   566,    -1,
     568,   569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,
     578,   579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,
     588,   589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,
     598,    -1,    -1,   601,    -1,   603,    -1,   605,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,    -1,    -1,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,    -1,   642,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   661,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,    -1,   319,
     320,   321,   322,    -1,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,    -1,    -1,   356,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,
      -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
     530,   531,    -1,    -1,    -1,   535,    -1,    -1,   538,   539,
      -1,   541,   542,   543,   544,   545,   546,    -1,    -1,   549,
     550,   551,   552,    -1,   554,   555,    -1,   557,    -1,   559,
     560,   561,   562,    -1,   564,   565,   566,    -1,   568,   569,
     570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,
      -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,   589,
      -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,
      -1,   601,    -1,   603,    -1,   605,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,    -1,   642,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,   661,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      -1,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
     182,   183,    -1,    -1,   186,   187,    -1,   189,   190,   191,
      -1,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,
     232,   233,    -1,    -1,   236,   237,   238,    -1,   240,    -1,
     242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,
      -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,
      -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,    -1,   319,   320,   321,
     322,    -1,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,    -1,   341,
      -1,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,    -1,    -1,   356,   357,    -1,    -1,   360,   361,
     362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,   530,   531,
      -1,    -1,    -1,   535,    -1,    -1,   538,   539,    -1,   541,
     542,   543,   544,   545,   546,    -1,    -1,   549,   550,   551,
     552,    -1,   554,   555,    -1,   557,    -1,   559,   560,   561,
     562,    -1,    -1,   565,   566,    -1,   568,   569,   570,   571,
      -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,    -1,
      -1,   583,   584,   585,   586,    -1,   588,   589,    -1,   591,
     592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,
      -1,   603,    -1,   605,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,    -1,
     642,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   661,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,   183,
      -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,
     194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
      -1,    -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,
      -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,
     274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,    -1,   319,   320,   321,   322,    -1,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,    -1,   356,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,
      -1,   535,    -1,    -1,   538,   539,    -1,   541,   542,   543,
     544,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
     554,   555,    -1,   557,    -1,   559,   560,   561,   562,    -1,
      -1,   565,   566,    -1,   568,   569,   570,   571,    -1,    -1,
      -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,
     584,   585,   586,    -1,   588,   589,    -1,   591,   592,    -1,
     594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,
      -1,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    -1,   661,    24,    25,
      26,    27,    28,    29,    30,    -1,    -1,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    -1,    -1,    -1,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
      -1,    -1,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,    -1,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,   234,    -1,
     236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,
      -1,   247,    -1,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,    -1,
     266,   267,    -1,    -1,   270,   271,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,   293,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,    -1,   319,   320,   321,   322,    -1,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,    -1,   368,    -1,    -1,    -1,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,
      -1,    -1,    -1,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,    -1,    -1,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,    -1,    -1,   451,    -1,   453,   454,    -1,
     456,    -1,    -1,    -1,   460,    -1,    -1,   463,   464,    -1,
     466,   467,   468,    -1,    -1,   471,    -1,   473,   474,   475,
     476,   477,   478,   479,    -1,   481,   482,    -1,   484,    -1,
      -1,    -1,    -1,   489,   490,   491,    -1,    -1,    -1,    -1,
     496,    -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,
     506,   507,    -1,   509,    -1,   511,    -1,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,   530,    -1,    -1,    -1,    -1,   535,
      -1,    -1,    -1,   539,    -1,   541,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,   551,   552,    -1,   554,   555,
      -1,   557,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,    -1,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,    -1,
      -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,   630,    -1,    -1,    -1,   634,    -1,
      -1,   637,    -1,   639,    -1,     5,   642,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
     656,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,   109,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,    -1,   319,
     320,   321,   322,    -1,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,    -1,    -1,   356,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,
      -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
     530,   531,    -1,    -1,    -1,   535,    -1,    -1,   538,   539,
      -1,   541,   542,   543,   544,   545,   546,    -1,    -1,   549,
     550,   551,   552,    -1,   554,   555,    -1,   557,    -1,   559,
     560,   561,   562,    -1,   564,   565,   566,    -1,   568,   569,
     570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,
      -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,   589,
      -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,
      -1,   601,    -1,   603,    -1,   605,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,     5,   642,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,   654,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,   183,
      -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,
     194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
      -1,    -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,
      -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,
     274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,    -1,   319,   320,   321,   322,    -1,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
      -1,    -1,   356,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,
      -1,   535,    -1,    -1,   538,   539,    -1,   541,   542,   543,
     544,   545,   546,    -1,    -1,   549,   550,   551,   552,    -1,
     554,   555,    -1,   557,    -1,   559,   560,   561,   562,    -1,
      -1,   565,   566,    -1,   568,   569,   570,   571,    -1,    -1,
      -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,
     584,   585,   586,    -1,   588,   589,    -1,   591,   592,    -1,
     594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,
      -1,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,     5,   642,     7,
       8,     9,    10,    11,    12,   649,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    -1,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,   187,
      -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,
     198,    -1,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,   229,   230,   231,   232,   233,    -1,    -1,   236,   237,
     238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,
      -1,    -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,
      -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
      -1,   319,   320,   321,   322,    -1,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,    -1,   341,    -1,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,    -1,    -1,   356,   357,
      -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,
     368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,    -1,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,   530,   531,    -1,    -1,    -1,   535,    -1,    -1,
     538,   539,    -1,   541,   542,   543,   544,   545,   546,    -1,
      -1,   549,   550,   551,   552,    -1,   554,   555,    -1,   557,
      -1,   559,   560,   561,   562,    -1,    -1,   565,   566,    -1,
     568,   569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,
     578,   579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,
     588,   589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,
     598,    -1,    -1,   601,    -1,   603,    -1,   605,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,    -1,    -1,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,     5,   642,     7,     8,     9,    10,    11,
      12,   649,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      -1,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
     182,   183,    -1,    -1,   186,   187,    -1,   189,   190,   191,
      -1,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,
     232,   233,    -1,    -1,   236,   237,   238,    -1,   240,    -1,
     242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,
      -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,
      -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,    -1,   319,   320,   321,
     322,    -1,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,    -1,   341,
      -1,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,    -1,    -1,   356,   357,    -1,    -1,   360,   361,
     362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,   530,   531,
      -1,    -1,    -1,   535,    -1,    -1,   538,   539,    -1,   541,
     542,   543,   544,   545,   546,    -1,    -1,   549,   550,   551,
     552,    -1,   554,   555,    -1,   557,    -1,   559,   560,   561,
     562,    -1,    -1,   565,   566,    -1,   568,   569,   570,   571,
      -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,    -1,
      -1,   583,   584,   585,   586,    -1,   588,   589,    -1,   591,
     592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,
      -1,   603,    -1,   605,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,     5,
     642,     7,     8,     9,    10,    11,    12,   649,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,
      -1,    57,    58,    -1,    60,    61,    -1,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
     236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,    -1,   319,   320,   321,   322,    -1,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,    -1,    -1,
     356,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,    -1,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,   530,   531,    -1,    -1,    -1,   535,
      -1,    -1,   538,   539,    -1,   541,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,   551,   552,    -1,   554,   555,
      -1,   557,    -1,   559,   560,   561,   562,    -1,    -1,   565,
     566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,
      -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,   594,   595,
      -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,
      -1,    -1,     5,   649,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,   104,    -1,   106,    -1,   108,    -1,   110,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,   136,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
     183,    -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,
      -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,    -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,   232,
     233,    -1,    -1,   236,   237,   238,   239,   240,    -1,   242,
      -1,    -1,    -1,   246,   247,   248,    -1,    -1,    -1,   252,
      -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,
     273,   274,   275,    -1,    -1,    -1,    -1,   280,   281,    -1,
     283,    -1,   285,   286,   287,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,    -1,   319,   320,   321,   322,
      -1,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,    -1,   356,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,   486,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,   499,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,
      -1,    -1,   535,    -1,    -1,   538,   539,    -1,   541,   542,
     543,   544,   545,   546,    -1,    -1,   549,   550,   551,   552,
      -1,   554,   555,    -1,   557,    -1,   559,   560,   561,   562,
      -1,   564,   565,   566,    -1,   568,   569,   570,   571,    -1,
      -1,    -1,    -1,    -1,   577,   578,   579,   580,    -1,    -1,
     583,   584,   585,   586,    -1,   588,   589,    -1,   591,   592,
      -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,   602,
     603,   604,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,   104,    -1,   106,
      -1,   108,    -1,   110,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,   136,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,
     187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,
      -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,    -1,    -1,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,   236,
     237,   238,   239,   240,    -1,   242,    -1,    -1,    -1,   246,
     247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,
     267,    -1,    -1,   270,    -1,    -1,   273,   274,   275,    -1,
      -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,   286,
     287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,    -1,   319,   320,   321,   322,    -1,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,    -1,   356,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,   486,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,   499,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,    -1,    -1,   535,    -1,
      -1,   538,   539,    -1,   541,   542,   543,   544,   545,   546,
      -1,    -1,   549,   550,   551,   552,    -1,   554,   555,    -1,
     557,    -1,   559,   560,   561,   562,    -1,   564,   565,   566,
      -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,    -1,
     577,   578,   579,   580,    -1,    -1,   583,   584,   585,   586,
      -1,   588,   589,    -1,   591,   592,    -1,   594,   595,    -1,
      -1,   598,    -1,    -1,   601,   602,   603,   604,   605,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,
     221,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,   236,   237,   238,    -1,   240,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
     291,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,    -1,   319,   320,
     321,   322,    -1,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,   357,    -1,    -1,   360,
     361,   362,   363,   364,   365,    -1,   367,   368,    -1,    -1,
     371,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,   530,
     531,    -1,    -1,    -1,   535,    -1,    -1,   538,   539,    -1,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,    -1,   557,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,   587,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,   221,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,   291,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,    -1,   319,   320,   321,   322,    -1,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
      -1,   356,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,   371,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,    -1,
     535,    -1,    -1,   538,   539,    -1,   541,   542,   543,   544,
     545,   546,    -1,    -1,   549,   550,   551,   552,    -1,   554,
     555,    -1,   557,    -1,   559,   560,   561,   562,    -1,   564,
     565,   566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,
      -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,
     585,   586,   587,   588,   589,    -1,   591,   592,    -1,   594,
     595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,
     605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
      -1,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,
      -1,   220,   221,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,   236,   237,   238,
      -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,
     319,   320,   321,   322,    -1,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,   371,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,   530,   531,    -1,    -1,    -1,   535,    -1,    -1,   538,
     539,    -1,   541,   542,   543,   544,   545,   546,    -1,    -1,
     549,   550,   551,   552,    -1,   554,   555,    -1,   557,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,   587,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
     183,    -1,    -1,   186,   187,    -1,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,   218,    -1,   220,   221,    -1,
      -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,   232,
     233,    -1,    -1,   236,   237,   238,    -1,   240,    -1,   242,
      -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,
     283,    -1,   285,    -1,   287,   288,    -1,    -1,   291,    -1,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,    -1,   319,   320,   321,   322,
      -1,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,    -1,   356,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,   367,   368,    -1,    -1,   371,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,
      -1,    -1,   535,    -1,    -1,   538,   539,    -1,   541,   542,
     543,   544,   545,   546,    -1,    -1,   549,   550,   551,   552,
      -1,   554,   555,    -1,   557,    -1,   559,   560,   561,   562,
      -1,   564,   565,   566,    -1,   568,   569,   570,   571,    -1,
      -1,    -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,
     583,   584,   585,   586,   587,   588,   589,    -1,   591,   592,
      -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,
     603,    -1,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    36,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,
     187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,
      -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,   236,
     237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,
     267,    -1,    -1,   270,    -1,    -1,   273,   274,   275,    -1,
      -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,
     287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,    -1,   319,   320,   321,   322,    -1,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,    -1,   356,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,   495,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,    -1,    -1,   535,    -1,
      -1,   538,   539,    -1,   541,   542,   543,   544,   545,   546,
      -1,    -1,   549,   550,   551,   552,    -1,   554,   555,    -1,
     557,    -1,   559,   560,   561,   562,    -1,   564,   565,   566,
      -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,    -1,
     577,   578,   579,    -1,    -1,    -1,   583,   584,   585,   586,
      -1,   588,   589,    -1,   591,   592,    -1,   594,   595,    -1,
      -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,   109,   110,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,   236,   237,   238,    -1,   240,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,    -1,   319,   320,
     321,   322,    -1,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,   530,
     531,    -1,    -1,    -1,   535,    -1,    -1,   538,   539,    -1,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,    -1,   557,    -1,   559,   560,
     561,   562,    -1,   564,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    36,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
     275,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,    -1,   319,   320,   321,   322,    -1,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
      -1,   356,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,    -1,
     535,    -1,    -1,   538,   539,    -1,   541,   542,   543,   544,
     545,   546,    -1,    -1,   549,   550,   551,   552,    -1,   554,
     555,    -1,   557,    -1,   559,   560,   561,   562,    -1,   564,
     565,   566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,
      -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,
     585,   586,    -1,   588,   589,    -1,   591,   592,    -1,   594,
     595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,
     605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    38,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
      -1,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,   236,   237,   238,
      -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,
     319,   320,   321,   322,    -1,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,   530,   531,    -1,    -1,    -1,   535,    -1,    -1,   538,
     539,    -1,   541,   542,   543,   544,   545,   546,    -1,    -1,
     549,   550,   551,   552,    -1,   554,   555,    -1,   557,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
     183,    -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,
      -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,   232,
     233,    -1,    -1,   236,   237,   238,    -1,   240,    -1,   242,
      -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,
     283,    -1,   285,    -1,   287,   288,    -1,    -1,   291,    -1,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,    -1,   319,   320,   321,   322,
      -1,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,    -1,   356,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,   367,   368,    -1,    -1,   371,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,   397,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,
      -1,    -1,   535,    -1,    -1,   538,   539,    -1,   541,   542,
     543,   544,   545,   546,    -1,    -1,   549,   550,   551,   552,
      -1,   554,   555,    -1,   557,    -1,   559,   560,   561,   562,
      -1,    -1,   565,   566,    -1,   568,   569,   570,   571,    -1,
      -1,    -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,
     583,   584,   585,   586,   587,   588,   589,    -1,   591,   592,
      -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,
     603,    -1,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,
     187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,
      -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,   236,
     237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,
     267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,
     287,   288,    -1,    -1,   291,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,    -1,   319,   320,   321,   322,    -1,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,    -1,   356,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,   371,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
     397,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,    -1,    -1,   535,    -1,
      -1,   538,   539,    -1,   541,   542,   543,   544,   545,   546,
      -1,    -1,   549,   550,   551,   552,    -1,   554,   555,    -1,
     557,    -1,   559,   560,   561,   562,    -1,    -1,   565,   566,
      -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,    -1,
     577,   578,   579,    -1,    -1,    -1,   583,   584,   585,   586,
     587,   588,   589,    -1,   591,   592,    -1,   594,   595,    -1,
      -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    36,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,   236,   237,   238,    -1,   240,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,    -1,   319,   320,
     321,   322,    -1,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,   530,
     531,    -1,    -1,    -1,   535,    -1,    -1,   538,   539,    -1,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,    -1,   557,    -1,   559,   560,
     561,   562,    -1,   564,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,   291,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,    -1,   319,   320,   321,   322,    -1,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
      -1,   356,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,   371,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,   397,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,    -1,
     535,    -1,    -1,   538,   539,    -1,   541,   542,   543,   544,
     545,   546,    -1,    -1,   549,   550,   551,   552,    -1,   554,
     555,    -1,   557,    -1,   559,   560,   561,   562,    -1,    -1,
     565,   566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,
      -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,
     585,   586,   587,   588,   589,    -1,   591,   592,    -1,   594,
     595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,
     605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,   110,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
      -1,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,   236,   237,   238,
      -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,   275,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,
     319,   320,   321,   322,    -1,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,   530,   531,    -1,    -1,    -1,   535,    -1,    -1,   538,
     539,    -1,   541,   542,   543,   544,   545,   546,    -1,    -1,
     549,   550,   551,   552,    -1,   554,   555,    -1,   557,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,   109,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
     183,    -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,
      -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,   232,
     233,    -1,    -1,   236,   237,   238,    -1,   240,    -1,   242,
      -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,
     273,   274,   275,    -1,    -1,    -1,    -1,   280,   281,    -1,
     283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,    -1,   319,   320,   321,   322,
      -1,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,    -1,   356,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,
      -1,    -1,   535,    -1,    -1,   538,   539,    -1,   541,   542,
     543,   544,   545,   546,    -1,    -1,   549,   550,   551,   552,
      -1,   554,   555,    -1,   557,    -1,   559,   560,   561,   562,
      -1,   564,   565,   566,    -1,   568,   569,   570,   571,    -1,
      -1,    -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,
     583,   584,   585,   586,    -1,   588,   589,    -1,   591,   592,
      -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,
     603,    -1,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    13,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,
     187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,
      -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,   236,
     237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,
     267,    -1,    -1,   270,    -1,    -1,   273,   274,   275,    -1,
      -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,
     287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,    -1,   319,   320,   321,   322,    -1,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,    -1,   356,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,    -1,    -1,   535,    -1,
      -1,   538,   539,    -1,   541,   542,   543,   544,   545,   546,
      -1,    -1,   549,   550,   551,   552,    -1,   554,   555,    -1,
     557,    -1,   559,   560,   561,   562,    -1,   564,   565,   566,
      -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,    -1,
     577,   578,   579,    -1,    -1,    -1,   583,   584,   585,   586,
      -1,   588,   589,    -1,   591,   592,    -1,   594,   595,    -1,
      -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,   236,   237,   238,    -1,   240,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,    -1,   319,   320,
     321,   322,    -1,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,   530,
     531,    -1,    -1,    -1,   535,    -1,    -1,   538,   539,    -1,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,    -1,   557,    -1,   559,   560,
     561,   562,    -1,   564,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    36,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
     275,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,    -1,   319,   320,   321,   322,    -1,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
      -1,   356,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,    -1,
     535,    -1,    -1,   538,   539,    -1,   541,   542,   543,   544,
     545,   546,    -1,    -1,   549,   550,   551,   552,    -1,   554,
     555,    -1,   557,    -1,   559,   560,   561,   562,    -1,   564,
     565,   566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,
      -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,
     585,   586,    -1,   588,   589,    -1,   591,   592,    -1,   594,
     595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,
     605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
      -1,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,   236,   237,   238,
      -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,   275,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,
     319,   320,   321,   322,    -1,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,   530,   531,    -1,    -1,    -1,   535,    -1,    -1,   538,
     539,    -1,   541,   542,   543,   544,   545,   546,    -1,    -1,
     549,   550,   551,   552,    -1,   554,   555,    -1,   557,    -1,
     559,   560,   561,   562,    -1,   564,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    20,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
     183,    -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,
      -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,   232,
     233,    -1,    -1,   236,   237,   238,    -1,   240,    -1,   242,
      -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,
     283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,    -1,   319,   320,   321,   322,
      -1,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,    -1,   356,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,
      -1,    -1,   535,    -1,    -1,   538,   539,    -1,   541,   542,
     543,   544,   545,   546,    -1,    -1,   549,   550,   551,   552,
      -1,   554,   555,    -1,   557,    -1,   559,   560,   561,   562,
      -1,   564,   565,   566,    -1,   568,   569,   570,   571,    -1,
      -1,    -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,
     583,   584,   585,   586,    -1,   588,   589,    -1,   591,   592,
      -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,
     603,    -1,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,    -1,    -1,   186,
     187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,
      -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,   236,
     237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,
     267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,
     287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,    -1,   319,   320,   321,   322,    -1,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,    -1,   356,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,    -1,    -1,   535,    -1,
      -1,   538,   539,    -1,   541,   542,   543,   544,   545,   546,
      -1,    -1,   549,   550,   551,   552,    -1,   554,   555,    -1,
     557,    -1,   559,   560,   561,   562,    -1,    -1,   565,   566,
      -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,    -1,
     577,   578,   579,    -1,    -1,    -1,   583,   584,   585,   586,
      -1,   588,   589,    -1,   591,   592,    -1,   594,   595,    -1,
      -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,   236,   237,   238,    -1,   240,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,    -1,   319,   320,
     321,   322,    -1,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,   518,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,   530,
     531,    -1,    -1,    -1,   535,    -1,    -1,   538,   539,    -1,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,    -1,   557,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,   199,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,    -1,   319,   320,   321,   322,    -1,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
      -1,   356,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,    -1,
     535,    -1,    -1,   538,   539,    -1,   541,   542,   543,   544,
     545,   546,    -1,    -1,   549,   550,   551,   552,    -1,   554,
     555,    -1,   557,    -1,   559,   560,   561,   562,    -1,    -1,
     565,   566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,
      -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,
     585,   586,    -1,   588,   589,    -1,   591,   592,    -1,   594,
     595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,
     605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
      -1,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,   236,   237,   238,
      -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,
     319,   320,   321,   322,    -1,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,   530,   531,    -1,    -1,    -1,   535,    -1,    -1,   538,
     539,    -1,   541,   542,   543,   544,   545,   546,    -1,    -1,
     549,   550,   551,   552,    -1,   554,   555,    -1,   557,    -1,
     559,   560,   561,   562,    -1,    -1,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,   132,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
     183,    -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,
      -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,   232,
     233,    -1,    -1,   236,   237,   238,    -1,   240,    -1,   242,
      -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,
     283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,    -1,   319,   320,   321,   322,
      -1,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,    -1,   356,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,
      -1,    -1,   535,    -1,    -1,   538,   539,    -1,   541,   542,
     543,   544,   545,   546,    -1,    -1,   549,   550,   551,   552,
      -1,   554,   555,    -1,   557,    -1,   559,   560,   561,   562,
      -1,    -1,   565,   566,    -1,   568,   569,   570,   571,    -1,
      -1,    -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,
     583,   584,   585,   586,    -1,   588,   589,    -1,   591,   592,
      -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,
     603,    -1,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,
     187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,
      -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,   236,
     237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,
     267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,
     287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,    -1,   319,   320,   321,   322,    -1,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,    -1,   356,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,    -1,    -1,   535,    -1,
      -1,   538,   539,    -1,   541,   542,   543,   544,   545,   546,
      -1,    -1,   549,   550,   551,   552,    -1,   554,   555,    -1,
     557,    -1,   559,   560,   561,   562,    -1,    -1,   565,   566,
      -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,    -1,
     577,   578,   579,    -1,    -1,    -1,   583,   584,   585,   586,
      -1,   588,   589,    -1,   591,   592,    -1,   594,   595,    -1,
      -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,   236,   237,   238,    -1,   240,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,    -1,   319,   320,
     321,   322,    -1,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,   530,
     531,    -1,    -1,    -1,   535,    -1,    -1,   538,   539,    -1,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,    -1,   557,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,    -1,   319,   320,   321,   322,    -1,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
      -1,   356,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,    -1,
     535,    -1,    -1,   538,   539,    -1,   541,   542,   543,   544,
     545,   546,    -1,    -1,   549,   550,   551,   552,    -1,   554,
     555,    -1,   557,    -1,   559,   560,   561,   562,    -1,   564,
     565,   566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,
      -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,
     585,   586,    -1,   588,   589,    -1,   591,   592,    -1,   594,
     595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,
     605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
      -1,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,   236,   237,   238,
      -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,
     319,   320,   321,   322,    -1,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,   530,   531,    -1,    -1,    -1,   535,    -1,    -1,   538,
     539,    -1,   541,   542,   543,   544,   545,   546,    -1,    -1,
     549,   550,   551,   552,    -1,   554,   555,    -1,   557,    -1,
     559,   560,   561,   562,    -1,    -1,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      13,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
     183,    -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,
      -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,   232,
     233,    -1,    -1,   236,   237,   238,    -1,   240,    -1,   242,
      -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,
     283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,    -1,   319,   320,   321,   322,
      -1,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,    -1,   356,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,
      -1,    -1,   535,    -1,    -1,   538,   539,    -1,   541,   542,
     543,   544,   545,   546,    -1,    -1,   549,   550,   551,   552,
      -1,   554,   555,    -1,   557,    -1,   559,   560,   561,   562,
      -1,    -1,   565,   566,    -1,   568,   569,   570,   571,    -1,
      -1,    -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,
     583,   584,   585,   586,    -1,   588,   589,    -1,   591,   592,
      -1,   594,   595,    -1,    -1,   598,    -1,    -1,   601,    -1,
     603,    -1,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,
     187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,
      -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,   236,
     237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,
     267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,
     287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,    -1,   319,   320,   321,   322,    -1,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,    -1,   356,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,    -1,    -1,   535,    -1,
      -1,   538,   539,    -1,   541,   542,   543,   544,   545,   546,
      -1,    -1,   549,   550,   551,   552,    -1,   554,   555,    -1,
     557,    -1,   559,   560,   561,   562,    -1,    -1,   565,   566,
      -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,    -1,
     577,   578,   579,    -1,    -1,    -1,   583,   584,   585,   586,
      -1,   588,   589,    -1,   591,   592,    -1,   594,   595,    -1,
      -1,   598,    -1,    -1,   601,    -1,   603,    -1,   605,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,   236,   237,   238,    -1,   240,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,    -1,   319,   320,
     321,   322,    -1,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,   530,
     531,    -1,    -1,    -1,   535,    -1,    -1,   538,   539,    -1,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,    -1,   557,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,   594,   595,    -1,    -1,   598,    -1,    -1,
     601,    -1,   603,    -1,   605,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,    -1,   319,   320,   321,   322,    -1,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
      -1,   356,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,   530,   531,    -1,    -1,    -1,
     535,    -1,    -1,   538,   539,    -1,   541,   542,   543,   544,
     545,   546,    -1,    -1,   549,   550,   551,   552,    -1,   554,
     555,    -1,   557,    -1,   559,   560,   561,   562,    -1,    -1,
     565,   566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,
      -1,    -1,   577,   578,   579,    -1,    -1,    -1,   583,   584,
     585,   586,    -1,   588,   589,    -1,   591,   592,    -1,   594,
     595,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,
     605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
      -1,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,   236,   237,   238,
      -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,
     319,   320,   321,   322,    -1,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,   530,   531,    -1,    -1,    -1,   535,    -1,    -1,   538,
     539,    -1,   541,   542,   543,   544,   545,   546,    -1,    -1,
     549,   550,   551,   552,    -1,   554,   555,    -1,   557,    -1,
     559,   560,   561,   562,    -1,    -1,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,   594,   595,    -1,    -1,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,
      -1,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    84,    -1,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,    -1,    -1,    -1,   152,
     153,   154,    -1,   156,   157,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,    -1,    -1,    -1,    -1,   180,   181,   182,
     183,    -1,    -1,   186,   187,   188,   189,   190,   191,    -1,
      -1,    -1,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,
      -1,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,   225,    -1,    -1,    -1,   229,   230,   231,   232,
     233,   234,    -1,   236,   237,   238,    -1,   240,    -1,   242,
      -1,    -1,    -1,    -1,   247,    -1,    -1,    -1,    -1,   252,
      -1,   254,   255,    -1,   257,   258,   259,    -1,    -1,   262,
      -1,    -1,    -1,   266,   267,    -1,    -1,   270,   271,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,
     283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,
     293,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,    -1,   319,   320,   321,   322,
      -1,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,    -1,   356,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,    -1,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,   395,    -1,    -1,    -1,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,    -1,    -1,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,    -1,    -1,   451,    -1,
     453,   454,    -1,   456,    -1,    -1,    -1,   460,    -1,    -1,
     463,   464,    -1,   466,   467,   468,    -1,    -1,   471,    -1,
     473,   474,   475,   476,   477,   478,   479,    -1,   481,   482,
      -1,   484,    -1,    -1,    -1,    -1,   489,   490,   491,    -1,
      -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,
     503,    -1,    -1,   506,   507,    -1,   509,    -1,   511,    -1,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,   530,    -1,    -1,
      -1,    -1,   535,    -1,    -1,    -1,   539,    -1,   541,   542,
     543,   544,   545,   546,    -1,    -1,   549,   550,   551,   552,
      -1,   554,   555,    -1,   557,    -1,   559,   560,   561,   562,
      -1,    -1,   565,   566,    -1,   568,   569,   570,   571,    -1,
      -1,    -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,
      -1,   584,   585,   586,    -1,   588,   589,    -1,   591,   592,
      -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,   601,    -1,
      -1,    -1,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,   630,    -1,    -1,
      -1,   634,    -1,    -1,   637,    -1,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,
      27,    28,    29,    30,    -1,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    -1,    -1,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    -1,    -1,    -1,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,   156,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,    -1,
      -1,    -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,
     187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
      -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,   225,    -1,
      -1,    -1,   229,   230,   231,   232,   233,   234,    -1,   236,
     237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,
     247,    -1,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,
     257,   258,   259,    -1,    -1,   262,    -1,    -1,    -1,   266,
     267,    -1,    -1,   270,   271,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,
     287,   288,    -1,    -1,    -1,    -1,   293,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,    -1,   319,   320,   321,   322,    -1,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,    -1,   356,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
      -1,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,    -1,
      -1,    -1,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,    -1,    -1,    -1,    -1,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,    -1,    -1,   451,    -1,   453,   454,    -1,   456,
      -1,    -1,    -1,   460,    -1,    -1,   463,   464,    -1,   466,
     467,   468,    -1,    -1,   471,    -1,   473,   474,   475,   476,
     477,   478,   479,    -1,   481,   482,    -1,   484,    -1,    -1,
      -1,    -1,   489,   490,   491,    -1,    -1,    -1,    -1,   496,
      -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,   506,
     507,    -1,   509,    -1,   511,    -1,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,   530,    -1,    -1,    -1,    -1,   535,    -1,
      -1,    -1,   539,    -1,   541,   542,   543,   544,   545,   546,
      -1,    -1,   549,   550,   551,   552,    -1,   554,   555,    -1,
     557,    -1,   559,   560,   561,   562,    -1,    -1,   565,   566,
      -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,    -1,
     577,   578,   579,    -1,    -1,    -1,    -1,   584,   585,   586,
      -1,   588,   589,    -1,   591,   592,    -1,    -1,    -1,    -1,
      -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,   628,    -1,   630,    -1,    -1,    -1,   634,    -1,    -1,
     637,    -1,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      -1,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    -1,    -1,    -1,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
      -1,   152,   153,   154,    -1,   156,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,   188,   189,   190,
     191,    -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,   234,    -1,   236,   237,   238,    -1,   240,
      -1,   242,    -1,    -1,    -1,    -1,   247,    -1,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,   259,    -1,
      -1,   262,    -1,    -1,    -1,   266,   267,    -1,    -1,   270,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,    -1,   319,   320,
     321,   322,    -1,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,    -1,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   394,   395,    -1,    -1,    -1,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,    -1,    -1,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,    -1,    -1,
     451,    -1,   453,   454,    -1,   456,    -1,    -1,    -1,   460,
      -1,    -1,   463,   464,    -1,   466,   467,   468,    -1,    -1,
     471,    -1,   473,   474,   475,   476,   477,   478,   479,    -1,
     481,   482,    -1,   484,    -1,    -1,    -1,    -1,   489,   490,
     491,    -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,
      -1,    -1,   503,    -1,    -1,   506,   507,    -1,   509,    -1,
     511,    -1,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,   530,
      -1,    -1,    -1,    -1,   535,    -1,    -1,    -1,   539,    -1,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,    -1,   557,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,    -1,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,   628,    -1,   630,
      -1,    -1,    -1,   634,    -1,    -1,   637,    -1,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,
      -1,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,    -1,    -1,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,    -1,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,
      -1,   266,   267,    -1,    -1,   270,   271,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,   293,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,    -1,   319,   320,   321,   322,    -1,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
      -1,   356,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,    -1,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,
     395,    -1,    -1,    -1,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,    -1,    -1,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,    -1,    -1,   451,    -1,   453,   454,
      -1,   456,    -1,    -1,    -1,   460,    -1,    -1,   463,   464,
      -1,   466,   467,   468,    -1,    -1,   471,    -1,   473,   474,
     475,   476,   477,   478,   479,    -1,   481,   482,    -1,   484,
      -1,    -1,    -1,    -1,   489,   490,   491,    -1,    -1,    -1,
      -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,
      -1,   506,   507,    -1,   509,    -1,   511,    -1,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,   530,    -1,    -1,    -1,    -1,
     535,    -1,    -1,    -1,   539,    -1,   541,   542,   543,   544,
     545,   546,    -1,    -1,   549,   550,   551,   552,    -1,   554,
     555,    -1,   557,    -1,   559,   560,   561,   562,    -1,    -1,
     565,   566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,
      -1,    -1,   577,   578,   579,    -1,    -1,    -1,    -1,   584,
     585,   586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,
      -1,    -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,
     605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,   630,    -1,    -1,    -1,   634,
      -1,    -1,   637,    -1,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    -1,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,    -1,    -1,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,   188,
     189,   190,   191,    -1,    -1,    -1,    -1,    -1,    -1,   198,
      -1,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,    -1,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
      -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,    -1,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
     259,    -1,    -1,   262,    -1,    -1,    -1,   266,   267,    -1,
      -1,   270,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,   293,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,
     319,   320,   321,   322,    -1,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,    -1,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,   395,    -1,    -1,    -1,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,    -1,    -1,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
      -1,    -1,   451,    -1,   453,   454,    -1,   456,    -1,    -1,
      -1,   460,    -1,    -1,   463,   464,    -1,   466,   467,   468,
      -1,    -1,   471,    -1,   473,   474,   475,   476,   477,   478,
     479,    -1,   481,   482,    -1,   484,    -1,    -1,    -1,    -1,
     489,   490,   491,    -1,    -1,    -1,    -1,   496,    -1,    -1,
      -1,    -1,    -1,    -1,   503,    -1,    -1,   506,   507,    -1,
     509,    -1,   511,    -1,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,   530,    -1,    -1,    -1,    -1,   535,    -1,    -1,    -1,
     539,    -1,   541,   542,   543,   544,   545,   546,    -1,    -1,
     549,   550,   551,   552,    -1,   554,   555,    -1,   557,    -1,
     559,   560,   561,   562,    -1,    -1,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,    -1,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,    -1,    -1,    -1,    -1,   598,
      -1,    -1,   601,    -1,    -1,    -1,   605,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,   630,    -1,    -1,    -1,   634,    -1,    -1,   637,    -1,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,
      -1,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    84,    -1,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,    -1,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,    -1,    -1,    -1,    -1,   180,   181,   182,
     183,    -1,    -1,   186,   187,   188,   189,   190,   191,    -1,
      -1,    -1,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,
      -1,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,   225,    -1,    -1,    -1,   229,   230,   231,   232,
     233,   234,    -1,   236,   237,   238,    -1,   240,    -1,   242,
      -1,    -1,    -1,    -1,   247,    -1,    -1,    -1,    -1,   252,
      -1,   254,   255,    -1,   257,   258,   259,    -1,    -1,   262,
      -1,    -1,    -1,   266,   267,    -1,    -1,   270,   271,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,
     283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,
     293,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,    -1,   319,   320,   321,   322,
      -1,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,    -1,   356,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,    -1,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,   395,    -1,    -1,    -1,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,    -1,    -1,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,    -1,    -1,   451,    -1,
     453,   454,    -1,   456,    -1,    -1,    -1,   460,    -1,    -1,
     463,   464,    -1,   466,   467,   468,    -1,    -1,   471,    -1,
     473,   474,   475,   476,   477,   478,   479,    -1,   481,   482,
      -1,   484,    -1,    -1,    -1,    -1,   489,   490,   491,    -1,
      -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,
     503,    -1,    -1,   506,   507,    -1,   509,    -1,   511,    -1,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,   530,    -1,    -1,
      -1,    -1,   535,    -1,    -1,    -1,   539,    -1,   541,   542,
     543,   544,   545,   546,    -1,    -1,   549,   550,   551,   552,
      -1,   554,   555,    -1,   557,    -1,   559,   560,   561,   562,
      -1,    -1,   565,   566,    -1,   568,   569,   570,   571,    -1,
      -1,    -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,
      -1,   584,   585,   586,    -1,   588,   589,    -1,   591,   592,
      -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,   601,    -1,
      -1,    -1,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,   630,    -1,    -1,
      -1,   634,    -1,    -1,   637,    -1,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,
      27,    28,    29,    30,    -1,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    -1,    -1,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    -1,    -1,    -1,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,    -1,
      -1,    -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,
     187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
      -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,   225,    -1,
      -1,    -1,   229,   230,   231,   232,   233,   234,    -1,   236,
     237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,
     247,    -1,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,
     257,   258,   259,    -1,    -1,   262,    -1,    -1,    -1,   266,
     267,    -1,    -1,   270,   271,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,
     287,   288,    -1,    -1,    -1,    -1,   293,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,    -1,   319,   320,   321,   322,    -1,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,    -1,    -1,   356,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
      -1,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,    -1,
      -1,    -1,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,    -1,    -1,    -1,    -1,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,    -1,    -1,   451,    -1,   453,   454,    -1,   456,
      -1,    -1,    -1,   460,    -1,    -1,   463,   464,    -1,   466,
     467,   468,    -1,    -1,   471,    -1,   473,   474,   475,   476,
     477,   478,   479,    -1,   481,   482,    -1,   484,    -1,    -1,
      -1,    -1,   489,   490,   491,    -1,    -1,    -1,    -1,   496,
      -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,   506,
     507,    -1,   509,    -1,   511,    -1,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,   530,    -1,    -1,    -1,    -1,   535,    -1,
      -1,    -1,   539,    -1,   541,   542,   543,   544,   545,   546,
      -1,    -1,   549,   550,   551,   552,    -1,   554,   555,    -1,
     557,    -1,   559,   560,   561,   562,    -1,    -1,   565,   566,
      -1,   568,   569,   570,   571,    -1,    -1,    -1,    -1,    -1,
     577,   578,   579,    -1,    -1,    -1,    -1,   584,   585,   586,
      -1,   588,   589,    -1,   591,   592,    -1,    -1,    -1,    -1,
      -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,   630,    -1,    -1,    -1,   634,    -1,    -1,
     637,    -1,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      -1,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    -1,    -1,    -1,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,   188,   189,   190,
     191,    -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,   234,    -1,   236,   237,   238,    -1,   240,
      -1,   242,    -1,    -1,    -1,    -1,   247,    -1,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,   259,    -1,
      -1,   262,    -1,    -1,    -1,   266,   267,    -1,    -1,   270,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,   293,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,    -1,   319,   320,
     321,   322,    -1,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,    -1,    -1,   356,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,    -1,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   394,   395,    -1,    -1,    -1,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,    -1,    -1,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,    -1,    -1,
     451,    -1,   453,   454,    -1,   456,    -1,    -1,    -1,   460,
      -1,    -1,   463,   464,    -1,   466,   467,   468,    -1,    -1,
     471,    -1,   473,   474,   475,   476,   477,   478,   479,    -1,
     481,   482,    -1,   484,    -1,    -1,    -1,    -1,   489,   490,
     491,    -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,
      -1,    -1,   503,    -1,    -1,   506,   507,    -1,   509,    -1,
     511,    -1,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,   530,
      -1,    -1,    -1,    -1,   535,    -1,    -1,    -1,   539,    -1,
     541,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
     551,   552,    -1,   554,   555,    -1,   557,    -1,   559,   560,
     561,   562,    -1,    -1,   565,   566,    -1,   568,   569,   570,
     571,    -1,    -1,    -1,    -1,    -1,   577,   578,   579,    -1,
      -1,    -1,    -1,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,   630,
      -1,    -1,    -1,   634,    -1,    -1,   637,    -1,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,
      -1,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,    -1,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,    -1,    -1,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,    -1,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,
      -1,   266,   267,    -1,    -1,   270,   271,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,   293,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,    -1,   319,   320,   321,   322,    -1,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,    -1,
      -1,   356,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,    -1,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,
     395,    -1,    -1,    -1,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,    -1,    -1,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,    -1,    -1,   451,    -1,   453,   454,
      -1,   456,    -1,    -1,    -1,   460,    -1,    -1,   463,   464,
      -1,   466,   467,   468,    -1,    -1,   471,    -1,   473,   474,
     475,   476,   477,   478,   479,    -1,   481,   482,    -1,   484,
      -1,    -1,    -1,    -1,   489,   490,   491,    -1,    -1,    -1,
      -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,
      -1,   506,   507,    -1,   509,    -1,   511,    -1,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,   530,    -1,    -1,    -1,    -1,
     535,    -1,    -1,    -1,   539,    -1,   541,   542,   543,   544,
     545,   546,    -1,    -1,   549,   550,   551,   552,    -1,   554,
     555,    -1,   557,    -1,   559,   560,   561,   562,    -1,    -1,
     565,   566,    -1,   568,   569,   570,   571,    -1,    -1,    -1,
      -1,    -1,   577,   578,   579,    -1,    -1,    -1,    -1,   584,
     585,   586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,
      -1,    -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,
     605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,   630,    -1,    -1,    -1,   634,
      -1,    -1,   637,    -1,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    -1,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,    -1,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,    -1,    -1,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,   188,
     189,   190,   191,    -1,    -1,    -1,    -1,    -1,    -1,   198,
      -1,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,    -1,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
      -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,    -1,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
     259,    -1,    -1,   262,    -1,    -1,    -1,   266,   267,    -1,
      -1,   270,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,   293,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,    -1,
     319,   320,   321,   322,    -1,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,    -1,    -1,   356,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,    -1,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,   395,    -1,    -1,    -1,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,    -1,    -1,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
      -1,    -1,   451,    -1,   453,   454,    -1,   456,    -1,    -1,
      -1,   460,    -1,    -1,   463,   464,    -1,   466,   467,   468,
      -1,    -1,   471,    -1,   473,   474,   475,   476,   477,   478,
     479,    -1,   481,   482,    -1,   484,    -1,    -1,    -1,    -1,
     489,   490,   491,    -1,    -1,    -1,    -1,   496,    -1,    -1,
      -1,    -1,    -1,    -1,   503,    -1,    -1,   506,   507,    -1,
     509,    -1,   511,    -1,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,   530,    -1,    -1,    -1,    -1,   535,    -1,    -1,    -1,
     539,    -1,   541,   542,   543,   544,   545,   546,    -1,    -1,
     549,   550,   551,   552,    -1,   554,   555,    -1,   557,    -1,
     559,   560,   561,   562,    -1,    -1,   565,   566,    -1,   568,
     569,   570,   571,    -1,    -1,    -1,    -1,    -1,   577,   578,
     579,    -1,    -1,    -1,    -1,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,    -1,    -1,    -1,    -1,   598,
      -1,    -1,   601,    -1,    -1,    -1,   605,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,   630,    -1,    -1,    -1,   634,    -1,    -1,   637,    -1,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,
      -1,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    84,    -1,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,    -1,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,    -1,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,    -1,    -1,    -1,    -1,   180,   181,   182,
     183,    -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,
      -1,    -1,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,
      -1,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,   225,    -1,    -1,    -1,   229,   230,   231,   232,
     233,    -1,    -1,   236,   237,   238,    -1,   240,    -1,   242,
      -1,    -1,    -1,    -1,   247,    -1,    -1,    -1,    -1,   252,
      -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,    -1,    -1,   266,   267,    -1,    -1,   270,    -1,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,
     283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,    -1,   319,   320,   321,   322,
      -1,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,    -1,    -1,   356,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,    -1,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,   395,    -1,    -1,    -1,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,    -1,    -1,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,    -1,    -1,   451,    -1,
     453,    -1,    -1,   456,    -1,    -1,    -1,   460,    -1,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,    -1,
     473,   474,   475,   476,   477,   478,   479,    -1,   481,   482,
      -1,   484,    -1,    -1,    -1,    -1,   489,   490,   491,    -1,
      -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,
     503,    -1,    -1,   506,   507,    -1,   509,    -1,   511,    -1,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,   530,    -1,    -1,
      -1,    -1,   535,    -1,    -1,    -1,   539,    -1,   541,   542,
     543,   544,   545,   546,    -1,    -1,   549,   550,   551,   552,
      -1,   554,   555,    -1,   557,    -1,   559,   560,   561,   562,
      -1,    -1,   565,   566,    -1,   568,   569,   570,   571,    -1,
      -1,    -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,
      -1,   584,   585,   586,    -1,   588,   589,    -1,   591,   592,
      -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,   601,    -1,
      -1,    -1,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,    -1,    -1,   637,    -1,   639,    -1,    -1,   642
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    14,    16,    33,    37,    51,    52,    59,    64,    65,
      85,   104,   128,   136,   137,   138,   149,   150,   162,   177,
     194,   209,   211,   216,   220,   246,   248,   264,   282,   286,
     382,   399,   401,   414,   425,   447,   450,   452,   455,   458,
     459,   469,   472,   480,   486,   494,   499,   500,   501,   531,
     538,   583,   595,   599,   602,   608,   638,   644,   654,   665,
     668,   669,   670,   671,   672,   674,   679,   681,   690,   723,
     751,   758,   759,   878,   934,   969,  1055,  1102,  1105,  1115,
    1118,  1123,  1136,  1137,  1142,  1145,  1150,  1157,  1169,  1170,
    1340,  1342,  1353,  1356,  1381,  1389,  1402,  1409,  1423,  1427,
    1430,  1441,  1447,  1451,  1456,  1457,  1458,  1511,  1538,  1544,
    1546,  1553,  1556,  1590,  1596,  1597,  1598,  1599,  1650,  1658,
    1659,  1660,    12,   115,   133,   202,   287,   419,   492,   555,
    1056,  1621,  1622,  1623,  1624,   283,   369,  1144,  1591,   564,
    1500,   239,     5,     7,     8,     9,    10,    11,    12,    15,
      19,    22,    24,    25,    26,    27,    28,    29,    30,    31,
      33,    37,    41,    44,    45,    46,    48,    50,    51,    54,
      57,    58,    60,    61,    63,    64,    66,    67,    68,    69,
      70,    71,    72,    74,    75,    76,    77,    78,    79,    80,
      82,    83,    84,    85,    86,    87,    88,    89,    91,    92,
      94,    95,    96,    97,    98,   100,   103,   106,   108,   111,
     113,   117,   118,   119,   122,   127,   128,   133,   135,   139,
     141,   142,   143,   144,   145,   149,   152,   153,   154,   158,
     160,   161,   163,   164,   165,   168,   169,   171,   172,   173,
     174,   175,   176,   177,   180,   181,   182,   183,   186,   187,
     189,   190,   191,   194,   198,   200,   202,   204,   205,   206,
     207,   208,   209,   210,   212,   216,   217,   218,   220,   224,
     225,   229,   230,   231,   232,   233,   236,   237,   238,   240,
     242,   247,   248,   252,   254,   255,   257,   258,   262,   265,
     266,   267,   270,   273,   274,   280,   281,   283,   285,   287,
     288,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   313,   314,   315,
     316,   319,   320,   321,   322,   324,   325,   330,   331,   332,
     333,   334,   335,   338,   339,   341,   343,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   356,   357,   360,   361,
     362,   363,   367,   368,   372,   374,   375,   376,   378,   379,
     380,   381,   383,   384,   393,   394,   395,   398,   400,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   414,
     415,   416,   418,   420,   421,   422,   423,   424,   426,   427,
     428,   431,   435,   436,   437,   438,   439,   442,   443,   444,
     445,   446,   448,   449,   451,   452,   453,   456,   458,   460,
     461,   463,   464,   466,   468,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   484,   485,   489,
     490,   491,   492,   496,   500,   502,   503,   504,   505,   506,
     507,   509,   510,   511,   512,   513,   514,   521,   522,   524,
     527,   530,   531,   535,   538,   539,   541,   542,   543,   544,
     545,   546,   549,   550,   551,   552,   554,   555,   557,   559,
     560,   561,   562,   565,   566,   568,   569,   570,   571,   577,
     578,   579,   583,   584,   585,   586,   588,   589,   591,   592,
     594,   595,   598,   601,   603,   605,   606,   607,   614,   617,
     621,   622,   623,   624,   625,   626,   627,   634,   635,   637,
     638,   639,   642,   717,  1499,  1503,  1509,  1510,   313,   554,
     558,  1540,  1540,   634,  1592,   115,   201,   287,   389,   471,
     492,   515,   555,   597,   605,   700,  1032,  1033,  1034,  1390,
    1341,   115,   173,   202,   239,   287,   419,   471,   492,   555,
     561,   580,   605,   622,  1352,  1503,  1144,   108,   760,   716,
     662,  1496,  1498,  1503,   680,  1354,   408,   512,  1452,   118,
     239,   639,  1463,  1540,  1144,   654,   879,  1503,  1448,   480,
     605,  1540,  1144,  1357,  1442,   518,   748,   752,   753,  1503,
     716,  1592,  1503,  1173,  1175,  1176,  1512,  1410,   752,    13,
     504,   577,    13,   504,   558,  1404,   408,   512,  1545,  1382,
    1503,    33,    85,   160,   414,   436,   472,   531,  1652,   486,
     654,  1171,     0,   162,   666,   414,   561,   699,   930,   931,
     932,   182,   402,  1428,  1496,  1503,   166,  1067,  1503,   166,
     717,   213,   717,   275,  1500,  1503,  1505,   824,   825,   828,
     851,  1503,  1094,  1095,   173,  1062,  1621,  1540,  1592,  1151,
     724,   662,   688,   689,  1500,  1116,  1138,    18,  1593,   234,
     933,   213,   455,   716,  1505,   826,   851,   716,   239,   239,
     239,   235,   294,   428,  1400,  1401,     8,    22,    30,    36,
      38,    39,    40,    42,    55,    56,    61,    62,    71,    74,
      76,    77,    78,    79,    80,    97,   101,   102,   107,   109,
     110,   114,   115,   120,   121,   122,   127,   129,   132,   178,
     184,   185,   192,   206,   208,   214,   221,   222,   229,   234,
     246,   249,   267,   272,   280,   291,   317,   323,   334,   338,
     340,   344,   345,   346,   347,   348,   355,   364,   365,   366,
     370,   371,   376,   397,   404,   409,   410,   412,   426,   454,
     455,   468,   470,   477,   478,   484,   536,   537,   543,   547,
     548,   553,   564,   568,   569,   570,   571,   581,   582,   583,
     587,   590,   605,   610,   611,   612,   613,   618,   620,   626,
     627,   642,   647,   648,   653,   654,   657,   658,   661,   662,
    1192,  1193,  1194,  1195,  1199,  1206,  1207,  1208,  1209,  1210,
    1211,  1219,  1223,  1236,  1482,  1484,  1486,  1487,  1488,  1492,
    1494,  1499,  1503,   234,  1351,  1351,  1351,  1351,   213,  1351,
     716,  1351,   851,  1351,   716,  1351,  1540,   675,  1431,   141,
      13,    14,   104,   110,   136,   150,   173,   177,   189,   211,
     239,   246,   286,   420,   424,   440,   448,   456,   486,   499,
     500,   549,   580,   602,   604,  1505,  1557,  1561,  1562,  1564,
    1566,  1567,  1503,   381,    70,   432,   662,  1505,   134,   223,
     294,  1359,  1503,  1500,   217,   511,  1453,   250,  1459,  1539,
    1540,   970,  1186,    49,   880,   199,    36,   313,  1415,  1449,
    1503,   716,  1146,  1540,   134,   294,  1360,  1388,   313,   427,
     504,  1443,  1444,   614,   749,   494,   754,     7,    13,   424,
    1554,  1555,  1562,  1564,   575,  1593,  1174,    13,   146,   223,
     520,   521,   522,   523,   524,   525,   540,  1180,  1181,  1182,
    1617,    61,    62,   132,   210,   283,   351,   404,   471,   491,
     577,   661,   995,  1503,  1513,  1525,  1529,  1530,    13,    25,
      37,    61,    69,    74,   100,   102,   104,   116,   164,   169,
     172,   200,   202,   210,   212,   238,   239,   240,   261,   283,
     313,   381,   407,   418,   419,   422,   423,   443,   491,   504,
     539,   557,   558,   606,   625,   995,  1031,  1411,  1415,  1416,
    1418,  1427,  1526,   754,   505,   688,   432,   631,  1106,  1107,
    1108,   505,   688,  1403,  1503,  1500,  1540,  1388,    38,   221,
     222,   564,  1483,  1501,  1651,  1651,  1651,  1651,  1651,  1175,
    1171,   655,   660,  1503,  1618,  1622,  1623,  1624,   558,   931,
    1425,  1424,   332,   562,   589,  1058,   603,   109,  1505,  1506,
    1507,  1561,  1060,   830,   852,  1503,  1059,   383,     6,    59,
     150,   365,   431,   433,   853,   558,   235,   380,  1096,  1097,
    1098,   717,   526,  1625,  1626,  1061,  1124,  1152,  1153,  1154,
    1155,  1496,   654,   725,  1503,   575,  1346,  1347,  1496,  1346,
      58,   367,   367,   447,  1594,   364,   365,  1198,  1503,   829,
     852,  1560,  1562,   196,     6,  1506,  1507,  1508,  1577,  1581,
     933,   933,   933,   199,  1391,  1397,  1398,  1503,  1400,   654,
     654,   654,  1206,   654,   654,   654,  1192,  1239,   654,   654,
     654,   654,   654,   654,   654,   654,   654,   654,   654,   654,
     654,   654,  1191,  1191,  1191,   654,  1190,   654,   654,   654,
     564,   654,   654,   654,   654,   654,   654,   654,   654,   654,
     654,   654,   654,  1192,   654,   654,   654,   654,  1237,  1238,
    1492,  1503,   654,   654,   654,   654,   654,   654,   654,   654,
     654,  1192,  1190,   654,   654,   654,   654,   654,   654,   654,
     654,   654,   654,   654,   654,   654,   654,   654,   654,   654,
     654,  1190,   564,   654,   654,   654,   564,   654,   654,   654,
      38,   221,   222,   564,   994,   654,  1191,  1190,  1190,   654,
     654,   654,   654,   654,   654,  1206,  1206,  1206,  1192,  1612,
    1613,  1503,  1224,  1503,    17,    18,   386,   389,   640,  1196,
    1197,   166,   167,   203,   215,   256,   268,   295,   358,  1200,
      34,   147,   253,   276,   344,   441,   497,   498,   513,   645,
     646,   647,   648,   649,   650,   651,   652,  1198,  1206,    73,
     388,   656,  1501,   654,   662,   178,  1503,   717,  1503,  1503,
     852,   717,  1560,  1505,   862,  1416,   717,  1506,  1508,  1576,
    1345,  1351,   609,   676,    36,    69,   139,   164,   168,   204,
     225,   240,   288,   313,   418,   427,   442,   460,   504,   507,
     535,   557,   606,  1432,  1437,  1438,  1540,    90,   661,   761,
     762,   763,   764,  1503,   418,  1565,   474,   474,   555,   561,
     605,   622,  1191,   384,  1569,   554,   377,  1571,    68,   504,
    1568,   116,   622,  1570,   575,   377,   656,    20,   166,  1291,
    1292,  1547,  1503,   235,  1093,   512,    91,   427,  1454,    51,
      89,   294,  1465,  1496,  1541,  1542,  1143,   655,  1192,   278,
     281,   429,   881,   883,   661,   673,  1500,   288,  1147,  1508,
    1148,  1149,  1496,  1119,   250,  1348,  1361,  1362,  1496,    51,
    1445,   656,  1501,    57,    67,    82,    94,    95,    96,   113,
     333,   350,   482,   542,   560,   755,   757,   384,  1565,   377,
     199,   377,   480,  1595,  1594,   596,  1600,  1601,   649,  1184,
    1185,  1186,  1182,   494,   662,    36,   132,   166,   495,   996,
     997,  1372,  1505,   197,  1372,  1505,  1515,   661,  1505,    36,
     132,   999,  1000,  1505,   662,  1516,  1514,  1372,   505,   172,
     276,   629,  1422,   654,   115,   173,   202,   419,   558,   580,
     622,  1422,    13,   943,  1505,   277,  1310,  1312,   199,   253,
    1417,  1419,    72,   535,   197,   535,   554,   512,    72,   535,
      13,    44,    98,   103,   255,   331,   395,   514,   551,  1405,
    1406,  1407,   688,   225,   535,   689,   535,  1310,  1422,  1419,
     288,   163,    75,   421,   554,   579,   197,   535,   617,  1109,
    1110,  1109,   379,   636,    92,   656,  1109,  1109,  1347,  1093,
     656,   378,  1654,   550,  1655,   260,   463,  1653,   655,  1601,
    1603,  1605,  1606,   162,   667,    11,   419,   580,   703,  1186,
    1620,  1626,  1634,  1638,  1639,  1645,   703,  1186,  1619,  1626,
    1634,  1639,  1645,  1621,   933,  1169,  1353,  1356,  1381,  1389,
    1426,  1429,  1483,  1503,   132,   928,   929,   940,   941,  1004,
     118,  1191,   661,   718,     6,   831,   718,   654,   117,   848,
     848,   848,     4,  1496,  1098,  1063,   485,   622,  1626,  1125,
    1126,  1347,   253,   656,   401,  1163,  1165,  1166,   726,   727,
    1192,   682,   182,   428,   656,  1117,    60,   182,   186,   197,
     330,   428,  1139,  1140,  1141,    58,   447,   178,   698,   831,
     631,   656,  1558,   118,   848,   232,   656,  1503,  1503,  1503,
    1349,  1350,  1496,  1497,  1503,   656,  1394,   662,  1399,  1192,
    1192,    13,   146,  1231,  1293,  1231,  1231,  1231,   628,  1241,
    1192,  1192,  1236,  1236,  1192,  1192,  1192,  1192,  1204,  1205,
    1192,  1192,  1192,  1192,   146,  1231,  1293,   655,   129,   192,
     221,   291,   371,   587,   655,  1320,  1323,  1324,   655,  1192,
    1192,  1192,  1192,  1492,  1612,   123,   124,   125,   126,   127,
     226,   227,   228,   229,   334,   336,   337,   338,   345,   426,
     483,   484,   626,   641,   642,  1288,  1289,  1236,   119,   122,
     568,   571,  1290,   146,  1226,  1192,  1192,  1192,  1192,  1288,
    1236,  1192,  1236,  1238,    10,   656,   662,   146,  1231,  1192,
    1192,   146,  1231,  1192,  1192,  1236,  1236,  1236,  1192,  1192,
    1192,  1236,  1195,  1192,  1192,  1192,  1192,  1192,  1192,   655,
    1192,  1231,  1231,  1192,  1192,   146,  1231,  1192,  1289,  1289,
    1192,    47,   269,   576,  1192,  1192,   655,  1493,  1494,  1503,
    1231,  1231,  1192,  1192,  1192,   655,   656,   655,   486,   654,
    1609,  1610,  1192,   661,  1225,  1505,   662,  1192,  1192,  1192,
    1194,   185,   370,   582,   598,  1198,    13,    19,  1194,  1201,
    1195,  1195,   654,  1206,  1195,  1195,  1195,  1195,   276,  1195,
    1195,   249,  1195,   249,  1195,  1195,  1195,  1195,  1195,    34,
     253,   276,   441,  1505,  1206,  1192,  1212,  1503,   662,   377,
     862,   368,   624,   863,   864,   164,   656,  1346,  1343,   661,
     677,   678,   288,   288,   288,   288,    51,   288,   688,   288,
     656,  1433,   122,   568,   571,   756,   766,  1223,  1486,  1492,
    1505,   656,   166,   554,   654,  1582,  1508,  1582,  1582,  1582,
    1577,   202,   419,   558,  1563,   173,   177,   189,   420,   448,
     456,   500,   549,  1567,  1503,   190,   361,  1503,  1548,  1549,
    1361,  1500,   230,   605,  1192,  1455,  1158,   283,  1464,  1292,
     656,  1346,  1187,    75,   654,   888,   889,   888,   889,   402,
     891,   218,   263,  1505,    32,   575,  1450,   656,   575,   656,
     575,  1346,  1362,  1358,   401,  1255,  1256,   688,  1444,   656,
     166,   197,   656,  1508,  1507,  1578,   202,   419,  1563,  1503,
      13,   146,  1608,   656,  1177,  1192,  1490,  1503,  1503,    73,
    1002,  1192,  1508,   376,   404,   564,  1536,   257,   432,  1531,
    1532,  1533,  1534,   210,   283,   491,  1527,  1372,  1503,   577,
    1517,  1528,  1530,   656,  1519,    13,    36,   132,   377,  1192,
    1537,   535,   253,  1420,  1500,  1192,   649,   933,   717,   717,
     717,  1496,   717,  1496,   288,   349,   535,  1414,  1414,   291,
     371,   475,   587,  1313,  1314,  1484,  1503,  1422,  1503,   717,
    1422,  1507,  1417,  1422,  1500,   717,  1422,   254,   552,   187,
     197,  1408,   656,   172,   535,  1417,  1496,  1419,  1417,  1417,
    1192,  1422,  1422,  1104,   446,   527,  1111,  1112,  1103,   509,
    1108,   486,   654,   658,  1242,  1243,  1244,  1245,  1246,  1257,
    1258,  1272,  1483,   406,  1656,   387,  1306,  1312,  1607,  1186,
    1186,  1186,   173,   202,   202,  1626,  1496,   929,    73,   995,
     142,  1505,    83,    97,   265,   342,   367,   430,   526,   720,
     722,   437,   591,   849,   850,   242,   845,   846,   847,   854,
     862,   864,   115,   224,   393,   404,   411,   510,   605,   701,
     702,  1500,    26,   322,   839,   840,   841,   854,   855,   856,
     862,   864,   832,   833,   839,  1057,   377,   711,  1064,   133,
     252,  1496,   656,   405,  1127,   132,  1156,  1503,  1154,  1496,
     877,  1165,   239,   263,  1029,  1167,   655,   656,   236,   296,
     298,   299,   300,   301,   302,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   314,   315,   316,   444,   445,   683,
     684,   687,  1347,   603,  1140,   927,   928,    83,   362,   438,
     592,   842,   843,   844,   854,   858,   859,   860,   861,   862,
     864,     7,  1562,   635,   608,   827,    49,   621,   631,  1579,
    1581,  1035,  1036,  1035,  1035,   656,  1395,  1255,   662,  1399,
    1398,   199,   649,  1503,   656,   655,  1231,   655,  1232,   655,
     655,   655,  1192,   156,   628,  1240,    20,   655,   609,   655,
     655,   655,   656,   655,   656,   655,   656,   656,   656,   656,
     609,   656,  1220,   655,   649,   655,   656,   656,   655,   655,
     655,   655,   199,   655,   656,  1222,   655,   656,   656,   656,
     648,   655,   656,   655,   655,   654,  1492,  1503,  1231,   655,
     655,   655,  1231,   655,   656,   655,   655,   655,   655,   655,
     655,   656,   655,   253,   655,   656,   656,   655,   656,   656,
     655,   655,   655,   656,   199,   656,  1231,   655,   655,   656,
     656,   656,   655,   199,  1192,   199,  1192,   199,  1192,   199,
     655,   656,   655,   655,   655,   655,   656,    20,   274,   656,
    1019,   655,  1236,  1262,  1263,  1264,   486,   654,  1172,  1604,
    1605,   596,  1614,   659,  1527,   495,  1503,   185,   370,   582,
     598,   654,    18,  1192,  1612,   171,  1298,  1195,  1192,  1192,
    1195,   654,  1206,  1195,  1186,  1216,  1217,  1218,   654,   662,
    1503,  1496,   863,  1372,  1373,  1508,    53,   462,  1099,  1346,
    1505,   656,   688,  1438,  1346,  1439,   764,   767,   768,   763,
     372,   478,   765,  1503,  1583,  1584,   575,   631,  1559,   649,
    1496,  1503,  1575,  1575,  1575,   166,   190,   203,   215,   266,
     268,   295,   361,   416,  1550,  1552,   629,  1294,  1355,  1508,
    1159,  1160,  1161,  1162,  1496,   241,   294,   432,   636,  1543,
    1542,   654,  1186,  1320,   546,   892,   882,    12,   884,  1192,
    1500,  1508,  1508,  1149,  1496,   182,   428,   607,  1120,  1121,
    1122,   486,   494,   613,   614,   654,   923,  1363,  1366,   654,
      13,  1446,   757,   756,  1562,   211,   199,   656,  1575,  1575,
    1575,  1602,  1185,   199,   250,  1178,  1179,  1305,  1306,  1335,
    1187,  1187,   662,   132,  1001,  1003,  1505,  1372,   654,   654,
     274,   379,   636,   656,   656,   662,   662,   662,  1530,  1192,
    1531,  1518,  1372,  1520,  1521,  1500,   199,  1421,   655,  1503,
     176,   318,   475,   375,   656,  1422,   427,  1310,  1407,  1420,
    1422,  1417,  1496,  1422,  1422,   656,   601,  1113,  1271,  1503,
     105,   243,   260,   272,   354,   470,   540,  1253,  1254,   494,
     656,  1496,  1271,   656,   197,  1657,    49,  1310,   202,   717,
     717,   933,   717,  1503,   691,  1373,  1373,   352,  1500,   526,
     526,   526,   526,   526,   485,  1500,  1500,  1373,   656,   847,
    1500,  1500,  1500,  1500,   129,   192,   221,   291,   371,   587,
    1319,  1500,  1500,   655,   656,  1373,  1373,   656,   841,   834,
     835,   854,   855,   856,     6,    12,    14,    16,    27,    29,
      59,    64,    65,    71,    83,    91,   101,   118,   135,   143,
     144,   150,   158,   164,   175,   195,   237,   239,   247,   262,
     286,   321,   339,   343,   382,   387,   394,   396,   401,   404,
     435,   449,   450,   451,   452,   476,   532,   533,   534,   539,
     555,   559,   578,   583,   596,   875,   936,   938,   940,   941,
    1068,  1072,  1074,  1077,  1083,  1084,  1085,  1090,  1091,  1302,
    1499,    87,   481,   450,  1065,  1627,  1126,   197,  1164,   654,
    1192,   166,   166,   166,   166,   166,   166,   166,   166,   166,
     166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
     166,   166,   656,  1373,  1373,  1373,  1373,   656,   844,  1507,
    1505,   287,   183,   836,   837,   838,   854,   855,   856,   857,
     860,   861,   862,   864,   404,   564,  1505,   585,   609,  1043,
     377,   377,   377,  1350,  1503,   609,  1392,  1503,  1243,   662,
    1399,   249,  1192,   655,  1192,   567,  1192,  1192,   160,    36,
      62,   119,   122,   130,   148,   251,   356,   502,   571,   600,
    1233,   996,  1205,  1192,  1204,  1236,  1192,  1192,   996,  1233,
    1236,   655,   249,   249,  1192,  1192,  1236,  1192,  1192,  1192,
    1192,  1192,  1195,   655,   655,  1192,  1192,  1192,  1192,  1192,
    1192,  1236,   249,  1192,  1192,  1192,   655,  1192,  1192,  1192,
    1192,   199,  1192,   199,  1192,   199,  1192,  1192,  1192,    36,
      62,  1014,  1015,  1016,  1017,  1018,  1320,  1319,   655,   655,
    1615,  1616,  1617,  1263,  1172,   655,  1608,  1505,  1192,  1612,
    1194,   655,   656,   655,  1206,  1288,  1288,    18,  1192,  1612,
    1298,  1192,   655,   656,  1235,  1236,  1503,  1344,   942,  1505,
    1099,   678,   197,   631,  1434,  1435,   166,   656,   655,   656,
    1577,     7,   662,   662,   575,   575,   575,  1551,  1295,  1311,
    1312,  1363,   656,  1163,  1165,   564,  1502,   636,   283,    89,
     885,   886,   887,  1503,   897,  1195,    49,   654,   899,   889,
     166,   654,   575,  1121,   924,  1364,   654,  1369,  1374,  1369,
     655,   923,  1365,  1489,  1490,  1493,  1503,  1367,  1287,  1503,
     166,   384,  1576,  1507,   199,   199,   199,  1170,   151,  1243,
    1336,   197,   286,  1183,  1335,  1311,  1179,    20,  1188,  1500,
    1503,   649,  1503,  1536,   564,   564,   432,   453,   489,  1535,
    1533,  1532,  1372,  1519,  1537,   656,  1523,  1525,  1529,   129,
     192,   291,   371,   587,  1321,  1412,   169,   625,  1314,  1316,
    1314,  1315,   176,   318,  1314,  1314,   371,  1421,  1294,  1417,
    1112,   297,   687,  1114,  1259,  1266,  1271,  1242,   260,   260,
     390,  1273,   272,   470,  1253,  1273,  1242,  1384,  1385,  1493,
    1244,  1255,  1268,  1269,  1319,   335,  1307,  1503,  1646,     9,
      32,   822,   717,   654,   466,   276,   654,   866,   869,   935,
     937,   938,  1003,   997,   118,   118,   133,   252,   221,   291,
     371,   587,   865,  1322,  1323,  1499,   847,   702,   865,   865,
     841,   656,   835,    81,    93,   401,   952,   959,   960,  1027,
    1029,  1033,  1034,  1092,  1373,  1092,   401,  1373,  1373,  1092,
    1373,   401,   401,  1373,  1373,   575,   142,  1373,   261,   555,
     196,   401,   417,  1029,  1092,   261,  1373,   401,   555,   142,
    1373,  1373,  1373,  1373,  1373,  1092,   401,    49,  1373,  1373,
     877,  1373,   401,   403,    20,   166,   575,  1101,   401,   401,
    1373,  1373,  1373,  1373,   145,   331,  1503,  1373,  1373,   401,
    1373,   936,   656,   874,   875,  1072,   654,   662,   951,   961,
    1495,  1503,  1372,   365,   415,    24,   174,   705,   575,   143,
     158,   707,   654,  1628,    13,    75,  1128,   654,   417,  1284,
    1285,  1286,  1503,   654,  1319,  1500,  1500,  1321,  1500,  1319,
    1500,  1500,  1500,  1500,  1500,  1500,  1500,  1319,  1319,  1500,
     111,   367,   506,  1487,  1500,  1319,   684,  1500,  1320,   865,
     865,   844,   383,   213,  1373,   656,   838,   564,    20,   609,
    1580,    48,   218,   479,  1048,  1048,  1496,  1496,  1496,   662,
    1243,  1294,  1399,  1294,  1192,   655,  1192,   567,   654,   986,
     987,   987,   987,   654,   981,   982,   986,  1234,   987,   251,
     987,   251,   655,   655,   655,    20,  1202,   655,    20,   655,
     655,   655,  1221,  1192,  1192,   655,   655,   387,  1228,   656,
     656,   655,   656,   655,   253,  1213,  1214,   655,   655,   655,
     655,   656,   655,   655,  1192,   655,   197,   655,   655,   656,
     655,   656,   656,   655,  1192,   655,  1192,   655,  1192,   655,
     655,   655,   654,  1009,  1009,    21,   137,   468,   647,  1011,
    1012,  1013,   656,   656,  1184,  1617,   655,  1611,   662,  1053,
     655,  1236,  1194,   655,   656,   655,  1187,  1218,   655,  1436,
     432,    57,    67,    82,    94,    95,    96,   113,   333,   350,
     464,   482,   542,   560,   769,   768,  1584,   631,  1587,   384,
     649,   649,  1577,  1577,  1577,   654,  1192,   377,  1379,  1161,
    1496,  1165,   235,  1168,  1460,   655,   656,  1187,   883,   401,
     900,   901,  1320,   885,  1508,  1180,  1370,  1371,  1493,  1375,
     656,   654,  1366,   655,   655,   656,   662,  1600,   655,   656,
     756,   199,  1578,  1578,  1578,  1294,  1294,   152,   391,  1331,
    1332,  1337,   602,   253,  1500,  1503,   662,   655,   655,    84,
     588,   432,  1537,  1522,  1524,  1310,  1316,  1315,  1413,  1422,
     166,   656,   596,   655,  1604,  1267,   659,   260,  1273,  1273,
    1257,   260,   377,   609,   656,  1383,  1372,  1292,  1180,  1192,
    1308,  1491,   466,   654,   136,   246,   602,   823,   704,  1640,
     130,   251,   434,   541,   947,  1496,   276,   923,   948,   949,
     950,   951,   952,   873,   874,   656,   937,   835,  1051,  1495,
     933,    65,   196,   417,   597,   958,  1028,   933,  1052,  1029,
    1030,  1030,   933,   132,  1503,  1495,  1144,  1321,  1319,  1351,
    1319,    13,  1073,  1081,  1082,  1503,  1144,  1500,  1500,   995,
    1373,  1319,   263,  1351,   263,  1351,  1351,   942,  1082,  1373,
     190,   266,   367,   945,  1319,   132,  1503,  1321,  1321,  1351,
    1144,  1303,  1304,  1493,   132,  1319,   132,  1319,  1325,   876,
    1500,  1144,  1496,  1144,  1144,    86,    88,   132,   154,   191,
     395,   439,   944,   132,  1319,   132,  1319,   132,  1319,  1319,
    1325,  1073,   939,     6,   150,  1085,   948,  1503,     9,   190,
    1100,   440,   957,   958,  1021,   962,   662,   132,  1322,  1500,
    1503,   415,  1192,  1192,   377,   711,   717,   377,    83,   712,
    1503,  1629,    20,    13,   654,  1129,  1073,   655,   656,   685,
     686,  1319,   654,  1503,   865,   838,  1500,   692,   694,   696,
    1503,  1294,  1305,  1288,  1192,   129,   291,   371,   587,    22,
      36,    50,   594,   995,  1005,  1006,  1007,   371,   654,   982,
     988,    62,   119,   122,   130,   148,   193,   251,   353,   356,
     434,   571,   600,   975,   976,  1203,  1233,   655,  1288,  1288,
      49,   488,  1227,  1192,  1192,  1236,    45,   354,   655,   631,
    1215,  1192,  1288,  1192,  1192,  1192,  1192,   655,   655,   655,
    1320,   655,  1019,  1014,  1012,  1014,  1015,  1319,  1265,  1609,
    1503,   655,  1236,  1188,   181,   286,   211,   457,  1585,  1585,
    1585,   132,  1192,  1377,  1378,   153,  1168,   270,   235,   455,
    1466,   887,   655,   218,   263,   902,   655,   656,   655,  1184,
     656,  1372,  1376,  1377,  1374,  1368,  1366,  1489,  1503,   877,
    1503,  1578,  1311,   213,  1299,  1502,  1502,   661,  1333,  1334,
    1505,   496,   649,  1523,  1528,  1310,  1500,   687,  1608,  1292,
    1245,  1242,  1257,   260,   260,  1242,  1257,  1247,  1248,  1385,
    1294,  1378,  1282,  1283,  1184,   656,    21,   137,  1309,   947,
    1647,   377,   377,   728,   729,   731,  1503,   512,  1496,   655,
     655,   656,   870,  1466,   937,  1144,   654,   263,   263,  1030,
    1052,  1051,  1036,  1052,  1052,   150,   494,  1073,  1495,  1070,
     656,  1320,   997,  1500,  1351,  1081,  1495,  1495,   631,  1500,
    1495,  1073,   656,  1309,   880,  1073,  1078,  1073,   654,   655,
    1503,  1496,    35,    36,    41,    43,    45,    46,   119,   122,
     130,   148,   165,   191,   193,   206,   207,   251,   280,   289,
     290,   292,   327,   328,   329,   346,   347,   348,   353,   356,
     373,   374,   409,   410,   434,   490,   494,   508,   565,   568,
     571,   572,   573,   574,   615,   616,   642,   963,   971,   974,
     975,   976,   977,   978,   979,   980,  1503,  1288,   504,  1500,
     149,  1066,   655,   656,  1630,  1631,  1130,   238,   655,  1285,
     655,   656,   701,   654,   654,   654,   277,  1317,   655,   655,
     655,   655,   655,    36,    22,   594,   995,    36,   996,   656,
     371,   987,   981,    62,   987,   251,  1007,   655,   655,   655,
    1229,  1483,   655,   655,   656,   655,   341,   265,   427,   655,
     655,   655,   655,   655,   655,  1010,   655,   656,   946,  1179,
    1311,  1604,   655,    18,  1440,   384,    66,   258,   363,   528,
     544,   637,  1573,  1574,   631,  1586,  1586,  1586,   655,   656,
    1380,   250,   654,   890,   884,   903,  1503,   901,   925,  1371,
    1378,   655,  1603,    49,   219,  1296,  1338,  1505,   656,   341,
    1260,   377,  1250,  1257,  1257,   377,  1252,  1192,   654,  1305,
    1280,  1281,  1270,  1491,   512,   244,   253,   392,   732,   733,
     734,   735,  1186,   481,   655,   656,   730,  1500,   655,   868,
     867,   950,    20,   926,  1075,  1192,  1052,  1036,   654,  1035,
    1035,   132,   132,  1086,  1139,  1082,  1002,  1495,  1099,   558,
    1087,  1069,  1304,  1079,  1081,  1071,  1439,   654,  1022,   986,
     986,   987,   987,   981,   413,   972,   981,   981,  1007,    62,
     615,   975,   977,  1007,  1007,    62,   616,   616,   619,   981,
     973,   987,   987,   987,  1007,   986,   987,    27,    73,    83,
     132,   205,   370,   377,   417,   490,   597,   964,   989,   990,
     991,  1020,  1198,  1499,   619,   986,  1007,    36,   986,  1008,
     986,   986,   987,   988,   662,   706,   713,   714,  1503,   486,
     654,  1632,  1133,  1503,    13,   654,  1131,   686,   655,  1049,
    1050,  1503,  1049,  1049,   475,  1314,  1393,   996,  1008,   371,
    1230,  1491,  1192,   341,   180,   655,  1319,  1183,  1183,   143,
     564,   564,   564,    18,  1572,   211,   319,   320,   324,   325,
    1588,  1589,  1378,   263,   558,  1186,   893,   654,   613,   904,
     946,  1300,  1491,  1297,  1305,   995,   998,  1334,  1609,  1249,
     609,  1251,   609,  1287,  1317,   195,   235,   608,  1275,  1276,
    1279,   946,  1309,  1500,   655,   656,   730,  1635,   705,  1641,
     731,   971,   992,  1603,   935,   654,   923,   402,   654,  1076,
     655,   654,   654,  1049,   654,   654,   122,   568,   571,   647,
     648,  1485,  1486,   961,  1496,   963,  1144,  1080,  1120,   655,
    1023,  1503,   317,  1024,   502,   600,   643,   983,   984,   985,
     654,   983,   983,  1007,   619,   983,   654,  1007,   983,  1001,
    1500,   366,   993,  1485,    15,   602,   132,   263,    20,   991,
     263,   370,  1372,  1007,  1008,  1007,  1008,   983,   983,  1503,
     530,   708,    55,    70,   188,   234,   259,   271,   381,   467,
     715,   773,   775,   776,   777,   779,   780,   781,   782,   783,
     784,   786,   794,   795,   798,   809,   812,   814,   815,  1499,
    1504,  1510,  1173,  1171,   631,  1633,   655,   656,  1132,   655,
     656,  1309,   654,   655,   655,   176,   475,   465,  1396,   655,
     656,  1309,   655,   655,    63,  1573,   384,  1319,  1319,  1319,
     371,   647,  1318,  1589,   602,  1496,   897,   545,   898,   895,
     896,  1503,   253,   273,    83,    91,   118,   239,   321,   339,
     362,   555,   920,   921,   922,  1416,   632,   633,   656,  1301,
    1309,  1192,  1311,   997,  1339,  1261,  1192,   654,  1192,   654,
     655,  1029,  1029,  1276,  1648,   734,  1503,  1496,   710,   711,
     466,  1002,   873,   923,   871,  1320,   900,  1049,  1049,   655,
    1049,  1049,  1487,  1487,  1100,   877,  1088,   250,   655,   656,
     200,   400,   503,   377,  1025,   985,  1054,  1483,  1054,   654,
    1189,   366,   614,   654,   132,  1322,  1500,  1503,  1192,   161,
     709,   796,   799,  1503,   199,   361,   787,   774,  1504,  1504,
    1503,   778,   669,   293,   454,   630,   818,    33,   816,   663,
     655,    54,    65,   283,  1503,   417,  1134,  1135,  1503,    83,
     262,  1037,  1040,  1043,  1044,  1045,  1499,  1050,   371,   631,
    1038,  1042,  1044,  1047,  1039,  1041,  1044,  1046,   176,  1184,
    1491,   291,   371,  1386,  1387,  1493,  1255,  1187,  1320,   655,
     656,   906,   566,  1373,  1373,   142,   142,  1373,  1373,  1373,
    1373,   654,   915,   922,   164,  1491,   419,  1326,    75,  1467,
    1604,  1287,  1287,   197,  1274,  1274,   719,   992,   197,   707,
    1642,   870,   655,  1600,   655,   655,   655,   953,   655,   655,
    1100,   654,  1503,   136,   602,   655,   656,   655,   655,  1320,
    1189,   970,  1192,  1192,   628,   801,   805,   199,  1503,   789,
     790,  1192,   737,   772,   773,   775,   777,   779,   781,   782,
     783,   784,   786,   794,   809,   812,   814,   737,   819,   817,
     810,   813,  1603,    65,   384,    65,   655,   656,  1500,  1373,
     693,  1045,  1372,  1309,   655,   398,   695,  1047,   697,  1046,
    1309,   656,  1372,  1461,   655,   894,   896,   654,   908,   910,
     905,  1500,  1500,  1373,  1373,  1322,  1322,  1320,  1505,   546,
     916,   917,  1373,  1309,  1503,   159,   170,   385,   563,  1468,
    1469,   279,  1470,   655,   655,   213,   260,   387,  1278,  1277,
     140,   720,   721,  1198,  1649,  1186,   712,   992,   872,  1021,
     956,  1037,   954,   955,   900,    53,   367,   462,   494,  1026,
    1026,  1007,  1483,  1007,   655,   655,   797,   806,   156,   805,
     808,   250,   160,  1192,   160,   772,   660,   601,  1192,   738,
     818,   816,   384,   384,  1135,  1319,  1089,  1090,  1091,   132,
    1322,  1500,  1503,  1499,  1089,  1089,  1387,  1378,   998,   898,
     654,   909,   910,   911,   326,   907,   910,  1500,  1500,   918,
     655,   656,   942,  1327,    49,    49,   159,    49,  1469,   529,
     563,  1471,  1472,    49,    49,   654,   654,   140,   772,  1636,
     149,  1643,  1603,  1037,  1038,  1039,   655,     5,   132,   370,
     377,   377,   405,   623,   965,   628,   800,   802,  1192,   737,
     160,   785,   234,   567,   293,   660,   821,   149,   131,   736,
     739,   811,  1504,   811,  1091,  1090,  1462,   655,   656,   326,
     913,   914,  1195,   919,  1505,   917,   654,  1483,  1483,    49,
    1483,    49,    49,  1472,  1284,  1286,   155,   713,   719,   602,
     136,    83,   597,   966,   967,   968,   803,   802,   808,   807,
      55,   788,  1503,   791,  1192,   820,    99,   179,   744,   770,
    1503,   160,   772,   660,   475,  1473,   910,   656,   912,   920,
    1186,  1328,  1329,  1330,  1483,  1483,  1483,   655,   655,   477,
    1644,  1026,  1026,  1500,   263,   968,  1192,   160,   567,   656,
     737,   160,   737,   216,   656,   740,    90,   112,   660,   232,
    1467,   914,   655,  1192,   655,   656,  1637,   772,   804,    55,
     737,  1503,   792,   454,   160,   197,  1503,   992,   197,   197,
      49,  1470,  1187,  1330,   772,   567,   156,   157,   793,   630,
     741,   132,   771,   747,   748,  1319,   742,   743,  1483,   235,
    1474,   737,   737,   789,   517,   519,   745,   746,   747,   750,
    1198,  1503,  1192,  1169,   371,   654,  1476,   656,   772,   198,
     279,   475,  1475,   655,   661,  1477,  1478,  1493,   494,  1479,
     746,  1505,   655,   656,  1480,  1481,  1493,  1478,   656,  1372,
    1481,  1186,  1378,  1187
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (thd, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, thd)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, thd); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (thd);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, THD *thd)
#else
static void
yy_reduce_print (yyvsp, yyrule, thd)
    YYSTYPE *yyvsp;
    int yyrule;
    THD *thd;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , thd);
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, thd); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, THD *thd)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, thd)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    THD *thd;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (thd);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (THD *thd);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */






/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (THD *thd)
#else
int
yyparse (thd)
    THD *thd;
#endif
#endif
{
  /* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;

  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 1932 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:
#line 1943 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((thd->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:
#line 1968 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 65:
#line 2045 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 68:
#line 2059 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 69:
#line 2068 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 70:
#line 2074 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 71:
#line 2083 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 72:
#line 2089 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 77:
#line 2104 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 78:
#line 2116 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 79:
#line 2124 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 80:
#line 2135 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
    break;

  case 81:
#line 2139 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 84:
#line 2149 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 85:
#line 2153 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 86:
#line 2157 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 87:
#line 2161 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 88:
#line 2165 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 89:
#line 2169 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 90:
#line 2174 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:
#line 2178 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:
#line 2182 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:
#line 2186 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:
#line 2190 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:
#line 2194 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 96:
#line 2199 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 97:
#line 2203 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 98:
#line 2208 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 99:
#line 2239 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 104:
#line 2254 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 105:
#line 2260 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 106:
#line 2264 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 107:
#line 2280 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 108:
#line 2284 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 109:
#line 2290 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_CURRENT_POS;
          }
    break;

  case 110:
#line 2300 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_SLAVE_POS;
          }
    break;

  case 111:
#line 2310 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_NO;
          }
    break;

  case 112:
#line 2322 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
          }
    break;

  case 114:
#line 2331 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
           Lex->mi.connection_name= (yyvsp[(1) - (1)].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[(1) - (1)].lex_str)))
           {
              my_error(ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME");
              MYSQL_YYABORT;
           }
#endif
         }
    break;

  case 115:
#line 2346 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if ((yyvsp[(1) - (5)].num) && (yyvsp[(4) - (5)].num))
            {
               my_error(ER_WRONG_USAGE, MYF(0), "OR REPLACE", "IF NOT EXISTS");
               MYSQL_YYABORT;
            }
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            /*
              For CREATE TABLE we should not open the table even if it exists.
              If the table exists, we should either not create it or replace it
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
            lex->create_info.options= ((yyvsp[(1) - (5)].num) | (yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num));
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 116:
#line 2374 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(thd);
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 117:
#line 2390 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 118:
#line 2395 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 119:
#line 2399 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { }
    break;

  case 120:
#line 2402 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 121:
#line 2407 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 122:
#line 2411 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { }
    break;

  case 123:
#line 2414 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 124:
#line 2419 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 125:
#line 2423 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { }
    break;

  case 126:
#line 2425 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 127:
#line 2430 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 128:
#line 2437 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= ((yyvsp[(1) - (1)].num) == 0 ? VIEW_CREATE_NEW :
                                    VIEW_CREATE_OR_REPLACE);
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 129:
#line 2444 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].num) && Lex->sql_command != SQLCOM_CREATE_VIEW)
            {
               my_error(ER_WRONG_USAGE, MYF(0), "OR REPLACE",
                       "TRIGGERS / SP / EVENT");
               MYSQL_YYABORT;
            }
          }
    break;

  case 130:
#line 2453 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 131:
#line 2457 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_ROLE;
          }
    break;

  case 132:
#line 2461 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 133:
#line 2465 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 134:
#line 2469 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 135:
#line 2480 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 138:
#line 2494 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 139:
#line 2498 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 140:
#line 2502 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 141:
#line 2506 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 142:
#line 2510 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 143:
#line 2514 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 144:
#line 2518 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 145:
#line 2525 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 146:
#line 2544 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 147:
#line 2555 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 149:
#line 2562 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 150:
#line 2568 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 151:
#line 2570 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 152:
#line 2576 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 153:
#line 2582 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 154:
#line 2591 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 155:
#line 2598 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 157:
#line 2606 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 158:
#line 2612 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 160:
#line 2618 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 161:
#line 2624 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 162:
#line 2632 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 163:
#line 2634 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 164:
#line 2641 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 165:
#line 2683 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 179:
#line 2714 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 180:
#line 2729 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 181:
#line 2745 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 182:
#line 2762 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 183:
#line 2763 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 184:
#line 2767 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 185:
#line 2768 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 186:
#line 2774 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 187:
#line 2776 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 188:
#line 2778 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 189:
#line 2780 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 190:
#line 2782 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 191:
#line 2784 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 192:
#line 2786 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 193:
#line 2791 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { }
    break;

  case 194:
#line 2792 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 195:
#line 2793 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 196:
#line 2798 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 197:
#line 2802 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 198:
#line 2809 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, thd, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 199:
#line 2817 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 204:
#line 2833 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 205:
#line 2837 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 210:
#line 2855 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 211:
#line 2876 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_variable *spvar= spc->add_variable(thd,
                                                  (yyvsp[(1) - (3)].lex_str),
                                                  (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                  sp_variable::MODE_IN);

            if (lex->sphead->fill_field_definition(thd, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 216:
#line 2915 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable *spvar= spc->add_variable(thd,
                                                  (yyvsp[(3) - (4)].lex_str),
                                                  (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                  (sp_variable::enum_mode) (yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(thd, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 217:
#line 2941 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 218:
#line 2942 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 219:
#line 2943 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_OUT; }
    break;

  case 220:
#line 2944 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_INOUT; }
    break;

  case 221:
#line 2948 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 223:
#line 2953 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 225:
#line 2959 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 226:
#line 2963 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 227:
#line 2989 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(thd);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 228:
#line 2997 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->default_value= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(thd, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 229:
#line 3053 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(spc->add_condition(thd, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 230:
#line 3068 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_handler *h= lex->spcont->add_handler(thd,
                                                    (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, h);

            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 231:
#line 3094 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 232:
#line 3124 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor((yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->add_cursor((yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 233:
#line 3149 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd);
          }
    break;

  case 234:
#line 3153 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 235:
#line 3172 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 236:
#line 3173 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 237:
#line 3179 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 238:
#line 3181 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 239:
#line 3186 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondvalue));
            }
          }
    break;

  case 240:
#line 3208 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 242:
#line 3223 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 243:
#line 3244 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 244:
#line 3245 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 245:
#line 3250 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 246:
#line 3254 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= Lex->spcont->find_condition((yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spcondvalue) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 247:
#line 3263 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 248:
#line 3269 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 249:
#line 3275 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 250:
#line 3284 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[(2) - (3)].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 251:
#line 3298 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_condition_value *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_condition((yyvsp[(1) - (1)].lex_str), false);
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_condition_value::SQLSTATE)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= cond;
          }
    break;

  case 252:
#line 3321 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 253:
#line 3326 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= NULL; }
    break;

  case 254:
#line 3328 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 255:
#line 3333 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            thd->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 257:
#line 3341 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 258:
#line 3350 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 259:
#line 3369 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 260:
#line 3371 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 261:
#line 3389 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 262:
#line 3395 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 263:
#line 3397 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 264:
#line 3399 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 265:
#line 3401 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 266:
#line 3403 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 267:
#line 3405 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 268:
#line 3407 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 269:
#line 3409 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 270:
#line 3411 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 271:
#line 3413 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 272:
#line 3415 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 273:
#line 3417 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 274:
#line 3422 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[(2) - (3)].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 275:
#line 3437 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 276:
#line 3452 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 277:
#line 3454 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 278:
#line 3459 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (thd->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 279:
#line 3465 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (thd->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 280:
#line 3474 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_list)= new (thd->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 281:
#line 3480 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item)))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 282:
#line 3489 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_item)= new (thd->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 283:
#line 3497 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip= &thd->m_parser_state->m_lip;
            (yyval.item)= create_item_for_sp_var(thd, (yyvsp[(1) - (1)].lex_str), NULL,
                                       lip->get_tok_start(), lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 284:
#line 3506 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 285:
#line 3515 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 286:
#line 3517 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 287:
#line 3526 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 288:
#line 3531 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.cond_info_list)= new (thd->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 289:
#line 3537 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item)))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 290:
#line 3546 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.cond_info_item)= new (thd->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 291:
#line 3554 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 292:
#line 3556 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 293:
#line 3558 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 294:
#line 3560 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 295:
#line 3562 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 296:
#line 3564 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 297:
#line 3566 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 298:
#line 3568 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 299:
#line 3570 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 300:
#line 3572 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 301:
#line 3574 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 302:
#line 3576 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 303:
#line 3578 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 304:
#line 3583 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->add_variable(thd,
                              (yyvsp[(1) - (1)].lex_str),
                              MYSQL_TYPE_DECIMAL,
                              sp_variable::MODE_IN);
            (yyval.num)= 1;
          }
    break;

  case 305:
#line 3601 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->add_variable(thd,
                              (yyvsp[(3) - (3)].lex_str),
                              MYSQL_TYPE_DECIMAL,
                              sp_variable::MODE_IN);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 306:
#line 3621 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 307:
#line 3622 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 321:
#line 3643 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 322:
#line 3645 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 323:
#line 3649 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 324:
#line 3657 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 325:
#line 3704 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 326:
#line 3706 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 327:
#line 3732 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label(thd, empty_lex_str,
                                    lex->sphead->instructions());
          }
    break;

  case 328:
#line 3739 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 329:
#line 3748 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == sp_label::BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 330:
#line 3801 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 331:
#line 3844 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 332:
#line 3864 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 333:
#line 3881 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 334:
#line 3886 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 338:
#line 3912 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 339:
#line 3932 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(3) - (3)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 340:
#line 3954 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 341:
#line 3956 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 342:
#line 3972 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0));
          }
    break;

  case 343:
#line 3984 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 349:
#line 4004 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 350:
#line 4010 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 351:
#line 4023 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 352:
#line 4031 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 353:
#line 4039 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 358:
#line 4057 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 359:
#line 4061 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 360:
#line 4073 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 361:
#line 4082 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 362:
#line 4086 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 363:
#line 4096 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 364:
#line 4105 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 366:
#line 4120 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label(thd, (yyvsp[(1) - (2)].lex_str), lex->sphead->instructions());
              lab->type= sp_label::ITERATION;
            }
          }
    break;

  case 367:
#line 4137 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 368:
#line 4154 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 369:
#line 4155 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 370:
#line 4160 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label(thd, (yyvsp[(1) - (2)].lex_str), lex->sphead->instructions());
            lab->type= sp_label::BEGIN;
          }
    break;

  case 371:
#line 4175 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 372:
#line 4191 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->push_label(thd, empty_lex_str, ip);
            lab->type= sp_label::BEGIN;
          }
    break;

  case 373:
#line 4198 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 374:
#line 4206 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::REGULAR_SCOPE);
          }
    break;

  case 375:
#line 4216 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 376:
#line 4244 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 377:
#line 4254 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 378:
#line 4256 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 379:
#line 4272 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 380:
#line 4283 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 381:
#line 4285 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 382:
#line 4304 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 383:
#line 4306 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 384:
#line 4311 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 385:
#line 4313 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 386:
#line 4315 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 390:
#line 4349 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 391:
#line 4351 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 392:
#line 4361 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 393:
#line 4367 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 398:
#line 4390 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 445:
#line 4484 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 446:
#line 4492 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 447:
#line 4500 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 448:
#line 4508 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 449:
#line 4520 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 450:
#line 4532 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 451:
#line 4537 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 452:
#line 4542 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 453:
#line 4550 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 454:
#line 4558 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 455:
#line 4566 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 456:
#line 4574 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 457:
#line 4582 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 458:
#line 4590 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 459:
#line 4598 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 460:
#line 4611 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 461:
#line 4624 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 464:
#line 4643 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 465:
#line 4648 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 466:
#line 4660 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulonglong_number);}
    break;

  case 467:
#line 4662 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 468:
#line 4713 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->create_info.option_list= NULL; }
    break;

  case 469:
#line 4714 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 470:
#line 4715 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 471:
#line 4721 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 472:
#line 4721 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 473:
#line 4723 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {

            Lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            TABLE_LIST *src_table= Lex->select_lex.add_table_to_list(thd,
                                        (yyvsp[(1) - (1)].table), NULL, 0, TL_READ, MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 474:
#line 4736 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(2) - (2)].table); }
    break;

  case 475:
#line 4737 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(3) - (4)].table); }
    break;

  case 476:
#line 4741 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 477:
#line 4743 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 478:
#line 4744 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 479:
#line 4746 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 480:
#line 4747 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 481:
#line 4752 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 482:
#line 4788 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 484:
#line 4794 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 486:
#line 4812 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 487:
#line 4831 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 488:
#line 4843 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 490:
#line 4852 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 491:
#line 4859 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 492:
#line 4860 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 493:
#line 4862 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 494:
#line 4864 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 495:
#line 4866 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 496:
#line 4868 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 497:
#line 4872 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 498:
#line 4874 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 499:
#line 4879 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
    break;

  case 500:
#line 4881 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            switch ((yyvsp[(3) - (3)].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 501:
#line 4897 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 502:
#line 4898 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 503:
#line 4902 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 504:
#line 4903 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 505:
#line 4908 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 506:
#line 4927 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 507:
#line 4937 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 508:
#line 4948 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 509:
#line 4956 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 510:
#line 4958 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 511:
#line 4973 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 512:
#line 4975 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 513:
#line 4976 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 514:
#line 4979 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 515:
#line 4984 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 516:
#line 4988 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 517:
#line 4989 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 518:
#line 4994 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 519:
#line 5012 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 520:
#line 5027 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 521:
#line 5029 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 522:
#line 5044 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 523:
#line 5060 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 524:
#line 5081 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 525:
#line 5082 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 526:
#line 5087 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 527:
#line 5106 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 528:
#line 5111 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 529:
#line 5120 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 530:
#line 5142 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 531:
#line 5157 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 532:
#line 5159 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 533:
#line 5174 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 534:
#line 5179 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 535:
#line 5200 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 536:
#line 5205 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 537:
#line 5234 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 538:
#line 5245 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 539:
#line 5246 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 540:
#line 5251 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 541:
#line 5262 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 542:
#line 5264 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 543:
#line 5287 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 544:
#line 5288 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 545:
#line 5293 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 546:
#line 5306 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(thd, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 547:
#line 5326 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 548:
#line 5340 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 549:
#line 5365 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 550:
#line 5366 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 551:
#line 5371 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 552:
#line 5403 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 553:
#line 5408 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 554:
#line 5412 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 555:
#line 5413 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 556:
#line 5417 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 557:
#line 5418 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 558:
#line 5423 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 559:
#line 5425 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 560:
#line 5431 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
          }
    break;

  case 561:
#line 5437 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 562:
#line 5439 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 563:
#line 5441 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 564:
#line 5443 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 565:
#line 5445 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 566:
#line 5447 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 567:
#line 5456 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 568:
#line 5471 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 569:
#line 5475 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 570:
#line 5485 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 571:
#line 5486 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 572:
#line 5490 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 573:
#line 5491 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 574:
#line 5495 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 575:
#line 5496 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 576:
#line 5500 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 577:
#line 5501 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 578:
#line 5505 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 579:
#line 5506 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 580:
#line 5510 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 581:
#line 5511 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 582:
#line 5515 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 583:
#line 5520 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->check_exists= FALSE;
            (yyval.num)= 0;
          }
    break;

  case 584:
#line 5525 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->check_exists= TRUE;
            (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS;
          }
    break;

  case 585:
#line 5533 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 586:
#line 5537 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)= HA_LEX_CREATE_REPLACE;
          }
    break;

  case 594:
#line 5560 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 595:
#line 5565 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 596:
#line 5570 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 597:
#line 5575 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 598:
#line 5580 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 599:
#line 5585 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 600:
#line 5590 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 601:
#line 5595 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 602:
#line 5610 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 603:
#line 5616 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 604:
#line 5631 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 605:
#line 5636 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 606:
#line 5651 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 607:
#line 5657 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 608:
#line 5675 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 609:
#line 5680 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 610:
#line 5685 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 611:
#line 5690 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 612:
#line 5695 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 613:
#line 5700 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 614:
#line 5705 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 615:
#line 5709 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 618:
#line 5733 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 619:
#line 5738 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 620:
#line 5743 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 621:
#line 5748 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 622:
#line 5750 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 623:
#line 5752 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 624:
#line 5754 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 625:
#line 5760 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 626:
#line 5765 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 627:
#line 5770 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 628:
#line 5776 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 629:
#line 5782 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 630:
#line 5788 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 631:
#line 5797 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 632:
#line 5815 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 633:
#line 5832 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 634:
#line 5855 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 635:
#line 5868 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 636:
#line 5869 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 637:
#line 5870 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 638:
#line 5871 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 639:
#line 5872 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 640:
#line 5873 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 641:
#line 5874 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_PAGE; }
    break;

  case 642:
#line 5878 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 643:
#line 5879 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 644:
#line 5880 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 645:
#line 5884 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 647:
#line 5889 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 648:
#line 5890 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 649:
#line 5891 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 650:
#line 5892 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 651:
#line 5898 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 657:
#line 5916 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 658:
#line 5923 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 659:
#line 5925 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(2) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 660:
#line 5931 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 661:
#line 5933 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 662:
#line 5939 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 663:
#line 5941 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 664:
#line 5947 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 665:
#line 5949 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (9)].key_type), (yyvsp[(3) - (9)].lex_str).str ? (yyvsp[(3) - (9)].lex_str) : (yyvsp[(1) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 666:
#line 5954 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table)->db,
                                      (yyvsp[(8) - (8)].table)->table,
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option,
                                      lex->check_exists);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->option_list= NULL;
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 667:
#line 5975 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 671:
#line 5990 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 672:
#line 5991 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 673:
#line 5995 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 674:
#line 6000 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 675:
#line 6011 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (3)].lex_str), (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 676:
#line 6025 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 677:
#line 6029 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)= (enum enum_field_types)MYSQL_TYPE_VIRTUAL;
            Lex->vcol_info->set_field_type((enum enum_field_types) (yyvsp[(1) - (8)].num));
          }
    break;

  case 679:
#line 6037 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 680:
#line 6042 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 681:
#line 6046 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 682:
#line 6050 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 683:
#line 6056 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 684:
#line 6057 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 685:
#line 6061 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 687:
#line 6067 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 688:
#line 6073 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 689:
#line 6078 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 690:
#line 6083 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            if (!Lex->parse_vcol_expr)
            {
              my_message(ER_SYNTAX_ERROR, ER(ER_SYNTAX_ERROR), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 691:
#line 6099 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->vcol_info= new Virtual_column_info();
            if (!Lex->vcol_info)
            {
              mem_alloc_error(sizeof(Virtual_column_info));
              MYSQL_YYABORT;
            }
            uint expr_len= (uint)((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)) - 1;
            Lex->vcol_info->expr_str.str= (char* ) sql_memdup((yyvsp[(1) - (3)].simple_string) + 1, expr_len);
            Lex->vcol_info->expr_str.length= expr_len;
            Lex->vcol_info->expr_item= (yyvsp[(2) - (3)].item);
          }
    break;

  case 692:
#line 6114 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 693:
#line 6115 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 694:
#line 6116 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 695:
#line 6118 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 696:
#line 6123 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 697:
#line 6127 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 698:
#line 6132 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 699:
#line 6137 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 700:
#line 6141 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 701:
#line 6146 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 702:
#line 6151 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 703:
#line 6157 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 704:
#line 6162 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 705:
#line 6168 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 706:
#line 6172 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 707:
#line 6177 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 708:
#line 6182 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 709:
#line 6200 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 710:
#line 6202 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 711:
#line 6204 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (thd->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 712:
#line 6217 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 713:
#line 6219 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 714:
#line 6224 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 715:
#line 6229 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 716:
#line 6241 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 717:
#line 6246 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 718:
#line 6251 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 719:
#line 6256 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 720:
#line 6258 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 721:
#line 6260 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 722:
#line 6262 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 723:
#line 6264 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 724:
#line 6266 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 725:
#line 6268 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 726:
#line 6270 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 727:
#line 6272 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 728:
#line 6274 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 729:
#line 6276 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 730:
#line 6278 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 731:
#line 6280 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 732:
#line 6282 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 733:
#line 6290 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 734:
#line 6291 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 735:
#line 6293 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 736:
#line 6297 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 737:
#line 6298 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 738:
#line 6299 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 739:
#line 6300 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 740:
#line 6301 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 741:
#line 6305 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 742:
#line 6309 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 743:
#line 6310 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 744:
#line 6314 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 745:
#line 6315 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 746:
#line 6319 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 747:
#line 6320 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 748:
#line 6321 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 749:
#line 6322 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 750:
#line 6323 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 751:
#line 6327 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 752:
#line 6328 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 753:
#line 6329 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 754:
#line 6330 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 755:
#line 6331 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 756:
#line 6336 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)= thd->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 757:
#line 6341 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 758:
#line 6343 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 759:
#line 6348 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 760:
#line 6350 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 761:
#line 6352 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 762:
#line 6357 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 763:
#line 6365 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 764:
#line 6366 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 765:
#line 6370 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 766:
#line 6371 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 767:
#line 6375 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 768:
#line 6376 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 769:
#line 6377 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 770:
#line 6381 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 771:
#line 6382 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 772:
#line 6383 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 773:
#line 6384 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 774:
#line 6387 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 775:
#line 6388 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { }
    break;

  case 776:
#line 6392 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 777:
#line 6393 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 778:
#line 6397 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 779:
#line 6398 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 780:
#line 6402 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 782:
#line 6407 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 783:
#line 6408 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 784:
#line 6409 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 785:
#line 6411 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local((yyvsp[(4) - (4)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 786:
#line 6417 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 787:
#line 6419 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 788:
#line 6425 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 789:
#line 6431 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 790:
#line 6437 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 791:
#line 6442 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 792:
#line 6444 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 793:
#line 6457 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 794:
#line 6463 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 795:
#line 6469 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 796:
#line 6475 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 797:
#line 6484 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 798:
#line 6505 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 799:
#line 6511 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 800:
#line 6515 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 801:
#line 6516 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 802:
#line 6520 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 803:
#line 6521 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 804:
#line 6526 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 805:
#line 6533 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 806:
#line 6537 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 807:
#line 6538 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 808:
#line 6542 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 809:
#line 6543 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 810:
#line 6548 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 811:
#line 6556 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 812:
#line 6560 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 813:
#line 6561 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 814:
#line 6566 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[(1) - (1)].lex_str).str)))
              MYSQL_YYABORT;
          }
    break;

  case 815:
#line 6573 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 816:
#line 6574 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 817:
#line 6578 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 818:
#line 6579 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 819:
#line 6583 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 820:
#line 6584 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 821:
#line 6589 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 822:
#line 6591 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 823:
#line 6595 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 824:
#line 6602 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 825:
#line 6611 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 826:
#line 6616 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 827:
#line 6623 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 830:
#line 6626 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 831:
#line 6627 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 832:
#line 6629 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 833:
#line 6634 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 834:
#line 6641 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { }
    break;

  case 835:
#line 6642 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 836:
#line 6647 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
          if ((yyvsp[(2) - (2)].ulong_num) == 0)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
        }
    break;

  case 837:
#line 6655 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (4)].ulong_num); }
    break;

  case 838:
#line 6659 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 839:
#line 6660 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
    break;

  case 840:
#line 6664 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
    break;

  case 841:
#line 6667 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 842:
#line 6668 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 843:
#line 6669 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (2)].ulong_num) | (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 844:
#line 6670 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) ; }
    break;

  case 845:
#line 6675 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) < 1 ? 1 : ((yyvsp[(1) - (1)].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[(1) - (1)].ulong_num));
          (yyval.ulong_num)--;
        }
    break;

  case 846:
#line 6683 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (1 | (yyvsp[(2) - (2)].ulong_num)) << (yyvsp[(1) - (2)].ulong_num);
        }
    break;

  case 847:
#line 6689 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 848:
#line 6690 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)|= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 849:
#line 6695 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
          uint start= (yyvsp[(1) - (3)].ulong_num);
          uint end= (yyvsp[(3) - (3)].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
    break;

  case 850:
#line 6704 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 851:
#line 6705 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 852:
#line 6709 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 853:
#line 6710 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 856:
#line 6724 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 857:
#line 6731 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 859:
#line 6737 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 860:
#line 6744 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 861:
#line 6756 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 862:
#line 6758 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 863:
#line 6760 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 864:
#line 6762 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 865:
#line 6767 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 866:
#line 6773 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 867:
#line 6779 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 868:
#line 6786 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 869:
#line 6793 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 870:
#line 6801 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 871:
#line 6802 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 872:
#line 6803 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 873:
#line 6804 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 874:
#line 6805 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 875:
#line 6809 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 876:
#line 6813 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 877:
#line 6814 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 878:
#line 6818 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 879:
#line 6819 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 880:
#line 6823 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 882:
#line 6828 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 883:
#line 6829 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 884:
#line 6830 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 885:
#line 6834 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 886:
#line 6835 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 887:
#line 6839 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 888:
#line 6844 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 889:
#line 6856 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 892:
#line 6873 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 894:
#line 6878 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 896:
#line 6883 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 904:
#line 6903 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 905:
#line 6904 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 906:
#line 6909 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 907:
#line 6910 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 908:
#line 6912 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 909:
#line 6918 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 910:
#line 6924 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 911:
#line 6930 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 916:
#line 6948 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 917:
#line 6960 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 918:
#line 6961 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 919:
#line 6962 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 920:
#line 6966 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 921:
#line 6967 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 922:
#line 6972 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 923:
#line 6978 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 924:
#line 6991 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 925:
#line 6992 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 926:
#line 6997 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->check_exists && lex->sql_command != SQLCOM_ALTER_TABLE)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
          (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str);
        }
    break;

  case 927:
#line 7008 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 928:
#line 7009 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 929:
#line 7013 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 930:
#line 7014 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 931:
#line 7022 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->name.str= 0;
            Lex->name.length= 0;
            Lex->sql_command= SQLCOM_ALTER_TABLE;
            Lex->duplicates= DUP_ERROR; 
            Lex->col_list.empty();
            Lex->select_lex.init_order();
            bzero(&Lex->create_info, sizeof(Lex->create_info));
            Lex->create_info.db_type= 0;
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.row_type= ROW_TYPE_NOT_USED;
            Lex->alter_info.reset();
            Lex->no_write_to_binlog= 0;
            Lex->create_info.storage_media= HA_SM_DEFAULT;
            DBUG_ASSERT(!Lex->m_sql_cmd);
          }
    break;

  case 932:
#line 7039 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!Lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            Lex->select_lex.db= (Lex->select_lex.table_list.first)->db;
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 933:
#line 7049 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!Lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (Lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 934:
#line 7059 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 935:
#line 7064 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 936:
#line 7073 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 937:
#line 7084 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 938:
#line 7095 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 939:
#line 7102 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 940:
#line 7113 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 941:
#line 7120 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 942:
#line 7131 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 943:
#line 7138 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 944:
#line 7150 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 945:
#line 7152 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 946:
#line 7172 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 947:
#line 7185 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 948:
#line 7190 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 949:
#line 7195 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 950:
#line 7200 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 951:
#line 7205 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 952:
#line 7214 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 953:
#line 7215 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 954:
#line 7216 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 955:
#line 7217 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 956:
#line 7221 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 957:
#line 7223 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 958:
#line 7234 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 959:
#line 7235 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 960:
#line 7239 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 961:
#line 7240 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 963:
#line 7246 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 964:
#line 7254 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 970:
#line 7276 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
          }
    break;

  case 971:
#line 7281 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 972:
#line 7288 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 974:
#line 7301 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
               MYSQL_YYABORT;
          }
    break;

  case 975:
#line 7312 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 977:
#line 7324 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 979:
#line 7336 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 980:
#line 7343 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 982:
#line 7355 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 983:
#line 7381 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 984:
#line 7388 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 986:
#line 7396 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(4) - (4)].num);
          }
    break;

  case 987:
#line 7408 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 989:
#line 7414 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 990:
#line 7419 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 991:
#line 7426 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 993:
#line 7441 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 994:
#line 7445 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 995:
#line 7449 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 996:
#line 7456 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 997:
#line 7457 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 998:
#line 7462 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1001:
#line 7482 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 1002:
#line 7491 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 1003:
#line 7495 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 1004:
#line 7500 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 1005:
#line 7505 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(4) - (4)].lex_str).str;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            lex->option_list= NULL;
          }
    break;

  case 1006:
#line 7512 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 1007:
#line 7516 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 1008:
#line 7527 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(4) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(6) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(4) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 1009:
#line 7540 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 1010:
#line 7544 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(4) - (5)].lex_str).str, (yyvsp[(3) - (5)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 1011:
#line 7553 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(5) - (5)].lex_str).str, (yyvsp[(4) - (5)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 1012:
#line 7562 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name,
                                           FALSE);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1013:
#line 7572 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(3) - (4)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1014:
#line 7581 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1015:
#line 7587 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1016:
#line 7593 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1017:
#line 7602 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1018:
#line 7611 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 1019:
#line 7630 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= Alter_info::ALTER_CONVERT;
          }
    break;

  case 1020:
#line 7650 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 1021:
#line 7660 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 1022:
#line 7664 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 1030:
#line 7681 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 1031:
#line 7686 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1032:
#line 7697 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 1033:
#line 7702 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1034:
#line 7712 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1035:
#line 7713 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1036:
#line 7717 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1037:
#line 7718 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1038:
#line 7722 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1044:
#line 7736 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1045:
#line 7738 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_NONE;
          }
    break;

  case 1046:
#line 7745 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 1047:
#line 7746 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 1048:
#line 7747 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 1049:
#line 7751 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1050:
#line 7753 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1051:
#line 7758 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1052:
#line 7765 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1053:
#line 7766 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1054:
#line 7767 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1055:
#line 7768 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1056:
#line 7773 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 1057:
#line 7780 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1058:
#line 7782 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
          }
    break;

  case 1059:
#line 7787 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1060:
#line 7789 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1061:
#line 7796 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1062:
#line 7806 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1063:
#line 7822 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1064:
#line 7826 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1065:
#line 7833 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1066:
#line 7837 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1067:
#line 7844 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 1068:
#line 7848 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 1069:
#line 7852 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 1070:
#line 7858 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 1071:
#line 7860 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1074:
#line 7869 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1075:
#line 7870 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 1076:
#line 7871 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 1077:
#line 7875 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1078:
#line 7877 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1079:
#line 7890 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->mi.gtid_pos_str = (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1082:
#line 7902 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1083:
#line 7909 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1084:
#line 7913 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1085:
#line 7914 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1086:
#line 7915 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1087:
#line 7920 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1088:
#line 7930 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1089:
#line 7940 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1090:
#line 7941 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1091:
#line 7945 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1092:
#line 7946 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1093:
#line 7950 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1094:
#line 7951 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1095:
#line 7952 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1096:
#line 7957 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1097:
#line 7967 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1101:
#line 7987 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1102:
#line 7989 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            thd->lex->with_persistent_for_clause= TRUE;
          }
    break;

  case 1103:
#line 7996 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1104:
#line 7998 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1105:
#line 8001 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1106:
#line 8003 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            LEX* lex= thd->lex;
            lex->column_list= new List<LEX_STRING>;
            if (lex->column_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1108:
#line 8014 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1109:
#line 8016 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            LEX* lex= thd->lex;
            lex->index_list= new List<LEX_STRING>;
            if (lex->index_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1111:
#line 8028 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1112:
#line 8030 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1113:
#line 8035 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1114:
#line 8043 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1117:
#line 8050 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1118:
#line 8056 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX_STRING str= {(char*) "PRIMARY", 7};
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&str, sizeof(LEX_STRING)));
          }
    break;

  case 1119:
#line 8065 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1120:
#line 8073 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1121:
#line 8088 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1122:
#line 8098 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1123:
#line 8099 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1124:
#line 8103 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1125:
#line 8104 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1126:
#line 8108 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1127:
#line 8109 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1128:
#line 8110 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1129:
#line 8111 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1130:
#line 8112 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1131:
#line 8113 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1132:
#line 8118 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1133:
#line 8128 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1134:
#line 8138 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1135:
#line 8139 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1136:
#line 8140 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1137:
#line 8145 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1138:
#line 8149 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1139:
#line 8151 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1140:
#line 8158 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1141:
#line 8163 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1144:
#line 8176 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1145:
#line 8189 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1146:
#line 8193 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1151:
#line 8212 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1152:
#line 8222 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1153:
#line 8231 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1154:
#line 8232 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1155:
#line 8237 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1156:
#line 8243 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1161:
#line 8258 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1162:
#line 8268 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1163:
#line 8278 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1165:
#line 8285 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(thd);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1167:
#line 8294 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { }
    break;

  case 1169:
#line 8300 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1170:
#line 8301 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1171:
#line 8311 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1174:
#line 8325 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1176:
#line 8335 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1178:
#line 8344 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1180:
#line 8363 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1181:
#line 8371 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1183:
#line 8378 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1188:
#line 8388 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1191:
#line 8403 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1195:
#line 8420 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1196:
#line 8448 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1198:
#line 8480 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1199:
#line 8486 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1202:
#line 8498 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1203:
#line 8512 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1204:
#line 8517 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1205:
#line 8541 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1206:
#line 8547 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1207:
#line 8553 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1208:
#line 8554 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1209:
#line 8555 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1210:
#line 8556 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1211:
#line 8557 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1212:
#line 8561 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1213:
#line 8562 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1214:
#line 8563 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1215:
#line 8567 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1216:
#line 8568 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1217:
#line 8569 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1218:
#line 8573 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1219:
#line 8574 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1220:
#line 8580 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (thd->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1221:
#line 8631 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (thd->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1222:
#line 8638 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (thd->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1223:
#line 8681 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1224:
#line 8687 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1225:
#line 8693 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1226:
#line 8699 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1227:
#line 8705 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1228:
#line 8711 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1229:
#line 8717 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1231:
#line 8727 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1232:
#line 8733 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1233:
#line 8739 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1234:
#line 8745 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1235:
#line 8751 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1237:
#line 8761 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:
#line 8767 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:
#line 8776 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:
#line 8782 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (thd->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:
#line 8790 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:
#line 8796 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (thd->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1243:
#line 8806 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:
#line 8812 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (thd->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1245:
#line 8821 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item *item1= new (thd->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (thd->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:
#line 8831 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:
#line 8837 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:
#line 8847 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:
#line 8853 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:
#line 8866 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:
#line 8872 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:
#line 8878 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:
#line 8884 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:
#line 8890 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:
#line 8896 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:
#line 8902 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:
#line 8908 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:
#line 8914 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:
#line 8920 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:
#line 8926 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1262:
#line 8932 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:
#line 8938 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:
#line 8944 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1274:
#line 8973 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1275:
#line 8974 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1276:
#line 8975 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1277:
#line 8976 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1278:
#line 8977 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1279:
#line 8978 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1280:
#line 8982 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1281:
#line 8983 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1282:
#line 8988 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
	    (yyval.num)= DYN_COL_NULL; /* automatic type */
            lex->charset= NULL;
            lex->length= lex->dec= 0;
	  }
    break;

  case 1283:
#line 8994 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (2)].num); }
    break;

  case 1284:
#line 8999 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_INT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1285:
#line 9006 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_UINT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1286:
#line 9013 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1287:
#line 9020 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1288:
#line 9027 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1289:
#line 9034 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)= DYN_COL_DECIMAL;
            Lex->charset= NULL;
          }
    break;

  case 1290:
#line 9039 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->length= lex->dec= 0;
          }
    break;

  case 1291:
#line 9045 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->charset= national_charset_info;
            lex->length= lex->dec= 0;
          }
    break;

  case 1292:
#line 9052 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1293:
#line 9059 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_TIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1294:
#line 9067 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATETIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1295:
#line 9078 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(thd->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->key= (yyvsp[(1) - (4)].item);
     (yyval.dyncol_def)->value= (yyvsp[(3) - (4)].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[(4) - (4)].num);
     (yyval.dyncol_def)->cs= lex->charset;
     if (lex->length)
       (yyval.dyncol_def)->len= strtoul(lex->length, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if (lex->dec)
       (yyval.dyncol_def)->frac= strtoul(lex->dec, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
    break;

  case 1296:
#line 9100 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
         (yyval.dyncol_def_list)= new (thd->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[(1) - (1)].dyncol_def));
       }
    break;

  case 1297:
#line 9107 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
         (yyvsp[(1) - (3)].dyncol_def_list)->push_back((yyvsp[(3) - (3)].dyncol_def));
         (yyval.dyncol_def_list)= (yyvsp[(1) - (3)].dyncol_def_list);
       }
    break;

  case 1303:
#line 9120 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1308:
#line 9135 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1309:
#line 9141 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1310:
#line 9145 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1311:
#line 9151 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1312:
#line 9157 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1313:
#line 9163 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (thd->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1314:
#line 9169 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1315:
#line 9171 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (thd->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1316:
#line 9178 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (thd->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1317:
#line 9185 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:
#line 9191 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item_string *item;
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM &&
               (item= (Item_string *) (yyvsp[(3) - (4)].item)) &&
                item->collation.repertoire == MY_REPERTOIRE_ASCII &&
                item->str_value.length() < MAX_DATE_STRING_REP_LENGTH * 4)
            {
              enum_field_types type= MYSQL_TYPE_STRING;
              LEX_STRING *ls= &(yyvsp[(2) - (4)].lex_str);
              if (ls->length == 1)
              {
                if (ls->str[0] == 'd')  /* {d'2001-01-01'} */
                  type= MYSQL_TYPE_DATE;
                else if (ls->str[0] == 't') /* {t'10:20:30'} */
                  type= MYSQL_TYPE_TIME;
              }
              else if (ls->length == 2) /* {ts'2001-01-01 10:20:30'} */
              {
                if (ls->str[0] == 't' && ls->str[1] == 's')
                  type= MYSQL_TYPE_DATETIME;
              }
              if (type != MYSQL_TYPE_STRING)
              {
                (yyval.item)= create_temporal_literal(thd,
                                            item->str_value.ptr(),
                                            item->str_value.length(),
                                            item->str_value.charset(),
                                            type, false);
              }
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1319:
#line 9234 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (thd->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1320:
#line 9243 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1321:
#line 9250 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1322:
#line 9258 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:
#line 9264 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:
#line 9271 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1325:
#line 9277 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:
#line 9291 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1327:
#line 9299 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1328:
#line 9314 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1329:
#line 9320 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1330:
#line 9326 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1331:
#line 9334 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_role(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1332:
#line 9342 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1333:
#line 9348 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1334:
#line 9354 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1335:
#line 9360 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1336:
#line 9366 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1337:
#line 9380 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1338:
#line 9391 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1339:
#line 9397 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1340:
#line 9403 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1341:
#line 9409 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1342:
#line 9415 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1343:
#line 9421 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1344:
#line 9427 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1345:
#line 9433 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1346:
#line 9439 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1347:
#line 9445 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1348:
#line 9451 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1349:
#line 9457 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1350:
#line 9463 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1351:
#line 9469 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1352:
#line 9475 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1353:
#line 9481 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1354:
#line 9487 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1355:
#line 9495 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1356:
#line 9516 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1357:
#line 9523 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1358:
#line 9529 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1359:
#line 9536 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1360:
#line 9544 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1361:
#line 9551 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1362:
#line 9557 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1363:
#line 9563 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1364:
#line 9569 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1365:
#line 9576 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1366:
#line 9582 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1367:
#line 9589 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1368:
#line 9595 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1369:
#line 9601 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1370:
#line 9607 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1371:
#line 9613 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1372:
#line 9619 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (thd->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].num));
            else
              (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1373:
#line 9637 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1374:
#line 9643 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1375:
#line 9649 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1376:
#line 9656 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1377:
#line 9663 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1378:
#line 9671 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_add(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1379:
#line 9678 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_delete(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1380:
#line 9685 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dyncol_check((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1381:
#line 9692 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_create(thd, *(yyvsp[(3) - (4)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1382:
#line 9699 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].cast_type),
                                        lex->length, lex->dec,
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1383:
#line 9716 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1384:
#line 9722 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1385:
#line 9728 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1386:
#line 9734 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1387:
#line 9740 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1388:
#line 9747 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1389:
#line 9753 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_last_value(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1390:
#line 9759 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1391:
#line 9765 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1392:
#line 9771 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1393:
#line 9777 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1394:
#line 9788 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1395:
#line 9794 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1396:
#line 9800 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1397:
#line 9806 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_reverse((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1398:
#line 9812 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1399:
#line 9820 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1400:
#line 9826 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1401:
#line 9837 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1402:
#line 9843 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string((yyvsp[(3) - (5)].item), 0, 0, (yyvsp[(4) - (5)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1403:
#line 9849 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string((yyvsp[(3) - (8)].item), 0, (yyvsp[(6) - (8)].ulong_num),
                                        (yyvsp[(7) - (8)].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1404:
#line 9857 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_char_typecast((yyvsp[(3) - (7)].item), (yyvsp[(6) - (7)].ulong_num), &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(item, 0, (yyvsp[(6) - (7)].ulong_num), MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1405:
#line 9867 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string((yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].ulong_num), (yyvsp[(7) - (10)].ulong_num), (yyvsp[(9) - (10)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1406:
#line 9873 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1407:
#line 9889 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1408:
#line 9895 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1409:
#line 9902 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1410:
#line 9909 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1411:
#line 9916 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1412:
#line 9923 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1413:
#line 9930 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1414:
#line 9934 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1415:
#line 9953 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1416:
#line 9972 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1417:
#line 10025 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1418:
#line 10066 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1419:
#line 10068 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1420:
#line 10072 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1421:
#line 10073 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1422:
#line 10077 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1423:
#line 10078 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1424:
#line 10082 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1425:
#line 10083 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1426:
#line 10088 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1427:
#line 10095 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1428:
#line 10103 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1429:
#line 10129 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1430:
#line 10135 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1431:
#line 10141 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1432:
#line 10147 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1433:
#line 10153 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1434:
#line 10159 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1435:
#line 10168 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1436:
#line 10174 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1437:
#line 10176 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1438:
#line 10178 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1439:
#line 10184 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1440:
#line 10195 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1441:
#line 10201 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1442:
#line 10207 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1443:
#line 10213 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1444:
#line 10219 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1445:
#line 10225 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1446:
#line 10231 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1447:
#line 10237 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1448:
#line 10243 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1449:
#line 10249 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1450:
#line 10253 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (thd->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1451:
#line 10268 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1452:
#line 10276 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1453:
#line 10283 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (thd->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1454:
#line 10293 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1455:
#line 10301 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(thd, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1456:
#line 10316 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1457:
#line 10317 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1458:
#line 10322 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1459:
#line 10327 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1461:
#line 10333 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1463:
#line 10350 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1464:
#line 10352 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1465:
#line 10357 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1466:
#line 10366 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1467:
#line 10374 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1468:
#line 10376 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1469:
#line 10378 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1470:
#line 10380 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1471:
#line 10382 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1472:
#line 10384 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1473:
#line 10386 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1474:
#line 10388 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1475:
#line 10390 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1476:
#line 10392 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_TIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1477:
#line 10398 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_DATETIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1478:
#line 10404 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1479:
#line 10406 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->charset= NULL; Lex->length= Lex->dec= 0;}
    break;

  case 1480:
#line 10408 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DOUBLE; }
    break;

  case 1481:
#line 10411 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1482:
#line 10412 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1483:
#line 10417 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1484:
#line 10424 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1485:
#line 10431 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1486:
#line 10432 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1487:
#line 10437 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1488:
#line 10444 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1489:
#line 10451 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1490:
#line 10452 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1491:
#line 10456 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1492:
#line 10457 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1493:
#line 10462 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1494:
#line 10470 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1495:
#line 10480 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1496:
#line 10482 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1497:
#line 10493 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1498:
#line 10504 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1499:
#line 10505 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1500:
#line 10511 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1501:
#line 10513 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1502:
#line 10533 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=(yyvsp[(2) - (3)].num); }
    break;

  case 1503:
#line 10536 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1504:
#line 10544 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
	    (yyvsp[(3) - (6)].table_list)->straight=(yyvsp[(2) - (6)].num);
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1505:
#line 10552 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1506:
#line 10556 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
	    (yyvsp[(3) - (8)].table_list)->straight=(yyvsp[(2) - (8)].num);
            add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); 
	    (yyval.table_list)=(yyvsp[(3) - (8)].table_list); 
          }
    break;

  case 1507:
#line 10562 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
	    (yyvsp[(4) - (4)].table_list)->straight=(yyvsp[(3) - (4)].num);
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1508:
#line 10571 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1509:
#line 10579 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1510:
#line 10587 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1511:
#line 10591 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1512:
#line 10597 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1513:
#line 10607 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1514:
#line 10615 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1515:
#line 10624 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1516:
#line 10628 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1517:
#line 10635 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1518:
#line 10646 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1519:
#line 10647 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1520:
#line 10648 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1521:
#line 10652 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num) = (yyvsp[(1) - (1)].num); }
    break;

  case 1522:
#line 10653 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1523:
#line 10661 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1525:
#line 10667 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1526:
#line 10681 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1527:
#line 10686 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(thd, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1528:
#line 10697 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1529:
#line 10737 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            /*else if (($3->select_lex &&
                      $3->select_lex->master_unit()->is_union() &&
                      ($3->select_lex->master_unit()->first_select() ==
                       $3->select_lex || !$3->lifted)) || $5)*/
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1530:
#line 10813 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1531:
#line 10823 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1532:
#line 10828 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1533:
#line 10836 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (7)].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1534:
#line 10848 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1535:
#line 10867 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1536:
#line 10875 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1538:
#line 10884 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1539:
#line 10890 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1540:
#line 10906 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1541:
#line 10923 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1543:
#line 10930 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1544:
#line 10935 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1545:
#line 10960 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1546:
#line 10961 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1547:
#line 10966 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)= thd->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1548:
#line 10969 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1549:
#line 10970 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1550:
#line 10971 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1551:
#line 10975 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1552:
#line 10976 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1553:
#line 10981 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1555:
#line 10986 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1560:
#line 10999 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->alloc_index_hints(thd); }
    break;

  case 1562:
#line 11003 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1564:
#line 11008 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, NULL, 0); }
    break;

  case 1565:
#line 11009 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1566:
#line 11014 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1567:
#line 11016 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (char *)"PRIMARY", 7); }
    break;

  case 1570:
#line 11026 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1571:
#line 11037 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1572:
#line 11049 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1573:
#line 11050 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1574:
#line 11051 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1575:
#line 11052 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1576:
#line 11053 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1577:
#line 11054 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1578:
#line 11055 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1579:
#line 11056 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1580:
#line 11057 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1581:
#line 11058 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1582:
#line 11059 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1583:
#line 11060 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1584:
#line 11064 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1585:
#line 11065 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1586:
#line 11066 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1587:
#line 11067 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1588:
#line 11068 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1589:
#line 11069 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1590:
#line 11070 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1591:
#line 11071 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1592:
#line 11072 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1593:
#line 11076 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1594:
#line 11077 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1595:
#line 11078 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1596:
#line 11079 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1600:
#line 11089 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1601:
#line 11091 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1604:
#line 11104 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1605:
#line 11106 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1606:
#line 11110 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond((yyvsp[(3) - (3)].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1608:
#line 11122 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1609:
#line 11126 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond((yyvsp[(3) - (3)].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1610:
#line 11137 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1611:
#line 11142 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1614:
#line 11163 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1615:
#line 11165 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1616:
#line 11169 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1617:
#line 11171 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1618:
#line 11191 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1622:
#line 11225 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1625:
#line 11243 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1627:
#line 11278 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1628:
#line 11280 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1629:
#line 11284 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1630:
#line 11285 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1631:
#line 11286 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1632:
#line 11291 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
	    lex->limit_rows_examined= 0;
          }
    break;

  case 1633:
#line 11298 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1634:
#line 11302 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1635:
#line 11303 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1636:
#line 11308 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1637:
#line 11312 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1638:
#line 11316 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1639:
#line 11321 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1640:
#line 11325 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1641:
#line 11332 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1642:
#line 11339 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1643:
#line 11346 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1644:
#line 11356 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1645:
#line 11389 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1646:
#line 11393 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1647:
#line 11399 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1648:
#line 11405 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1649:
#line 11415 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            SELECT_LEX *sel= Select;
            sel->select_limit_matched= (yyvsp[(1) - (1)].item);
            
            if(!sel->select_limit){
              sel->select_limit= new Item_int((ulonglong)(yyvsp[(1) - (1)].item)->val_uint());
              sel->offset_limit= 0;
              sel->explicit_limit= 1;
                         }
          }
    break;

  case 1650:
#line 11428 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[(1) - (1)].item);
          }
    break;

  case 1651:
#line 11435 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1652:
#line 11440 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1653:
#line 11446 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1654:
#line 11447 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1655:
#line 11451 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1656:
#line 11452 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1657:
#line 11453 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1658:
#line 11457 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1659:
#line 11458 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1660:
#line 11459 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1661:
#line 11460 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1662:
#line 11461 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1663:
#line 11462 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1664:
#line 11466 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1665:
#line 11467 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1666:
#line 11468 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1667:
#line 11469 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1668:
#line 11470 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1669:
#line 11474 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1670:
#line 11475 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1671:
#line 11476 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1672:
#line 11477 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1673:
#line 11478 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1674:
#line 11482 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1675:
#line 11483 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1676:
#line 11484 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= strtoull((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1677:
#line 11485 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1678:
#line 11486 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1679:
#line 11491 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1682:
#line 11500 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.choice)= (yyvsp[(1) - (1)].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
    break;

  case 1683:
#line 11501 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.choice)= HA_CHOICE_UNDEF; }
    break;

  case 1685:
#line 11507 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (thd->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1687:
#line 11537 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1688:
#line 11538 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1691:
#line 11548 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1692:
#line 11557 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1693:
#line 11563 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1695:
#line 11568 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1696:
#line 11573 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1697:
#line 11592 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1698:
#line 11624 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1700:
#line 11636 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1701:
#line 11644 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1703:
#line 11647 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1704:
#line 11659 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1705:
#line 11670 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1706:
#line 11676 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1707:
#line 11687 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->check_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1708:
#line 11696 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1709:
#line 11697 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1710:
#line 11698 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (7)].lex_str).str, (yyvsp[(3) - (7)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(6) - (7)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
    break;

  case 1711:
#line 11714 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->check_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1712:
#line 11721 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1713:
#line 11743 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1714:
#line 11763 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1715:
#line 11775 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1716:
#line 11779 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_ROLE;
          }
    break;

  case 1717:
#line 11783 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->check_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1718:
#line 11791 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1719:
#line 11793 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->check_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1720:
#line 11799 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1721:
#line 11806 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1722:
#line 11811 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1723:
#line 11816 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->check_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1726:
#line 11831 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1727:
#line 11842 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1730:
#line 11860 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1731:
#line 11871 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
          Lex->check_exists= FALSE;
          (yyval.num)= 0;
        }
    break;

  case 1732:
#line 11876 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
          Lex->check_exists= TRUE;
          (yyval.num)= 1;
        }
    break;

  case 1733:
#line 11883 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1734:
#line 11884 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1735:
#line 11892 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1736:
#line 11900 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1737:
#line 11905 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1738:
#line 11910 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1739:
#line 11917 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1740:
#line 11922 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1741:
#line 11927 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1742:
#line 11935 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1743:
#line 11937 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1744:
#line 11944 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1745:
#line 11948 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1746:
#line 11950 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1747:
#line 11960 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1748:
#line 11961 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1749:
#line 11966 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1750:
#line 11974 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1751:
#line 11975 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1752:
#line 11976 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1753:
#line 11978 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1755:
#line 11988 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1756:
#line 11989 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1757:
#line 11993 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1758:
#line 11994 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1759:
#line 11996 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1760:
#line 11997 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1761:
#line 11999 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1762:
#line 12000 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1767:
#line 12015 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1768:
#line 12024 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1769:
#line 12025 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1770:
#line 12029 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1771:
#line 12030 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1772:
#line 12035 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1773:
#line 12040 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1774:
#line 12048 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1776:
#line 12054 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1777:
#line 12059 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1778:
#line 12066 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1779:
#line 12068 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1781:
#line 12077 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1783:
#line 12085 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1784:
#line 12093 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1785:
#line 12111 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1788:
#line 12121 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(1) - (3)].item)) || add_value_to_list(thd, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1791:
#line 12134 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1792:
#line 12143 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1793:
#line 12144 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1794:
#line 12151 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1796:
#line 12166 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1797:
#line 12177 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1798:
#line 12178 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1799:
#line 12180 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1800:
#line 12186 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1801:
#line 12191 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1802:
#line 12197 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1807:
#line 12215 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1808:
#line 12228 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1809:
#line 12243 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1810:
#line 12244 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1811:
#line 12248 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1812:
#line 12249 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1813:
#line 12253 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1814:
#line 12254 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1815:
#line 12255 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1816:
#line 12260 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1817:
#line 12271 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1824:
#line 12295 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1825:
#line 12299 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1826:
#line 12303 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1827:
#line 12307 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1828:
#line 12311 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1829:
#line 12315 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1830:
#line 12319 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1831:
#line 12323 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1832:
#line 12327 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1833:
#line 12334 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1834:
#line 12338 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1835:
#line 12347 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->ident=null_lex_str;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1836:
#line 12356 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1837:
#line 12363 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(thd, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1838:
#line 12370 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1839:
#line 12378 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1840:
#line 12386 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1841:
#line 12394 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1842:
#line 12402 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(thd, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1843:
#line 12410 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1844:
#line 12417 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->ident= (yyvsp[(3) - (3)].lex_str);
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1845:
#line 12424 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1846:
#line 12430 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1847:
#line 12432 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1848:
#line 12434 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1849:
#line 12443 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1850:
#line 12447 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1851:
#line 12451 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1853:
#line 12456 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1855:
#line 12461 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1856:
#line 12470 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(thd, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1857:
#line 12477 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1858:
#line 12482 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1859:
#line 12487 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1860:
#line 12492 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1861:
#line 12494 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1862:
#line 12496 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1863:
#line 12498 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1864:
#line 12500 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1865:
#line 12502 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(thd, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1866:
#line 12509 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1867:
#line 12517 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1868:
#line 12519 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1869:
#line 12527 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(thd, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1870:
#line 12534 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(thd, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1871:
#line 12541 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_GRANTS;
            if (!(Lex->grant_user= (LEX_USER*)thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            Lex->grant_user->user= current_user_and_current_role;
          }
    break;

  case 1872:
#line 12548 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
          }
    break;

  case 1873:
#line 12554 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1874:
#line 12560 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1875:
#line 12569 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1876:
#line 12577 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1877:
#line 12581 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
    break;

  case 1878:
#line 12586 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
    break;

  case 1879:
#line 12593 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
    break;

  case 1880:
#line 12598 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SHOW_CLIENT_STATS;
           if (prepare_schema_table(thd, lex, 0, SCH_CLIENT_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1881:
#line 12605 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_USER_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_USER_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1882:
#line 12612 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1883:
#line 12619 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_INDEX_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_INDEX_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1884:
#line 12626 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1885:
#line 12633 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1886:
#line 12640 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1887:
#line 12646 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1888:
#line 12653 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1889:
#line 12660 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1890:
#line 12665 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1891:
#line 12670 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1892:
#line 12675 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[(3) - (3)].item));
          }
    break;

  case 1893:
#line 12685 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1894:
#line 12687 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1895:
#line 12689 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1900:
#line 12703 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1901:
#line 12704 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1902:
#line 12708 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1903:
#line 12709 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1906:
#line 12718 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1907:
#line 12719 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1908:
#line 12723 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1909:
#line 12724 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1911:
#line 12730 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1912:
#line 12737 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Select->where= normalize_cond((yyvsp[(2) - (2)].item));
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1913:
#line 12747 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(thd, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1914:
#line 12758 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1915:
#line 12762 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1916:
#line 12764 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1924:
#line 12784 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1925:
#line 12785 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1926:
#line 12786 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1927:
#line 12790 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1928:
#line 12791 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1929:
#line 12793 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1930:
#line 12807 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1931:
#line 12814 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1932:
#line 12819 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1935:
#line 12833 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1936:
#line 12835 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
          TABLE_LIST *tables= Lex->query_tables;
          for (; tables; tables= tables->next_global)
          {
            tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
            tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
            tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
          }
        }
    break;

  case 1937:
#line 12848 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_READ_LOCK | (yyvsp[(4) - (4)].num); }
    break;

  case 1938:
#line 12850 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(ER(ER_NO_TABLES_USED));
              MYSQL_YYABORT;
            } 
            Lex->type|= REFRESH_FOR_EXPORT;
          }
    break;

  case 1941:
#line 12863 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1942:
#line 12868 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1943:
#line 12870 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1944:
#line 12872 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1945:
#line 12874 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1946:
#line 12876 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1947:
#line 12878 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
    break;

  case 1948:
#line 12889 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1949:
#line 12891 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1950:
#line 12893 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1951:
#line 12895 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name.str= (char*) "";
            Lex->relay_log_connection_name.length= 0;
          }
    break;

  case 1952:
#line 12901 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1953:
#line 12903 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
    break;

  case 1954:
#line 12914 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_CLIENT_STATS; }
    break;

  case 1955:
#line 12916 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1956:
#line 12918 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1957:
#line 12920 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_INDEX_STATS; }
    break;

  case 1958:
#line 12922 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1959:
#line 12924 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1960:
#line 12926 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1961:
#line 12930 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1962:
#line 12931 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1963:
#line 12935 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {(yyval.num)= 0;}
    break;

  case 1964:
#line 12936 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {(yyval.num)= REFRESH_CHECKPOINT; }
    break;

  case 1965:
#line 12940 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1966:
#line 12945 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1969:
#line 12954 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1970:
#line 12956 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { }
    break;

  case 1971:
#line 12957 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1972:
#line 12958 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1973:
#line 12962 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1974:
#line 12963 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1975:
#line 12968 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1976:
#line 12974 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1978:
#line 12983 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1979:
#line 12987 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1980:
#line 12999 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
            lex->kill_type= KILL_TYPE_ID;
          }
    break;

  case 1981:
#line 13007 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->kill_signal= (killed_state) ((yyvsp[(3) - (5)].num) | (yyvsp[(4) - (5)].num));
          }
    break;

  case 1982:
#line 13013 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1983:
#line 13014 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1984:
#line 13015 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1985:
#line 13018 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1986:
#line 13019 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1987:
#line 13020 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_QUERY; }
    break;

  case 1988:
#line 13022 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)= (int) KILL_QUERY;
            Lex->kill_type= KILL_TYPE_QUERY;
          }
    break;

  case 1989:
#line 13030 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
          Lex->value_list.push_front((yyval.item));
         }
    break;

  case 1990:
#line 13034 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->users_list.push_back((yyvsp[(2) - (2)].lex_user));
            Lex->kill_type= KILL_TYPE_USER;
          }
    break;

  case 1991:
#line 13042 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHUTDOWN; }
    break;

  case 1992:
#line 13049 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1993:
#line 13060 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1994:
#line 13071 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1995:
#line 13081 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(thd, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1996:
#line 13091 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 1997:
#line 13095 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 1998:
#line 13099 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1999:
#line 13100 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 2000:
#line 13104 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 2001:
#line 13105 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 2002:
#line 13109 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 2003:
#line 13111 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2004:
#line 13118 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2005:
#line 13122 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 2006:
#line 13123 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 2007:
#line 13124 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 2012:
#line 13139 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2013:
#line 13144 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 2014:
#line 13151 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2015:
#line 13156 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2020:
#line 13174 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2021:
#line 13179 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2022:
#line 13186 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { }
    break;

  case 2023:
#line 13188 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 2025:
#line 13193 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 2026:
#line 13200 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { }
    break;

  case 2027:
#line 13202 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { }
    break;

  case 2028:
#line 13206 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2029:
#line 13207 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2030:
#line 13208 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2031:
#line 13213 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 2032:
#line 13215 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 2033:
#line 13219 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 2034:
#line 13221 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2035:
#line 13229 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2036:
#line 13230 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2039:
#line 13240 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name_no_truncate((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), thd->charset());
          }
    break;

  case 2040:
#line 13253 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2041:
#line 13276 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (thd->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2042:
#line 13288 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item_string *str= new (thd->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 2043:
#line 13299 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= thd->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 2044:
#line 13318 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             thd->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2045:
#line 13326 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2046:
#line 13338 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2047:
#line 13346 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2048:
#line 13361 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2049:
#line 13380 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 2050:
#line 13381 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 2051:
#line 13383 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 2052:
#line 13390 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 2053:
#line 13391 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 2054:
#line 13392 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2055:
#line 13394 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 2056:
#line 13401 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2057:
#line 13407 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2058:
#line 13413 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2059:
#line 13419 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2060:
#line 13425 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2061:
#line 13431 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (thd->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 2062:
#line 13460 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (thd->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 2063:
#line 13491 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2064:
#line 13501 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2065:
#line 13511 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2066:
#line 13517 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   thd->charset());
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2067:
#line 13526 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2068:
#line 13538 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2069:
#line 13544 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2070:
#line 13550 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2071:
#line 13565 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2072:
#line 13566 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2073:
#line 13571 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2074:
#line 13580 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2075:
#line 13594 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2076:
#line 13599 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2077:
#line 13644 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2078:
#line 13649 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2079:
#line 13665 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2080:
#line 13670 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2081:
#line 13748 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2082:
#line 13772 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2083:
#line 13801 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2084:
#line 13803 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2085:
#line 13819 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2086:
#line 13828 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 2087:
#line 13833 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2088:
#line 13839 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(thd, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2089:
#line 13845 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2090:
#line 13855 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2091:
#line 13861 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(thd, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2092:
#line 13870 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(thd, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2093:
#line 13879 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 2094:
#line 13881 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2095:
#line 13909 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2096:
#line 13923 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 2097:
#line 13937 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2098:
#line 13951 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2099:
#line 13953 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2100:
#line 13962 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2101:
#line 13964 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2102:
#line 13973 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2103:
#line 13974 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2104:
#line 13975 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2105:
#line 13980 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host= null_lex_str; // User or Role, see get_current_user()
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2106:
#line 13995 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            if ((yyval.lex_user)->host.str[0])
            {
              /*
                Convert hostname part of username to lowercase.
                It's OK to use in-place lowercase as long as
                the character set is utf8.
              */
              my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            }
            else
            {
              /*
                fix historical undocumented convention that empty host is the
                same as '%'
              */
              (yyval.lex_user)->host= host_not_specified;
            }
          }
    break;

  case 2107:
#line 14027 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*)thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_user;
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
          }
    break;

  case 2110:
#line 14039 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
           if ((yyvsp[(1) - (1)].lex_user)->user.str != current_user.str && (yyvsp[(1) - (1)].lex_user)->host.str == 0)
             (yyvsp[(1) - (1)].lex_user)->host= host_not_specified;
           (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user);
         }
    break;

  case 2111:
#line 14048 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2112:
#line 14049 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2113:
#line 14050 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2114:
#line 14051 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2115:
#line 14052 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2116:
#line 14053 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2117:
#line 14054 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2118:
#line 14055 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2119:
#line 14056 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2120:
#line 14057 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2121:
#line 14058 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2122:
#line 14059 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2123:
#line 14060 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2124:
#line 14061 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2125:
#line 14062 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2126:
#line 14063 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2127:
#line 14064 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2128:
#line 14065 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2129:
#line 14066 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2130:
#line 14067 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2131:
#line 14068 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2132:
#line 14069 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2133:
#line 14070 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2134:
#line 14071 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2135:
#line 14072 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2136:
#line 14073 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2137:
#line 14074 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2138:
#line 14075 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2139:
#line 14076 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2140:
#line 14077 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2141:
#line 14078 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2142:
#line 14079 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2143:
#line 14080 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2144:
#line 14081 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2145:
#line 14082 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2146:
#line 14083 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2147:
#line 14084 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2148:
#line 14085 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2149:
#line 14086 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2150:
#line 14087 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2151:
#line 14088 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2152:
#line 14089 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2153:
#line 14090 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2154:
#line 14091 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2155:
#line 14092 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2156:
#line 14093 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2157:
#line 14094 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2158:
#line 14095 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2159:
#line 14096 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2160:
#line 14097 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2161:
#line 14098 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2162:
#line 14099 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2163:
#line 14100 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2164:
#line 14101 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2165:
#line 14102 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2166:
#line 14103 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2167:
#line 14104 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2168:
#line 14105 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2169:
#line 14106 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2170:
#line 14107 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2171:
#line 14117 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2172:
#line 14118 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2173:
#line 14119 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2174:
#line 14120 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2175:
#line 14121 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2176:
#line 14122 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2177:
#line 14123 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2178:
#line 14124 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2179:
#line 14125 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2180:
#line 14126 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2181:
#line 14127 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2182:
#line 14128 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2183:
#line 14129 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2184:
#line 14130 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2185:
#line 14131 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2186:
#line 14132 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2187:
#line 14133 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2188:
#line 14134 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2189:
#line 14135 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2190:
#line 14136 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2191:
#line 14137 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2192:
#line 14138 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2193:
#line 14139 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2194:
#line 14140 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2195:
#line 14141 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2196:
#line 14142 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2197:
#line 14143 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2198:
#line 14144 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2199:
#line 14145 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2200:
#line 14146 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2201:
#line 14147 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2202:
#line 14148 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2203:
#line 14149 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2204:
#line 14150 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2205:
#line 14151 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2206:
#line 14152 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2207:
#line 14153 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2208:
#line 14154 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2209:
#line 14155 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2210:
#line 14156 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2211:
#line 14157 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2212:
#line 14158 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2213:
#line 14159 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2214:
#line 14160 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2215:
#line 14161 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2216:
#line 14162 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2217:
#line 14163 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2218:
#line 14164 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2219:
#line 14165 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2220:
#line 14166 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2221:
#line 14171 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2222:
#line 14172 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2223:
#line 14173 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2224:
#line 14174 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2225:
#line 14175 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2226:
#line 14176 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2227:
#line 14177 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2228:
#line 14178 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2229:
#line 14179 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2230:
#line 14180 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2231:
#line 14181 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2232:
#line 14182 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2233:
#line 14183 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2234:
#line 14184 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2235:
#line 14185 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2236:
#line 14186 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2237:
#line 14187 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2238:
#line 14188 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2239:
#line 14189 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2240:
#line 14190 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2241:
#line 14191 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2242:
#line 14192 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2243:
#line 14193 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2244:
#line 14194 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2245:
#line 14195 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2246:
#line 14196 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2247:
#line 14197 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2248:
#line 14198 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2249:
#line 14199 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2250:
#line 14200 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2251:
#line 14201 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2252:
#line 14202 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2253:
#line 14203 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2254:
#line 14204 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2255:
#line 14205 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2256:
#line 14206 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2257:
#line 14207 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2258:
#line 14208 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2259:
#line 14209 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2260:
#line 14210 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2261:
#line 14211 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2262:
#line 14212 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2263:
#line 14213 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2264:
#line 14214 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2265:
#line 14215 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2266:
#line 14216 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2267:
#line 14217 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2268:
#line 14218 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2269:
#line 14219 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2270:
#line 14220 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2271:
#line 14221 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2272:
#line 14222 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2273:
#line 14223 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2274:
#line 14224 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2275:
#line 14225 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2276:
#line 14226 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2277:
#line 14227 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2278:
#line 14228 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2279:
#line 14229 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2280:
#line 14230 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2281:
#line 14231 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2282:
#line 14232 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2283:
#line 14233 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2284:
#line 14234 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2285:
#line 14235 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2286:
#line 14236 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2287:
#line 14237 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2288:
#line 14238 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2289:
#line 14239 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2290:
#line 14240 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2291:
#line 14241 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2292:
#line 14242 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2293:
#line 14243 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2294:
#line 14244 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2295:
#line 14245 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2296:
#line 14246 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2297:
#line 14247 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2298:
#line 14248 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2299:
#line 14249 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2300:
#line 14250 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2301:
#line 14251 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2302:
#line 14252 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2303:
#line 14253 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2304:
#line 14254 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2305:
#line 14255 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2306:
#line 14256 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2307:
#line 14257 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2308:
#line 14258 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2309:
#line 14259 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2310:
#line 14260 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2311:
#line 14261 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2312:
#line 14262 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2313:
#line 14263 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2314:
#line 14264 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2315:
#line 14265 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2316:
#line 14266 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2317:
#line 14267 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2318:
#line 14268 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2319:
#line 14269 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2320:
#line 14270 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2321:
#line 14271 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2322:
#line 14272 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2323:
#line 14273 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2324:
#line 14274 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2325:
#line 14275 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2326:
#line 14276 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2327:
#line 14277 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2328:
#line 14278 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2329:
#line 14279 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2330:
#line 14280 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2331:
#line 14281 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2332:
#line 14282 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2333:
#line 14283 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2334:
#line 14284 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2335:
#line 14285 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2336:
#line 14286 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2337:
#line 14287 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2338:
#line 14288 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2339:
#line 14289 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2340:
#line 14290 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2341:
#line 14291 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2342:
#line 14292 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2343:
#line 14293 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2344:
#line 14294 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2345:
#line 14295 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2346:
#line 14296 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2347:
#line 14297 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2348:
#line 14298 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2349:
#line 14299 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2350:
#line 14300 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2351:
#line 14301 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2352:
#line 14302 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2353:
#line 14303 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2354:
#line 14304 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2355:
#line 14305 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2356:
#line 14306 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2357:
#line 14307 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2358:
#line 14308 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2359:
#line 14309 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2360:
#line 14310 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2361:
#line 14311 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2362:
#line 14312 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2363:
#line 14313 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2364:
#line 14314 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2365:
#line 14315 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2366:
#line 14316 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2367:
#line 14317 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2368:
#line 14318 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2369:
#line 14319 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2370:
#line 14320 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2371:
#line 14321 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2372:
#line 14322 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2373:
#line 14323 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2374:
#line 14324 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2375:
#line 14325 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2376:
#line 14326 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2377:
#line 14327 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2378:
#line 14328 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2379:
#line 14329 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2380:
#line 14330 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2381:
#line 14331 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2382:
#line 14332 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2383:
#line 14333 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2384:
#line 14334 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2385:
#line 14335 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2386:
#line 14336 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2387:
#line 14337 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2388:
#line 14338 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2389:
#line 14339 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2390:
#line 14340 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2391:
#line 14341 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2392:
#line 14342 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2393:
#line 14343 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2394:
#line 14344 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2395:
#line 14345 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2396:
#line 14346 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2397:
#line 14347 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2398:
#line 14348 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2399:
#line 14349 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2400:
#line 14350 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2401:
#line 14351 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2402:
#line 14352 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2403:
#line 14353 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2404:
#line 14354 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2405:
#line 14355 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2406:
#line 14356 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2407:
#line 14357 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2408:
#line 14358 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2409:
#line 14359 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2410:
#line 14360 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2411:
#line 14361 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2412:
#line 14362 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2413:
#line 14363 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2414:
#line 14364 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2415:
#line 14365 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2416:
#line 14366 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2417:
#line 14367 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2418:
#line 14368 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2419:
#line 14369 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2420:
#line 14370 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2421:
#line 14371 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2422:
#line 14372 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2423:
#line 14373 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2424:
#line 14374 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2425:
#line 14375 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2426:
#line 14376 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2427:
#line 14377 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2428:
#line 14378 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2429:
#line 14379 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2430:
#line 14380 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2431:
#line 14381 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2432:
#line 14382 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2433:
#line 14383 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2434:
#line 14384 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2435:
#line 14385 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2436:
#line 14386 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2437:
#line 14387 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2438:
#line 14388 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2439:
#line 14389 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2440:
#line 14390 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2441:
#line 14391 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2442:
#line 14392 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2443:
#line 14393 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2444:
#line 14394 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2445:
#line 14395 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2446:
#line 14396 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2447:
#line 14397 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2448:
#line 14398 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2449:
#line 14399 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2450:
#line 14400 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2451:
#line 14401 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2452:
#line 14402 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2453:
#line 14403 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2454:
#line 14404 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2455:
#line 14405 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2456:
#line 14406 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2457:
#line 14407 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2458:
#line 14408 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2459:
#line 14409 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2460:
#line 14410 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2461:
#line 14411 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2462:
#line 14412 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2463:
#line 14413 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2464:
#line 14414 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2465:
#line 14415 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2466:
#line 14416 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2467:
#line 14417 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2468:
#line 14418 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2469:
#line 14419 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2470:
#line 14420 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2471:
#line 14421 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2472:
#line 14422 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2473:
#line 14423 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2474:
#line 14424 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2475:
#line 14425 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2476:
#line 14426 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2477:
#line 14427 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2478:
#line 14428 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2479:
#line 14429 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2480:
#line 14430 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2481:
#line 14442 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2482:
#line 14453 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2483:
#line 14460 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2485:
#line 14466 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2486:
#line 14470 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2487:
#line 14475 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2489:
#line 14485 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2491:
#line 14491 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2494:
#line 14505 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2495:
#line 14509 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2496:
#line 14514 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2497:
#line 14518 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2498:
#line 14527 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2501:
#line 14535 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2502:
#line 14536 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2503:
#line 14537 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2504:
#line 14541 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2505:
#line 14542 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2506:
#line 14543 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2507:
#line 14544 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2508:
#line 14548 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2509:
#line 14549 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2510:
#line 14550 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2511:
#line 14551 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2512:
#line 14557 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceeding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2513:
#line 14581 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if (set_trigger_new_row(thd, &(yyvsp[(1) - (3)].variable).base_name, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (3)].variable).var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable *spv= spc->find_variable((yyvsp[(1) - (3)].variable).base_name, false);

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2514:
#line 14607 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (thd->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2515:
#line 14618 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2516:
#line 14630 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2517:
#line 14643 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2518:
#line 14658 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2519:
#line 14677 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            set_var_role *var= new set_var_role((yyvsp[(2) - (2)].lex_str));
            lex->var_list.push_back(var);
          }
    break;

  case 2520:
#line 14683 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->user= current_user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2521:
#line 14708 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2522:
#line 14721 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2523:
#line 14747 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(thd, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2524:
#line 14790 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(thd, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2529:
#line 14811 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2530:
#line 14828 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2531:
#line 14844 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2532:
#line 14845 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2533:
#line 14849 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2534:
#line 14850 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2535:
#line 14851 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2536:
#line 14852 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2537:
#line 14856 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2538:
#line 14858 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? thd->variables.old_passwords ?
              Item_func_old_password::alloc(thd, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(thd, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2539:
#line 14867 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::
              alloc(thd, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2540:
#line 14877 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2541:
#line 14878 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2542:
#line 14880 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2543:
#line 14886 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2544:
#line 14892 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2545:
#line 14903 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2546:
#line 14914 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2551:
#line 14929 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2552:
#line 14943 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2553:
#line 14944 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2554:
#line 14946 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2555:
#line 14950 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2556:
#line 14951 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2557:
#line 14956 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2558:
#line 14967 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2559:
#line 14976 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2560:
#line 14988 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2561:
#line 15000 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (thd->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2562:
#line 15020 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2563:
#line 15033 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2564:
#line 15034 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2565:
#line 15038 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2566:
#line 15039 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2567:
#line 15043 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2568:
#line 15044 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2569:
#line 15045 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2570:
#line 15046 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2571:
#line 15048 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2572:
#line 15056 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2573:
#line 15060 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2574:
#line 15061 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2575:
#line 15062 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2576:
#line 15063 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2577:
#line 15064 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2578:
#line 15071 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2579:
#line 15076 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2580:
#line 15082 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2581:
#line 15093 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2582:
#line 15104 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2583:
#line 15108 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2584:
#line 15115 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_REVOKE_ROLE;
            if (Lex->users_list.push_front((yyvsp[(1) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2585:
#line 15124 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->with_admin_option= true; (yyval.lex_user)= (yyvsp[(4) - (4)].lex_user); }
    break;

  case 2586:
#line 15126 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->with_admin_option= false; (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); }
    break;

  case 2587:
#line 15131 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2588:
#line 15137 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2589:
#line 15144 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2590:
#line 15156 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2591:
#line 15167 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2592:
#line 15174 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT_ROLE;
            /* The first role is the one that is granted */
            if (Lex->users_list.push_front((yyvsp[(1) - (4)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2593:
#line 15185 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->definer = 0; }
    break;

  case 2594:
#line 15186 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->definer = (yyvsp[(3) - (3)].lex_user); }
    break;

  case 2595:
#line 15189 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->with_admin_option= false; }
    break;

  case 2596:
#line 15190 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->with_admin_option= true; }
    break;

  case 2597:
#line 15194 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2598:
#line 15199 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2599:
#line 15207 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_role;
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
          }
    break;

  case 2600:
#line 15218 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].lex_str).length == 0)
            {
              my_error(ER_INVALID_ROLE, MYF(0), "");
              MYSQL_YYABORT;
            }
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host= empty_lex_str;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2604:
#line 15246 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2605:
#line 15248 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2610:
#line 15266 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2611:
#line 15267 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2612:
#line 15269 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2613:
#line 15270 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2614:
#line 15272 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2615:
#line 15273 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2616:
#line 15275 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2617:
#line 15276 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2618:
#line 15277 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2619:
#line 15278 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2620:
#line 15279 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2621:
#line 15280 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2622:
#line 15281 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2623:
#line 15282 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2624:
#line 15283 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2625:
#line 15284 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2626:
#line 15285 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2627:
#line 15286 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2628:
#line 15287 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2629:
#line 15288 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2630:
#line 15289 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2631:
#line 15290 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2632:
#line 15291 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2633:
#line 15292 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2634:
#line 15293 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2635:
#line 15294 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2636:
#line 15295 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2637:
#line 15296 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2638:
#line 15297 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2639:
#line 15298 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2640:
#line 15299 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2641:
#line 15300 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2642:
#line 15301 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2643:
#line 15302 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2644:
#line 15306 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2645:
#line 15307 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2648:
#line 15317 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2649:
#line 15327 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2650:
#line 15337 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2651:
#line 15350 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2652:
#line 15365 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2653:
#line 15378 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2654:
#line 15391 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2655:
#line 15403 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2656:
#line 15408 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2657:
#line 15416 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2658:
#line 15421 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2659:
#line 15429 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2660:
#line 15434 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2665:
#line 15445 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (thd->variables.old_passwords == 1)
              {
                char *buff= 
                  (char *) thd->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) thd->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2666:
#line 15474 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
          }
    break;

  case 2667:
#line 15479 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2668:
#line 15485 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2669:
#line 15491 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2670:
#line 15496 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2674:
#line 15510 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            String *new_str = new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2676:
#line 15539 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2677:
#line 15543 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2678:
#line 15547 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2679:
#line 15551 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2680:
#line 15557 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2682:
#line 15562 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2683:
#line 15563 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2684:
#line 15567 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2685:
#line 15568 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2686:
#line 15572 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2687:
#line 15574 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2688:
#line 15580 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2689:
#line 15586 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2690:
#line 15592 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2691:
#line 15601 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2692:
#line 15606 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2693:
#line 15610 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2694:
#line 15611 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2695:
#line 15616 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2696:
#line 15617 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2697:
#line 15618 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2698:
#line 15623 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2699:
#line 15624 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2700:
#line 15625 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2701:
#line 15629 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2702:
#line 15630 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2703:
#line 15635 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2704:
#line 15647 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2705:
#line 15657 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2706:
#line 15666 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2707:
#line 15675 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2708:
#line 15688 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2710:
#line 15694 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2711:
#line 15699 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2712:
#line 15709 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2713:
#line 15710 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2714:
#line 15711 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2715:
#line 15715 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= false; }
    break;

  case 2716:
#line 15716 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= true; }
    break;

  case 2717:
#line 15720 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2718:
#line 15735 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2721:
#line 15747 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2722:
#line 15748 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2723:
#line 15749 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2724:
#line 15754 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2725:
#line 15758 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2727:
#line 15767 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2728:
#line 15773 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2729:
#line 15782 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2730:
#line 15788 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2731:
#line 15809 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2736:
#line 15837 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2737:
#line 15839 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2738:
#line 15846 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2739:
#line 15847 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2740:
#line 15848 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2741:
#line 15850 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2742:
#line 15856 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2743:
#line 15861 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2744:
#line 15872 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2745:
#line 15874 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2746:
#line 15876 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2760:
#line 15909 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            thd->lex->definer= 0;
          }
    break;

  case 2761:
#line 15923 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            thd->lex->definer= (yyvsp[(3) - (3)].lex_user);
          }
    break;

  case 2762:
#line 15936 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
    break;

  case 2763:
#line 15938 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2764:
#line 15940 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2765:
#line 15945 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2766:
#line 15947 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2767:
#line 15949 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2768:
#line 15954 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2770:
#line 15970 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2772:
#line 15976 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2773:
#line 15981 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2774:
#line 15988 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2775:
#line 15997 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2778:
#line 16018 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2779:
#line 16020 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2780:
#line 16022 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2781:
#line 16024 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2782:
#line 16041 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2783:
#line 16047 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2784:
#line 16052 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { /* $15 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2785:
#line 16081 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(thd);
            sp->restore_thd_mem_root(thd);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2786:
#line 16115 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2787:
#line 16132 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2788:
#line 16154 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { /* $5 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2789:
#line 16185 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2790:
#line 16189 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 2791:
#line 16198 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(thd, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2792:
#line 16221 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { /* $14 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2793:
#line 16229 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2794:
#line 16284 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(thd, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2795:
#line 16308 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2796:
#line 16317 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2797:
#line 16324 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2798:
#line 16331 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(thd);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2799:
#line 16345 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2800:
#line 16349 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2801:
#line 16353 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2802:
#line 16357 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2803:
#line 16361 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2804:
#line 16365 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2805:
#line 16372 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2806:
#line 16379 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2807:
#line 16386 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2808:
#line 16395 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2809:
#line 16396 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2810:
#line 16400 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2811:
#line 16401 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2812:
#line 16402 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2813:
#line 16406 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2814:
#line 16407 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2815:
#line 16412 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2816:
#line 16414 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2818:
#line 16419 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {}
    break;

  case 2819:
#line 16420 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2820:
#line 16425 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2821:
#line 16432 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2822:
#line 16442 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2823:
#line 16448 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2824:
#line 16459 "/Users/matt/Documents/Develop/GitRepository/MariaDB/sql/sql_yacc.yy"
    {
	  YYERROR;
	}
    break;


/* Line 1267 of yacc.c.  */
#line 40131 "/Users/matt/Documents/Develop/GitRepository/MariaDB/Debug/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (thd, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (thd, yymsg);
	  }
	else
	  {
	    yyerror (thd, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, thd);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, thd);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (thd, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, thd);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, thd);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



