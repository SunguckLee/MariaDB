
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 25 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

#define YYLIP  (& thd->m_parser_state->m_lip)
#define YYPS   (& thd->m_parser_state->m_yacc)
#define YYCSCL (thd->variables.character_set_client)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (thd->lex)

#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(current_thd, (char*) (A));      \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(thd);  \
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext), thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label(current_thd, empty_lex_str, lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !MY_TEST(i) ||
         sp->push_backpatch(i, ctx->push_label(current_thd, empty_lex_str, 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!MY_TEST(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->default_value)
    it= spv->default_value;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param  thd         The current thread.
  @param  name        The SP variable name.
  @param  spvar       The SP variable (optional).
  @param  start_in_q  Start position of the SP variable name in the query.
  @param  end_in_q    End position of the SP variable name in the query.

  @remark If spvar is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal*
create_item_for_sp_var(THD *thd, LEX_STRING name, sp_variable *spvar,
                       const char *start_in_q, const char *end_in_q)
{
  Item_splocal *item;
  LEX *lex= thd->lex;
  uint pos_in_q, len_in_q;
  sp_pcontext *spc = lex->spcont;

  /* If necessary, look for the variable. */
  if (spc && !spvar)
    spvar= spc->find_variable(name, false);

  if (!spvar)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(spc && spvar);

  /* Position and length of the SP variable name in the query. */
  pos_in_q= start_in_q - lex->sphead->m_tmp_query;
  len_in_q= end_in_q - start_in_q;

  item= new (thd->mem_root)
    Item_splocal(name, spvar->offset, spvar->type, pos_in_q, len_in_q);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  lex->option_list= NULL;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list, lex->option_list, lex->check_exists);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

static void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->one_shot_set= 0;
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    DBUG_ASSERT(no_lookahead);
    lex->sphead->m_tmp_query= lip->get_ptr();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                 lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}




/* Line 189 of yacc.c  */
#line 948 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADMIN_SYM = 262,
     ADDDATE_SYM = 263,
     AFTER_SYM = 264,
     AGAINST = 265,
     AGGREGATE_SYM = 266,
     ALGORITHM_SYM = 267,
     ALL = 268,
     ALTER = 269,
     ALWAYS_SYM = 270,
     ANALYZE_SYM = 271,
     AND_AND_SYM = 272,
     AND_SYM = 273,
     ANY_SYM = 274,
     AS = 275,
     ASC = 276,
     ASCII_SYM = 277,
     ASENSITIVE_SYM = 278,
     AT_SYM = 279,
     AUTHORS_SYM = 280,
     AUTOEXTEND_SIZE_SYM = 281,
     AUTO_INC = 282,
     AUTO_SYM = 283,
     AVG_ROW_LENGTH = 284,
     AVG_SYM = 285,
     BACKUP_SYM = 286,
     BEFORE_SYM = 287,
     BEGIN_SYM = 288,
     BETWEEN_SYM = 289,
     BIGINT = 290,
     BINARY = 291,
     BINLOG_SYM = 292,
     BIN_NUM = 293,
     BIT_AND = 294,
     BIT_OR = 295,
     BIT_SYM = 296,
     BIT_XOR = 297,
     BLOB_SYM = 298,
     BLOCK_SYM = 299,
     BOOLEAN_SYM = 300,
     BOOL_SYM = 301,
     BOTH = 302,
     BTREE_SYM = 303,
     BY = 304,
     BYTE_SYM = 305,
     CACHE_SYM = 306,
     CALL_SYM = 307,
     CASCADE = 308,
     CASCADED = 309,
     CASE_SYM = 310,
     CAST_SYM = 311,
     CATALOG_NAME_SYM = 312,
     CHAIN_SYM = 313,
     CHANGE = 314,
     CHANGED = 315,
     CHARSET = 316,
     CHAR_SYM = 317,
     CHECKPOINT_SYM = 318,
     CHECKSUM_SYM = 319,
     CHECK_SYM = 320,
     CIPHER_SYM = 321,
     CLASS_ORIGIN_SYM = 322,
     CLIENT_SYM = 323,
     CLIENT_STATS_SYM = 324,
     CLOSE_SYM = 325,
     COALESCE = 326,
     CODE_SYM = 327,
     COLLATE_SYM = 328,
     COLLATION_SYM = 329,
     COLUMNS = 330,
     COLUMN_ADD_SYM = 331,
     COLUMN_CHECK_SYM = 332,
     COLUMN_CREATE_SYM = 333,
     COLUMN_DELETE_SYM = 334,
     COLUMN_GET_SYM = 335,
     COLUMN_SYM = 336,
     COLUMN_NAME_SYM = 337,
     COMMENT_SYM = 338,
     COMMITTED_SYM = 339,
     COMMIT_SYM = 340,
     COMPACT_SYM = 341,
     COMPLETION_SYM = 342,
     COMPRESSED_SYM = 343,
     CONCURRENT = 344,
     CONDITION_SYM = 345,
     CONNECTION_SYM = 346,
     CONSISTENT_SYM = 347,
     CONSTRAINT = 348,
     CONSTRAINT_CATALOG_SYM = 349,
     CONSTRAINT_NAME_SYM = 350,
     CONSTRAINT_SCHEMA_SYM = 351,
     CONTAINS_SYM = 352,
     CONTEXT_SYM = 353,
     CONTINUE_SYM = 354,
     CONTRIBUTORS_SYM = 355,
     CONVERT_SYM = 356,
     COUNT_SYM = 357,
     CPU_SYM = 358,
     CREATE = 359,
     CROSS = 360,
     CUBE_SYM = 361,
     CURDATE = 362,
     CURRENT_SYM = 363,
     CURRENT_USER = 364,
     CURRENT_ROLE = 365,
     CURRENT_POS_SYM = 366,
     CURSOR_SYM = 367,
     CURSOR_NAME_SYM = 368,
     CURTIME = 369,
     DATABASE = 370,
     DATABASES = 371,
     DATAFILE_SYM = 372,
     DATA_SYM = 373,
     DATETIME = 374,
     DATE_ADD_INTERVAL = 375,
     DATE_SUB_INTERVAL = 376,
     DATE_SYM = 377,
     DAY_HOUR_SYM = 378,
     DAY_MICROSECOND_SYM = 379,
     DAY_MINUTE_SYM = 380,
     DAY_SECOND_SYM = 381,
     DAY_SYM = 382,
     DEALLOCATE_SYM = 383,
     DECIMAL_NUM = 384,
     DECIMAL_SYM = 385,
     DECLARE_SYM = 386,
     DEFAULT = 387,
     DEFINER_SYM = 388,
     DELAYED_SYM = 389,
     DELAY_KEY_WRITE_SYM = 390,
     DELETE_SYM = 391,
     DESC = 392,
     DESCRIBE = 393,
     DES_KEY_FILE = 394,
     DETERMINISTIC_SYM = 395,
     DIAGNOSTICS_SYM = 396,
     DIRECTORY_SYM = 397,
     DISABLE_SYM = 398,
     DISCARD = 399,
     DISK_SYM = 400,
     DISTINCT = 401,
     DIV_SYM = 402,
     DOUBLE_SYM = 403,
     DO_SYM = 404,
     DROP = 405,
     DUAL_SYM = 406,
     DUMPFILE = 407,
     DUPLICATE_SYM = 408,
     DYNAMIC_SYM = 409,
     EACH_SYM = 410,
     ELSE = 411,
     ELSEIF_SYM = 412,
     ENABLE_SYM = 413,
     ENCLOSED = 414,
     END = 415,
     ENDS_SYM = 416,
     END_OF_INPUT = 417,
     ENGINES_SYM = 418,
     ENGINE_SYM = 419,
     ENUM = 420,
     EQ = 421,
     EQUAL_SYM = 422,
     ERROR_SYM = 423,
     ERRORS = 424,
     ESCAPED = 425,
     ESCAPE_SYM = 426,
     EVENTS_SYM = 427,
     EVENT_SYM = 428,
     EVERY_SYM = 429,
     EXCHANGE_SYM = 430,
     EXAMINED_SYM = 431,
     EXECUTE_SYM = 432,
     EXISTS = 433,
     EXIT_SYM = 434,
     EXPANSION_SYM = 435,
     EXPORT_SYM = 436,
     EXTENDED_SYM = 437,
     EXTENT_SIZE_SYM = 438,
     EXTRACT_SYM = 439,
     FALSE_SYM = 440,
     FAST_SYM = 441,
     FAULTS_SYM = 442,
     FETCH_SYM = 443,
     FILE_SYM = 444,
     FIRST_SYM = 445,
     FIXED_SYM = 446,
     FLOAT_NUM = 447,
     FLOAT_SYM = 448,
     FLUSH_SYM = 449,
     FORCE_SYM = 450,
     FOREIGN = 451,
     FOR_SYM = 452,
     FOUND_SYM = 453,
     FROM = 454,
     FULL = 455,
     FULLTEXT_SYM = 456,
     FUNCTION_SYM = 457,
     GE = 458,
     GENERAL = 459,
     GENERATED_SYM = 460,
     GEOMETRYCOLLECTION = 461,
     GEOMETRY_SYM = 462,
     GET_FORMAT = 463,
     GET_SYM = 464,
     GLOBAL_SYM = 465,
     GRANT = 466,
     GRANTS = 467,
     GROUP_SYM = 468,
     GROUP_CONCAT_SYM = 469,
     GT_SYM = 470,
     HANDLER_SYM = 471,
     HARD_SYM = 472,
     HASH_SYM = 473,
     HAVING = 474,
     HELP_SYM = 475,
     HEX_NUM = 476,
     HEX_STRING = 477,
     HIGH_PRIORITY = 478,
     HOST_SYM = 479,
     HOSTS_SYM = 480,
     HOUR_MICROSECOND_SYM = 481,
     HOUR_MINUTE_SYM = 482,
     HOUR_SECOND_SYM = 483,
     HOUR_SYM = 484,
     ID_SYM = 485,
     IDENT = 486,
     IDENTIFIED_SYM = 487,
     IDENT_QUOTED = 488,
     IF = 489,
     IGNORE_SYM = 490,
     IGNORE_SERVER_IDS_SYM = 491,
     IMPORT = 492,
     INDEXES = 493,
     INDEX_SYM = 494,
     INDEX_STATS_SYM = 495,
     INFILE = 496,
     INITIAL_SIZE_SYM = 497,
     INNER_SYM = 498,
     INOUT_SYM = 499,
     INSENSITIVE_SYM = 500,
     INSERT = 501,
     INSERT_METHOD = 502,
     INSTALL_SYM = 503,
     INTERVAL_SYM = 504,
     INTO = 505,
     INT_SYM = 506,
     INVOKER_SYM = 507,
     IN_SYM = 508,
     IO_SYM = 509,
     IPC_SYM = 510,
     IS = 511,
     ISOLATION = 512,
     ISSUER_SYM = 513,
     ITERATE_SYM = 514,
     JOIN_SYM = 515,
     KEYS = 516,
     KEY_BLOCK_SIZE = 517,
     KEY_SYM = 518,
     KILL_SYM = 519,
     LANGUAGE_SYM = 520,
     LAST_SYM = 521,
     LAST_VALUE = 522,
     LE = 523,
     LEADING = 524,
     LEAVES = 525,
     LEAVE_SYM = 526,
     LEFT = 527,
     LESS_SYM = 528,
     LEVEL_SYM = 529,
     LEX_HOSTNAME = 530,
     LIKE = 531,
     LIMIT = 532,
     LINEAR_SYM = 533,
     LINES = 534,
     LINESTRING = 535,
     LIST_SYM = 536,
     LOAD = 537,
     LOCAL_SYM = 538,
     LOCATOR_SYM = 539,
     LOCKS_SYM = 540,
     LOCK_SYM = 541,
     LOGFILE_SYM = 542,
     LOGS_SYM = 543,
     LONGBLOB = 544,
     LONGTEXT = 545,
     LONG_NUM = 546,
     LONG_SYM = 547,
     LOOP_SYM = 548,
     LOW_PRIORITY = 549,
     LT = 550,
     MASTER_CONNECT_RETRY_SYM = 551,
     MASTER_GTID_POS_SYM = 552,
     MASTER_HOST_SYM = 553,
     MASTER_LOG_FILE_SYM = 554,
     MASTER_LOG_POS_SYM = 555,
     MASTER_PASSWORD_SYM = 556,
     MASTER_PORT_SYM = 557,
     MASTER_SERVER_ID_SYM = 558,
     MASTER_SSL_CAPATH_SYM = 559,
     MASTER_SSL_CA_SYM = 560,
     MASTER_SSL_CERT_SYM = 561,
     MASTER_SSL_CIPHER_SYM = 562,
     MASTER_SSL_CRL_SYM = 563,
     MASTER_SSL_CRLPATH_SYM = 564,
     MASTER_SSL_KEY_SYM = 565,
     MASTER_SSL_SYM = 566,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 567,
     MASTER_SYM = 568,
     MASTER_USER_SYM = 569,
     MASTER_USE_GTID_SYM = 570,
     MASTER_HEARTBEAT_PERIOD_SYM = 571,
     MATCH = 572,
     MAX_CONNECTIONS_PER_HOUR = 573,
     MAX_QUERIES_PER_HOUR = 574,
     MAX_ROWS = 575,
     MAX_SIZE_SYM = 576,
     MAX_SYM = 577,
     MAX_UPDATES_PER_HOUR = 578,
     MAX_USER_CONNECTIONS_SYM = 579,
     MAX_VALUE_SYM = 580,
     MEDIUMBLOB = 581,
     MEDIUMINT = 582,
     MEDIUMTEXT = 583,
     MEDIUM_SYM = 584,
     MEMORY_SYM = 585,
     MERGE_SYM = 586,
     MESSAGE_TEXT_SYM = 587,
     MICROSECOND_SYM = 588,
     MIGRATE_SYM = 589,
     MINUTE_MICROSECOND_SYM = 590,
     MINUTE_SECOND_SYM = 591,
     MINUTE_SYM = 592,
     MIN_ROWS = 593,
     MIN_SYM = 594,
     MODE_SYM = 595,
     MODIFIES_SYM = 596,
     MODIFY_SYM = 597,
     MOD_SYM = 598,
     MONTH_SYM = 599,
     MULTILINESTRING = 600,
     MULTIPOINT = 601,
     MULTIPOLYGON = 602,
     MUTEX_SYM = 603,
     MYSQL_ERRNO_SYM = 604,
     NAMES_SYM = 605,
     NAME_SYM = 606,
     NATIONAL_SYM = 607,
     NATURAL = 608,
     NCHAR_STRING = 609,
     NCHAR_SYM = 610,
     NDBCLUSTER_SYM = 611,
     NE = 612,
     NEG = 613,
     NEW_SYM = 614,
     NEXT_SYM = 615,
     NODEGROUP_SYM = 616,
     NONE_SYM = 617,
     NOT2_SYM = 618,
     NOT_SYM = 619,
     NOW_SYM = 620,
     NO_SYM = 621,
     NO_WAIT_SYM = 622,
     NO_WRITE_TO_BINLOG = 623,
     NULL_SYM = 624,
     NUM = 625,
     NUMBER_SYM = 626,
     NUMERIC_SYM = 627,
     NVARCHAR_SYM = 628,
     OFFSET_SYM = 629,
     OLD_PASSWORD = 630,
     ON = 631,
     ONE_SYM = 632,
     ONLY_SYM = 633,
     ONLINE_SYM = 634,
     OPEN_SYM = 635,
     OPTIMIZE = 636,
     OPTIONS_SYM = 637,
     OPTION = 638,
     OPTIONALLY = 639,
     OR2_SYM = 640,
     ORDER_SYM = 641,
     OR_OR_SYM = 642,
     OR_SYM = 643,
     OUTER = 644,
     OUTFILE = 645,
     OUT_SYM = 646,
     OWNER_SYM = 647,
     PACK_KEYS_SYM = 648,
     PAGE_SYM = 649,
     PAGE_CHECKSUM_SYM = 650,
     PARAM_MARKER = 651,
     PARSER_SYM = 652,
     PARSE_VCOL_EXPR_SYM = 653,
     PARTIAL = 654,
     PARTITION_SYM = 655,
     PARTITIONS_SYM = 656,
     PARTITIONING_SYM = 657,
     PASSWORD = 658,
     PERSISTENT_SYM = 659,
     PHASE_SYM = 660,
     PLUGINS_SYM = 661,
     PLUGIN_SYM = 662,
     POINT_SYM = 663,
     POLYGON = 664,
     PORT_SYM = 665,
     POSITION_SYM = 666,
     PRECISION = 667,
     PREPARE_SYM = 668,
     PRESERVE_SYM = 669,
     PREV_SYM = 670,
     PRIMARY_SYM = 671,
     PRIVILEGES = 672,
     PROCEDURE_SYM = 673,
     PROCESS = 674,
     PROCESSLIST_SYM = 675,
     PROFILE_SYM = 676,
     PROFILES_SYM = 677,
     PROXY_SYM = 678,
     PURGE = 679,
     QUARTER_SYM = 680,
     QUERY_SYM = 681,
     QUICK = 682,
     RANGE_SYM = 683,
     READS_SYM = 684,
     READ_ONLY_SYM = 685,
     READ_SYM = 686,
     READ_WRITE_SYM = 687,
     REAL = 688,
     REBUILD_SYM = 689,
     RECOVER_SYM = 690,
     REDOFILE_SYM = 691,
     REDO_BUFFER_SIZE_SYM = 692,
     REDUNDANT_SYM = 693,
     REFERENCES = 694,
     REGEXP = 695,
     RELAY = 696,
     RELAYLOG_SYM = 697,
     RELAY_LOG_FILE_SYM = 698,
     RELAY_LOG_POS_SYM = 699,
     RELAY_THREAD = 700,
     RELEASE_SYM = 701,
     RELOAD = 702,
     REMOVE_SYM = 703,
     RENAME = 704,
     REORGANIZE_SYM = 705,
     REPAIR = 706,
     REPEATABLE_SYM = 707,
     REPEAT_SYM = 708,
     REPLACE = 709,
     REPLICATION = 710,
     REQUIRE_SYM = 711,
     RESET_SYM = 712,
     RESIGNAL_SYM = 713,
     RESOURCES = 714,
     RESTORE_SYM = 715,
     RESTRICT = 716,
     RESUME_SYM = 717,
     RETURNED_SQLSTATE_SYM = 718,
     RETURNING_SYM = 719,
     RETURNS_SYM = 720,
     RETURN_SYM = 721,
     REVERSE_SYM = 722,
     REVOKE = 723,
     RIGHT = 724,
     ROLE_SYM = 725,
     ROLLBACK_SYM = 726,
     ROLLUP_SYM = 727,
     ROUTINE_SYM = 728,
     ROWS_SYM = 729,
     ROW_FORMAT_SYM = 730,
     ROW_SYM = 731,
     ROW_COUNT_SYM = 732,
     RTREE_SYM = 733,
     SAVEPOINT_SYM = 734,
     SCHEDULE_SYM = 735,
     SCHEMA_NAME_SYM = 736,
     SECOND_MICROSECOND_SYM = 737,
     SECOND_SYM = 738,
     SECURITY_SYM = 739,
     SELECT_SYM = 740,
     SENSITIVE_SYM = 741,
     SEPARATOR_SYM = 742,
     SERIALIZABLE_SYM = 743,
     SERIAL_SYM = 744,
     SESSION_SYM = 745,
     SERVER_SYM = 746,
     SERVER_OPTIONS = 747,
     SET = 748,
     SET_VAR = 749,
     SHARE_SYM = 750,
     SHIFT_LEFT = 751,
     SHIFT_RIGHT = 752,
     SHOW = 753,
     SHUTDOWN = 754,
     SIGNAL_SYM = 755,
     SIGNED_SYM = 756,
     SIMPLE_SYM = 757,
     SLAVE = 758,
     SLAVES = 759,
     SLAVE_POS_SYM = 760,
     SLOW = 761,
     SMALLINT = 762,
     SNAPSHOT_SYM = 763,
     SOCKET_SYM = 764,
     SOFT_SYM = 765,
     SONAME_SYM = 766,
     SOUNDS_SYM = 767,
     SOURCE_SYM = 768,
     SPATIAL_SYM = 769,
     SPECIFIC_SYM = 770,
     SQLEXCEPTION_SYM = 771,
     SQLSTATE_SYM = 772,
     SQLWARNING_SYM = 773,
     SQL_BIG_RESULT = 774,
     SQL_BUFFER_RESULT = 775,
     SQL_CACHE_SYM = 776,
     SQL_CALC_FOUND_ROWS = 777,
     SQL_NO_CACHE_SYM = 778,
     SQL_SMALL_RESULT = 779,
     SQL_SYM = 780,
     SQL_THREAD = 781,
     SSL_SYM = 782,
     STARTING = 783,
     STARTS_SYM = 784,
     START_SYM = 785,
     STATS_AUTO_RECALC_SYM = 786,
     STATS_PERSISTENT_SYM = 787,
     STATS_SAMPLE_PAGES_SYM = 788,
     STATUS_SYM = 789,
     STDDEV_SAMP_SYM = 790,
     STD_SYM = 791,
     STOP_SYM = 792,
     STORAGE_SYM = 793,
     STRAIGHT_JOIN = 794,
     STRING_SYM = 795,
     SUBCLASS_ORIGIN_SYM = 796,
     SUBDATE_SYM = 797,
     SUBJECT_SYM = 798,
     SUBPARTITIONS_SYM = 799,
     SUBPARTITION_SYM = 800,
     SUBSTRING = 801,
     SUM_SYM = 802,
     SUPER_SYM = 803,
     SUSPEND_SYM = 804,
     SWAPS_SYM = 805,
     SWITCHES_SYM = 806,
     SYSDATE = 807,
     TABLES = 808,
     TABLESPACE = 809,
     TABLE_REF_PRIORITY = 810,
     TABLE_STATS_SYM = 811,
     TABLE_SYM = 812,
     TABLE_CHECKSUM_SYM = 813,
     TABLE_NAME_SYM = 814,
     TEMPORARY = 815,
     TEMPTABLE_SYM = 816,
     TERMINATED = 817,
     TEXT_STRING = 818,
     TEXT_SYM = 819,
     THAN_SYM = 820,
     THEN_SYM = 821,
     TIMESTAMP = 822,
     TIMESTAMP_ADD = 823,
     TIMESTAMP_DIFF = 824,
     TIME_SYM = 825,
     TINYBLOB = 826,
     TINYINT = 827,
     TINYTEXT = 828,
     TO_SYM = 829,
     TRAILING = 830,
     TRANSACTION_SYM = 831,
     TRANSACTIONAL_SYM = 832,
     TRIGGERS_SYM = 833,
     TRIGGER_SYM = 834,
     TRIM = 835,
     TRUE_SYM = 836,
     TRUNCATE_SYM = 837,
     TYPES_SYM = 838,
     TYPE_SYM = 839,
     UDF_RETURNS_SYM = 840,
     ULONGLONG_NUM = 841,
     UNCOMMITTED_SYM = 842,
     UNDEFINED_SYM = 843,
     UNDERSCORE_CHARSET = 844,
     UNDOFILE_SYM = 845,
     UNDO_BUFFER_SIZE_SYM = 846,
     UNDO_SYM = 847,
     UNICODE_SYM = 848,
     UNINSTALL_SYM = 849,
     UNION_SYM = 850,
     UNIQUE_SYM = 851,
     UNKNOWN_SYM = 852,
     UNLOCK_SYM = 853,
     UNSIGNED = 854,
     UNTIL_SYM = 855,
     UPDATE_SYM = 856,
     UPGRADE_SYM = 857,
     USAGE = 858,
     USER = 859,
     USER_STATS_SYM = 860,
     USE_FRM = 861,
     USE_SYM = 862,
     USING = 863,
     UTC_DATE_SYM = 864,
     UTC_TIMESTAMP_SYM = 865,
     UTC_TIME_SYM = 866,
     VALUES = 867,
     VALUE_SYM = 868,
     VARBINARY = 869,
     VARCHAR = 870,
     VARIABLES = 871,
     VARIANCE_SYM = 872,
     VARYING = 873,
     VAR_SAMP_SYM = 874,
     VIA_SYM = 875,
     VIEW_SYM = 876,
     VIRTUAL_SYM = 877,
     WAIT_SYM = 878,
     WARNINGS = 879,
     WEEK_SYM = 880,
     WEIGHT_STRING_SYM = 881,
     WHEN_SYM = 882,
     WHERE = 883,
     WHILE_SYM = 884,
     WITH = 885,
     WITH_CUBE_SYM = 886,
     WITH_ROLLUP_SYM = 887,
     WORK_SYM = 888,
     WRAPPER_SYM = 889,
     WRITE_SYM = 890,
     X509_SYM = 891,
     XA_SYM = 892,
     XML_SYM = 893,
     XOR = 894,
     YEAR_MONTH_SYM = 895,
     YEAR_SYM = 896,
     ZEROFILL = 897,
     IMPOSSIBLE_ACTION = 898
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADMIN_SYM 262
#define ADDDATE_SYM 263
#define AFTER_SYM 264
#define AGAINST 265
#define AGGREGATE_SYM 266
#define ALGORITHM_SYM 267
#define ALL 268
#define ALTER 269
#define ALWAYS_SYM 270
#define ANALYZE_SYM 271
#define AND_AND_SYM 272
#define AND_SYM 273
#define ANY_SYM 274
#define AS 275
#define ASC 276
#define ASCII_SYM 277
#define ASENSITIVE_SYM 278
#define AT_SYM 279
#define AUTHORS_SYM 280
#define AUTOEXTEND_SIZE_SYM 281
#define AUTO_INC 282
#define AUTO_SYM 283
#define AVG_ROW_LENGTH 284
#define AVG_SYM 285
#define BACKUP_SYM 286
#define BEFORE_SYM 287
#define BEGIN_SYM 288
#define BETWEEN_SYM 289
#define BIGINT 290
#define BINARY 291
#define BINLOG_SYM 292
#define BIN_NUM 293
#define BIT_AND 294
#define BIT_OR 295
#define BIT_SYM 296
#define BIT_XOR 297
#define BLOB_SYM 298
#define BLOCK_SYM 299
#define BOOLEAN_SYM 300
#define BOOL_SYM 301
#define BOTH 302
#define BTREE_SYM 303
#define BY 304
#define BYTE_SYM 305
#define CACHE_SYM 306
#define CALL_SYM 307
#define CASCADE 308
#define CASCADED 309
#define CASE_SYM 310
#define CAST_SYM 311
#define CATALOG_NAME_SYM 312
#define CHAIN_SYM 313
#define CHANGE 314
#define CHANGED 315
#define CHARSET 316
#define CHAR_SYM 317
#define CHECKPOINT_SYM 318
#define CHECKSUM_SYM 319
#define CHECK_SYM 320
#define CIPHER_SYM 321
#define CLASS_ORIGIN_SYM 322
#define CLIENT_SYM 323
#define CLIENT_STATS_SYM 324
#define CLOSE_SYM 325
#define COALESCE 326
#define CODE_SYM 327
#define COLLATE_SYM 328
#define COLLATION_SYM 329
#define COLUMNS 330
#define COLUMN_ADD_SYM 331
#define COLUMN_CHECK_SYM 332
#define COLUMN_CREATE_SYM 333
#define COLUMN_DELETE_SYM 334
#define COLUMN_GET_SYM 335
#define COLUMN_SYM 336
#define COLUMN_NAME_SYM 337
#define COMMENT_SYM 338
#define COMMITTED_SYM 339
#define COMMIT_SYM 340
#define COMPACT_SYM 341
#define COMPLETION_SYM 342
#define COMPRESSED_SYM 343
#define CONCURRENT 344
#define CONDITION_SYM 345
#define CONNECTION_SYM 346
#define CONSISTENT_SYM 347
#define CONSTRAINT 348
#define CONSTRAINT_CATALOG_SYM 349
#define CONSTRAINT_NAME_SYM 350
#define CONSTRAINT_SCHEMA_SYM 351
#define CONTAINS_SYM 352
#define CONTEXT_SYM 353
#define CONTINUE_SYM 354
#define CONTRIBUTORS_SYM 355
#define CONVERT_SYM 356
#define COUNT_SYM 357
#define CPU_SYM 358
#define CREATE 359
#define CROSS 360
#define CUBE_SYM 361
#define CURDATE 362
#define CURRENT_SYM 363
#define CURRENT_USER 364
#define CURRENT_ROLE 365
#define CURRENT_POS_SYM 366
#define CURSOR_SYM 367
#define CURSOR_NAME_SYM 368
#define CURTIME 369
#define DATABASE 370
#define DATABASES 371
#define DATAFILE_SYM 372
#define DATA_SYM 373
#define DATETIME 374
#define DATE_ADD_INTERVAL 375
#define DATE_SUB_INTERVAL 376
#define DATE_SYM 377
#define DAY_HOUR_SYM 378
#define DAY_MICROSECOND_SYM 379
#define DAY_MINUTE_SYM 380
#define DAY_SECOND_SYM 381
#define DAY_SYM 382
#define DEALLOCATE_SYM 383
#define DECIMAL_NUM 384
#define DECIMAL_SYM 385
#define DECLARE_SYM 386
#define DEFAULT 387
#define DEFINER_SYM 388
#define DELAYED_SYM 389
#define DELAY_KEY_WRITE_SYM 390
#define DELETE_SYM 391
#define DESC 392
#define DESCRIBE 393
#define DES_KEY_FILE 394
#define DETERMINISTIC_SYM 395
#define DIAGNOSTICS_SYM 396
#define DIRECTORY_SYM 397
#define DISABLE_SYM 398
#define DISCARD 399
#define DISK_SYM 400
#define DISTINCT 401
#define DIV_SYM 402
#define DOUBLE_SYM 403
#define DO_SYM 404
#define DROP 405
#define DUAL_SYM 406
#define DUMPFILE 407
#define DUPLICATE_SYM 408
#define DYNAMIC_SYM 409
#define EACH_SYM 410
#define ELSE 411
#define ELSEIF_SYM 412
#define ENABLE_SYM 413
#define ENCLOSED 414
#define END 415
#define ENDS_SYM 416
#define END_OF_INPUT 417
#define ENGINES_SYM 418
#define ENGINE_SYM 419
#define ENUM 420
#define EQ 421
#define EQUAL_SYM 422
#define ERROR_SYM 423
#define ERRORS 424
#define ESCAPED 425
#define ESCAPE_SYM 426
#define EVENTS_SYM 427
#define EVENT_SYM 428
#define EVERY_SYM 429
#define EXCHANGE_SYM 430
#define EXAMINED_SYM 431
#define EXECUTE_SYM 432
#define EXISTS 433
#define EXIT_SYM 434
#define EXPANSION_SYM 435
#define EXPORT_SYM 436
#define EXTENDED_SYM 437
#define EXTENT_SIZE_SYM 438
#define EXTRACT_SYM 439
#define FALSE_SYM 440
#define FAST_SYM 441
#define FAULTS_SYM 442
#define FETCH_SYM 443
#define FILE_SYM 444
#define FIRST_SYM 445
#define FIXED_SYM 446
#define FLOAT_NUM 447
#define FLOAT_SYM 448
#define FLUSH_SYM 449
#define FORCE_SYM 450
#define FOREIGN 451
#define FOR_SYM 452
#define FOUND_SYM 453
#define FROM 454
#define FULL 455
#define FULLTEXT_SYM 456
#define FUNCTION_SYM 457
#define GE 458
#define GENERAL 459
#define GENERATED_SYM 460
#define GEOMETRYCOLLECTION 461
#define GEOMETRY_SYM 462
#define GET_FORMAT 463
#define GET_SYM 464
#define GLOBAL_SYM 465
#define GRANT 466
#define GRANTS 467
#define GROUP_SYM 468
#define GROUP_CONCAT_SYM 469
#define GT_SYM 470
#define HANDLER_SYM 471
#define HARD_SYM 472
#define HASH_SYM 473
#define HAVING 474
#define HELP_SYM 475
#define HEX_NUM 476
#define HEX_STRING 477
#define HIGH_PRIORITY 478
#define HOST_SYM 479
#define HOSTS_SYM 480
#define HOUR_MICROSECOND_SYM 481
#define HOUR_MINUTE_SYM 482
#define HOUR_SECOND_SYM 483
#define HOUR_SYM 484
#define ID_SYM 485
#define IDENT 486
#define IDENTIFIED_SYM 487
#define IDENT_QUOTED 488
#define IF 489
#define IGNORE_SYM 490
#define IGNORE_SERVER_IDS_SYM 491
#define IMPORT 492
#define INDEXES 493
#define INDEX_SYM 494
#define INDEX_STATS_SYM 495
#define INFILE 496
#define INITIAL_SIZE_SYM 497
#define INNER_SYM 498
#define INOUT_SYM 499
#define INSENSITIVE_SYM 500
#define INSERT 501
#define INSERT_METHOD 502
#define INSTALL_SYM 503
#define INTERVAL_SYM 504
#define INTO 505
#define INT_SYM 506
#define INVOKER_SYM 507
#define IN_SYM 508
#define IO_SYM 509
#define IPC_SYM 510
#define IS 511
#define ISOLATION 512
#define ISSUER_SYM 513
#define ITERATE_SYM 514
#define JOIN_SYM 515
#define KEYS 516
#define KEY_BLOCK_SIZE 517
#define KEY_SYM 518
#define KILL_SYM 519
#define LANGUAGE_SYM 520
#define LAST_SYM 521
#define LAST_VALUE 522
#define LE 523
#define LEADING 524
#define LEAVES 525
#define LEAVE_SYM 526
#define LEFT 527
#define LESS_SYM 528
#define LEVEL_SYM 529
#define LEX_HOSTNAME 530
#define LIKE 531
#define LIMIT 532
#define LINEAR_SYM 533
#define LINES 534
#define LINESTRING 535
#define LIST_SYM 536
#define LOAD 537
#define LOCAL_SYM 538
#define LOCATOR_SYM 539
#define LOCKS_SYM 540
#define LOCK_SYM 541
#define LOGFILE_SYM 542
#define LOGS_SYM 543
#define LONGBLOB 544
#define LONGTEXT 545
#define LONG_NUM 546
#define LONG_SYM 547
#define LOOP_SYM 548
#define LOW_PRIORITY 549
#define LT 550
#define MASTER_CONNECT_RETRY_SYM 551
#define MASTER_GTID_POS_SYM 552
#define MASTER_HOST_SYM 553
#define MASTER_LOG_FILE_SYM 554
#define MASTER_LOG_POS_SYM 555
#define MASTER_PASSWORD_SYM 556
#define MASTER_PORT_SYM 557
#define MASTER_SERVER_ID_SYM 558
#define MASTER_SSL_CAPATH_SYM 559
#define MASTER_SSL_CA_SYM 560
#define MASTER_SSL_CERT_SYM 561
#define MASTER_SSL_CIPHER_SYM 562
#define MASTER_SSL_CRL_SYM 563
#define MASTER_SSL_CRLPATH_SYM 564
#define MASTER_SSL_KEY_SYM 565
#define MASTER_SSL_SYM 566
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 567
#define MASTER_SYM 568
#define MASTER_USER_SYM 569
#define MASTER_USE_GTID_SYM 570
#define MASTER_HEARTBEAT_PERIOD_SYM 571
#define MATCH 572
#define MAX_CONNECTIONS_PER_HOUR 573
#define MAX_QUERIES_PER_HOUR 574
#define MAX_ROWS 575
#define MAX_SIZE_SYM 576
#define MAX_SYM 577
#define MAX_UPDATES_PER_HOUR 578
#define MAX_USER_CONNECTIONS_SYM 579
#define MAX_VALUE_SYM 580
#define MEDIUMBLOB 581
#define MEDIUMINT 582
#define MEDIUMTEXT 583
#define MEDIUM_SYM 584
#define MEMORY_SYM 585
#define MERGE_SYM 586
#define MESSAGE_TEXT_SYM 587
#define MICROSECOND_SYM 588
#define MIGRATE_SYM 589
#define MINUTE_MICROSECOND_SYM 590
#define MINUTE_SECOND_SYM 591
#define MINUTE_SYM 592
#define MIN_ROWS 593
#define MIN_SYM 594
#define MODE_SYM 595
#define MODIFIES_SYM 596
#define MODIFY_SYM 597
#define MOD_SYM 598
#define MONTH_SYM 599
#define MULTILINESTRING 600
#define MULTIPOINT 601
#define MULTIPOLYGON 602
#define MUTEX_SYM 603
#define MYSQL_ERRNO_SYM 604
#define NAMES_SYM 605
#define NAME_SYM 606
#define NATIONAL_SYM 607
#define NATURAL 608
#define NCHAR_STRING 609
#define NCHAR_SYM 610
#define NDBCLUSTER_SYM 611
#define NE 612
#define NEG 613
#define NEW_SYM 614
#define NEXT_SYM 615
#define NODEGROUP_SYM 616
#define NONE_SYM 617
#define NOT2_SYM 618
#define NOT_SYM 619
#define NOW_SYM 620
#define NO_SYM 621
#define NO_WAIT_SYM 622
#define NO_WRITE_TO_BINLOG 623
#define NULL_SYM 624
#define NUM 625
#define NUMBER_SYM 626
#define NUMERIC_SYM 627
#define NVARCHAR_SYM 628
#define OFFSET_SYM 629
#define OLD_PASSWORD 630
#define ON 631
#define ONE_SYM 632
#define ONLY_SYM 633
#define ONLINE_SYM 634
#define OPEN_SYM 635
#define OPTIMIZE 636
#define OPTIONS_SYM 637
#define OPTION 638
#define OPTIONALLY 639
#define OR2_SYM 640
#define ORDER_SYM 641
#define OR_OR_SYM 642
#define OR_SYM 643
#define OUTER 644
#define OUTFILE 645
#define OUT_SYM 646
#define OWNER_SYM 647
#define PACK_KEYS_SYM 648
#define PAGE_SYM 649
#define PAGE_CHECKSUM_SYM 650
#define PARAM_MARKER 651
#define PARSER_SYM 652
#define PARSE_VCOL_EXPR_SYM 653
#define PARTIAL 654
#define PARTITION_SYM 655
#define PARTITIONS_SYM 656
#define PARTITIONING_SYM 657
#define PASSWORD 658
#define PERSISTENT_SYM 659
#define PHASE_SYM 660
#define PLUGINS_SYM 661
#define PLUGIN_SYM 662
#define POINT_SYM 663
#define POLYGON 664
#define PORT_SYM 665
#define POSITION_SYM 666
#define PRECISION 667
#define PREPARE_SYM 668
#define PRESERVE_SYM 669
#define PREV_SYM 670
#define PRIMARY_SYM 671
#define PRIVILEGES 672
#define PROCEDURE_SYM 673
#define PROCESS 674
#define PROCESSLIST_SYM 675
#define PROFILE_SYM 676
#define PROFILES_SYM 677
#define PROXY_SYM 678
#define PURGE 679
#define QUARTER_SYM 680
#define QUERY_SYM 681
#define QUICK 682
#define RANGE_SYM 683
#define READS_SYM 684
#define READ_ONLY_SYM 685
#define READ_SYM 686
#define READ_WRITE_SYM 687
#define REAL 688
#define REBUILD_SYM 689
#define RECOVER_SYM 690
#define REDOFILE_SYM 691
#define REDO_BUFFER_SIZE_SYM 692
#define REDUNDANT_SYM 693
#define REFERENCES 694
#define REGEXP 695
#define RELAY 696
#define RELAYLOG_SYM 697
#define RELAY_LOG_FILE_SYM 698
#define RELAY_LOG_POS_SYM 699
#define RELAY_THREAD 700
#define RELEASE_SYM 701
#define RELOAD 702
#define REMOVE_SYM 703
#define RENAME 704
#define REORGANIZE_SYM 705
#define REPAIR 706
#define REPEATABLE_SYM 707
#define REPEAT_SYM 708
#define REPLACE 709
#define REPLICATION 710
#define REQUIRE_SYM 711
#define RESET_SYM 712
#define RESIGNAL_SYM 713
#define RESOURCES 714
#define RESTORE_SYM 715
#define RESTRICT 716
#define RESUME_SYM 717
#define RETURNED_SQLSTATE_SYM 718
#define RETURNING_SYM 719
#define RETURNS_SYM 720
#define RETURN_SYM 721
#define REVERSE_SYM 722
#define REVOKE 723
#define RIGHT 724
#define ROLE_SYM 725
#define ROLLBACK_SYM 726
#define ROLLUP_SYM 727
#define ROUTINE_SYM 728
#define ROWS_SYM 729
#define ROW_FORMAT_SYM 730
#define ROW_SYM 731
#define ROW_COUNT_SYM 732
#define RTREE_SYM 733
#define SAVEPOINT_SYM 734
#define SCHEDULE_SYM 735
#define SCHEMA_NAME_SYM 736
#define SECOND_MICROSECOND_SYM 737
#define SECOND_SYM 738
#define SECURITY_SYM 739
#define SELECT_SYM 740
#define SENSITIVE_SYM 741
#define SEPARATOR_SYM 742
#define SERIALIZABLE_SYM 743
#define SERIAL_SYM 744
#define SESSION_SYM 745
#define SERVER_SYM 746
#define SERVER_OPTIONS 747
#define SET 748
#define SET_VAR 749
#define SHARE_SYM 750
#define SHIFT_LEFT 751
#define SHIFT_RIGHT 752
#define SHOW 753
#define SHUTDOWN 754
#define SIGNAL_SYM 755
#define SIGNED_SYM 756
#define SIMPLE_SYM 757
#define SLAVE 758
#define SLAVES 759
#define SLAVE_POS_SYM 760
#define SLOW 761
#define SMALLINT 762
#define SNAPSHOT_SYM 763
#define SOCKET_SYM 764
#define SOFT_SYM 765
#define SONAME_SYM 766
#define SOUNDS_SYM 767
#define SOURCE_SYM 768
#define SPATIAL_SYM 769
#define SPECIFIC_SYM 770
#define SQLEXCEPTION_SYM 771
#define SQLSTATE_SYM 772
#define SQLWARNING_SYM 773
#define SQL_BIG_RESULT 774
#define SQL_BUFFER_RESULT 775
#define SQL_CACHE_SYM 776
#define SQL_CALC_FOUND_ROWS 777
#define SQL_NO_CACHE_SYM 778
#define SQL_SMALL_RESULT 779
#define SQL_SYM 780
#define SQL_THREAD 781
#define SSL_SYM 782
#define STARTING 783
#define STARTS_SYM 784
#define START_SYM 785
#define STATS_AUTO_RECALC_SYM 786
#define STATS_PERSISTENT_SYM 787
#define STATS_SAMPLE_PAGES_SYM 788
#define STATUS_SYM 789
#define STDDEV_SAMP_SYM 790
#define STD_SYM 791
#define STOP_SYM 792
#define STORAGE_SYM 793
#define STRAIGHT_JOIN 794
#define STRING_SYM 795
#define SUBCLASS_ORIGIN_SYM 796
#define SUBDATE_SYM 797
#define SUBJECT_SYM 798
#define SUBPARTITIONS_SYM 799
#define SUBPARTITION_SYM 800
#define SUBSTRING 801
#define SUM_SYM 802
#define SUPER_SYM 803
#define SUSPEND_SYM 804
#define SWAPS_SYM 805
#define SWITCHES_SYM 806
#define SYSDATE 807
#define TABLES 808
#define TABLESPACE 809
#define TABLE_REF_PRIORITY 810
#define TABLE_STATS_SYM 811
#define TABLE_SYM 812
#define TABLE_CHECKSUM_SYM 813
#define TABLE_NAME_SYM 814
#define TEMPORARY 815
#define TEMPTABLE_SYM 816
#define TERMINATED 817
#define TEXT_STRING 818
#define TEXT_SYM 819
#define THAN_SYM 820
#define THEN_SYM 821
#define TIMESTAMP 822
#define TIMESTAMP_ADD 823
#define TIMESTAMP_DIFF 824
#define TIME_SYM 825
#define TINYBLOB 826
#define TINYINT 827
#define TINYTEXT 828
#define TO_SYM 829
#define TRAILING 830
#define TRANSACTION_SYM 831
#define TRANSACTIONAL_SYM 832
#define TRIGGERS_SYM 833
#define TRIGGER_SYM 834
#define TRIM 835
#define TRUE_SYM 836
#define TRUNCATE_SYM 837
#define TYPES_SYM 838
#define TYPE_SYM 839
#define UDF_RETURNS_SYM 840
#define ULONGLONG_NUM 841
#define UNCOMMITTED_SYM 842
#define UNDEFINED_SYM 843
#define UNDERSCORE_CHARSET 844
#define UNDOFILE_SYM 845
#define UNDO_BUFFER_SIZE_SYM 846
#define UNDO_SYM 847
#define UNICODE_SYM 848
#define UNINSTALL_SYM 849
#define UNION_SYM 850
#define UNIQUE_SYM 851
#define UNKNOWN_SYM 852
#define UNLOCK_SYM 853
#define UNSIGNED 854
#define UNTIL_SYM 855
#define UPDATE_SYM 856
#define UPGRADE_SYM 857
#define USAGE 858
#define USER 859
#define USER_STATS_SYM 860
#define USE_FRM 861
#define USE_SYM 862
#define USING 863
#define UTC_DATE_SYM 864
#define UTC_TIMESTAMP_SYM 865
#define UTC_TIME_SYM 866
#define VALUES 867
#define VALUE_SYM 868
#define VARBINARY 869
#define VARCHAR 870
#define VARIABLES 871
#define VARIANCE_SYM 872
#define VARYING 873
#define VAR_SAMP_SYM 874
#define VIA_SYM 875
#define VIEW_SYM 876
#define VIRTUAL_SYM 877
#define WAIT_SYM 878
#define WARNINGS 879
#define WEEK_SYM 880
#define WEIGHT_STRING_SYM 881
#define WHEN_SYM 882
#define WHERE 883
#define WHILE_SYM 884
#define WITH 885
#define WITH_CUBE_SYM 886
#define WITH_ROLLUP_SYM 887
#define WORK_SYM 888
#define WRAPPER_SYM 889
#define WRITE_SYM 890
#define X509_SYM 891
#define XA_SYM 892
#define XML_SYM 893
#define XOR 894
#define YEAR_MONTH_SYM 895
#define YEAR_SYM 896
#define ZEROFILL 897
#define IMPOSSIBLE_ACTION 898




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 890 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  enum ha_choice choice;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  class sp_condition_value *spcondvalue;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  Diagnostics_information::Which_area diag_area;
  Diagnostics_information *diag_info;
  Statement_information_item *stmt_info_item;
  Statement_information_item::Name stmt_info_item_name;
  List<Statement_information_item> *stmt_info_list;
  Condition_information_item *cond_info_item;
  Condition_information_item::Name cond_info_item_name;
  List<Condition_information_item> *cond_info_list;
  DYNCALL_CREATE_DEF *dyncol_def;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;
  bool is_not_empty;



/* Line 214 of yacc.c  */
#line 2332 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2349 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  622
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   65776

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  663
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  996
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2821
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4789

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   898

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   656,     2,     2,     2,   650,   645,     2,
     653,   654,   648,   647,   655,   646,   661,   649,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   662,   659,
       2,     2,     2,     2,   660,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   651,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   657,   644,   658,   652,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   129,   131,   135,   137,   139,   144,
     146,   149,   150,   155,   156,   159,   163,   165,   168,   169,
     173,   174,   181,   183,   187,   191,   195,   199,   203,   207,
     211,   215,   219,   223,   227,   231,   235,   239,   243,   247,
     253,   255,   256,   258,   262,   264,   268,   272,   276,   280,
     284,   288,   292,   293,   295,   297,   298,   306,   307,   308,
     324,   325,   326,   342,   343,   344,   360,   361,   368,   369,
     373,   378,   384,   389,   393,   396,   407,   409,   413,   416,
     419,   422,   425,   428,   431,   434,   435,   449,   450,   457,
     460,   461,   463,   467,   469,   470,   473,   474,   477,   478,
     480,   484,   489,   490,   493,   494,   497,   499,   501,   503,
     505,   507,   509,   511,   513,   515,   517,   519,   521,   523,
     524,   528,   530,   531,   534,   535,   538,   541,   544,   547,
     550,   554,   558,   560,   562,   564,   567,   571,   575,   576,
     581,   582,   586,   587,   589,   593,   595,   596,   598,   602,
     604,   605,   609,   610,   612,   616,   618,   623,   624,   626,
     628,   630,   631,   635,   638,   642,   643,   647,   648,   654,
     660,   661,   669,   675,   676,   679,   681,   683,   685,   689,
     691,   693,   695,   699,   700,   702,   704,   706,   708,   711,
     713,   717,   719,   721,   722,   724,   725,   728,   732,   738,
     740,   742,   744,   746,   748,   750,   752,   754,   756,   758,
     760,   762,   764,   766,   768,   772,   777,   778,   780,   782,
     786,   788,   792,   796,   798,   801,   803,   805,   807,   809,
     813,   817,   819,   821,   823,   825,   827,   829,   831,   833,
     835,   837,   839,   841,   843,   845,   849,   850,   853,   855,
     857,   859,   861,   863,   865,   867,   869,   871,   873,   875,
     877,   879,   880,   886,   887,   890,   891,   895,   896,   899,
     902,   905,   908,   909,   916,   919,   920,   923,   925,   927,
     931,   932,   933,   934,   942,   943,   946,   949,   951,   953,
     954,   955,   964,   965,   972,   974,   977,   979,   982,   983,
     984,   991,   992,   993,  1000,  1001,  1004,  1005,  1011,  1012,
    1014,  1015,  1021,  1022,  1025,  1026,  1032,  1037,  1038,  1039,
    1048,  1049,  1057,  1059,  1061,  1063,  1065,  1067,  1070,  1075,
    1081,  1082,  1087,  1092,  1097,  1101,  1105,  1108,  1111,  1112,
    1115,  1117,  1120,  1124,  1126,  1128,  1130,  1132,  1134,  1137,
    1141,  1143,  1145,  1147,  1149,  1151,  1153,  1155,  1157,  1159,
    1161,  1164,  1168,  1170,  1172,  1174,  1176,  1178,  1180,  1182,
    1185,  1189,  1191,  1193,  1195,  1197,  1199,  1201,  1203,  1205,
    1207,  1210,  1214,  1216,  1218,  1220,  1223,  1226,  1229,  1231,
    1233,  1235,  1237,  1240,  1244,  1248,  1252,  1256,  1260,  1264,
    1268,  1272,  1277,  1278,  1280,  1282,  1284,  1286,  1288,  1289,
    1297,  1301,  1302,  1308,  1310,  1313,  1318,  1319,  1320,  1326,
    1327,  1335,  1337,  1338,  1340,  1341,  1346,  1347,  1348,  1352,
    1358,  1365,  1366,  1371,  1374,  1377,  1380,  1383,  1384,  1386,
    1387,  1391,  1392,  1394,  1396,  1400,  1402,  1407,  1413,  1419,
    1420,  1423,  1424,  1425,  1433,  1434,  1445,  1447,  1451,  1453,
    1455,  1456,  1459,  1460,  1464,  1466,  1470,  1471,  1478,  1480,
    1481,  1482,  1488,  1489,  1494,  1496,  1498,  1500,  1504,  1506,
    1510,  1511,  1512,  1518,  1520,  1524,  1526,  1528,  1529,  1533,
    1535,  1539,  1540,  1545,  1547,  1548,  1550,  1553,  1555,  1559,
    1564,  1568,  1572,  1576,  1580,  1585,  1590,  1594,  1595,  1596,
    1603,  1604,  1606,  1607,  1609,  1611,  1614,  1616,  1618,  1619,
    1621,  1623,  1626,  1628,  1629,  1633,  1635,  1639,  1640,  1642,
    1644,  1647,  1649,  1652,  1656,  1660,  1664,  1668,  1672,  1676,
    1680,  1684,  1688,  1692,  1696,  1700,  1704,  1708,  1712,  1716,
    1720,  1724,  1728,  1732,  1736,  1737,  1744,  1746,  1748,  1752,
    1757,  1762,  1765,  1768,  1771,  1775,  1779,  1783,  1787,  1791,
    1795,  1799,  1804,  1809,  1811,  1813,  1815,  1817,  1819,  1821,
    1823,  1825,  1827,  1829,  1831,  1833,  1835,  1838,  1840,  1842,
    1844,  1846,  1848,  1850,  1854,  1856,  1858,  1861,  1864,  1865,
    1874,  1875,  1885,  1886,  1896,  1897,  1907,  1916,  1919,  1920,
    1922,  1927,  1928,  1930,  1933,  1934,  1938,  1941,  1950,  1951,
    1954,  1955,  1957,  1959,  1960,  1962,  1965,  1967,  1969,  1972,
    1975,  1980,  1984,  1988,  1992,  1996,  1998,  2001,  2003,  2005,
    2009,  2012,  2016,  2019,  2022,  2024,  2028,  2032,  2035,  2039,
    2041,  2044,  2047,  2050,  2052,  2055,  2057,  2059,  2061,  2064,
    2068,  2071,  2075,  2078,  2081,  2085,  2089,  2093,  2094,  2101,
    2102,  2109,  2112,  2114,  2116,  2118,  2120,  2122,  2124,  2126,
    2128,  2130,  2132,  2134,  2137,  2140,  2142,  2145,  2147,  2150,
    2154,  2157,  2159,  2161,  2163,  2165,  2167,  2169,  2171,  2174,
    2175,  2177,  2179,  2185,  2186,  2188,  2191,  2193,  2195,  2197,
    2199,  2203,  2207,  2211,  2215,  2216,  2218,  2219,  2221,  2222,
    2224,  2227,  2229,  2231,  2234,  2237,  2242,  2244,  2248,  2251,
    2253,  2256,  2259,  2262,  2266,  2270,  2274,  2278,  2281,  2284,
    2286,  2288,  2290,  2293,  2295,  2297,  2299,  2301,  2303,  2304,
    2307,  2309,  2311,  2313,  2315,  2317,  2318,  2321,  2323,  2325,
    2326,  2328,  2330,  2333,  2336,  2338,  2341,  2344,  2345,  2347,
    2349,  2351,  2355,  2357,  2361,  2362,  2364,  2365,  2370,  2372,
    2374,  2376,  2377,  2379,  2382,  2384,  2386,  2389,  2391,  2395,
    2399,  2401,  2403,  2404,  2407,  2408,  2410,  2416,  2417,  2421,
    2425,  2427,  2428,  2431,  2434,  2437,  2438,  2442,  2446,  2453,
    2460,  2462,  2464,  2467,  2470,  2473,  2475,  2478,  2481,  2483,
    2485,  2486,  2488,  2490,  2492,  2494,  2495,  2497,  2499,  2501,
    2502,  2504,  2507,  2508,  2510,  2511,  2513,  2514,  2516,  2518,
    2521,  2523,  2526,  2528,  2531,  2534,  2537,  2541,  2544,  2548,
    2552,  2556,  2560,  2562,  2564,  2566,  2568,  2572,  2574,  2576,
    2578,  2583,  2586,  2588,  2593,  2594,  2596,  2599,  2600,  2603,
    2605,  2609,  2610,  2611,  2619,  2620,  2626,  2634,  2635,  2641,
    2642,  2648,  2649,  2655,  2656,  2661,  2662,  2673,  2677,  2682,
    2686,  2690,  2698,  2699,  2703,  2705,  2710,  2711,  2715,  2716,
    2719,  2720,  2722,  2723,  2726,  2729,  2732,  2735,  2737,  2739,
    2741,  2746,  2751,  2752,  2759,  2764,  2765,  2771,  2772,  2779,
    2784,  2788,  2790,  2798,  2801,  2803,  2805,  2806,  2813,  2814,
    2818,  2821,  2822,  2828,  2829,  2830,  2837,  2839,  2843,  2845,
    2847,  2851,  2855,  2859,  2862,  2867,  2868,  2876,  2877,  2878,
    2887,  2893,  2899,  2903,  2908,  2911,  2914,  2921,  2927,  2931,
    2937,  2939,  2941,  2943,  2945,  2947,  2948,  2950,  2952,  2955,
    2958,  2962,  2966,  2970,  2974,  2975,  2977,  2978,  2980,  2981,
    2984,  2985,  2987,  2990,  2992,  2994,  2996,  2997,  2999,  3001,
    3002,  3005,  3007,  3008,  3010,  3012,  3014,  3015,  3022,  3023,
    3029,  3034,  3039,  3043,  3044,  3046,  3048,  3052,  3056,  3059,
    3062,  3063,  3066,  3068,  3072,  3073,  3075,  3077,  3078,  3081,
    3086,  3088,  3092,  3093,  3099,  3100,  3102,  3104,  3105,  3112,
    3113,  3115,  3117,  3120,  3122,  3124,  3126,  3127,  3133,  3135,
    3139,  3142,  3143,  3147,  3149,  3154,  3156,  3157,  3162,  3164,
    3165,  3170,  3171,  3173,  3177,  3178,  3180,  3184,  3186,  3188,
    3191,  3192,  3198,  3199,  3201,  3203,  3206,  3208,  3210,  3212,
    3214,  3216,  3219,  3220,  3226,  3227,  3229,  3231,  3232,  3237,
    3242,  3246,  3252,  3254,  3258,  3262,  3263,  3270,  3272,  3274,
    3276,  3280,  3283,  3287,  3289,  3291,  3292,  3299,  3301,  3303,
    3305,  3309,  3313,  3318,  3319,  3326,  3327,  3330,  3331,  3336,
    3337,  3340,  3342,  3345,  3350,  3353,  3357,  3360,  3364,  3365,
    3369,  3370,  3371,  3378,  3381,  3383,  3385,  3388,  3391,  3400,
    3405,  3406,  3408,  3411,  3413,  3415,  3417,  3419,  3420,  3423,
    3428,  3432,  3434,  3436,  3440,  3445,  3446,  3447,  3448,  3451,
    3454,  3456,  3458,  3459,  3462,  3466,  3467,  3470,  3474,  3475,
    3478,  3482,  3486,  3490,  3493,  3497,  3502,  3506,  3511,  3515,
    3520,  3522,  3526,  3531,  3535,  3539,  3546,  3548,  3554,  3561,
    3567,  3575,  3582,  3591,  3597,  3604,  3609,  3614,  3620,  3624,
    3629,  3631,  3635,  3639,  3643,  3647,  3651,  3655,  3661,  3667,
    3671,  3675,  3679,  3683,  3687,  3691,  3693,  3695,  3697,  3699,
    3701,  3703,  3705,  3707,  3709,  3711,  3713,  3715,  3717,  3719,
    3721,  3723,  3725,  3726,  3729,  3731,  3734,  3736,  3738,  3740,
    3743,  3746,  3748,  3750,  3753,  3756,  3761,  3763,  3767,  3769,
    3771,  3773,  3775,  3777,  3781,  3783,  3785,  3787,  3789,  3793,
    3796,  3799,  3802,  3805,  3809,  3813,  3819,  3826,  3831,  3836,
    3844,  3847,  3854,  3860,  3867,  3874,  3879,  3884,  3890,  3895,
    3902,  3905,  3908,  3913,  3918,  3923,  3934,  3941,  3950,  3957,
    3962,  3967,  3974,  3979,  3984,  3989,  3996,  4001,  4009,  4017,
    4025,  4032,  4039,  4046,  4053,  4057,  4062,  4069,  4078,  4081,
    4084,  4093,  4102,  4109,  4116,  4119,  4126,  4133,  4142,  4151,
    4158,  4167,  4174,  4177,  4186,  4195,  4198,  4201,  4204,  4211,
    4218,  4223,  4228,  4237,  4242,  4247,  4252,  4257,  4261,  4270,
    4275,  4280,  4287,  4292,  4297,  4302,  4309,  4318,  4323,  4327,
    4334,  4339,  4346,  4352,  4361,  4369,  4380,  4382,  4389,  4394,
    4399,  4404,  4409,  4414,  4421,  4426,  4427,  4433,  4440,  4443,
    4447,  4448,  4453,  4454,  4458,  4459,  4461,  4463,  4467,  4472,
    4477,  4483,  4488,  4493,  4498,  4504,  4509,  4510,  4511,  4519,
    4524,  4530,  4535,  4541,  4546,  4551,  4556,  4561,  4566,  4572,
    4573,  4582,  4583,  4587,  4591,  4593,  4598,  4599,  4601,  4602,
    4605,  4606,  4607,  4612,  4617,  4620,  4621,  4625,  4628,  4632,
    4635,  4637,  4639,  4642,  4644,  4647,  4649,  4652,  4655,  4658,
    4659,  4663,  4664,  4666,  4668,  4672,  4674,  4678,  4680,  4684,
    4685,  4687,  4688,  4691,  4696,  4702,  4704,  4706,  4708,  4710,
    4715,  4717,  4721,  4725,  4726,  4733,  4734,  4743,  4748,  4749,
    4758,  4759,  4770,  4777,  4778,  4787,  4788,  4799,  4806,  4808,
    4811,  4813,  4815,  4818,  4819,  4821,  4827,  4828,  4834,  4838,
    4844,  4847,  4848,  4849,  4857,  4859,  4860,  4861,  4868,  4869,
    4873,  4874,  4875,  4881,  4882,  4884,  4885,  4887,  4888,  4891,
    4895,  4899,  4901,  4903,  4904,  4912,  4913,  4921,  4923,  4926,
    4927,  4928,  4931,  4932,  4935,  4936,  4938,  4940,  4942,  4944,
    4948,  4950,  4954,  4956,  4958,  4960,  4962,  4964,  4966,  4968,
    4970,  4972,  4974,  4976,  4978,  4980,  4982,  4984,  4986,  4988,
    4990,  4992,  4994,  4996,  4998,  5000,  5002,  5004,  5005,  5007,
    5009,  5010,  5013,  5014,  5016,  5017,  5018,  5022,  5023,  5024,
    5028,  5031,  5032,  5033,  5038,  5043,  5046,  5047,  5049,  5051,
    5055,  5059,  5061,  5064,  5065,  5067,  5068,  5073,  5078,  5081,
    5082,  5084,  5086,  5087,  5089,  5090,  5092,  5095,  5101,  5106,
    5108,  5112,  5116,  5118,  5120,  5122,  5124,  5126,  5128,  5129,
    5132,  5136,  5141,  5143,  5146,  5149,  5151,  5153,  5155,  5157,
    5159,  5161,  5163,  5165,  5167,  5169,  5171,  5173,  5175,  5177,
    5179,  5181,  5183,  5185,  5187,  5189,  5191,  5193,  5195,  5197,
    5199,  5201,  5202,  5203,  5210,  5211,  5213,  5217,  5219,  5223,
    5224,  5227,  5231,  5233,  5236,  5238,  5239,  5243,  5244,  5245,
    5253,  5256,  5258,  5259,  5263,  5264,  5272,  5273,  5281,  5286,
    5293,  5298,  5303,  5308,  5313,  5314,  5321,  5326,  5331,  5337,
    5344,  5349,  5351,  5355,  5357,  5360,  5362,  5366,  5368,  5369,
    5372,  5373,  5375,  5376,  5377,  5386,  5387,  5388,  5395,  5396,
    5398,  5400,  5402,  5404,  5406,  5409,  5411,  5413,  5415,  5419,
    5424,  5425,  5429,  5433,  5435,  5438,  5441,  5442,  5446,  5447,
    5453,  5457,  5459,  5463,  5465,  5469,  5471,  5473,  5474,  5476,
    5477,  5482,  5483,  5485,  5489,  5491,  5493,  5495,  5496,  5497,
    5504,  5505,  5506,  5518,  5522,  5524,  5528,  5532,  5534,  5538,
    5539,  5541,  5542,  5547,  5548,  5549,  5559,  5560,  5566,  5567,
    5574,  5575,  5578,  5580,  5584,  5587,  5592,  5593,  5596,  5597,
    5600,  5602,  5604,  5606,  5607,  5612,  5613,  5615,  5616,  5618,
    5620,  5624,  5626,  5628,  5631,  5634,  5637,  5639,  5641,  5643,
    5645,  5646,  5650,  5651,  5655,  5658,  5663,  5668,  5672,  5677,
    5682,  5684,  5688,  5692,  5696,  5700,  5707,  5710,  5713,  5714,
    5721,  5722,  5730,  5736,  5739,  5741,  5743,  5745,  5751,  5757,
    5760,  5763,  5765,  5770,  5774,  5777,  5781,  5784,  5787,  5789,
    5793,  5798,  5802,  5806,  5809,  5813,  5816,  5820,  5822,  5824,
    5826,  5828,  5832,  5836,  5840,  5844,  5848,  5852,  5856,  5860,
    5864,  5866,  5868,  5870,  5872,  5874,  5875,  5877,  5878,  5881,
    5882,  5884,  5886,  5888,  5889,  5892,  5893,  5896,  5897,  5900,
    5903,  5904,  5909,  5910,  5915,  5917,  5919,  5921,  5923,  5925,
    5927,  5929,  5930,  5932,  5934,  5935,  5937,  5939,  5940,  5945,
    5946,  5951,  5953,  5954,  5956,  5961,  5962,  5966,  5970,  5972,
    5975,  5978,  5981,  5984,  5987,  5991,  5994,  5996,  5998,  6000,
    6002,  6005,  6007,  6009,  6011,  6013,  6015,  6017,  6019,  6020,
    6022,  6023,  6027,  6028,  6032,  6036,  6038,  6039,  6044,  6046,
    6049,  6050,  6052,  6053,  6057,  6061,  6064,  6067,  6068,  6074,
    6075,  6077,  6079,  6080,  6082,  6084,  6087,  6089,  6092,  6094,
    6097,  6098,  6099,  6100,  6101,  6124,  6126,  6128,  6129,  6131,
    6132,  6134,  6136,  6137,  6139,  6141,  6142,  6145,  6148,  6150,
    6154,  6159,  6163,  6167,  6168,  6171,  6174,  6176,  6180,  6184,
    6185,  6190,  6191,  6195,  6197,  6199,  6200,  6204,  6207,  6211,
    6213,  6215,  6218,  6219,  6222,  6226,  6228,  6234,  6236,  6238,
    6241,  6244,  6246,  6248,  6250,  6252,  6254,  6256,  6259,  6262,
    6264,  6266,  6268,  6270,  6272,  6274,  6276,  6278,  6280,  6283,
    6286,  6288,  6290,  6292,  6294,  6296,  6299,  6302,  6305,  6307,
    6309,  6313,  6319,  6321,  6323,  6325,  6327,  6329,  6333,  6338,
    6344,  6346,  6352,  6356,  6359,  6361,  6365,  6368,  6371,  6376,
    6378,  6380,  6382,  6384,  6386,  6388,  6390,  6392,  6394,  6396,
    6398,  6400,  6402,  6404,  6408,  6411,  6413,  6415,  6417,  6419,
    6421,  6423,  6425,  6427,  6429,  6431,  6433,  6435,  6437,  6439,
    6441,  6443,  6445,  6447,  6449,  6451,  6453,  6455,  6457,  6459,
    6461,  6463,  6465,  6467,  6469,  6471,  6473,  6475,  6477,  6479,
    6481,  6483,  6485,  6487,  6489,  6491,  6493,  6495,  6497,  6499,
    6501,  6503,  6505,  6507,  6509,  6511,  6513,  6515,  6517,  6519,
    6521,  6523,  6525,  6527,  6529,  6531,  6533,  6535,  6537,  6539,
    6541,  6543,  6545,  6547,  6549,  6551,  6553,  6555,  6557,  6559,
    6561,  6563,  6565,  6567,  6569,  6571,  6573,  6575,  6577,  6579,
    6581,  6583,  6585,  6587,  6589,  6591,  6593,  6595,  6597,  6599,
    6601,  6603,  6605,  6607,  6609,  6611,  6613,  6615,  6617,  6619,
    6621,  6623,  6625,  6627,  6629,  6631,  6633,  6635,  6637,  6639,
    6641,  6643,  6645,  6647,  6649,  6651,  6653,  6655,  6657,  6659,
    6661,  6663,  6665,  6667,  6669,  6671,  6673,  6675,  6677,  6679,
    6681,  6683,  6685,  6687,  6689,  6691,  6693,  6695,  6697,  6699,
    6701,  6703,  6705,  6707,  6709,  6711,  6713,  6715,  6717,  6719,
    6721,  6723,  6725,  6727,  6729,  6731,  6733,  6735,  6737,  6739,
    6741,  6743,  6745,  6747,  6749,  6751,  6753,  6755,  6757,  6759,
    6761,  6763,  6765,  6767,  6769,  6771,  6773,  6775,  6777,  6779,
    6781,  6783,  6785,  6787,  6789,  6791,  6793,  6795,  6797,  6799,
    6801,  6803,  6805,  6807,  6809,  6811,  6813,  6815,  6817,  6819,
    6821,  6823,  6825,  6827,  6829,  6831,  6833,  6835,  6837,  6839,
    6841,  6843,  6845,  6847,  6849,  6851,  6853,  6855,  6857,  6859,
    6861,  6863,  6865,  6867,  6869,  6871,  6873,  6875,  6877,  6879,
    6881,  6883,  6885,  6887,  6889,  6891,  6893,  6895,  6897,  6899,
    6901,  6903,  6905,  6907,  6909,  6911,  6913,  6915,  6917,  6919,
    6921,  6923,  6925,  6927,  6929,  6931,  6933,  6935,  6937,  6939,
    6941,  6943,  6945,  6947,  6949,  6951,  6953,  6955,  6957,  6959,
    6961,  6963,  6965,  6967,  6969,  6971,  6973,  6975,  6977,  6979,
    6981,  6983,  6985,  6987,  6989,  6991,  6993,  6995,  6997,  6999,
    7001,  7003,  7005,  7007,  7009,  7011,  7013,  7015,  7017,  7019,
    7021,  7023,  7025,  7027,  7029,  7031,  7033,  7035,  7037,  7039,
    7041,  7043,  7045,  7047,  7049,  7051,  7053,  7055,  7057,  7059,
    7061,  7063,  7065,  7067,  7069,  7071,  7073,  7075,  7077,  7079,
    7081,  7083,  7085,  7087,  7089,  7091,  7093,  7095,  7097,  7099,
    7101,  7103,  7105,  7107,  7109,  7111,  7113,  7115,  7117,  7119,
    7121,  7123,  7125,  7127,  7129,  7131,  7133,  7135,  7137,  7139,
    7141,  7143,  7145,  7147,  7149,  7151,  7153,  7155,  7157,  7158,
    7162,  7163,  7167,  7168,  7172,  7173,  7177,  7178,  7182,  7185,
    7186,  7189,  7190,  7193,  7194,  7199,  7200,  7204,  7206,  7208,
    7210,  7212,  7213,  7215,  7217,  7219,  7220,  7223,  7226,  7229,
    7233,  7237,  7242,  7249,  7252,  7256,  7260,  7263,  7267,  7273,
    7275,  7279,  7283,  7285,  7287,  7291,  7295,  7297,  7301,  7304,
    7307,  7310,  7313,  7316,  7318,  7320,  7325,  7330,  7332,  7334,
    7336,  7338,  7340,  7341,  7346,  7348,  7350,  7352,  7356,  7360,
    7362,  7364,  7367,  7370,  7373,  7374,  7378,  7383,  7387,  7388,
    7396,  7398,  7401,  7403,  7405,  7407,  7409,  7411,  7413,  7414,
    7420,  7422,  7424,  7426,  7428,  7430,  7434,  7441,  7448,  7455,
    7463,  7469,  7473,  7478,  7480,  7484,  7493,  7502,  7511,  7518,
    7523,  7524,  7528,  7529,  7533,  7535,  7539,  7542,  7544,  7546,
    7547,  7549,  7551,  7554,  7555,  7557,  7559,  7563,  7564,  7568,
    7569,  7573,  7574,  7578,  7579,  7583,  7585,  7587,  7589,  7591,
    7593,  7595,  7597,  7599,  7601,  7603,  7605,  7608,  7611,  7613,
    7617,  7620,  7623,  7626,  7629,  7632,  7635,  7638,  7641,  7643,
    7645,  7648,  7649,  7651,  7655,  7657,  7660,  7663,  7666,  7668,
    7672,  7676,  7678,  7680,  7684,  7686,  7690,  7692,  7696,  7698,
    7700,  7702,  7704,  7709,  7715,  7720,  7727,  7729,  7730,  7734,
    7738,  7740,  7742,  7743,  7746,  7749,  7752,  7755,  7756,  7759,
    7760,  7764,  7767,  7769,  7772,  7775,  7778,  7781,  7784,  7785,
    7789,  7790,  7792,  7793,  7797,  7800,  7801,  7803,  7806,  7807,
    7809,  7814,  7819,  7825,  7828,  7832,  7833,  7835,  7836,  7841,
    7842,  7844,  7846,  7847,  7849,  7850,  7853,  7856,  7858,  7859,
    7861,  7863,  7866,  7870,  7873,  7874,  7881,  7885,  7886,  7887,
    7888,  7890,  7893,  7895,  7897,  7899,  7901,  7903,  7905,  7907,
    7909,  7911,  7914,  7917,  7921,  7923,  7925,  7927,  7929,  7931,
    7933,  7935,  7937,  7939,  7941,  7943,  7945,  7947,  7948,  7952,
    7956,  7960,  7964,  7965,  7969,  7973,  7974,  7982,  7983,  7987,
    7989,  7993,  7994,  7998,  8001,  8006,  8007,  8011,  8016,  8021,
    8022,  8023,  8024,  8041,  8050,  8058,  8059,  8060,  8061,  8062,
    8063,  8079,  8080,  8081,  8082,  8083,  8096,  8101,  8106,  8110,
    8115,  8119,  8122,  8124,  8128,  8134,  8136,  8138,  8139,  8141,
    8143,  8144,  8147,  8148,  8149,  8153,  8154,  8157,  8163,  8167,
    8171,  8175
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     664,     0,    -1,   162,    -1,    -1,   667,   665,   659,   666,
      -1,   667,   162,    -1,    -1,   162,    -1,   668,    -1,  1588,
      -1,  1054,    -1,  1122,    -1,  1135,    -1,   722,    -1,   680,
      -1,  1136,    -1,  1114,    -1,  1594,    -1,   689,    -1,   669,
      -1,  1387,    -1,  1421,    -1,  1338,    -1,  1340,    -1,   673,
      -1,  1428,    -1,   758,    -1,  1554,    -1,  1544,    -1,   678,
      -1,  1351,    -1,  1656,    -1,  1658,    -1,  1149,    -1,  1449,
      -1,  1456,    -1,  1536,    -1,  1141,    -1,   968,    -1,   877,
      -1,  1156,    -1,   671,    -1,  1445,    -1,  1597,    -1,  1144,
      -1,  1117,    -1,  1354,    -1,  1439,    -1,   757,    -1,  1551,
      -1,  1595,    -1,  1596,    -1,  1168,    -1,  1509,    -1,   750,
      -1,  1407,    -1,  1454,    -1,  1101,    -1,  1104,    -1,  1400,
      -1,  1657,    -1,  1542,    -1,  1379,    -1,  1455,    -1,  1648,
      -1,   670,   413,  1501,    -1,   128,    -1,   150,    -1,   413,
    1501,   199,   672,    -1,  1498,    -1,   660,  1503,    -1,    -1,
     177,  1501,   674,   675,    -1,    -1,   608,   676,    -1,   676,
     655,   677,    -1,   677,    -1,   660,  1503,    -1,    -1,   220,
     679,  1503,    -1,    -1,    59,   313,   687,   574,   681,   682,
      -1,   683,    -1,   682,   655,   683,    -1,   298,   166,  1498,
      -1,   314,   166,  1498,    -1,   301,   166,  1498,    -1,   302,
     166,  1317,    -1,   296,   166,  1317,    -1,   311,   166,  1317,
      -1,   305,   166,  1498,    -1,   304,   166,  1498,    -1,   306,
     166,  1498,    -1,   307,   166,  1498,    -1,   310,   166,  1498,
      -1,   312,   166,  1317,    -1,   308,   166,  1498,    -1,   309,
     166,  1498,    -1,   316,   166,  1485,    -1,   236,   166,   653,
     684,   654,    -1,   686,    -1,    -1,   685,    -1,   684,   655,
     685,    -1,  1317,    -1,   299,   166,  1498,    -1,   300,   166,
    1319,    -1,   443,   166,  1498,    -1,   444,   166,  1317,    -1,
     315,   166,   111,    -1,   315,   166,   505,    -1,   315,   166,
     366,    -1,    -1,   688,    -1,  1498,    -1,    -1,   933,   929,
     557,   932,  1494,   690,   865,    -1,    -1,    -1,   104,  1031,
     239,   932,  1501,  1035,   376,  1494,   691,   653,  1048,   654,
    1036,   692,  1088,    -1,    -1,    -1,   104,  1032,   239,   932,
    1501,  1034,   376,  1494,   693,   653,  1048,   654,  1037,   694,
    1088,    -1,    -1,    -1,   104,  1033,   239,   932,  1501,  1034,
     376,  1494,   695,   653,  1048,   654,  1038,   696,  1088,    -1,
      -1,   104,   115,   932,  1501,   697,   926,    -1,    -1,   933,
     698,  1616,    -1,   104,   604,   715,  1575,    -1,   104,   470,
     715,  1558,  1556,    -1,   104,   287,   213,   828,    -1,   104,
     554,   825,    -1,   104,   699,    -1,   491,  1503,   196,   118,
     634,  1503,   382,   653,   700,   654,    -1,   701,    -1,   700,
     655,   701,    -1,   604,  1498,    -1,   224,  1498,    -1,   115,
    1498,    -1,   392,  1498,    -1,   403,  1498,    -1,   509,  1498,
      -1,   410,  1317,    -1,    -1,  1185,   173,   932,   716,   703,
     376,   480,   704,   709,   706,   711,   149,   712,    -1,    -1,
     174,  1191,  1287,   705,   707,   708,    -1,    24,  1191,    -1,
      -1,   158,    -1,   143,   376,   503,    -1,   143,    -1,    -1,
     529,  1191,    -1,    -1,   161,  1191,    -1,    -1,   710,    -1,
     376,    87,   414,    -1,   376,    87,   364,   414,    -1,    -1,
      83,  1498,    -1,    -1,   713,   714,    -1,   774,    -1,   776,
      -1,   772,    -1,   793,    -1,   811,    -1,   813,    -1,   808,
      -1,   778,    -1,   780,    -1,   781,    -1,   782,    -1,   783,
      -1,   785,    -1,    -1,  1501,   661,  1501,    -1,  1501,    -1,
      -1,   717,   719,    -1,    -1,   718,   720,    -1,    83,  1498,
      -1,   265,   525,    -1,   366,   525,    -1,    97,   525,    -1,
     429,   525,   118,    -1,   341,   525,   118,    -1,   721,    -1,
     719,    -1,   140,    -1,  1197,   140,    -1,   525,   484,   133,
      -1,   525,   484,   252,    -1,    -1,    52,   716,   723,   724,
      -1,    -1,   653,   725,   654,    -1,    -1,   726,    -1,   726,
     655,  1191,    -1,  1191,    -1,    -1,   728,    -1,   728,   655,
     730,    -1,   730,    -1,    -1,  1501,   729,   991,    -1,    -1,
     732,    -1,   732,   655,   733,    -1,   733,    -1,   734,   729,
    1501,   991,    -1,    -1,   253,    -1,   391,    -1,   244,    -1,
      -1,   735,   771,   659,    -1,   771,   659,    -1,   736,   771,
     659,    -1,    -1,   737,   738,   659,    -1,    -1,   131,   769,
     739,   991,   770,    -1,   131,  1501,    90,   197,   746,    -1,
      -1,   131,   743,   216,   197,   740,   744,   771,    -1,   131,
    1501,   112,   197,   741,    -1,    -1,   742,  1168,    -1,   179,
      -1,    99,    -1,   745,    -1,   744,   655,   745,    -1,   749,
      -1,  1317,    -1,   747,    -1,   517,   748,  1499,    -1,    -1,
     613,    -1,   746,    -1,  1501,    -1,   518,    -1,  1197,   198,
      -1,   516,    -1,   500,   751,   753,    -1,  1501,    -1,   747,
      -1,    -1,   751,    -1,    -1,   493,   754,    -1,   756,   166,
     755,    -1,   754,   655,   756,   166,   755,    -1,  1484,    -1,
    1222,    -1,  1490,    -1,    67,    -1,   541,    -1,    94,    -1,
      96,    -1,    95,    -1,    57,    -1,   481,    -1,   559,    -1,
      82,    -1,   113,    -1,   332,    -1,   349,    -1,   458,   752,
     753,    -1,   209,   759,   141,   760,    -1,    -1,   108,    -1,
     761,    -1,    90,   765,   766,    -1,   762,    -1,   761,   655,
     762,    -1,   763,   166,   764,    -1,  1501,    -1,   660,  1503,
      -1,   371,    -1,   477,    -1,   755,    -1,   767,    -1,   766,
     655,   767,    -1,   763,   166,   768,    -1,    67,    -1,   541,
      -1,    94,    -1,    96,    -1,    95,    -1,    57,    -1,   481,
      -1,   559,    -1,    82,    -1,   113,    -1,   332,    -1,   349,
      -1,   463,    -1,  1501,    -1,   769,   655,  1501,    -1,    -1,
     132,  1191,    -1,   774,    -1,   776,    -1,   772,    -1,   793,
      -1,   811,    -1,   813,    -1,   808,    -1,   778,    -1,   780,
      -1,   781,    -1,   782,    -1,   783,    -1,   785,    -1,    -1,
     234,   773,   788,   160,   234,    -1,    -1,   775,   668,    -1,
      -1,   466,   777,  1191,    -1,    -1,   779,   817,    -1,   271,
    1502,    -1,   259,  1502,    -1,   380,  1501,    -1,    -1,   188,
     786,  1501,   250,   784,   787,    -1,    70,  1501,    -1,    -1,
     360,   199,    -1,   199,    -1,  1501,    -1,   787,   655,  1501,
      -1,    -1,    -1,    -1,   789,  1191,   566,   790,   736,   791,
     792,    -1,    -1,   157,   788,    -1,   156,   736,    -1,   794,
      -1,   797,    -1,    -1,    -1,    55,   795,  1191,   796,   799,
     807,   160,    55,    -1,    -1,    55,   798,   800,   807,   160,
      55,    -1,   801,    -1,   799,   801,    -1,   804,    -1,   800,
     804,    -1,    -1,    -1,   627,   802,  1191,   803,   566,   736,
      -1,    -1,    -1,   627,   805,  1191,   806,   566,   736,    -1,
      -1,   156,   736,    -1,    -1,  1502,   662,   809,   817,   810,
      -1,    -1,  1502,    -1,    -1,  1502,   662,   812,   815,   810,
      -1,    -1,   814,   815,    -1,    -1,    33,   816,   737,   735,
     160,    -1,   293,   736,   160,   293,    -1,    -1,    -1,   629,
     818,  1191,   149,   819,   736,   160,   629,    -1,    -1,   453,
     736,   600,   820,  1191,   160,   453,    -1,    32,    -1,     9,
      -1,   246,    -1,   601,    -1,   136,    -1,   850,   852,    -1,
     850,    59,   847,   831,    -1,   850,     6,   847,   826,   835,
      -1,    -1,   607,   287,   213,  1501,    -1,   850,     6,   847,
     838,    -1,   850,   150,   847,   838,    -1,   851,   830,   841,
      -1,   851,   830,   844,    -1,     6,   848,    -1,     6,   849,
      -1,    -1,   832,   833,    -1,   834,    -1,   833,   834,    -1,
     833,   655,   834,    -1,   853,    -1,   854,    -1,   855,    -1,
     836,    -1,   837,    -1,   836,   837,    -1,   836,   655,   837,
      -1,   853,    -1,   854,    -1,   855,    -1,   856,    -1,   859,
      -1,   861,    -1,   863,    -1,   860,    -1,   839,    -1,   840,
      -1,   839,   840,    -1,   839,   655,   840,    -1,   853,    -1,
     854,    -1,   855,    -1,   861,    -1,   863,    -1,   842,    -1,
     843,    -1,   842,   843,    -1,   842,   655,   843,    -1,   853,
      -1,   857,    -1,   858,    -1,   859,    -1,   861,    -1,   863,
      -1,   860,    -1,   845,    -1,   846,    -1,   845,   846,    -1,
     845,   655,   846,    -1,   853,    -1,   861,    -1,   863,    -1,
     117,  1498,    -1,   590,  1498,    -1,   436,  1498,    -1,  1501,
      -1,  1501,    -1,   430,    -1,   432,    -1,   364,     4,    -1,
     242,  1371,   864,    -1,    26,  1371,   864,    -1,   321,  1371,
     864,    -1,   183,  1371,   864,    -1,   591,  1371,   864,    -1,
     437,  1371,   864,    -1,   361,  1371,  1318,    -1,    83,  1371,
    1498,    -1,  1414,   164,  1371,   941,    -1,    -1,   863,    -1,
     623,    -1,   367,    -1,  1320,    -1,  1497,    -1,    -1,   653,
     947,   654,   866,   934,   872,   869,    -1,   934,   872,   869,
      -1,    -1,   653,   922,   654,   867,  1601,    -1,   868,    -1,
     276,  1494,    -1,   653,   276,  1494,   654,    -1,    -1,    -1,
    1464,   925,   922,   870,  1598,    -1,    -1,  1464,   925,   653,
     922,   654,   871,  1601,    -1,   873,    -1,    -1,   874,    -1,
      -1,   400,   876,   875,   879,    -1,    -1,    -1,   400,   878,
     879,    -1,    49,   880,   890,   891,   898,    -1,   882,   263,
     883,   653,   884,   654,    -1,    -1,   882,   218,   881,   888,
      -1,   428,   888,    -1,   428,   887,    -1,   281,   888,    -1,
     281,   887,    -1,    -1,   278,    -1,    -1,    12,   166,  1318,
      -1,    -1,   885,    -1,   886,    -1,   885,   655,   886,    -1,
    1501,    -1,    75,   653,   884,   654,    -1,   653,  1185,   896,
    1186,   654,    -1,   653,  1185,   896,  1186,   654,    -1,    -1,
     401,  1318,    -1,    -1,    -1,   545,    49,   882,   218,   889,
     892,   897,    -1,    -1,   545,    49,   882,   263,   883,   653,
     894,   654,   893,   897,    -1,   895,    -1,   894,   655,   895,
      -1,  1501,    -1,  1194,    -1,    -1,   544,  1318,    -1,    -1,
     653,   899,   654,    -1,   900,    -1,   899,   655,   900,    -1,
      -1,   400,   901,   902,   903,   919,   914,    -1,  1501,    -1,
      -1,    -1,   612,   273,   565,   904,   906,    -1,    -1,   612,
     253,   905,   907,    -1,   325,    -1,   909,    -1,   909,    -1,
     653,   908,   654,    -1,   909,    -1,   908,   655,   909,    -1,
      -1,    -1,   653,   910,   912,   911,   654,    -1,   913,    -1,
     912,   655,   913,    -1,   325,    -1,  1194,    -1,    -1,   653,
     915,   654,    -1,   916,    -1,   915,   655,   916,    -1,    -1,
     545,   917,   918,   919,    -1,  1503,    -1,    -1,   920,    -1,
     920,   921,    -1,   921,    -1,   554,  1371,  1503,    -1,  1414,
     164,  1371,   941,    -1,    91,  1371,  1498,    -1,   361,  1371,
    1318,    -1,   320,  1371,  1320,    -1,   338,  1371,  1320,    -1,
     118,   142,  1371,  1498,    -1,   239,   142,  1371,  1498,    -1,
      83,  1371,  1498,    -1,    -1,    -1,   485,   923,  1179,  1183,
     924,   945,    -1,    -1,    20,    -1,    -1,   927,    -1,   928,
      -1,   927,   928,    -1,   940,    -1,   939,    -1,    -1,   930,
      -1,   931,    -1,   931,   930,    -1,   560,    -1,    -1,   234,
    1197,   178,    -1,   104,    -1,   104,   388,   454,    -1,    -1,
     936,    -1,   937,    -1,   937,   935,    -1,   937,    -1,   937,
     936,    -1,   937,   655,   936,    -1,   164,  1371,   941,    -1,
     320,  1371,  1319,    -1,   338,  1371,  1319,    -1,    29,  1371,
    1317,    -1,   403,  1371,  1498,    -1,    83,  1371,  1498,    -1,
      27,  1371,  1319,    -1,   393,  1371,  1317,    -1,   393,  1371,
     132,    -1,   531,  1371,  1317,    -1,   531,  1371,   132,    -1,
     532,  1371,  1317,    -1,   532,  1371,   132,    -1,   533,  1371,
    1317,    -1,   533,  1371,   132,    -1,    64,  1371,  1317,    -1,
     558,  1371,  1317,    -1,   395,  1371,  1323,    -1,   135,  1371,
    1317,    -1,   475,  1371,   943,    -1,    -1,   595,  1371,   938,
     653,  1437,   654,    -1,   939,    -1,   940,    -1,   247,  1371,
     944,    -1,   118,   142,  1371,  1498,    -1,   239,   142,  1371,
    1498,    -1,   554,  1501,    -1,   538,   145,    -1,   538,   330,
      -1,    91,  1371,  1498,    -1,   262,  1371,  1317,    -1,   577,
    1371,  1323,    -1,  1497,  1370,  1498,    -1,  1497,  1370,  1501,
      -1,  1497,  1370,  1320,    -1,  1497,  1370,   132,    -1,  1003,
     994,  1371,   996,    -1,  1003,    73,  1371,  1002,    -1,  1503,
      -1,  1503,    -1,   132,    -1,   191,    -1,   154,    -1,    88,
      -1,   438,    -1,    86,    -1,   394,    -1,   366,    -1,   190,
      -1,   266,    -1,  1310,    -1,  1178,  1182,    -1,   540,    -1,
     433,    -1,   130,    -1,   251,    -1,   948,    -1,   949,    -1,
     948,   655,   949,    -1,   950,    -1,   951,    -1,   960,   956,
      -1,   960,  1020,    -1,    -1,  1026,  1051,  1035,   653,  1048,
     654,   952,  1036,    -1,    -1,  1032,  1029,  1051,  1034,   653,
    1048,   654,   953,  1037,    -1,    -1,  1033,  1029,  1051,  1034,
     653,  1048,   654,   954,  1038,    -1,    -1,   958,  1027,  1051,
    1035,   653,  1048,   654,   955,  1036,    -1,   958,   196,   263,
    1051,   653,  1048,   654,  1020,    -1,   958,   957,    -1,    -1,
     957,    -1,    65,   653,  1191,   654,    -1,    -1,   959,    -1,
      93,  1050,    -1,    -1,  1493,   961,   962,    -1,   970,   988,
      -1,   970,   963,    20,   653,   969,   654,   964,   965,    -1,
      -1,   205,    15,    -1,    -1,   622,    -1,   404,    -1,    -1,
     966,    -1,   966,   967,    -1,   967,    -1,   596,    -1,   596,
     263,    -1,    83,  1498,    -1,   398,   653,   969,   654,    -1,
    1185,  1191,  1186,    -1,   978,   986,   982,    -1,   979,   987,
     982,    -1,   193,   980,   982,    -1,    41,    -1,    41,   985,
      -1,    46,    -1,    45,    -1,   974,   985,  1006,    -1,   974,
    1006,    -1,   975,   985,  1007,    -1,   975,  1007,    -1,    36,
     985,    -1,    36,    -1,   976,   985,  1006,    -1,   977,   985,
    1007,    -1,   614,   985,    -1,   641,   986,   982,    -1,   122,
      -1,   570,   986,    -1,   567,   986,    -1,   119,   986,    -1,
     571,    -1,    43,   986,    -1,   973,    -1,   326,    -1,   289,
      -1,   292,   614,    -1,   292,   976,  1006,    -1,   573,  1006,
      -1,   564,   986,  1006,    -1,   328,  1006,    -1,   290,  1006,
      -1,   130,   980,   982,    -1,   372,   980,   982,    -1,   191,
     980,   982,    -1,    -1,   165,   971,   653,  1053,   654,  1006,
      -1,    -1,   493,   972,   653,  1053,   654,  1006,    -1,   292,
    1006,    -1,   489,    -1,   207,    -1,   206,    -1,   408,    -1,
     346,    -1,   280,    -1,   345,    -1,   409,    -1,   347,    -1,
      62,    -1,   355,    -1,   352,    62,    -1,   974,   618,    -1,
     615,    -1,   352,   615,    -1,   373,    -1,   355,   615,    -1,
     352,    62,   618,    -1,   355,   618,    -1,   251,    -1,   572,
      -1,   507,    -1,   327,    -1,    35,    -1,   433,    -1,   148,
      -1,   148,   412,    -1,    -1,   985,    -1,   981,    -1,   653,
     370,   655,   370,   654,    -1,    -1,   983,    -1,   983,   984,
      -1,   984,    -1,   501,    -1,   599,    -1,   642,    -1,   653,
     291,   654,    -1,   653,   586,   654,    -1,   653,   129,   654,
      -1,   653,   370,   654,    -1,    -1,   985,    -1,    -1,   981,
      -1,    -1,   989,    -1,   989,   990,    -1,   990,    -1,   369,
      -1,  1197,   369,    -1,   132,   992,    -1,   376,   601,   365,
    1188,    -1,    27,    -1,   489,   132,   613,    -1,  1019,   263,
      -1,   596,    -1,   596,   263,    -1,    83,  1498,    -1,    73,
    1000,    -1,  1497,  1370,  1498,    -1,  1497,  1370,  1501,    -1,
    1497,  1370,  1320,    -1,  1497,  1370,   132,    -1,   970,  1001,
      -1,   365,  1188,    -1,  1483,    -1,   221,    -1,   222,    -1,
      62,   493,    -1,    61,    -1,  1503,    -1,    36,    -1,   995,
      -1,   132,    -1,    -1,   994,   996,    -1,  1503,    -1,    36,
      -1,   998,    -1,   132,    -1,  1503,    -1,    -1,    73,  1002,
      -1,  1000,    -1,   132,    -1,    -1,   132,    -1,    22,    -1,
      36,    22,    -1,    22,    36,    -1,   593,    -1,   593,    36,
      -1,    36,   593,    -1,    -1,  1004,    -1,  1005,    -1,    50,
      -1,   994,   995,  1007,    -1,    36,    -1,    36,   994,   995,
      -1,    -1,    36,    -1,    -1,   653,  1318,  1009,   654,    -1,
      21,    -1,   137,    -1,   467,    -1,    -1,  1010,    -1,  1010,
    1011,    -1,  1011,    -1,  1318,    -1,  1013,  1012,    -1,  1014,
      -1,  1015,   655,  1014,    -1,  1013,   646,  1013,    -1,  1015,
      -1,  1016,    -1,    -1,   274,  1017,    -1,    -1,   416,    -1,
     439,  1494,  1021,  1023,  1024,    -1,    -1,   653,  1022,   654,
      -1,  1022,   655,  1501,    -1,  1501,    -1,    -1,   317,   200,
      -1,   317,   399,    -1,   317,   502,    -1,    -1,   376,   601,
    1025,    -1,   376,   136,  1025,    -1,   376,   601,  1025,   376,
     136,  1025,    -1,   376,   136,  1025,   376,   601,  1025,    -1,
     461,    -1,    53,    -1,   493,   369,    -1,   366,     5,    -1,
     493,   132,    -1,  1028,    -1,   416,   263,    -1,   596,  1029,
      -1,   263,    -1,   239,    -1,    -1,  1028,    -1,   261,    -1,
     239,    -1,   238,    -1,    -1,   596,    -1,   201,    -1,   514,
      -1,    -1,  1034,    -1,  1034,  1042,    -1,    -1,  1039,    -1,
      -1,  1041,    -1,    -1,  1040,    -1,  1044,    -1,  1039,  1044,
      -1,  1045,    -1,  1040,  1045,    -1,  1046,    -1,  1041,  1046,
      -1,   608,  1047,    -1,   584,  1047,    -1,   262,  1371,  1317,
      -1,    83,  1498,    -1,  1497,  1370,  1498,    -1,  1497,  1370,
    1501,    -1,  1497,  1370,  1320,    -1,  1497,  1370,   132,    -1,
    1043,    -1,  1042,    -1,  1043,    -1,  1043,    -1,   630,   397,
    1497,    -1,    48,    -1,   478,    -1,   218,    -1,  1048,   655,
    1049,  1308,    -1,  1049,  1308,    -1,  1501,    -1,  1501,   653,
     370,   654,    -1,    -1,  1493,    -1,   932,  1050,    -1,    -1,
     661,  1501,    -1,  1481,    -1,  1053,   655,  1481,    -1,    -1,
      -1,    14,  1055,  1093,   557,  1494,  1056,  1067,    -1,    -1,
      14,   115,  1066,  1057,   927,    -1,    14,   115,  1501,   602,
     118,   142,   351,    -1,    -1,    14,   418,   716,  1058,   717,
      -1,    -1,    14,   202,   716,  1059,   717,    -1,    -1,    14,
    1622,  1619,  1060,  1624,    -1,    -1,    14,  1619,  1061,  1624,
      -1,    -1,    14,  1619,   173,   716,  1062,  1063,  1064,   706,
     711,  1065,    -1,    14,   554,   827,    -1,    14,   287,   213,
     829,    -1,    14,   554,   824,    -1,    14,   554,   823,    -1,
      14,   491,  1503,   382,   653,   700,   654,    -1,    -1,   376,
     480,   704,    -1,   710,    -1,   376,   480,   704,   710,    -1,
      -1,   449,   574,   716,    -1,    -1,   149,   712,    -1,    -1,
    1501,    -1,    -1,   144,   554,    -1,   237,   554,    -1,  1082,
     873,    -1,  1082,  1071,    -1,  1071,    -1,   874,    -1,  1073,
      -1,   150,   400,  1349,  1080,    -1,   434,   400,  1143,  1072,
      -1,    -1,   381,   400,  1143,  1072,  1068,  1143,    -1,    16,
     400,  1143,  1072,    -1,    -1,    65,   400,  1072,  1069,  1138,
      -1,    -1,   451,   400,  1143,  1072,  1070,  1119,    -1,    71,
     400,  1143,  1318,    -1,   582,   400,  1072,    -1,  1076,    -1,
     175,   400,  1081,   630,   557,  1494,   876,    -1,   448,   402,
      -1,    13,    -1,  1080,    -1,    -1,     6,   400,   932,  1143,
    1074,  1075,    -1,    -1,   653,   899,   654,    -1,   401,  1318,
      -1,    -1,   450,   400,  1143,  1077,  1078,    -1,    -1,    -1,
    1080,  1079,   250,   653,   899,   654,    -1,  1081,    -1,  1080,
     655,  1081,    -1,  1501,    -1,  1084,    -1,  1082,   655,  1084,
      -1,     6,  1091,   932,    -1,  1083,   950,  1099,    -1,     6,
     951,    -1,  1083,   653,   947,   654,    -1,    -1,    59,  1091,
    1349,  1493,  1085,   960,  1099,    -1,    -1,    -1,   342,  1091,
    1349,  1493,  1086,   962,  1087,  1099,    -1,   150,  1091,  1349,
    1493,  1098,    -1,   150,   196,   263,  1349,  1493,    -1,   150,
     416,   263,    -1,   150,  1028,  1349,  1493,    -1,   143,   261,
      -1,   158,   261,    -1,    14,  1091,  1493,   493,   132,  1483,
      -1,    14,  1091,  1493,   150,   132,    -1,   449,  1100,  1494,
      -1,   101,   574,   994,   996,  1001,    -1,   935,    -1,   195,
      -1,  1301,    -1,  1089,    -1,  1090,    -1,    -1,  1090,    -1,
    1089,    -1,  1090,  1089,    -1,  1089,  1090,    -1,    12,  1371,
     132,    -1,    12,  1371,  1501,    -1,   286,  1371,   132,    -1,
     286,  1371,  1501,    -1,    -1,    81,    -1,    -1,   235,    -1,
      -1,  1094,  1095,    -1,    -1,  1096,    -1,  1096,  1097,    -1,
    1097,    -1,   235,    -1,   379,    -1,    -1,   461,    -1,    53,
      -1,    -1,     9,  1501,    -1,   190,    -1,    -1,   574,    -1,
     166,    -1,    20,    -1,    -1,   530,   503,   687,  1108,  1102,
    1112,    -1,    -1,   530,    13,   504,  1108,  1103,    -1,   537,
     503,   687,  1108,    -1,   537,    13,   504,  1108,    -1,   530,
     576,  1105,    -1,    -1,  1106,    -1,  1107,    -1,  1106,   655,
    1107,    -1,   630,    92,   508,    -1,   431,   378,    -1,   431,
     635,    -1,    -1,  1109,  1110,    -1,  1111,    -1,  1110,   655,
    1111,    -1,    -1,   526,    -1,   445,    -1,    -1,   600,  1113,
      -1,   600,   297,   166,  1498,    -1,   686,    -1,  1113,   655,
     686,    -1,    -1,    64,  1538,  1115,  1344,  1116,    -1,    -1,
     427,    -1,   182,    -1,    -1,   451,  1143,  1538,  1118,  1344,
    1119,    -1,    -1,  1120,    -1,  1121,    -1,  1121,  1120,    -1,
     427,    -1,   182,    -1,   606,    -1,    -1,    16,  1143,  1538,
    1123,  1124,    -1,  1125,    -1,  1124,   655,  1125,    -1,  1345,
    1126,    -1,    -1,   404,   197,  1127,    -1,    13,    -1,    75,
    1128,   238,  1130,    -1,    13,    -1,    -1,   653,  1129,  1132,
     654,    -1,    13,    -1,    -1,   653,  1131,  1133,   654,    -1,
      -1,  1501,    -1,  1132,   655,  1501,    -1,    -1,  1134,    -1,
    1133,   655,  1134,    -1,  1501,    -1,   416,    -1,    37,  1498,
      -1,    -1,    65,  1538,  1137,  1344,  1138,    -1,    -1,  1139,
      -1,  1140,    -1,  1140,  1139,    -1,   427,    -1,   186,    -1,
     329,    -1,   182,    -1,    60,    -1,   197,   602,    -1,    -1,
     381,  1143,  1538,  1142,  1344,    -1,    -1,   368,    -1,   283,
      -1,    -1,   449,  1538,  1145,  1147,    -1,   449,   604,   715,
    1146,    -1,  1506,   574,  1506,    -1,  1146,   655,  1506,   574,
    1506,    -1,  1148,    -1,  1147,   655,  1148,    -1,  1494,   574,
    1494,    -1,    -1,    51,   239,  1150,  1151,   253,  1155,    -1,
    1152,    -1,  1154,    -1,  1153,    -1,  1152,   655,  1153,    -1,
    1494,  1164,    -1,  1494,  1162,  1164,    -1,  1501,    -1,   132,
      -1,    -1,   282,   239,   250,    51,  1157,  1158,    -1,  1161,
      -1,  1159,    -1,  1160,    -1,  1159,   655,  1160,    -1,  1494,
    1164,  1167,    -1,  1494,  1162,  1164,  1167,    -1,    -1,   400,
     876,  1163,   653,  1072,   654,    -1,    -1,  1165,  1166,    -1,
      -1,  1028,   653,  1283,   654,    -1,    -1,   235,   270,    -1,
    1169,    -1,   485,  1172,    -1,   653,  1170,   654,  1601,    -1,
     485,  1174,    -1,   653,  1170,   654,    -1,   485,  1262,    -1,
     653,  1171,   654,    -1,    -1,  1174,  1173,  1598,    -1,    -1,
      -1,  1175,  1179,  1183,  1176,  1177,  1182,    -1,  1304,  1310,
      -1,  1333,    -1,  1178,    -1,  1333,  1178,    -1,  1178,  1333,
      -1,   199,  1242,  1293,  1298,  1295,  1304,  1310,  1324,    -1,
     199,   151,  1293,  1310,    -1,    -1,  1180,    -1,  1180,  1181,
      -1,  1181,    -1,  1615,    -1,   523,    -1,   521,    -1,    -1,
     197,   601,    -1,   286,   253,   495,   340,    -1,  1183,   655,
    1184,    -1,  1184,    -1,   648,    -1,  1185,  1488,  1186,    -1,
    1185,  1191,  1186,  1187,    -1,    -1,    -1,    -1,    20,  1501,
      -1,    20,  1498,    -1,  1501,    -1,  1498,    -1,    -1,   653,
     654,    -1,   653,  1318,   654,    -1,    -1,   653,   654,    -1,
     653,  1318,   654,    -1,    -1,   653,   654,    -1,  1191,  1195,
    1191,    -1,  1191,   639,  1191,    -1,  1191,  1196,  1191,    -1,
     364,  1191,    -1,  1192,   256,   581,    -1,  1192,   256,  1197,
     581,    -1,  1192,   256,   185,    -1,  1192,   256,  1197,   185,
      -1,  1192,   256,   597,    -1,  1192,   256,  1197,   597,    -1,
    1192,    -1,  1192,   256,   369,    -1,  1192,   256,  1197,   369,
      -1,  1192,   167,  1193,    -1,  1192,  1199,  1193,    -1,  1192,
    1199,  1200,   653,  1610,   654,    -1,  1193,    -1,  1194,   253,
     653,  1610,   654,    -1,  1194,  1197,   253,   653,  1610,   654,
      -1,  1194,   253,   653,  1191,   654,    -1,  1194,   253,   653,
    1191,   655,  1235,   654,    -1,  1194,  1197,   253,   653,  1191,
     654,    -1,  1194,  1197,   253,   653,  1191,   655,  1235,   654,
      -1,  1194,    34,  1194,    18,  1193,    -1,  1194,  1197,    34,
    1194,    18,  1193,    -1,  1194,   512,   276,  1194,    -1,  1194,
     276,  1205,  1297,    -1,  1194,  1197,   276,  1205,  1297,    -1,
    1194,   440,  1194,    -1,  1194,  1197,   440,  1194,    -1,  1194,
      -1,  1194,   644,  1194,    -1,  1194,   645,  1194,    -1,  1194,
     496,  1194,    -1,  1194,   497,  1194,    -1,  1194,   647,  1194,
      -1,  1194,   646,  1194,    -1,  1194,   647,   249,  1191,  1287,
      -1,  1194,   646,   249,  1191,  1287,    -1,  1194,   648,  1194,
      -1,  1194,   649,  1194,    -1,  1194,   650,  1194,    -1,  1194,
     147,  1194,    -1,  1194,   343,  1194,    -1,  1194,   651,  1194,
      -1,  1205,    -1,   388,    -1,   385,    -1,    18,    -1,    17,
      -1,   364,    -1,   363,    -1,   656,    -1,   363,    -1,   166,
      -1,   203,    -1,   215,    -1,   268,    -1,   295,    -1,   357,
      -1,    13,    -1,    19,    -1,    -1,    20,  1202,    -1,   251,
      -1,   599,   251,    -1,   148,    -1,   433,    -1,   193,    -1,
     130,   980,    -1,   974,  1006,    -1,   975,    -1,   122,    -1,
     570,   986,    -1,   119,   986,    -1,  1191,   655,  1191,  1201,
      -1,  1203,    -1,  1204,   655,  1203,    -1,  1490,    -1,  1206,
      -1,  1207,    -1,  1210,    -1,  1208,    -1,  1205,    73,  1503,
      -1,  1484,    -1,  1482,    -1,  1222,    -1,  1218,    -1,  1205,
     387,  1205,    -1,   647,  1205,    -1,   646,  1205,    -1,   652,
    1205,    -1,  1198,  1205,    -1,   653,  1610,   654,    -1,   653,
    1191,   654,    -1,   653,  1191,   655,  1235,   654,    -1,   476,
     653,  1191,   655,  1235,   654,    -1,   178,   653,  1610,   654,
      -1,   657,  1501,  1191,   658,    -1,   317,  1236,    10,   653,
    1194,  1212,   654,    -1,    36,  1205,    -1,    56,   653,  1191,
      20,  1232,   654,    -1,    55,  1238,  1240,  1239,   160,    -1,
     101,   653,  1191,   655,  1232,   654,    -1,   101,   653,  1191,
     608,   995,   654,    -1,   132,   653,  1490,   654,    -1,   612,
     653,  1491,   654,    -1,   249,  1191,  1287,   647,  1191,    -1,
      62,   653,  1235,   654,    -1,    62,   653,  1235,   608,   995,
     654,    -1,   109,  1190,    -1,   110,  1190,    -1,   122,   653,
    1191,   654,    -1,   127,   653,  1191,   654,    -1,   229,   653,
    1191,   654,    -1,   246,   653,  1191,   655,  1191,   655,  1191,
     655,  1191,   654,    -1,   249,   653,  1191,   655,  1191,   654,
      -1,   249,   653,  1191,   655,  1191,   655,  1235,   654,    -1,
     272,   653,  1191,   655,  1191,   654,    -1,   337,   653,  1191,
     654,    -1,   344,   653,  1191,   654,    -1,   469,   653,  1191,
     655,  1191,   654,    -1,   483,   653,  1191,   654,    -1,   570,
     653,  1191,   654,    -1,   567,   653,  1191,   654,    -1,   567,
     653,  1191,   655,  1191,   654,    -1,   580,   653,  1191,   654,
      -1,   580,   653,   269,  1191,   199,  1191,   654,    -1,   580,
     653,   575,  1191,   199,  1191,   654,    -1,   580,   653,    47,
    1191,   199,  1191,   654,    -1,   580,   653,   269,   199,  1191,
     654,    -1,   580,   653,   575,   199,  1191,   654,    -1,   580,
     653,    47,   199,  1191,   654,    -1,   580,   653,  1191,   199,
    1191,   654,    -1,   604,   653,   654,    -1,   641,   653,  1191,
     654,    -1,     8,   653,  1191,   655,  1191,   654,    -1,     8,
     653,  1191,   655,   249,  1191,  1287,   654,    -1,   107,  1190,
      -1,   114,  1189,    -1,   120,   653,  1191,   655,   249,  1191,
    1287,   654,    -1,   121,   653,  1191,   655,   249,  1191,  1287,
     654,    -1,   184,   653,  1287,   199,  1191,   654,    -1,   208,
     653,  1289,   655,  1191,   654,    -1,   365,  1189,    -1,   411,
     653,  1194,   253,  1191,   654,    -1,   542,   653,  1191,   655,
    1191,   654,    -1,   542,   653,  1191,   655,   249,  1191,  1287,
     654,    -1,   546,   653,  1191,   655,  1191,   655,  1191,   654,
      -1,   546,   653,  1191,   655,  1191,   654,    -1,   546,   653,
    1191,   199,  1191,   197,  1191,   654,    -1,   546,   653,  1191,
     199,  1191,   654,    -1,   552,  1189,    -1,   568,   653,  1288,
     655,  1191,   655,  1191,   654,    -1,   569,   653,  1288,   655,
    1191,   655,  1191,   654,    -1,   609,  1190,    -1,   611,  1189,
      -1,   610,  1189,    -1,    76,   653,  1191,   655,  1204,   654,
      -1,    79,   653,  1191,   655,  1235,   654,    -1,    77,   653,
    1191,   654,    -1,    78,   653,  1204,   654,    -1,    80,   653,
    1191,   655,  1191,    20,  1232,   654,    -1,    22,   653,  1191,
     654,    -1,    61,   653,  1191,   654,    -1,    71,   653,  1235,
     654,    -1,    74,   653,  1191,   654,    -1,   115,   653,   654,
      -1,   234,   653,  1191,   655,  1191,   655,  1191,   654,    -1,
     267,   653,  1235,   654,    -1,   333,   653,  1191,   654,    -1,
     343,   653,  1191,   655,  1191,   654,    -1,   375,   653,  1191,
     654,    -1,   403,   653,  1191,   654,    -1,   425,   653,  1191,
     654,    -1,   453,   653,  1191,   655,  1191,   654,    -1,   454,
     653,  1191,   655,  1191,   655,  1191,   654,    -1,   467,   653,
    1191,   654,    -1,   477,   653,   654,    -1,   582,   653,  1191,
     655,  1191,   654,    -1,   625,   653,  1191,   654,    -1,   625,
     653,  1191,   655,  1191,   654,    -1,   626,   653,  1191,  1018,
     654,    -1,   626,   653,  1191,    20,    62,  1008,  1018,   654,
      -1,   626,   653,  1191,    20,    36,  1008,   654,    -1,   626,
     653,  1191,   655,  1317,   655,  1317,   655,  1317,   654,    -1,
    1209,    -1,    97,   653,  1191,   655,  1191,   654,    -1,   206,
     653,  1235,   654,    -1,   280,   653,  1235,   654,    -1,   345,
     653,  1235,   654,    -1,   346,   653,  1235,   654,    -1,   347,
     653,  1235,   654,    -1,   408,   653,  1191,   655,  1191,   654,
      -1,   409,   653,  1235,   654,    -1,    -1,  1497,   653,  1211,
    1215,   654,    -1,  1501,   661,  1501,   653,  1234,   654,    -1,
    1213,  1214,    -1,   253,    45,   340,    -1,    -1,   253,   353,
     265,   340,    -1,    -1,   630,   426,   180,    -1,    -1,  1216,
      -1,  1217,    -1,  1216,   655,  1217,    -1,  1185,  1191,  1186,
    1187,    -1,    30,   653,  1230,   654,    -1,    30,   653,   146,
    1230,   654,    -1,    39,   653,  1230,   654,    -1,    40,   653,
    1230,   654,    -1,    42,   653,  1230,   654,    -1,   102,   653,
    1292,   648,   654,    -1,   102,   653,  1230,   654,    -1,    -1,
      -1,   102,   653,   146,  1219,  1235,  1220,   654,    -1,   339,
     653,  1230,   654,    -1,   339,   653,   146,  1230,   654,    -1,
     322,   653,  1230,   654,    -1,   322,   653,   146,  1230,   654,
      -1,   536,   653,  1230,   654,    -1,   617,   653,  1230,   654,
      -1,   535,   653,  1230,   654,    -1,   619,   653,  1230,   654,
      -1,   547,   653,  1230,   654,    -1,   547,   653,   146,  1230,
     654,    -1,    -1,   214,   653,  1225,  1221,  1235,  1227,  1226,
     654,    -1,    -1,   660,  1223,  1224,    -1,  1503,   494,  1191,
      -1,  1503,    -1,   660,  1525,  1503,  1052,    -1,    -1,   146,
      -1,    -1,   487,  1481,    -1,    -1,    -1,   386,    49,  1228,
    1229,    -1,  1229,   655,  1489,  1308,    -1,  1489,  1308,    -1,
      -1,  1292,  1231,  1191,    -1,    36,   986,    -1,    62,   986,
    1006,    -1,   355,   986,    -1,   251,    -1,   501,    -1,   501,
     251,    -1,   599,    -1,   599,   251,    -1,   122,    -1,   570,
     986,    -1,   119,   986,    -1,   130,   980,    -1,    -1,   148,
    1233,   987,    -1,    -1,  1235,    -1,  1191,    -1,  1235,   655,
    1191,    -1,  1237,    -1,   653,  1237,   654,    -1,  1490,    -1,
    1237,   655,  1490,    -1,    -1,  1191,    -1,    -1,   156,  1191,
      -1,   627,  1191,   566,  1191,    -1,  1240,   627,  1191,   566,
    1191,    -1,  1256,    -1,  1245,    -1,  1244,    -1,  1241,    -1,
     657,  1501,  1241,   658,    -1,  1243,    -1,  1244,   655,  1243,
      -1,  1241,  1253,  1241,    -1,    -1,  1241,  1253,  1241,   376,
    1246,  1191,    -1,    -1,  1241,  1253,  1241,   608,  1247,   653,
    1286,   654,    -1,  1241,   353,  1252,  1256,    -1,    -1,  1241,
     272,  1272,   260,  1241,   376,  1248,  1191,    -1,    -1,  1241,
     272,  1272,   260,  1256,  1249,   608,   653,  1286,   654,    -1,
    1241,   353,   272,  1272,   260,  1256,    -1,    -1,  1241,   469,
    1272,   260,  1241,   376,  1250,  1191,    -1,    -1,  1241,   469,
    1272,   260,  1256,  1251,   608,   653,  1286,   654,    -1,  1241,
     353,   469,  1272,   260,  1256,    -1,   260,    -1,   243,   260,
      -1,   539,    -1,  1252,    -1,   105,   260,    -1,    -1,  1255,
      -1,   400,   653,  1286,   654,   876,    -1,    -1,  1257,  1494,
    1254,  1291,  1281,    -1,  1271,  1270,  1267,    -1,   653,  1270,
    1258,   654,  1291,    -1,  1265,  1602,    -1,    -1,    -1,  1258,
     595,  1606,  1259,  1607,  1260,  1602,    -1,  1262,    -1,    -1,
      -1,  1263,  1613,  1183,  1264,   945,  1182,    -1,    -1,  1270,
    1266,  1244,    -1,    -1,    -1,  1268,  1179,  1183,  1269,   945,
      -1,    -1,   485,    -1,    -1,   389,    -1,    -1,   197,   260,
      -1,   197,   386,    49,    -1,   197,   213,    49,    -1,   195,
      -1,   235,    -1,    -1,  1274,  1028,  1273,  1276,   653,  1285,
     654,    -1,    -1,   607,  1028,  1273,  1277,   653,  1283,   654,
      -1,  1275,    -1,  1278,  1275,    -1,    -1,    -1,  1280,  1278,
      -1,    -1,  1282,  1279,    -1,    -1,  1285,    -1,  1501,    -1,
     416,    -1,  1284,    -1,  1285,   655,  1284,    -1,  1501,    -1,
    1286,   655,  1501,    -1,  1288,    -1,   123,    -1,   124,    -1,
     125,    -1,   126,    -1,   226,    -1,   227,    -1,   228,    -1,
     335,    -1,   336,    -1,   482,    -1,   640,    -1,   127,    -1,
     625,    -1,   229,    -1,   337,    -1,   344,    -1,   425,    -1,
     483,    -1,   333,    -1,   641,    -1,   122,    -1,   570,    -1,
     119,    -1,   567,    -1,    -1,    20,    -1,   166,    -1,    -1,
    1290,  1501,    -1,    -1,    13,    -1,    -1,    -1,   628,  1294,
    1191,    -1,    -1,    -1,   219,  1296,  1191,    -1,   171,  1205,
      -1,    -1,    -1,   213,    49,  1299,  1300,    -1,  1299,   655,
    1489,  1308,    -1,  1489,  1308,    -1,    -1,   631,    -1,   632,
      -1,   386,    49,  1302,    -1,  1302,   655,  1303,    -1,  1303,
      -1,  1491,  1308,    -1,    -1,  1305,    -1,    -1,   386,    49,
    1306,  1307,    -1,  1307,   655,  1489,  1308,    -1,  1489,  1308,
      -1,    -1,    21,    -1,   137,    -1,    -1,  1311,    -1,    -1,
    1311,    -1,   277,  1312,    -1,   277,  1312,   474,   176,  1314,
      -1,   277,   474,   176,  1314,    -1,  1313,    -1,  1313,   655,
    1313,    -1,  1313,   374,  1313,    -1,  1501,    -1,  1482,    -1,
     586,    -1,   291,    -1,   370,    -1,  1313,    -1,    -1,   277,
    1313,    -1,   277,   474,   176,    -1,   277,  1313,   474,   176,
      -1,   370,    -1,   646,   370,    -1,   646,   291,    -1,   370,
      -1,   221,    -1,   291,    -1,   586,    -1,   129,    -1,   192,
      -1,   370,    -1,   221,    -1,   291,    -1,   586,    -1,  1321,
      -1,   370,    -1,   586,    -1,   291,    -1,   129,    -1,   192,
      -1,   370,    -1,   586,    -1,   221,    -1,   291,    -1,  1321,
      -1,  1322,    -1,   129,    -1,   192,    -1,  1317,    -1,   132,
      -1,    -1,    -1,   418,  1501,  1325,   653,  1326,   654,    -1,
      -1,  1327,    -1,  1327,   655,  1328,    -1,  1328,    -1,  1185,
    1191,  1186,    -1,    -1,  1330,  1331,    -1,  1331,   655,  1332,
      -1,  1332,    -1,   660,  1503,    -1,  1503,    -1,    -1,   250,
    1334,  1335,    -1,    -1,    -1,   390,  1500,  1336,   997,  1337,
    1465,  1468,    -1,   152,  1500,    -1,  1329,    -1,    -1,   149,
    1339,  1235,    -1,    -1,   150,  1350,  1538,  1349,  1341,  1344,
    1098,    -1,    -1,   150,   239,  1349,  1501,   376,  1494,  1342,
      -1,   150,   115,  1349,  1501,    -1,   150,   202,  1349,  1501,
     661,  1501,    -1,   150,   202,  1349,  1501,    -1,   150,   418,
    1349,   716,    -1,   150,   604,   715,  1574,    -1,   150,   470,
     715,  1558,    -1,    -1,   150,   621,  1349,  1343,  1344,  1098,
      -1,   150,   173,  1349,   716,    -1,   150,   579,  1349,   716,
      -1,   150,   554,   850,   861,   862,    -1,   150,   287,   213,
     851,   861,   862,    -1,   150,   491,  1349,  1503,    -1,  1345,
      -1,  1344,   655,  1345,    -1,  1494,    -1,  1494,  1254,    -1,
    1348,    -1,  1347,   655,  1348,    -1,  1495,    -1,    -1,   234,
     178,    -1,    -1,   560,    -1,    -1,    -1,   246,  1352,  1357,
    1092,  1359,  1353,  1361,  1377,    -1,    -1,    -1,   454,  1355,
    1358,  1359,  1356,  1361,    -1,    -1,   294,    -1,   134,    -1,
     223,    -1,  1386,    -1,   134,    -1,   250,  1360,    -1,  1360,
      -1,  1346,    -1,  1364,    -1,   653,   654,  1364,    -1,   653,
    1363,   654,  1364,    -1,    -1,   493,  1362,  1368,    -1,  1363,
     655,  1487,    -1,  1487,    -1,   612,  1367,    -1,   613,  1367,
      -1,    -1,   922,  1365,  1598,    -1,    -1,   653,   922,   654,
    1366,  1601,    -1,  1367,   655,  1372,    -1,  1372,    -1,  1368,
     655,  1369,    -1,  1369,    -1,  1491,  1370,  1376,    -1,   166,
      -1,   494,    -1,    -1,  1370,    -1,    -1,   653,  1373,  1374,
     654,    -1,    -1,  1375,    -1,  1375,   655,  1376,    -1,  1376,
      -1,  1191,    -1,   132,    -1,    -1,    -1,   376,   153,  1378,
     263,   601,  1384,    -1,    -1,    -1,   601,  1380,  1386,  1092,
    1242,   493,  1382,  1381,  1293,  1304,  1315,    -1,  1382,   655,
    1383,    -1,  1383,    -1,  1491,  1370,  1376,    -1,  1384,   655,
    1385,    -1,  1385,    -1,  1491,  1370,  1376,    -1,    -1,   294,
      -1,    -1,   136,  1388,  1398,  1389,    -1,    -1,    -1,   199,
    1494,  1254,  1390,  1293,  1304,  1315,  1391,  1394,    -1,    -1,
    1395,  1392,   199,  1242,  1293,    -1,    -1,   199,  1347,  1393,
     608,  1242,  1293,    -1,    -1,   464,  1183,    -1,  1396,    -1,
    1395,   655,  1396,    -1,  1501,  1397,    -1,  1501,   661,  1501,
    1397,    -1,    -1,   661,   648,    -1,    -1,  1399,  1398,    -1,
     427,    -1,   294,    -1,   235,    -1,    -1,   582,  1402,  1401,
    1345,    -1,    -1,   557,    -1,    -1,  1404,    -1,  1405,    -1,
    1404,   655,  1405,    -1,   103,    -1,   330,    -1,    44,   254,
      -1,    98,   551,    -1,   394,   187,    -1,   255,    -1,   550,
      -1,   513,    -1,    13,    -1,    -1,   197,   426,   370,    -1,
      -1,   498,  1408,  1409,    -1,   116,  1420,    -1,  1416,   553,
    1415,  1420,    -1,  1416,   578,  1415,  1420,    -1,   172,  1415,
    1420,    -1,   557,   534,  1415,  1420,    -1,   380,   553,  1415,
    1420,    -1,   406,    -1,   406,   511,  1498,    -1,   406,   511,
    1420,    -1,   164,   942,  1412,    -1,   164,    13,  1412,    -1,
    1416,    75,  1417,  1494,  1415,  1420,    -1,  1413,   288,    -1,
     503,   225,    -1,    -1,    37,   172,  1418,  1419,  1410,  1309,
      -1,    -1,   442,   687,   172,  1418,  1419,  1411,  1309,    -1,
    1030,  1417,  1494,  1415,  1293,    -1,  1414,   163,    -1,    25,
      -1,   100,    -1,   417,    -1,   102,   653,   648,   654,   624,
      -1,   102,   653,   648,   654,   169,    -1,   624,  1309,    -1,
     169,  1309,    -1,   422,    -1,   421,  1403,  1406,  1309,    -1,
    1524,   534,  1420,    -1,  1416,   420,    -1,  1524,   616,  1420,
      -1,   994,  1420,    -1,    74,  1420,    -1,   212,    -1,   212,
     197,  1505,    -1,   104,   115,   932,  1501,    -1,   104,   557,
    1494,    -1,   104,   621,  1494,    -1,   313,   534,    -1,    13,
     504,   534,    -1,   503,   534,    -1,   503,   688,   534,    -1,
      69,    -1,   605,    -1,   556,    -1,   240,    -1,   104,   418,
     716,    -1,   104,   202,   716,    -1,   104,   579,   716,    -1,
     418,   534,  1420,    -1,   202,   534,  1420,    -1,   418,    72,
     716,    -1,   202,    72,   716,    -1,   104,   173,   716,    -1,
    1425,   197,  1191,    -1,   534,    -1,   348,    -1,   288,    -1,
     313,    -1,    36,    -1,    -1,   538,    -1,    -1,  1417,  1501,
      -1,    -1,   200,    -1,   199,    -1,   253,    -1,    -1,   253,
    1498,    -1,    -1,   199,  1319,    -1,    -1,   276,  1498,    -1,
     628,  1191,    -1,    -1,  1425,  1494,  1422,  1427,    -1,    -1,
    1425,  1426,  1423,  1424,    -1,  1168,    -1,  1351,    -1,  1354,
      -1,  1379,    -1,  1387,    -1,   137,    -1,   138,    -1,    -1,
     182,    -1,   401,    -1,    -1,  1481,    -1,  1501,    -1,    -1,
     194,  1143,  1429,  1430,    -1,    -1,  1538,  1431,  1437,  1432,
      -1,  1435,    -1,    -1,  1433,    -1,   630,   431,   286,  1438,
      -1,    -1,   197,  1434,   181,    -1,  1435,   655,  1436,    -1,
    1436,    -1,   168,   288,    -1,   164,   288,    -1,   204,   288,
      -1,   506,   288,    -1,    36,   288,    -1,   441,   288,   687,
      -1,   426,    51,    -1,   225,    -1,   417,    -1,   288,    -1,
     534,    -1,   503,   687,    -1,    69,    -1,   605,    -1,   556,
      -1,   240,    -1,   313,    -1,   139,    -1,   459,    -1,    -1,
    1344,    -1,    -1,    18,   143,    63,    -1,    -1,   457,  1440,
    1441,    -1,  1441,   655,  1442,    -1,  1442,    -1,    -1,   503,
    1443,   687,  1444,    -1,   313,    -1,   426,    51,    -1,    -1,
      13,    -1,    -1,   424,  1446,  1447,    -1,  1413,   288,  1448,
      -1,   574,  1498,    -1,    32,  1191,    -1,    -1,   264,  1450,
    1451,  1452,  1453,    -1,    -1,   217,    -1,   510,    -1,    -1,
      91,    -1,   426,    -1,   426,   230,    -1,  1191,    -1,   604,
    1506,    -1,   499,    -1,   607,  1501,    -1,    -1,    -1,    -1,
      -1,   282,  1461,  1457,  1463,  1462,   241,  1500,  1458,  1464,
     250,   557,  1494,  1254,  1459,   997,  1460,  1471,  1465,  1468,
    1472,  1474,  1477,    -1,   118,    -1,   638,    -1,    -1,   283,
      -1,    -1,    89,    -1,   294,    -1,    -1,   454,    -1,   235,
      -1,    -1,    75,  1466,    -1,  1466,  1467,    -1,  1467,    -1,
     562,    49,  1481,    -1,   384,   159,    49,  1481,    -1,   159,
      49,  1481,    -1,   170,    49,  1481,    -1,    -1,   279,  1469,
      -1,  1469,  1470,    -1,  1470,    -1,   562,    49,  1481,    -1,
     528,    49,  1481,    -1,    -1,   474,   232,    49,  1481,    -1,
      -1,   235,   370,  1473,    -1,   279,    -1,   474,    -1,    -1,
     653,  1475,   654,    -1,   653,   654,    -1,  1475,   655,  1476,
      -1,  1476,    -1,  1491,    -1,   660,  1503,    -1,    -1,   493,
    1478,    -1,  1478,   655,  1479,    -1,  1479,    -1,  1491,  1370,
    1185,  1376,  1186,    -1,   563,    -1,   354,    -1,   589,   563,
      -1,  1480,  1499,    -1,  1499,    -1,   221,    -1,   222,    -1,
      38,    -1,   396,    -1,  1484,    -1,   647,  1485,    -1,   646,
    1485,    -1,  1480,    -1,  1485,    -1,  1486,    -1,   369,    -1,
     185,    -1,   581,    -1,   221,    -1,   222,    -1,    38,    -1,
     589,   993,    -1,   589,    38,    -1,   370,    -1,   291,    -1,
     586,    -1,   129,    -1,   192,    -1,   122,   563,    -1,   570,
     563,    -1,   567,   563,    -1,  1491,    -1,  1488,    -1,  1501,
     661,   648,    -1,  1501,   661,  1501,   661,   648,    -1,  1191,
      -1,  1501,    -1,  1492,    -1,  1501,    -1,  1492,    -1,  1501,
     661,  1501,    -1,   661,  1501,   661,  1501,    -1,  1501,   661,
    1501,   661,  1501,    -1,  1501,    -1,  1501,   661,  1501,   661,
    1501,    -1,  1501,   661,  1501,    -1,   661,  1501,    -1,  1501,
      -1,  1501,   661,  1501,    -1,   661,  1501,    -1,  1501,  1397,
      -1,  1501,   661,  1501,  1397,    -1,  1501,    -1,   231,    -1,
     233,    -1,   563,    -1,   563,    -1,   563,    -1,  1497,    -1,
    1507,    -1,  1497,    -1,  1508,    -1,  1501,    -1,  1498,    -1,
     275,    -1,  1503,    -1,  1503,   660,  1503,    -1,   109,  1190,
      -1,  1504,    -1,  1559,    -1,  1504,    -1,  1508,    -1,    22,
      -1,    31,    -1,    33,    -1,    50,    -1,    51,    -1,    61,
      -1,    64,    -1,    63,    -1,    70,    -1,    76,    -1,    77,
      -1,    78,    -1,    79,    -1,    80,    -1,    83,    -1,    85,
      -1,    97,    -1,   128,    -1,   149,    -1,   160,    -1,   176,
      -1,   177,    -1,   194,    -1,   209,    -1,   216,    -1,   220,
      -1,   224,    -1,   248,    -1,   265,    -1,   366,    -1,   380,
      -1,   383,    -1,   382,    -1,   392,    -1,   397,    -1,   410,
      -1,   413,    -1,   448,    -1,   451,    -1,   457,    -1,   460,
      -1,   471,    -1,   479,    -1,   484,    -1,   491,    -1,   499,
      -1,   501,    -1,   509,    -1,   503,    -1,   504,    -1,   511,
      -1,   530,    -1,   537,    -1,   582,    -1,   593,    -1,   594,
      -1,   634,    -1,   637,    -1,   602,    -1,     5,    -1,     8,
      -1,     7,    -1,     9,    -1,    10,    -1,    11,    -1,    12,
      -1,    15,    -1,    19,    -1,    24,    -1,    25,    -1,    27,
      -1,    26,    -1,    28,    -1,    29,    -1,    30,    -1,    37,
      -1,    41,    -1,    44,    -1,    46,    -1,    45,    -1,    48,
      -1,    54,    -1,    57,    -1,    58,    -1,    60,    -1,    66,
      -1,    69,    -1,    68,    -1,    67,    -1,    71,    -1,    72,
      -1,    74,    -1,    82,    -1,    75,    -1,    84,    -1,    86,
      -1,    87,    -1,    88,    -1,    89,    -1,    91,    -1,    92,
      -1,    94,    -1,    96,    -1,    95,    -1,    98,    -1,   100,
      -1,   111,    -1,   103,    -1,   106,    -1,   108,    -1,   113,
      -1,   118,    -1,   117,    -1,   119,    -1,   122,    -1,   127,
      -1,   133,    -1,   135,    -1,   139,    -1,   141,    -1,   142,
      -1,   143,    -1,   144,    -1,   145,    -1,   152,    -1,   153,
      -1,   154,    -1,   161,    -1,   165,    -1,   164,    -1,   163,
      -1,   168,    -1,   169,    -1,   171,    -1,   173,    -1,   172,
      -1,   174,    -1,   175,    -1,   180,    -1,   181,    -1,   182,
      -1,   183,    -1,   187,    -1,   186,    -1,   198,    -1,   158,
      -1,   200,    -1,   189,    -1,   190,    -1,   191,    -1,   204,
      -1,   205,    -1,   207,    -1,   206,    -1,   208,    -1,   212,
      -1,   210,    -1,   218,    -1,   217,    -1,   225,    -1,   229,
      -1,   230,    -1,   232,    -1,   236,    -1,   240,    -1,   252,
      -1,   237,    -1,   238,    -1,   242,    -1,   254,    -1,   255,
      -1,   257,    -1,   258,    -1,   247,    -1,   262,    -1,   267,
      -1,   266,    -1,   270,    -1,   273,    -1,   274,    -1,   280,
      -1,   281,    -1,   283,    -1,   285,    -1,   287,    -1,   288,
      -1,   320,    -1,   313,    -1,   316,    -1,   297,    -1,   298,
      -1,   302,    -1,   299,    -1,   300,    -1,   314,    -1,   315,
      -1,   301,    -1,   303,    -1,   296,    -1,   311,    -1,   305,
      -1,   304,    -1,   306,    -1,   307,    -1,   308,    -1,   309,
      -1,   310,    -1,   318,    -1,   319,    -1,   321,    -1,   323,
      -1,   324,    -1,   329,    -1,   330,    -1,   331,    -1,   332,
      -1,   333,    -1,   334,    -1,   337,    -1,   338,    -1,   342,
      -1,   340,    -1,   344,    -1,   345,    -1,   346,    -1,   347,
      -1,   348,    -1,   349,    -1,   351,    -1,   350,    -1,   352,
      -1,   355,    -1,   356,    -1,   360,    -1,   359,    -1,   367,
      -1,   361,    -1,   362,    -1,   371,    -1,   373,    -1,   374,
      -1,   375,    -1,   377,    -1,   379,    -1,   378,    -1,   393,
      -1,   394,    -1,   399,    -1,   402,    -1,   401,    -1,   403,
      -1,   404,    -1,   405,    -1,   407,    -1,   406,    -1,   408,
      -1,   409,    -1,   414,    -1,   415,    -1,   417,    -1,   419,
      -1,   420,    -1,   421,    -1,   422,    -1,   423,    -1,   425,
      -1,   426,    -1,   427,    -1,   430,    -1,   434,    -1,   435,
      -1,   437,    -1,   436,    -1,   438,    -1,   441,    -1,   442,
      -1,   443,    -1,   444,    -1,   445,    -1,   447,    -1,   450,
      -1,   452,    -1,   455,    -1,   459,    -1,   462,    -1,   463,
      -1,   465,    -1,   467,    -1,   470,    -1,   472,    -1,   473,
      -1,   474,    -1,   477,    -1,   475,    -1,   476,    -1,   478,
      -1,   480,    -1,   481,    -1,   483,    -1,   489,    -1,   488,
      -1,   490,    -1,   502,    -1,   495,    -1,   505,    -1,   506,
      -1,   508,    -1,   510,    -1,   512,    -1,   513,    -1,   521,
      -1,   520,    -1,   523,    -1,   526,    -1,   529,    -1,   534,
      -1,   538,    -1,   540,    -1,   541,    -1,   542,    -1,   543,
      -1,   545,    -1,   544,    -1,   548,    -1,   549,    -1,   550,
      -1,   551,    -1,   559,    -1,   556,    -1,   553,    -1,   558,
      -1,   554,    -1,   560,    -1,   561,    -1,   564,    -1,   565,
      -1,   576,    -1,   577,    -1,   578,    -1,   567,    -1,   568,
      -1,   569,    -1,   570,    -1,   583,    -1,   584,    -1,   585,
      -1,   202,    -1,   587,    -1,   588,    -1,   591,    -1,   590,
      -1,   597,    -1,   600,    -1,   604,    -1,   605,    -1,   606,
      -1,   616,    -1,   621,    -1,   622,    -1,   613,    -1,   624,
      -1,   623,    -1,   625,    -1,   626,    -1,   633,    -1,   636,
      -1,   638,    -1,   641,    -1,   620,    -1,    -1,   493,  1510,
    1511,    -1,    -1,  1527,  1512,  1517,    -1,    -1,   576,  1513,
    1529,    -1,    -1,  1523,  1514,  1515,    -1,    -1,  1526,  1516,
    1517,    -1,   576,  1529,    -1,    -1,   655,  1518,    -1,    -1,
    1519,  1521,    -1,    -1,  1518,   655,  1520,  1521,    -1,    -1,
    1523,  1522,  1526,    -1,  1527,    -1,   210,    -1,   283,    -1,
     490,    -1,    -1,   210,    -1,   283,    -1,   490,    -1,    -1,
     210,   661,    -1,   283,   661,    -1,   490,   661,    -1,  1528,
    1370,  1535,    -1,  1528,  1370,  1535,    -1,   660,  1503,  1370,
    1191,    -1,   660,   660,  1525,  1528,  1370,  1535,    -1,   994,
     999,    -1,   350,  1370,  1191,    -1,   350,   996,  1001,    -1,
     470,  1503,    -1,   403,  1370,  1534,    -1,   403,   197,  1506,
    1370,  1534,    -1,  1501,    -1,  1501,   661,  1501,    -1,   132,
     661,  1501,    -1,  1530,    -1,  1531,    -1,  1530,   655,  1531,
      -1,  1531,   655,  1530,    -1,  1532,    -1,   257,   274,  1533,
      -1,   431,   378,    -1,   431,   635,    -1,   431,   587,    -1,
     431,    84,    -1,   452,   431,    -1,   488,    -1,   563,    -1,
     403,   653,   563,   654,    -1,   375,   653,   563,   654,    -1,
    1191,    -1,   132,    -1,   376,    -1,    13,    -1,    36,    -1,
      -1,   286,  1538,  1537,  1539,    -1,   557,    -1,   553,    -1,
    1540,    -1,  1539,   655,  1540,    -1,  1494,  1291,  1541,    -1,
     431,    -1,   635,    -1,   635,    89,    -1,   294,   635,    -1,
     431,   283,    -1,    -1,   598,  1543,  1538,    -1,   216,  1494,
     380,  1291,    -1,   216,  1496,    70,    -1,    -1,   216,  1496,
     431,  1545,  1546,  1293,  1310,    -1,  1547,    -1,  1501,  1548,
      -1,   190,    -1,   360,    -1,   190,    -1,   360,    -1,   415,
      -1,   266,    -1,    -1,  1550,  1549,   653,  1375,   654,    -1,
     166,    -1,   203,    -1,   268,    -1,   215,    -1,   295,    -1,
     468,   715,  1552,    -1,  1562,   376,  1561,  1573,   199,  1576,
      -1,  1562,   376,   202,  1573,   199,  1576,    -1,  1562,   376,
     418,  1573,   199,  1576,    -1,    13,  1563,   655,   211,   383,
     199,  1576,    -1,   423,   376,  1506,   199,  1574,    -1,  1553,
     199,  1576,    -1,     7,   383,   197,  1560,    -1,  1560,    -1,
     211,   715,  1555,    -1,  1562,   376,  1561,  1573,   574,  1575,
    1583,  1584,    -1,  1562,   376,   202,  1573,   574,  1575,  1583,
    1584,    -1,  1562,   376,   418,  1573,   574,  1575,  1583,  1584,
      -1,   423,   376,  1506,   574,  1575,  1585,    -1,  1560,   574,
    1575,  1557,    -1,    -1,   630,     7,  1505,    -1,    -1,   630,
       7,   383,    -1,  1560,    -1,  1558,   655,  1560,    -1,   110,
    1190,    -1,  1503,    -1,  1559,    -1,    -1,   557,    -1,  1564,
      -1,    13,  1563,    -1,    -1,   417,    -1,  1565,    -1,  1564,
     655,  1565,    -1,    -1,   485,  1566,  1580,    -1,    -1,   246,
    1567,  1580,    -1,    -1,   601,  1568,  1580,    -1,    -1,   439,
    1569,  1580,    -1,   136,    -1,   603,    -1,   239,    -1,    14,
      -1,   104,    -1,   150,    -1,   177,    -1,   447,    -1,   499,
      -1,   419,    -1,   189,    -1,   211,   383,    -1,   498,   116,
      -1,   548,    -1,   104,   560,   553,    -1,   286,   553,    -1,
     455,   503,    -1,   455,    68,    -1,   104,   621,    -1,   498,
     621,    -1,   104,   473,    -1,    14,   473,    -1,   104,   604,
      -1,   173,    -1,   579,    -1,   104,   554,    -1,    -1,    18,
      -1,  1572,  1570,  1571,    -1,  1572,    -1,   543,   563,    -1,
     258,   563,    -1,    66,   563,    -1,   648,    -1,  1501,   661,
     648,    -1,   648,   661,   648,    -1,  1494,    -1,  1506,    -1,
    1574,   655,  1506,    -1,  1579,    -1,  1575,   655,  1579,    -1,
    1505,    -1,  1576,   655,  1505,    -1,   620,    -1,   630,    -1,
     608,    -1,    20,    -1,  1506,   232,    49,   563,    -1,  1506,
     232,    49,   403,   563,    -1,  1506,   232,  1577,  1503,    -1,
    1506,   232,  1577,  1503,  1578,  1498,    -1,  1505,    -1,    -1,
     653,  1581,   654,    -1,  1581,   655,  1582,    -1,  1582,    -1,
    1501,    -1,    -1,   456,  1571,    -1,   456,   527,    -1,   456,
     636,    -1,   456,   362,    -1,    -1,   630,  1586,    -1,    -1,
     630,   211,   383,    -1,  1586,  1587,    -1,  1587,    -1,   211,
     383,    -1,   319,  1317,    -1,   323,  1317,    -1,   318,  1317,
      -1,   324,  1316,    -1,    -1,    33,  1589,  1590,    -1,    -1,
     633,    -1,    -1,    18,   366,    58,    -1,    18,    58,    -1,
      -1,   446,    -1,   366,   446,    -1,    -1,   479,    -1,    85,
    1590,  1591,  1592,    -1,   471,  1590,  1591,  1592,    -1,   471,
    1590,   574,  1593,  1501,    -1,   479,  1501,    -1,   446,   479,
    1501,    -1,    -1,  1599,    -1,    -1,   595,  1606,  1600,  1169,
      -1,    -1,  1599,    -1,  1603,    -1,    -1,  1603,    -1,    -1,
    1604,  1605,    -1,  1305,  1309,    -1,  1311,    -1,    -1,   146,
      -1,    13,    -1,   485,  1261,    -1,   653,  1171,   654,    -1,
    1607,  1602,    -1,    -1,  1608,   595,  1606,  1609,  1607,  1602,
      -1,  1611,  1608,  1612,    -1,    -1,    -1,    -1,  1614,    -1,
    1614,  1615,    -1,  1615,    -1,   539,    -1,   223,    -1,   146,
      -1,   524,    -1,   519,    -1,   520,    -1,   522,    -1,    13,
      -1,  1621,  1617,    -1,  1620,  1618,    -1,  1622,  1619,  1624,
      -1,  1624,    -1,  1632,    -1,  1643,    -1,  1637,    -1,   702,
      -1,  1624,    -1,  1632,    -1,  1643,    -1,  1637,    -1,  1636,
      -1,   702,    -1,  1620,    -1,  1621,    -1,    -1,   133,   166,
    1505,    -1,    12,   166,   588,    -1,    12,   166,   331,    -1,
      12,   166,   561,    -1,    -1,   525,   484,   133,    -1,   525,
     484,   252,    -1,    -1,  1623,   621,  1494,  1625,  1626,    20,
    1628,    -1,    -1,   653,  1627,   654,    -1,  1501,    -1,  1627,
     655,  1501,    -1,    -1,  1629,  1630,  1631,    -1,   485,  1172,
      -1,   653,  1170,   654,  1601,    -1,    -1,   630,    65,   383,
      -1,   630,    54,    65,   383,    -1,   630,   283,    65,   383,
      -1,    -1,    -1,    -1,   579,  1185,   716,   821,   822,   376,
    1185,  1633,  1494,   197,  1185,  1634,   155,   476,  1635,   771,
      -1,    11,  1185,   202,  1501,   465,   946,   511,  1498,    -1,
    1185,   202,  1501,   465,   946,   511,  1498,    -1,    -1,    -1,
      -1,    -1,    -1,  1185,   202,   716,   653,  1638,   727,   654,
    1639,   465,  1640,   991,  1641,   718,  1642,   771,    -1,    -1,
      -1,    -1,    -1,   418,  1185,   716,  1644,   653,  1645,   731,
     654,  1646,   718,  1647,   771,    -1,   637,  1650,  1649,  1651,
      -1,   637,   160,  1649,  1653,    -1,   637,   413,  1649,    -1,
     637,    85,  1649,  1652,    -1,   637,   471,  1649,    -1,   637,
     435,    -1,  1481,    -1,  1481,   655,  1481,    -1,  1481,   655,
    1481,   655,  1317,    -1,    33,    -1,   530,    -1,    -1,   260,
      -1,   462,    -1,    -1,   377,   405,    -1,    -1,    -1,   549,
    1654,  1655,    -1,    -1,   197,   334,    -1,   248,   407,  1501,
     511,  1498,    -1,   248,   511,  1498,    -1,   594,   407,  1501,
      -1,   594,   511,  1498,    -1,   643,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1930,  1930,  1942,  1941,  1966,  1973,  1975,  1979,  1980,
    1985,  1986,  1987,  1988,  1989,  1990,  1991,  1992,  1993,  1994,
    1995,  1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,  2004,
    2005,  2006,  2007,  2008,  2009,  2010,  2011,  2012,  2013,  2014,
    2015,  2016,  2017,  2018,  2019,  2020,  2021,  2022,  2023,  2024,
    2025,  2026,  2027,  2028,  2029,  2030,  2031,  2032,  2033,  2034,
    2035,  2036,  2037,  2038,  2039,  2043,  2052,  2053,  2057,  2066,
    2072,  2082,  2081,  2091,  2093,  2097,  2098,  2102,  2115,  2114,
    2134,  2133,  2142,  2143,  2147,  2151,  2155,  2159,  2163,  2167,
    2172,  2176,  2180,  2184,  2188,  2192,  2197,  2201,  2206,  2237,
    2242,  2245,  2247,  2248,  2252,  2258,  2262,  2278,  2282,  2288,
    2298,  2308,  2321,  2325,  2329,  2345,  2344,  2389,  2394,  2388,
    2401,  2406,  2399,  2413,  2418,  2411,  2424,  2423,  2436,  2435,
    2451,  2455,  2459,  2463,  2467,  2474,  2487,  2488,  2492,  2496,
    2500,  2504,  2508,  2512,  2516,  2524,  2523,  2554,  2553,  2560,
    2567,  2568,  2574,  2580,  2590,  2596,  2602,  2604,  2611,  2612,
    2616,  2622,  2631,  2632,  2640,  2640,  2696,  2697,  2698,  2699,
    2700,  2701,  2702,  2703,  2704,  2705,  2706,  2707,  2708,  2713,
    2727,  2743,  2761,  2762,  2766,  2767,  2772,  2774,  2776,  2778,
    2780,  2782,  2784,  2790,  2791,  2792,  2796,  2800,  2808,  2807,
    2820,  2822,  2825,  2827,  2831,  2835,  2842,  2844,  2848,  2849,
    2854,  2874,  2902,  2904,  2908,  2909,  2913,  2940,  2941,  2942,
    2943,  2947,  2948,  2952,  2953,  2958,  2961,  2988,  2987,  3051,
    3067,  3066,  3122,  3148,  3148,  3171,  3172,  3177,  3179,  3184,
    3206,  3217,  3221,  3243,  3244,  3248,  3252,  3261,  3267,  3273,
    3282,  3296,  3319,  3325,  3326,  3332,  3335,  3339,  3347,  3367,
    3369,  3387,  3393,  3395,  3397,  3399,  3401,  3403,  3405,  3407,
    3409,  3411,  3413,  3415,  3420,  3435,  3451,  3452,  3457,  3463,
    3472,  3478,  3487,  3495,  3504,  3513,  3515,  3524,  3529,  3535,
    3544,  3552,  3554,  3556,  3558,  3560,  3562,  3564,  3566,  3568,
    3570,  3572,  3574,  3576,  3581,  3599,  3620,  3621,  3625,  3626,
    3627,  3628,  3629,  3630,  3631,  3632,  3633,  3634,  3635,  3636,
    3637,  3642,  3641,  3648,  3648,  3703,  3702,  3731,  3731,  3746,
    3799,  3842,  3863,  3862,  3884,  3903,  3905,  3906,  3910,  3930,
    3953,  3955,  3971,  3953,  3990,  3992,  3993,  3997,  3998,  4003,
    4009,  4002,  4030,  4029,  4045,  4046,  4050,  4051,  4056,  4060,
    4055,  4081,  4085,  4080,  4104,  4114,  4119,  4118,  4153,  4154,
    4159,  4158,  4190,  4190,  4205,  4204,  4241,  4253,  4255,  4252,
    4282,  4281,  4302,  4304,  4309,  4311,  4313,  4330,  4335,  4341,
    4348,  4349,  4357,  4363,  4372,  4378,  4384,  4385,  4389,  4389,
    4394,  4395,  4396,  4400,  4401,  4402,  4406,  4410,  4411,  4412,
    4416,  4417,  4418,  4419,  4420,  4421,  4422,  4423,  4427,  4431,
    4432,  4433,  4437,  4438,  4439,  4440,  4441,  4445,  4449,  4450,
    4451,  4455,  4456,  4457,  4458,  4459,  4460,  4461,  4465,  4469,
    4470,  4471,  4475,  4476,  4477,  4482,  4490,  4498,  4506,  4518,
    4530,  4535,  4540,  4548,  4556,  4564,  4572,  4580,  4588,  4596,
    4609,  4622,  4635,  4637,  4641,  4646,  4659,  4660,  4712,  4711,
    4714,  4720,  4720,  4721,  4735,  4736,  4740,  4742,  4741,  4745,
    4744,  4750,  4787,  4788,  4793,  4792,  4811,  4830,  4829,  4846,
    4850,  4858,  4857,  4860,  4862,  4864,  4866,  4871,  4872,  4878,
    4879,  4896,  4897,  4901,  4902,  4906,  4925,  4935,  4946,  4955,
    4956,  4972,  4974,  4973,  4978,  4976,  4987,  4988,  4992,  5010,
    5026,  5027,  5043,  5058,  5080,  5081,  5086,  5085,  5109,  5119,
    5141,  5140,  5158,  5157,  5177,  5199,  5203,  5232,  5244,  5245,
    5250,  5261,  5249,  5286,  5287,  5291,  5304,  5325,  5338,  5364,
    5365,  5370,  5369,  5406,  5411,  5412,  5416,  5417,  5421,  5423,
    5429,  5435,  5437,  5439,  5441,  5443,  5445,  5455,  5470,  5454,
    5484,  5485,  5489,  5490,  5494,  5495,  5499,  5500,  5504,  5505,
    5509,  5510,  5514,  5519,  5523,  5531,  5535,  5541,  5543,  5547,
    5548,  5552,  5553,  5554,  5558,  5563,  5568,  5573,  5578,  5583,
    5588,  5593,  5608,  5614,  5629,  5634,  5649,  5655,  5673,  5678,
    5683,  5688,  5693,  5698,  5704,  5703,  5729,  5730,  5731,  5736,
    5741,  5746,  5748,  5750,  5752,  5758,  5763,  5768,  5774,  5780,
    5786,  5795,  5813,  5830,  5853,  5867,  5868,  5869,  5870,  5871,
    5872,  5873,  5877,  5878,  5879,  5883,  5884,  5888,  5889,  5890,
    5891,  5896,  5903,  5904,  5908,  5909,  5913,  5914,  5922,  5921,
    5930,  5928,  5938,  5936,  5946,  5944,  5952,  5973,  5979,  5981,
    5985,  5989,  5990,  5994,  5999,  5998,  6024,  6025,  6034,  6036,
    6041,  6044,  6048,  6055,  6056,  6060,  6061,  6065,  6071,  6077,
    6081,  6097,  6113,  6114,  6115,  6116,  6121,  6125,  6130,  6135,
    6139,  6144,  6149,  6155,  6160,  6166,  6170,  6175,  6180,  6198,
    6200,  6202,  6215,  6217,  6222,  6227,  6239,  6244,  6249,  6254,
    6256,  6258,  6260,  6262,  6264,  6266,  6268,  6271,  6270,  6275,
    6274,  6278,  6280,  6289,  6290,  6291,  6296,  6297,  6298,  6299,
    6300,  6304,  6308,  6309,  6313,  6314,  6318,  6319,  6320,  6321,
    6322,  6326,  6327,  6328,  6329,  6330,  6334,  6339,  6341,  6347,
    6348,  6350,  6355,  6364,  6365,  6369,  6370,  6374,  6375,  6376,
    6380,  6381,  6382,  6383,  6386,  6387,  6391,  6392,  6396,  6397,
    6401,  6402,  6406,  6407,  6408,  6409,  6416,  6417,  6423,  6429,
    6435,  6441,  6442,  6455,  6461,  6467,  6473,  6482,  6503,  6509,
    6514,  6515,  6519,  6520,  6524,  6532,  6536,  6537,  6541,  6542,
    6546,  6555,  6559,  6560,  6564,  6572,  6573,  6577,  6578,  6582,
    6583,  6588,  6589,  6593,  6600,  6609,  6614,  6622,  6623,  6624,
    6625,  6626,  6627,  6632,  6640,  6641,  6646,  6645,  6658,  6659,
    6663,  6666,  6667,  6668,  6669,  6673,  6681,  6688,  6689,  6693,
    6703,  6704,  6708,  6709,  6712,  6714,  6718,  6730,  6731,  6735,
    6742,  6755,  6756,  6758,  6760,  6766,  6771,  6777,  6783,  6790,
    6800,  6801,  6802,  6803,  6804,  6808,  6812,  6813,  6817,  6818,
    6822,  6823,  6827,  6828,  6829,  6833,  6834,  6838,  6842,  6855,
    6867,  6868,  6872,  6873,  6877,  6878,  6882,  6883,  6887,  6888,
    6892,  6893,  6897,  6898,  6902,  6903,  6907,  6909,  6910,  6916,
    6922,  6928,  6936,  6937,  6941,  6945,  6946,  6959,  6960,  6961,
    6965,  6966,  6970,  6976,  6990,  6991,  6995,  7007,  7008,  7012,
    7013,  7021,  7038,  7020,  7058,  7057,  7071,  7083,  7082,  7101,
    7100,  7119,  7118,  7137,  7131,  7151,  7150,  7183,  7188,  7193,
    7198,  7203,  7213,  7214,  7215,  7216,  7220,  7221,  7233,  7234,
    7238,  7239,  7242,  7244,  7252,  7260,  7262,  7264,  7265,  7273,
    7274,  7278,  7287,  7285,  7298,  7311,  7310,  7323,  7321,  7334,
    7341,  7351,  7352,  7379,  7386,  7390,  7395,  7394,  7410,  7412,
    7417,  7425,  7424,  7440,  7444,  7443,  7455,  7456,  7460,  7475,
    7476,  7480,  7489,  7493,  7498,  7504,  7503,  7515,  7526,  7514,
    7542,  7551,  7560,  7570,  7579,  7585,  7591,  7600,  7609,  7628,
    7648,  7658,  7662,  7667,  7668,  7671,  7673,  7674,  7675,  7676,
    7679,  7684,  7695,  7700,  7711,  7712,  7716,  7717,  7721,  7721,
    7724,  7726,  7730,  7731,  7735,  7736,  7744,  7745,  7746,  7750,
    7751,  7756,  7764,  7765,  7766,  7767,  7772,  7771,  7781,  7780,
    7787,  7794,  7804,  7821,  7824,  7831,  7835,  7842,  7846,  7850,
    7857,  7857,  7863,  7864,  7868,  7869,  7870,  7874,  7875,  7888,
    7895,  7896,  7901,  7900,  7912,  7913,  7914,  7919,  7918,  7939,
    7940,  7944,  7945,  7949,  7950,  7951,  7956,  7955,  7976,  7977,
    7981,  7986,  7987,  7994,  7996,  8000,  8002,  8001,  8013,  8015,
    8014,  8027,  8028,  8033,  8042,  8043,  8044,  8048,  8054,  8063,
    8072,  8071,  8097,  8098,  8102,  8103,  8107,  8108,  8109,  8110,
    8111,  8112,  8117,  8116,  8137,  8138,  8139,  8144,  8143,  8149,
    8156,  8161,  8169,  8170,  8174,  8188,  8187,  8200,  8201,  8205,
    8206,  8210,  8220,  8230,  8231,  8236,  8235,  8246,  8247,  8251,
    8252,  8256,  8266,  8277,  8276,  8284,  8284,  8293,  8294,  8299,
    8300,  8309,  8318,  8319,  8323,  8328,  8333,  8338,  8343,  8342,
    8362,  8370,  8362,  8377,  8378,  8379,  8380,  8381,  8385,  8392,
    8399,  8401,  8412,  8413,  8417,  8418,  8446,  8476,  8478,  8484,
    8494,  8495,  8496,  8510,  8515,  8540,  8546,  8552,  8553,  8554,
    8555,  8556,  8560,  8561,  8562,  8566,  8567,  8568,  8572,  8573,
    8578,  8629,  8636,  8679,  8685,  8691,  8697,  8703,  8709,  8715,
    8721,  8725,  8731,  8737,  8743,  8749,  8755,  8759,  8765,  8774,
    8780,  8788,  8794,  8804,  8810,  8819,  8829,  8835,  8845,  8851,
    8860,  8864,  8870,  8876,  8882,  8888,  8894,  8900,  8906,  8912,
    8918,  8924,  8930,  8936,  8942,  8948,  8952,  8953,  8957,  8958,
    8962,  8963,  8967,  8968,  8972,  8973,  8974,  8975,  8976,  8977,
    8981,  8982,  8987,  8993,  8997,  9004,  9011,  9018,  9025,  9032,
    9037,  9043,  9050,  9057,  9065,  9076,  9098,  9105,  9113,  9114,
    9115,  9116,  9117,  9118,  9129,  9130,  9131,  9132,  9133,  9139,
    9143,  9149,  9155,  9161,  9167,  9169,  9176,  9183,  9189,  9232,
    9241,  9248,  9256,  9262,  9269,  9275,  9289,  9296,  9312,  9318,
    9324,  9332,  9340,  9346,  9352,  9358,  9364,  9378,  9389,  9395,
    9401,  9407,  9413,  9419,  9425,  9431,  9437,  9443,  9449,  9455,
    9461,  9467,  9473,  9479,  9485,  9493,  9514,  9521,  9527,  9534,
    9541,  9548,  9555,  9561,  9567,  9574,  9580,  9587,  9593,  9599,
    9605,  9611,  9617,  9635,  9641,  9647,  9654,  9661,  9669,  9676,
    9683,  9690,  9697,  9714,  9720,  9726,  9732,  9738,  9745,  9751,
    9757,  9763,  9769,  9775,  9786,  9792,  9798,  9804,  9810,  9818,
    9824,  9835,  9841,  9847,  9855,  9865,  9871,  9887,  9893,  9900,
    9907,  9914,  9921,  9928,  9932,  9952,  9951, 10023, 10064, 10066,
   10071, 10072, 10076, 10077, 10081, 10082, 10086, 10093, 10101, 10127,
   10133, 10139, 10145, 10151, 10157, 10166, 10173, 10175, 10172, 10182,
   10193, 10199, 10205, 10211, 10217, 10223, 10229, 10235, 10241, 10248,
   10247, 10267, 10266, 10281, 10291, 10299, 10315, 10316, 10321, 10326,
   10329, 10332, 10331, 10348, 10350, 10356, 10355, 10372, 10374, 10376,
   10378, 10380, 10382, 10384, 10386, 10388, 10390, 10396, 10402, 10405,
   10404, 10410, 10411, 10415, 10422, 10430, 10431, 10435, 10442, 10450,
   10451, 10455, 10456, 10460, 10468, 10479, 10480, 10492, 10503, 10504,
   10510, 10511, 10531, 10535, 10533, 10551, 10549, 10560, 10570, 10568,
   10586, 10585, 10595, 10606, 10604, 10623, 10622, 10633, 10645, 10646,
   10647, 10651, 10652, 10660, 10661, 10665, 10680, 10680, 10695, 10735,
   10811, 10822, 10827, 10819, 10846, 10866, 10874, 10866, 10883, 10882,
   10905, 10922, 10905, 10929, 10933, 10959, 10960, 10965, 10968, 10969,
   10970, 10974, 10975, 10980, 10979, 10985, 10984, 10992, 10993, 10996,
   10998, 10998, 11002, 11002, 11007, 11008, 11012, 11014, 11019, 11020,
   11024, 11035, 11048, 11049, 11050, 11051, 11052, 11053, 11054, 11055,
   11056, 11057, 11058, 11059, 11063, 11064, 11065, 11066, 11067, 11068,
   11069, 11070, 11071, 11075, 11076, 11077, 11078, 11081, 11083, 11084,
   11088, 11089, 11097, 11099, 11103, 11105, 11104, 11118, 11121, 11120,
   11135, 11141, 11155, 11157, 11161, 11163, 11168, 11169, 11189, 11214,
   11218, 11219, 11223, 11235, 11237, 11242, 11241, 11276, 11278, 11283,
   11284, 11285, 11290, 11297, 11301, 11302, 11306, 11310, 11314, 11321,
   11328, 11335, 11345, 11378, 11382, 11388, 11394, 11403, 11411, 11415,
   11422, 11423, 11427, 11428, 11429, 11433, 11434, 11435, 11436, 11437,
   11438, 11442, 11443, 11444, 11445, 11446, 11450, 11451, 11452, 11453,
   11454, 11458, 11459, 11460, 11461, 11462, 11466, 11471, 11472, 11476,
   11477, 11480, 11483, 11482, 11513, 11514, 11518, 11519, 11523, 11533,
   11533, 11543, 11544, 11548, 11567, 11600, 11599, 11612, 11620, 11611,
   11622, 11634, 11646, 11645, 11663, 11662, 11673, 11673, 11689, 11696,
   11718, 11738, 11750, 11754, 11759, 11758, 11768, 11774, 11781, 11786,
   11791, 11801, 11802, 11806, 11817, 11830, 11831, 11835, 11847, 11851,
   11859, 11860, 11868, 11876, 11867, 11886, 11893, 11885, 11903, 11911,
   11912, 11920, 11924, 11925, 11936, 11937, 11941, 11950, 11951, 11952,
   11954, 11953, 11964, 11965, 11969, 11970, 11972, 11971, 11975, 11974,
   11980, 11981, 11985, 11986, 11990, 12000, 12001, 12005, 12006, 12011,
   12010, 12024, 12025, 12029, 12034, 12042, 12043, 12051, 12053, 12053,
   12061, 12069, 12060, 12091, 12092, 12096, 12104, 12105, 12109, 12119,
   12120, 12127, 12126, 12142, 12153, 12141, 12156, 12155, 12167, 12166,
   12179, 12181, 12185, 12186, 12190, 12203, 12219, 12220, 12224, 12225,
   12229, 12230, 12231, 12236, 12235, 12256, 12258, 12261, 12263, 12266,
   12267, 12270, 12274, 12278, 12282, 12286, 12290, 12294, 12298, 12302,
   12310, 12313, 12323, 12322, 12338, 12345, 12353, 12361, 12369, 12377,
   12385, 12392, 12399, 12405, 12407, 12409, 12418, 12422, 12427, 12426,
   12432, 12431, 12436, 12445, 12452, 12457, 12462, 12467, 12469, 12471,
   12473, 12475, 12477, 12484, 12492, 12494, 12502, 12509, 12516, 12523,
   12529, 12535, 12544, 12552, 12556, 12561, 12568, 12573, 12580, 12587,
   12594, 12601, 12608, 12615, 12621, 12628, 12635, 12640, 12645, 12650,
   12660, 12662, 12664, 12669, 12670, 12673, 12675, 12679, 12680, 12684,
   12685, 12689, 12690, 12694, 12695, 12699, 12700, 12703, 12705, 12712,
   12723, 12722, 12738, 12737, 12747, 12748, 12749, 12750, 12751, 12755,
   12756, 12760, 12761, 12762, 12766, 12767, 12768, 12783, 12782, 12795,
   12794, 12805, 12809, 12810, 12823, 12826, 12825, 12837, 12838, 12843,
   12845, 12847, 12849, 12851, 12853, 12864, 12866, 12868, 12870, 12876,
   12878, 12889, 12891, 12893, 12895, 12897, 12899, 12901, 12906, 12907,
   12911, 12912, 12916, 12915, 12925, 12926, 12930, 12930, 12933, 12934,
   12938, 12939, 12944, 12943, 12954, 12958, 12962, 12975, 12974, 12989,
   12990, 12991, 12994, 12995, 12996, 12997, 13005, 13009, 13018, 13024,
   13036, 13047, 13057, 13067, 13035, 13075, 13076, 13080, 13081, 13085,
   13086, 13094, 13098, 13099, 13100, 13103, 13105, 13109, 13110, 13114,
   13119, 13126, 13131, 13138, 13140, 13144, 13145, 13149, 13154, 13162,
   13163, 13166, 13168, 13176, 13178, 13182, 13183, 13184, 13188, 13190,
   13195, 13196, 13205, 13206, 13210, 13211, 13215, 13228, 13251, 13263,
   13274, 13293, 13301, 13313, 13321, 13336, 13356, 13357, 13358, 13366,
   13367, 13368, 13369, 13376, 13382, 13388, 13394, 13400, 13406, 13435,
   13466, 13476, 13486, 13492, 13501, 13513, 13519, 13525, 13541, 13542,
   13546, 13555, 13570, 13574, 13620, 13624, 13641, 13645, 13723, 13747,
   13777, 13778, 13794, 13804, 13808, 13814, 13820, 13830, 13836, 13845,
   13855, 13856, 13884, 13898, 13912, 13927, 13928, 13938, 13939, 13949,
   13950, 13951, 13955, 13970, 14002, 14012, 14012, 14014, 14024, 14025,
   14026, 14027, 14028, 14029, 14030, 14031, 14032, 14033, 14034, 14035,
   14036, 14037, 14038, 14039, 14040, 14041, 14042, 14043, 14044, 14045,
   14046, 14047, 14048, 14049, 14050, 14051, 14052, 14053, 14054, 14055,
   14056, 14057, 14058, 14059, 14060, 14061, 14062, 14063, 14064, 14065,
   14066, 14067, 14068, 14069, 14070, 14071, 14072, 14073, 14074, 14075,
   14076, 14077, 14078, 14079, 14080, 14081, 14082, 14083, 14093, 14094,
   14095, 14096, 14097, 14098, 14099, 14100, 14101, 14102, 14103, 14104,
   14105, 14106, 14107, 14108, 14109, 14110, 14111, 14112, 14113, 14114,
   14115, 14116, 14117, 14118, 14119, 14120, 14121, 14122, 14123, 14124,
   14125, 14126, 14127, 14128, 14129, 14130, 14131, 14132, 14133, 14134,
   14135, 14136, 14137, 14138, 14139, 14140, 14141, 14142, 14147, 14148,
   14149, 14150, 14151, 14152, 14153, 14154, 14155, 14156, 14157, 14158,
   14159, 14160, 14161, 14162, 14163, 14164, 14165, 14166, 14167, 14168,
   14169, 14170, 14171, 14172, 14173, 14174, 14175, 14176, 14177, 14178,
   14179, 14180, 14181, 14182, 14183, 14184, 14185, 14186, 14187, 14188,
   14189, 14190, 14191, 14192, 14193, 14194, 14195, 14196, 14197, 14198,
   14199, 14200, 14201, 14202, 14203, 14204, 14205, 14206, 14207, 14208,
   14209, 14210, 14211, 14212, 14213, 14214, 14215, 14216, 14217, 14218,
   14219, 14220, 14221, 14222, 14223, 14224, 14225, 14226, 14227, 14228,
   14229, 14230, 14231, 14232, 14233, 14234, 14235, 14236, 14237, 14238,
   14239, 14240, 14241, 14242, 14243, 14244, 14245, 14246, 14247, 14248,
   14249, 14250, 14251, 14252, 14253, 14254, 14255, 14256, 14257, 14258,
   14259, 14260, 14261, 14262, 14263, 14264, 14265, 14266, 14267, 14268,
   14269, 14270, 14271, 14272, 14273, 14274, 14275, 14276, 14277, 14278,
   14279, 14280, 14281, 14282, 14283, 14284, 14285, 14286, 14287, 14288,
   14289, 14290, 14291, 14292, 14293, 14294, 14295, 14296, 14297, 14298,
   14299, 14300, 14301, 14302, 14303, 14304, 14305, 14306, 14307, 14308,
   14309, 14310, 14311, 14312, 14313, 14314, 14315, 14316, 14317, 14318,
   14319, 14320, 14321, 14322, 14323, 14324, 14325, 14326, 14327, 14328,
   14329, 14330, 14331, 14332, 14333, 14334, 14335, 14336, 14337, 14338,
   14339, 14340, 14341, 14342, 14343, 14344, 14345, 14346, 14347, 14348,
   14349, 14350, 14351, 14352, 14353, 14354, 14355, 14356, 14357, 14358,
   14359, 14360, 14361, 14362, 14363, 14364, 14365, 14366, 14367, 14368,
   14369, 14370, 14371, 14372, 14373, 14374, 14375, 14376, 14377, 14378,
   14379, 14380, 14381, 14382, 14383, 14384, 14385, 14386, 14387, 14388,
   14389, 14390, 14391, 14392, 14393, 14394, 14395, 14396, 14397, 14398,
   14399, 14400, 14401, 14402, 14403, 14404, 14405, 14406, 14418, 14417,
   14436, 14435, 14442, 14441, 14451, 14450, 14461, 14460, 14466, 14474,
   14476, 14481, 14481, 14490, 14489, 14503, 14502, 14507, 14511, 14512,
   14513, 14517, 14518, 14519, 14520, 14524, 14525, 14526, 14527, 14532,
   14556, 14582, 14593, 14605, 14618, 14633, 14652, 14658, 14683, 14696,
   14722, 14765, 14779, 14780, 14781, 14782, 14786, 14803, 14820, 14821,
   14825, 14826, 14827, 14828, 14832, 14833, 14842, 14853, 14854, 14855,
   14861, 14867, 14879, 14878, 14894, 14895, 14899, 14900, 14904, 14919,
   14920, 14921, 14926, 14927, 14932, 14931, 14951, 14963, 14976, 14975,
   15009, 15010, 15014, 15015, 15019, 15020, 15021, 15022, 15024, 15023,
   15036, 15037, 15038, 15039, 15040, 15046, 15051, 15057, 15068, 15079,
   15083, 15090, 15099, 15101, 15106, 15111, 15118, 15130, 15142, 15149,
   15161, 15162, 15165, 15166, 15169, 15174, 15182, 15193, 15213, 15216,
   15218, 15222, 15223, 15230, 15232, 15236, 15237, 15242, 15241, 15245,
   15244, 15248, 15247, 15251, 15250, 15253, 15254, 15255, 15256, 15257,
   15258, 15259, 15260, 15261, 15262, 15263, 15264, 15265, 15266, 15267,
   15268, 15269, 15270, 15271, 15272, 15273, 15274, 15275, 15276, 15277,
   15278, 15282, 15283, 15287, 15288, 15292, 15302, 15312, 15325, 15340,
   15353, 15366, 15378, 15383, 15391, 15396, 15404, 15409, 15416, 15416,
   15417, 15417, 15420, 15449, 15454, 15460, 15466, 15472, 15476, 15480,
   15481, 15485, 15512, 15514, 15518, 15522, 15526, 15533, 15534, 15538,
   15539, 15543, 15544, 15548, 15549, 15555, 15561, 15567, 15577, 15576,
   15586, 15587, 15592, 15593, 15594, 15599, 15600, 15601, 15605, 15606,
   15610, 15622, 15631, 15641, 15650, 15664, 15665, 15670, 15669, 15685,
   15686, 15687, 15691, 15692, 15696, 15696, 15718, 15719, 15723, 15724,
   15725, 15729, 15733, 15740, 15743, 15741, 15757, 15764, 15785, 15802,
   15804, 15808, 15809, 15813, 15814, 15822, 15823, 15824, 15825, 15831,
   15837, 15847, 15849, 15851, 15856, 15857, 15858, 15859, 15860, 15864,
   15865, 15866, 15867, 15868, 15869, 15879, 15880, 15885, 15898, 15911,
   15913, 15915, 15921, 15922, 15924, 15930, 15929, 15946, 15947, 15951,
   15956, 15964, 15964, 15988, 15989, 15994, 15995, 15997, 15999, 16017,
   16023, 16028, 16010, 16089, 16106, 16130, 16161, 16165, 16174, 16197,
   16126, 16260, 16284, 16293, 16300, 16259, 16320, 16324, 16328, 16332,
   16336, 16340, 16347, 16354, 16361, 16371, 16372, 16376, 16377, 16378,
   16382, 16383, 16388, 16390, 16389, 16395, 16396, 16400, 16407, 16417,
   16423, 16434
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADMIN_SYM", "ADDDATE_SYM", "AFTER_SYM", "AGAINST",
  "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM",
  "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC",
  "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM", "AUTHORS_SYM",
  "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AUTO_SYM", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM",
  "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET", "CHAR_SYM",
  "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLIENT_STATS_SYM", "CLOSE_SYM",
  "COALESCE", "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS",
  "COLUMN_ADD_SYM", "COLUMN_CHECK_SYM", "COLUMN_CREATE_SYM",
  "COLUMN_DELETE_SYM", "COLUMN_GET_SYM", "COLUMN_SYM", "COLUMN_NAME_SYM",
  "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM",
  "COMPLETION_SYM", "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM",
  "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_SYM", "CURRENT_USER", "CURRENT_ROLE",
  "CURRENT_POS_SYM", "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME",
  "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM", "DATETIME",
  "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM",
  "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM",
  "DEALLOCATE_SYM", "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM",
  "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM",
  "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM",
  "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE",
  "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXAMINED_SYM", "EXECUTE_SYM",
  "EXISTS", "EXIT_SYM", "EXPANSION_SYM", "EXPORT_SYM", "EXTENDED_SYM",
  "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM",
  "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM", "FOUND_SYM",
  "FROM", "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GENERAL",
  "GENERATED_SYM", "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT",
  "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM",
  "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HARD_SYM", "HASH_SYM",
  "HAVING", "HELP_SYM", "HEX_NUM", "HEX_STRING", "HIGH_PRIORITY",
  "HOST_SYM", "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "ID_SYM", "IDENT", "IDENTIFIED_SYM",
  "IDENT_QUOTED", "IF", "IGNORE_SYM", "IGNORE_SERVER_IDS_SYM", "IMPORT",
  "INDEXES", "INDEX_SYM", "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM",
  "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD",
  "INSTALL_SYM", "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM",
  "IN_SYM", "IO_SYM", "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM",
  "ITERATE_SYM", "JOIN_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM",
  "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM", "LAST_VALUE", "LE", "LEADING",
  "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME",
  "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD",
  "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM",
  "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "LT", "MASTER_CONNECT_RETRY_SYM", "MASTER_GTID_POS_SYM",
  "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM",
  "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM",
  "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM",
  "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_USE_GTID_SYM", "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH",
  "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM", "MEDIUMBLOB", "MEDIUMINT",
  "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM",
  "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "ONLINE_SYM",
  "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PAGE_CHECKSUM_SYM",
  "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM", "PARTIAL",
  "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM", "PASSWORD",
  "PERSISTENT_SYM", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM",
  "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM",
  "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM",
  "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM",
  "PURGE", "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNED_SQLSTATE_SYM", "RETURNING_SYM", "RETURNS_SYM", "RETURN_SYM",
  "REVERSE_SYM", "REVOKE", "RIGHT", "ROLE_SYM", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM",
  "ROW_COUNT_SYM", "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM",
  "SCHEMA_NAME_SYM", "SECOND_MICROSECOND_SYM", "SECOND_SYM",
  "SECURITY_SYM", "SELECT_SYM", "SENSITIVE_SYM", "SEPARATOR_SYM",
  "SERIALIZABLE_SYM", "SERIAL_SYM", "SESSION_SYM", "SERVER_SYM",
  "SERVER_OPTIONS", "SET", "SET_VAR", "SHARE_SYM", "SHIFT_LEFT",
  "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGNAL_SYM", "SIGNED_SYM",
  "SIMPLE_SYM", "SLAVE", "SLAVES", "SLAVE_POS_SYM", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SOFT_SYM", "SONAME_SYM", "SOUNDS_SYM",
  "SOURCE_SYM", "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM",
  "SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STARTING",
  "STARTS_SYM", "START_SYM", "STATS_AUTO_RECALC_SYM",
  "STATS_PERSISTENT_SYM", "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM",
  "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN",
  "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM",
  "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM",
  "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE",
  "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_STATS_SYM",
  "TABLE_SYM", "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY",
  "TEMPTABLE_SYM", "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM",
  "THEN_SYM", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM",
  "TINYBLOB", "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING",
  "TRANSACTION_SYM", "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM",
  "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM",
  "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING",
  "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM", "VIRTUAL_SYM",
  "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WEIGHT_STRING_SYM", "WHEN_SYM",
  "WHERE", "WHILE_SYM", "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM",
  "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM",
  "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "IMPOSSIBLE_ACTION",
  "'|'", "'&'", "'-'", "'+'", "'*'", "'/'", "'%'", "'^'", "'~'", "'('",
  "')'", "','", "'!'", "'{'", "'}'", "';'", "'@'", "'.'", "':'", "$accept",
  "query", "$@1", "opt_end_of_input", "verb_clause", "statement",
  "deallocate", "deallocate_or_drop", "prepare", "prepare_src", "execute",
  "$@2", "execute_using", "execute_var_list", "execute_var_ident", "help",
  "$@3", "change", "$@4", "master_defs", "master_def",
  "ignore_server_id_list", "ignore_server_id", "master_file_def",
  "optional_connection_name", "connection_name", "create", "$@5", "$@6",
  "$@7", "$@8", "$@9", "$@10", "$@11", "$@12", "$@13", "server_def",
  "server_options_list", "server_option", "event_tail", "$@14",
  "ev_schedule_time", "$@15", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@16", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@17", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@18", "$@19", "sp_cursor_stmt", "$@20",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "sqlstate", "opt_value", "sp_hcond", "signal_stmt", "signal_value",
  "opt_signal_value", "opt_set_signal_information",
  "signal_information_item_list", "signal_allowed_expr",
  "signal_condition_information_item_name", "resignal_stmt",
  "get_diagnostics", "which_area", "diagnostics_information",
  "statement_information", "statement_information_item",
  "simple_target_specification", "statement_information_item_name",
  "condition_number", "condition_information",
  "condition_information_item", "condition_information_item_name",
  "sp_decl_idents", "sp_opt_default", "sp_proc_stmt", "sp_proc_stmt_if",
  "$@21", "sp_proc_stmt_statement", "$@22", "sp_proc_stmt_return", "$@23",
  "sp_proc_stmt_unlabeled", "$@24", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch",
  "$@25", "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list",
  "sp_if", "$@26", "$@27", "$@28", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "$@29", "$@30", "searched_case_stmt", "$@31",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@32", "$@33", "searched_when_clause", "$@34",
  "$@35", "else_clause_opt", "sp_labeled_control", "$@36", "sp_opt_label",
  "sp_labeled_block", "$@37", "sp_unlabeled_block", "$@38",
  "sp_block_content", "$@39", "sp_unlabeled_control", "$@40", "$@41",
  "$@42", "trg_action_time", "trg_event", "change_tablespace_access",
  "change_tablespace_info", "tablespace_info", "opt_logfile_group_name",
  "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@43", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create_body",
  "$@44", "$@45", "create_like", "opt_create_select", "$@46", "$@47",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@48",
  "have_partitioning", "partition_entry", "$@49", "partition",
  "part_type_def", "$@50", "opt_linear", "opt_key_algo", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@51",
  "$@52", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@53", "part_name", "opt_part_values", "$@54", "$@55", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@56", "$@57",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@58", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@59", "$@60", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "create_or_replace", "opt_create_table_options",
  "create_table_options_space_separated", "create_table_options",
  "create_table_option", "$@61", "default_charset", "default_collation",
  "storage_engines", "known_storage_engines", "row_types",
  "merge_insert_types", "opt_select_from", "udf_type", "create_field_list",
  "field_list", "field_list_item", "column_def", "key_def", "$@62", "$@63",
  "$@64", "$@65", "opt_check_constraint", "check_constraint",
  "opt_constraint", "constraint", "field_spec", "$@66", "field_def",
  "opt_generated_always", "vcol_opt_specifier", "vcol_opt_attribute",
  "vcol_opt_attribute_list", "vcol_attribute", "parse_vcol_expr",
  "virtual_column_func", "type", "$@67", "$@68", "spatial_type", "char",
  "nchar", "varchar", "nvarchar", "int_type", "real_type", "float_options",
  "precision", "field_options", "field_opt_list", "field_option",
  "field_length", "opt_field_length", "opt_precision", "opt_attribute",
  "opt_attribute_list", "attribute", "type_with_opt_collate",
  "now_or_signed_literal", "hex_num_or_string", "charset", "charset_name",
  "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "ws_nweights", "$@69", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident",
  "opt_if_not_exists_ident", "opt_component", "string_list", "alter",
  "$@70", "$@71", "$@72", "$@73", "$@74", "$@75", "$@76", "$@77",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "$@78", "$@79", "$@80",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "$@81", "add_part_extra", "reorg_partition_rule", "$@82",
  "reorg_parts_rule", "$@83", "alt_part_name_list", "alt_part_name_item",
  "alter_list", "add_column", "alter_list_item", "$@84", "$@85", "$@86",
  "opt_index_lock_algorithm", "alter_algorithm_option",
  "alter_lock_option", "opt_column", "opt_ignore", "alter_options", "$@87",
  "alter_options_part2", "alter_option_list", "alter_option",
  "opt_restrict", "opt_place", "opt_to", "slave", "$@88", "$@89", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_thread_opts", "$@90",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@91", "opt_checksum_type", "repair",
  "$@92", "opt_mi_repair_type", "mi_repair_types", "mi_repair_type",
  "analyze", "$@93", "analyze_table_list", "analyze_table_elem_spec",
  "opt_persistent_stat_clause", "persistent_stat_spec",
  "persistent_column_stat_spec", "$@94", "persistent_index_stat_spec",
  "$@95", "table_column_list", "table_index_list", "table_index_name",
  "binlog_base64_event", "check", "$@96", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "$@97",
  "opt_no_write_to_binlog", "rename", "$@98", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@99",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@100",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@101", "cache_keys_spec",
  "$@102", "cache_key_list_or_empty", "opt_ignore_leaves", "select",
  "select_init", "select_paren", "select_paren_derived", "select_init2",
  "$@103", "select_part2", "$@104", "$@105", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "opt_default_time_precision",
  "opt_time_precision", "optional_braces", "expr", "bool_pri", "predicate",
  "bit_expr", "or", "and", "not", "not2", "comp_op", "all_or_any",
  "opt_dyncol_type", "dyncol_type", "dyncall_create_element",
  "dyncall_create_list", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@106", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "$@107", "$@108", "$@109",
  "variable", "$@110", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "$@111", "gorder_list",
  "in_sum_expr", "$@112", "cast_type", "$@113", "opt_expr_list",
  "expr_list", "ident_list_arg", "ident_list", "opt_expr", "opt_else",
  "when_list", "table_ref", "join_table_list", "esc_table_ref",
  "derived_table_list", "join_table", "$@114", "$@115", "$@116", "$@117",
  "$@118", "$@119", "inner_join", "normal_join", "opt_use_partition",
  "use_partition", "table_factor", "$@120", "select_derived_union",
  "$@121", "$@122", "select_init2_derived", "select_part2_derived",
  "$@123", "$@124", "select_derived", "$@125", "select_derived2", "$@126",
  "$@127", "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@128",
  "$@129", "index_hints_list", "opt_index_hints_list", "$@130",
  "opt_key_definition", "$@131", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@132", "having_clause", "$@133", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@134", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "limit_rows_option",
  "delete_limit_clause", "int_num", "ulong_num", "real_ulong_num",
  "ulonglong_num", "real_ulonglong_num", "dec_num_error", "dec_num",
  "choice", "procedure_clause", "$@135", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@136",
  "select_var_list", "select_var_ident", "into", "$@137",
  "into_destination", "$@138", "$@139", "do", "$@140", "drop", "$@141",
  "$@142", "$@143", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "opt_if_exists", "opt_temporary", "insert", "$@144",
  "$@145", "replace", "$@146", "$@147", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "$@148", "fields", "insert_values", "$@149", "$@150", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@151", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@152", "update", "$@153", "$@154", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@155", "single_multi", "$@156", "$@157", "$@158", "$@159",
  "opt_select_expressions", "table_wild_list", "table_wild_one",
  "opt_wild", "opt_delete_options", "opt_delete_option", "truncate",
  "$@160", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@161", "show_param",
  "$@162", "$@163", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@164", "$@165", "explainable_command",
  "describe_command", "opt_extended_describe", "opt_describe_column",
  "flush", "$@166", "flush_options", "$@167", "opt_flush_lock",
  "flush_lock", "$@168", "flush_options_list", "flush_option",
  "opt_table_list", "optional_flush_tables_arguments", "reset", "$@169",
  "reset_options", "reset_option", "$@170", "slave_reset_options", "purge",
  "$@171", "purge_options", "purge_option", "kill", "$@172", "kill_type",
  "kill_option", "kill_expr", "shutdown", "use", "load", "$@173", "$@174",
  "$@175", "$@176", "data_or_xml", "opt_local", "load_data_lock",
  "opt_duplicate", "opt_field_term", "field_term_list", "field_term",
  "opt_line_term", "line_term_list", "line_term",
  "opt_xml_rows_identified_by", "opt_ignore_lines", "lines_or_rows",
  "opt_field_or_var_spec", "fields_or_vars", "field_or_var",
  "opt_load_data_set_spec", "load_data_set_list", "load_data_set_elem",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "temporal_literal", "insert_ident",
  "table_wild", "order_ident", "simple_ident", "simple_ident_nospvar",
  "simple_ident_q", "field_ident", "table_ident", "table_ident_opt_wild",
  "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys",
  "TEXT_STRING_literal", "TEXT_STRING_filesystem", "ident", "label_ident",
  "ident_or_text", "user_maybe_role", "user_or_role", "user", "keyword",
  "keyword_sp", "set", "$@177", "start_option_value_list", "$@178",
  "$@179", "$@180", "start_option_value_list_following_option_type",
  "$@181", "option_value_list_continued", "option_value_list", "$@182",
  "$@183", "option_value", "$@184", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@185",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@186", "handler", "$@187", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@188",
  "handler_rkey_mode", "revoke", "revoke_command", "admin_option_for_role",
  "grant", "grant_command", "opt_with_admin", "opt_with_admin_option",
  "role_list", "current_role", "grant_role", "opt_table",
  "grant_privileges", "opt_privileges", "object_privilege_list",
  "object_privilege", "$@189", "$@190", "$@191", "$@192", "opt_and",
  "require_list", "require_list_element", "grant_ident", "user_list",
  "grant_list", "user_and_role_list", "via_or_with", "using_or_as",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@193", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@194",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@195",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@196", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_algorithm", "view_suid",
  "view_tail", "$@197", "view_list_opt", "view_list", "view_select",
  "$@198", "view_select_aux", "view_check_option", "trigger_tail", "$@199",
  "$@200", "$@201", "udf_tail", "sf_tail", "$@202", "$@203", "$@204",
  "$@205", "$@206", "sp_tail", "$@207", "$@208", "$@209", "$@210", "xa",
  "xid", "begin_or_start", "opt_join_or_resume", "opt_one_phase",
  "opt_suspend", "$@211", "opt_migrate", "install", "uninstall",
  "keep_gcc_happy", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   896,   897,   898,   124,    38,    45,    43,    42,    47,
      37,    94,   126,    40,    41,    44,    33,   123,   125,    59,
      64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   663,   664,   665,   664,   664,   666,   666,   667,   667,
     668,   668,   668,   668,   668,   668,   668,   668,   668,   668,
     668,   668,   668,   668,   668,   668,   668,   668,   668,   668,
     668,   668,   668,   668,   668,   668,   668,   668,   668,   668,
     668,   668,   668,   668,   668,   668,   668,   668,   668,   668,
     668,   668,   668,   668,   668,   668,   668,   668,   668,   668,
     668,   668,   668,   668,   668,   669,   670,   670,   671,   672,
     672,   674,   673,   675,   675,   676,   676,   677,   679,   678,
     681,   680,   682,   682,   683,   683,   683,   683,   683,   683,
     683,   683,   683,   683,   683,   683,   683,   683,   683,   683,
     683,   684,   684,   684,   685,   686,   686,   686,   686,   686,
     686,   686,   687,   687,   688,   690,   689,   691,   692,   689,
     693,   694,   689,   695,   696,   689,   697,   689,   698,   689,
     689,   689,   689,   689,   689,   699,   700,   700,   701,   701,
     701,   701,   701,   701,   701,   703,   702,   705,   704,   704,
     706,   706,   706,   706,   707,   707,   708,   708,   709,   709,
     710,   710,   711,   711,   713,   712,   714,   714,   714,   714,
     714,   714,   714,   714,   714,   714,   714,   714,   714,   715,
     716,   716,   717,   717,   718,   718,   719,   719,   719,   719,
     719,   719,   719,   720,   720,   720,   721,   721,   723,   722,
     724,   724,   725,   725,   726,   726,   727,   727,   728,   728,
     729,   730,   731,   731,   732,   732,   733,   734,   734,   734,
     734,   735,   735,   736,   736,   737,   737,   739,   738,   738,
     740,   738,   738,   742,   741,   743,   743,   744,   744,   745,
     746,   746,   747,   748,   748,   749,   749,   749,   749,   749,
     750,   751,   751,   752,   752,   753,   753,   754,   754,   755,
     755,   755,   756,   756,   756,   756,   756,   756,   756,   756,
     756,   756,   756,   756,   757,   758,   759,   759,   760,   760,
     761,   761,   762,   763,   763,   764,   764,   765,   766,   766,
     767,   768,   768,   768,   768,   768,   768,   768,   768,   768,
     768,   768,   768,   768,   769,   769,   770,   770,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   773,   772,   775,   774,   777,   776,   779,   778,   780,
     781,   782,   784,   783,   785,   786,   786,   786,   787,   787,
     789,   790,   791,   788,   792,   792,   792,   793,   793,   795,
     796,   794,   798,   797,   799,   799,   800,   800,   802,   803,
     801,   805,   806,   804,   807,   807,   809,   808,   810,   810,
     812,   811,   814,   813,   816,   815,   817,   818,   819,   817,
     820,   817,   821,   821,   822,   822,   822,   823,   824,   825,
     826,   826,   827,   827,   828,   829,   830,   830,   832,   831,
     833,   833,   833,   834,   834,   834,   835,   836,   836,   836,
     837,   837,   837,   837,   837,   837,   837,   837,   838,   839,
     839,   839,   840,   840,   840,   840,   840,   841,   842,   842,
     842,   843,   843,   843,   843,   843,   843,   843,   844,   845,
     845,   845,   846,   846,   846,   847,   848,   849,   850,   851,
     852,   852,   852,   853,   854,   855,   856,   857,   858,   859,
     860,   861,   862,   862,   863,   863,   864,   864,   866,   865,
     865,   867,   865,   865,   868,   868,   869,   870,   869,   871,
     869,   872,   873,   873,   875,   874,   876,   878,   877,   879,
     880,   881,   880,   880,   880,   880,   880,   882,   882,   883,
     883,   884,   884,   885,   885,   886,   887,   888,   889,   890,
     890,   891,   892,   891,   893,   891,   894,   894,   895,   896,
     897,   897,   898,   898,   899,   899,   901,   900,   902,   903,
     904,   903,   905,   903,   906,   906,   907,   907,   908,   908,
     910,   911,   909,   912,   912,   913,   913,   914,   914,   915,
     915,   917,   916,   918,   919,   919,   920,   920,   921,   921,
     921,   921,   921,   921,   921,   921,   921,   923,   924,   922,
     925,   925,   926,   926,   927,   927,   928,   928,   929,   929,
     930,   930,   931,   932,   932,   933,   933,   934,   934,   935,
     935,   936,   936,   936,   937,   937,   937,   937,   937,   937,
     937,   937,   937,   937,   937,   937,   937,   937,   937,   937,
     937,   937,   937,   937,   938,   937,   937,   937,   937,   937,
     937,   937,   937,   937,   937,   937,   937,   937,   937,   937,
     937,   939,   940,   941,   942,   943,   943,   943,   943,   943,
     943,   943,   944,   944,   944,   945,   945,   946,   946,   946,
     946,   947,   948,   948,   949,   949,   950,   950,   952,   951,
     953,   951,   954,   951,   955,   951,   951,   951,   956,   956,
     957,   958,   958,   959,   961,   960,   962,   962,   963,   963,
     964,   964,   964,   965,   965,   966,   966,   967,   967,   967,
     968,   969,   970,   970,   970,   970,   970,   970,   970,   970,
     970,   970,   970,   970,   970,   970,   970,   970,   970,   970,
     970,   970,   970,   970,   970,   970,   970,   970,   970,   970,
     970,   970,   970,   970,   970,   970,   970,   971,   970,   972,
     970,   970,   970,   973,   973,   973,   973,   973,   973,   973,
     973,   974,   975,   975,   976,   976,   977,   977,   977,   977,
     977,   978,   978,   978,   978,   978,   979,   979,   979,   980,
     980,   980,   981,   982,   982,   983,   983,   984,   984,   984,
     985,   985,   985,   985,   986,   986,   987,   987,   988,   988,
     989,   989,   990,   990,   990,   990,   990,   990,   990,   990,
     990,   990,   990,   990,   990,   990,   990,   991,   992,   992,
     993,   993,   994,   994,   995,   995,   996,   996,   997,   997,
     998,   998,   999,   999,  1000,  1001,  1001,  1002,  1002,  1003,
    1003,  1004,  1004,  1004,  1005,  1005,  1005,  1006,  1006,  1006,
    1006,  1006,  1006,  1006,  1007,  1007,  1009,  1008,  1010,  1010,
    1011,  1012,  1012,  1012,  1012,  1013,  1014,  1015,  1015,  1016,
    1017,  1017,  1018,  1018,  1019,  1019,  1020,  1021,  1021,  1022,
    1022,  1023,  1023,  1023,  1023,  1024,  1024,  1024,  1024,  1024,
    1025,  1025,  1025,  1025,  1025,  1026,  1027,  1027,  1028,  1028,
    1029,  1029,  1030,  1030,  1030,  1031,  1031,  1032,  1033,  1034,
    1035,  1035,  1036,  1036,  1037,  1037,  1038,  1038,  1039,  1039,
    1040,  1040,  1041,  1041,  1042,  1042,  1043,  1043,  1043,  1043,
    1043,  1043,  1044,  1044,  1045,  1046,  1046,  1047,  1047,  1047,
    1048,  1048,  1049,  1049,  1050,  1050,  1051,  1052,  1052,  1053,
    1053,  1055,  1056,  1054,  1057,  1054,  1054,  1058,  1054,  1059,
    1054,  1060,  1054,  1061,  1054,  1062,  1054,  1054,  1054,  1054,
    1054,  1054,  1063,  1063,  1063,  1063,  1064,  1064,  1065,  1065,
    1066,  1066,  1067,  1067,  1067,  1067,  1067,  1067,  1067,  1067,
    1067,  1067,  1068,  1067,  1067,  1069,  1067,  1070,  1067,  1067,
    1067,  1067,  1067,  1071,  1072,  1072,  1074,  1073,  1075,  1075,
    1075,  1077,  1076,  1078,  1079,  1078,  1080,  1080,  1081,  1082,
    1082,  1083,  1084,  1084,  1084,  1085,  1084,  1086,  1087,  1084,
    1084,  1084,  1084,  1084,  1084,  1084,  1084,  1084,  1084,  1084,
    1084,  1084,  1084,  1084,  1084,  1088,  1088,  1088,  1088,  1088,
    1089,  1089,  1090,  1090,  1091,  1091,  1092,  1092,  1094,  1093,
    1095,  1095,  1096,  1096,  1097,  1097,  1098,  1098,  1098,  1099,
    1099,  1099,  1100,  1100,  1100,  1100,  1102,  1101,  1103,  1101,
    1101,  1101,  1104,  1105,  1105,  1106,  1106,  1107,  1107,  1107,
    1109,  1108,  1110,  1110,  1111,  1111,  1111,  1112,  1112,  1112,
    1113,  1113,  1115,  1114,  1116,  1116,  1116,  1118,  1117,  1119,
    1119,  1120,  1120,  1121,  1121,  1121,  1123,  1122,  1124,  1124,
    1125,  1126,  1126,  1127,  1127,  1128,  1129,  1128,  1130,  1131,
    1130,  1132,  1132,  1132,  1133,  1133,  1133,  1134,  1134,  1135,
    1137,  1136,  1138,  1138,  1139,  1139,  1140,  1140,  1140,  1140,
    1140,  1140,  1142,  1141,  1143,  1143,  1143,  1145,  1144,  1144,
    1146,  1146,  1147,  1147,  1148,  1150,  1149,  1151,  1151,  1152,
    1152,  1153,  1154,  1155,  1155,  1157,  1156,  1158,  1158,  1159,
    1159,  1160,  1161,  1163,  1162,  1165,  1164,  1166,  1166,  1167,
    1167,  1168,  1169,  1169,  1170,  1170,  1171,  1171,  1173,  1172,
    1175,  1176,  1174,  1177,  1177,  1177,  1177,  1177,  1178,  1178,
    1179,  1179,  1180,  1180,  1181,  1181,  1181,  1182,  1182,  1182,
    1183,  1183,  1183,  1184,  1184,  1185,  1186,  1187,  1187,  1187,
    1187,  1187,  1188,  1188,  1188,  1189,  1189,  1189,  1190,  1190,
    1191,  1191,  1191,  1191,  1191,  1191,  1191,  1191,  1191,  1191,
    1191,  1192,  1192,  1192,  1192,  1192,  1192,  1193,  1193,  1193,
    1193,  1193,  1193,  1193,  1193,  1193,  1193,  1193,  1193,  1193,
    1193,  1194,  1194,  1194,  1194,  1194,  1194,  1194,  1194,  1194,
    1194,  1194,  1194,  1194,  1194,  1194,  1195,  1195,  1196,  1196,
    1197,  1197,  1198,  1198,  1199,  1199,  1199,  1199,  1199,  1199,
    1200,  1200,  1201,  1201,  1202,  1202,  1202,  1202,  1202,  1202,
    1202,  1202,  1202,  1202,  1202,  1203,  1204,  1204,  1205,  1205,
    1205,  1205,  1205,  1205,  1205,  1205,  1205,  1205,  1205,  1205,
    1205,  1205,  1205,  1205,  1205,  1205,  1205,  1205,  1205,  1205,
    1205,  1205,  1205,  1205,  1205,  1205,  1205,  1205,  1206,  1206,
    1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,
    1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,
    1206,  1206,  1206,  1206,  1206,  1206,  1207,  1207,  1207,  1207,
    1207,  1207,  1207,  1207,  1207,  1207,  1207,  1207,  1207,  1207,
    1207,  1207,  1207,  1207,  1207,  1207,  1207,  1207,  1207,  1207,
    1207,  1207,  1207,  1208,  1208,  1208,  1208,  1208,  1208,  1208,
    1208,  1208,  1208,  1208,  1208,  1208,  1208,  1208,  1208,  1208,
    1208,  1208,  1208,  1208,  1208,  1208,  1208,  1209,  1209,  1209,
    1209,  1209,  1209,  1209,  1209,  1211,  1210,  1210,  1212,  1212,
    1213,  1213,  1214,  1214,  1215,  1215,  1216,  1216,  1217,  1218,
    1218,  1218,  1218,  1218,  1218,  1218,  1219,  1220,  1218,  1218,
    1218,  1218,  1218,  1218,  1218,  1218,  1218,  1218,  1218,  1221,
    1218,  1223,  1222,  1224,  1224,  1224,  1225,  1225,  1226,  1226,
    1227,  1228,  1227,  1229,  1229,  1231,  1230,  1232,  1232,  1232,
    1232,  1232,  1232,  1232,  1232,  1232,  1232,  1232,  1232,  1233,
    1232,  1234,  1234,  1235,  1235,  1236,  1236,  1237,  1237,  1238,
    1238,  1239,  1239,  1240,  1240,  1241,  1241,  1242,  1243,  1243,
    1244,  1244,  1245,  1246,  1245,  1247,  1245,  1245,  1248,  1245,
    1249,  1245,  1245,  1250,  1245,  1251,  1245,  1245,  1252,  1252,
    1252,  1253,  1253,  1254,  1254,  1255,  1257,  1256,  1256,  1256,
    1258,  1259,  1260,  1258,  1261,  1263,  1264,  1262,  1266,  1265,
    1268,  1269,  1267,  1270,  1271,  1272,  1272,  1273,  1273,  1273,
    1273,  1274,  1274,  1276,  1275,  1277,  1275,  1278,  1278,  1279,
    1280,  1279,  1282,  1281,  1283,  1283,  1284,  1284,  1285,  1285,
    1286,  1286,  1287,  1287,  1287,  1287,  1287,  1287,  1287,  1287,
    1287,  1287,  1287,  1287,  1288,  1288,  1288,  1288,  1288,  1288,
    1288,  1288,  1288,  1289,  1289,  1289,  1289,  1290,  1290,  1290,
    1291,  1291,  1292,  1292,  1293,  1294,  1293,  1295,  1296,  1295,
    1297,  1297,  1298,  1298,  1299,  1299,  1300,  1300,  1300,  1301,
    1302,  1302,  1303,  1304,  1304,  1306,  1305,  1307,  1307,  1308,
    1308,  1308,  1309,  1309,  1310,  1310,  1311,  1311,  1311,  1312,
    1312,  1312,  1313,  1313,  1313,  1313,  1313,  1314,  1315,  1315,
    1315,  1315,  1316,  1316,  1316,  1317,  1317,  1317,  1317,  1317,
    1317,  1318,  1318,  1318,  1318,  1318,  1319,  1319,  1319,  1319,
    1319,  1320,  1320,  1320,  1320,  1320,  1321,  1322,  1322,  1323,
    1323,  1324,  1325,  1324,  1326,  1326,  1327,  1327,  1328,  1330,
    1329,  1331,  1331,  1332,  1332,  1334,  1333,  1336,  1337,  1335,
    1335,  1335,  1339,  1338,  1341,  1340,  1342,  1340,  1340,  1340,
    1340,  1340,  1340,  1340,  1343,  1340,  1340,  1340,  1340,  1340,
    1340,  1344,  1344,  1345,  1346,  1347,  1347,  1348,  1349,  1349,
    1350,  1350,  1352,  1353,  1351,  1355,  1356,  1354,  1357,  1357,
    1357,  1357,  1358,  1358,  1359,  1359,  1360,  1361,  1361,  1361,
    1362,  1361,  1363,  1363,  1364,  1364,  1365,  1364,  1366,  1364,
    1367,  1367,  1368,  1368,  1369,  1370,  1370,  1371,  1371,  1373,
    1372,  1374,  1374,  1375,  1375,  1376,  1376,  1377,  1378,  1377,
    1380,  1381,  1379,  1382,  1382,  1383,  1384,  1384,  1385,  1386,
    1386,  1388,  1387,  1390,  1391,  1389,  1392,  1389,  1393,  1389,
    1394,  1394,  1395,  1395,  1396,  1396,  1397,  1397,  1398,  1398,
    1399,  1399,  1399,  1401,  1400,  1402,  1402,  1403,  1403,  1404,
    1404,  1405,  1405,  1405,  1405,  1405,  1405,  1405,  1405,  1405,
    1406,  1406,  1408,  1407,  1409,  1409,  1409,  1409,  1409,  1409,
    1409,  1409,  1409,  1409,  1409,  1409,  1409,  1409,  1410,  1409,
    1411,  1409,  1409,  1409,  1409,  1409,  1409,  1409,  1409,  1409,
    1409,  1409,  1409,  1409,  1409,  1409,  1409,  1409,  1409,  1409,
    1409,  1409,  1409,  1409,  1409,  1409,  1409,  1409,  1409,  1409,
    1409,  1409,  1409,  1409,  1409,  1409,  1409,  1409,  1409,  1409,
    1412,  1412,  1412,  1413,  1413,  1414,  1414,  1415,  1415,  1416,
    1416,  1417,  1417,  1418,  1418,  1419,  1419,  1420,  1420,  1420,
    1422,  1421,  1423,  1421,  1424,  1424,  1424,  1424,  1424,  1425,
    1425,  1426,  1426,  1426,  1427,  1427,  1427,  1429,  1428,  1431,
    1430,  1430,  1432,  1432,  1433,  1434,  1433,  1435,  1435,  1436,
    1436,  1436,  1436,  1436,  1436,  1436,  1436,  1436,  1436,  1436,
    1436,  1436,  1436,  1436,  1436,  1436,  1436,  1436,  1437,  1437,
    1438,  1438,  1440,  1439,  1441,  1441,  1443,  1442,  1442,  1442,
    1444,  1444,  1446,  1445,  1447,  1448,  1448,  1450,  1449,  1451,
    1451,  1451,  1452,  1452,  1452,  1452,  1453,  1453,  1454,  1455,
    1457,  1458,  1459,  1460,  1456,  1461,  1461,  1462,  1462,  1463,
    1463,  1463,  1464,  1464,  1464,  1465,  1465,  1466,  1466,  1467,
    1467,  1467,  1467,  1468,  1468,  1469,  1469,  1470,  1470,  1471,
    1471,  1472,  1472,  1473,  1473,  1474,  1474,  1474,  1475,  1475,
    1476,  1476,  1477,  1477,  1478,  1478,  1479,  1480,  1480,  1480,
    1480,  1481,  1481,  1481,  1481,  1482,  1483,  1483,  1483,  1484,
    1484,  1484,  1484,  1484,  1484,  1484,  1484,  1484,  1484,  1484,
    1485,  1485,  1485,  1485,  1485,  1486,  1486,  1486,  1487,  1487,
    1488,  1488,  1489,  1490,  1490,  1491,  1491,  1492,  1492,  1492,
    1493,  1493,  1493,  1493,  1494,  1494,  1494,  1495,  1495,  1496,
    1497,  1497,  1498,  1499,  1500,  1501,  1501,  1502,  1502,  1503,
    1503,  1503,  1504,  1504,  1504,  1505,  1505,  1506,  1507,  1507,
    1507,  1507,  1507,  1507,  1507,  1507,  1507,  1507,  1507,  1507,
    1507,  1507,  1507,  1507,  1507,  1507,  1507,  1507,  1507,  1507,
    1507,  1507,  1507,  1507,  1507,  1507,  1507,  1507,  1507,  1507,
    1507,  1507,  1507,  1507,  1507,  1507,  1507,  1507,  1507,  1507,
    1507,  1507,  1507,  1507,  1507,  1507,  1507,  1507,  1507,  1507,
    1507,  1507,  1507,  1507,  1507,  1507,  1507,  1507,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,
    1508,  1508,  1508,  1508,  1508,  1508,  1508,  1508,  1510,  1509,
    1512,  1511,  1513,  1511,  1514,  1511,  1516,  1515,  1515,  1517,
    1517,  1519,  1518,  1520,  1518,  1522,  1521,  1521,  1523,  1523,
    1523,  1524,  1524,  1524,  1524,  1525,  1525,  1525,  1525,  1526,
    1527,  1527,  1527,  1527,  1527,  1527,  1527,  1527,  1527,  1528,
    1528,  1528,  1529,  1529,  1529,  1529,  1530,  1531,  1532,  1532,
    1533,  1533,  1533,  1533,  1534,  1534,  1534,  1535,  1535,  1535,
    1535,  1535,  1537,  1536,  1538,  1538,  1539,  1539,  1540,  1541,
    1541,  1541,  1541,  1541,  1543,  1542,  1544,  1544,  1545,  1544,
    1546,  1546,  1547,  1547,  1548,  1548,  1548,  1548,  1549,  1548,
    1550,  1550,  1550,  1550,  1550,  1551,  1552,  1552,  1552,  1552,
    1552,  1552,  1553,  1553,  1554,  1555,  1555,  1555,  1555,  1555,
    1556,  1556,  1557,  1557,  1558,  1558,  1559,  1560,  1560,  1561,
    1561,  1562,  1562,  1563,  1563,  1564,  1564,  1566,  1565,  1567,
    1565,  1568,  1565,  1569,  1565,  1565,  1565,  1565,  1565,  1565,
    1565,  1565,  1565,  1565,  1565,  1565,  1565,  1565,  1565,  1565,
    1565,  1565,  1565,  1565,  1565,  1565,  1565,  1565,  1565,  1565,
    1565,  1570,  1570,  1571,  1571,  1572,  1572,  1572,  1573,  1573,
    1573,  1573,  1574,  1574,  1575,  1575,  1576,  1576,  1577,  1577,
    1578,  1578,  1579,  1579,  1579,  1579,  1579,  1580,  1580,  1581,
    1581,  1582,  1583,  1583,  1583,  1583,  1583,  1584,  1584,  1585,
    1585,  1586,  1586,  1587,  1587,  1587,  1587,  1587,  1589,  1588,
    1590,  1590,  1591,  1591,  1591,  1592,  1592,  1592,  1593,  1593,
    1594,  1595,  1595,  1596,  1597,  1598,  1598,  1600,  1599,  1601,
    1601,  1601,  1602,  1602,  1604,  1603,  1605,  1605,  1606,  1606,
    1606,  1607,  1607,  1608,  1609,  1608,  1610,  1611,  1612,  1613,
    1613,  1614,  1614,  1615,  1615,  1615,  1615,  1615,  1615,  1615,
    1615,  1616,  1616,  1616,  1617,  1617,  1617,  1617,  1617,  1618,
    1618,  1618,  1618,  1618,  1618,  1619,  1619,  1620,  1621,  1622,
    1622,  1622,  1623,  1623,  1623,  1625,  1624,  1626,  1626,  1627,
    1627,  1629,  1628,  1630,  1630,  1631,  1631,  1631,  1631,  1633,
    1634,  1635,  1632,  1636,  1636,  1638,  1639,  1640,  1641,  1642,
    1637,  1644,  1645,  1646,  1647,  1643,  1648,  1648,  1648,  1648,
    1648,  1648,  1649,  1649,  1649,  1650,  1650,  1651,  1651,  1651,
    1652,  1652,  1653,  1654,  1653,  1655,  1655,  1656,  1656,  1657,
    1657,  1658
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     4,     1,
       2,     0,     4,     0,     2,     3,     1,     2,     0,     3,
       0,     6,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       1,     0,     1,     3,     1,     3,     3,     3,     3,     3,
       3,     3,     0,     1,     1,     0,     7,     0,     0,    15,
       0,     0,    15,     0,     0,    15,     0,     6,     0,     3,
       4,     5,     4,     3,     2,    10,     1,     3,     2,     2,
       2,     2,     2,     2,     2,     0,    13,     0,     6,     2,
       0,     1,     3,     1,     0,     2,     0,     2,     0,     1,
       3,     4,     0,     2,     0,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,     1,     0,     2,     0,     2,     2,     2,     2,     2,
       3,     3,     1,     1,     1,     2,     3,     3,     0,     4,
       0,     3,     0,     1,     3,     1,     0,     1,     3,     1,
       0,     3,     0,     1,     3,     1,     4,     0,     1,     1,
       1,     0,     3,     2,     3,     0,     3,     0,     5,     5,
       0,     7,     5,     0,     2,     1,     1,     1,     3,     1,
       1,     1,     3,     0,     1,     1,     1,     1,     2,     1,
       3,     1,     1,     0,     1,     0,     2,     3,     5,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     4,     0,     1,     1,     3,
       1,     3,     3,     1,     2,     1,     1,     1,     1,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     0,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     5,     0,     2,     0,     3,     0,     2,     2,
       2,     2,     0,     6,     2,     0,     2,     1,     1,     3,
       0,     0,     0,     7,     0,     2,     2,     1,     1,     0,
       0,     8,     0,     6,     1,     2,     1,     2,     0,     0,
       6,     0,     0,     6,     0,     2,     0,     5,     0,     1,
       0,     5,     0,     2,     0,     5,     4,     0,     0,     8,
       0,     7,     1,     1,     1,     1,     1,     2,     4,     5,
       0,     4,     4,     4,     3,     3,     2,     2,     0,     2,
       1,     2,     3,     1,     1,     1,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     3,     1,     1,     1,     2,     2,     2,     1,     1,
       1,     1,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     4,     0,     1,     1,     1,     1,     1,     0,     7,
       3,     0,     5,     1,     2,     4,     0,     0,     5,     0,
       7,     1,     0,     1,     0,     4,     0,     0,     3,     5,
       6,     0,     4,     2,     2,     2,     2,     0,     1,     0,
       3,     0,     1,     1,     3,     1,     4,     5,     5,     0,
       2,     0,     0,     7,     0,    10,     1,     3,     1,     1,
       0,     2,     0,     3,     1,     3,     0,     6,     1,     0,
       0,     5,     0,     4,     1,     1,     1,     3,     1,     3,
       0,     0,     5,     1,     3,     1,     1,     0,     3,     1,
       3,     0,     4,     1,     0,     1,     2,     1,     3,     4,
       3,     3,     3,     3,     4,     4,     3,     0,     0,     6,
       0,     1,     0,     1,     1,     2,     1,     1,     0,     1,
       1,     2,     1,     0,     3,     1,     3,     0,     1,     1,
       2,     1,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     0,     6,     1,     1,     3,     4,
       4,     2,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     4,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     2,     2,     0,     8,
       0,     9,     0,     9,     0,     9,     8,     2,     0,     1,
       4,     0,     1,     2,     0,     3,     2,     8,     0,     2,
       0,     1,     1,     0,     1,     2,     1,     1,     2,     2,
       4,     3,     3,     3,     3,     1,     2,     1,     1,     3,
       2,     3,     2,     2,     1,     3,     3,     2,     3,     1,
       2,     2,     2,     1,     2,     1,     1,     1,     2,     3,
       2,     3,     2,     2,     3,     3,     3,     0,     6,     0,
       6,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     2,     1,     2,     3,
       2,     1,     1,     1,     1,     1,     1,     1,     2,     0,
       1,     1,     5,     0,     1,     2,     1,     1,     1,     1,
       3,     3,     3,     3,     0,     1,     0,     1,     0,     1,
       2,     1,     1,     2,     2,     4,     1,     3,     2,     1,
       2,     2,     2,     3,     3,     3,     3,     2,     2,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     0,     2,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     0,
       1,     1,     2,     2,     1,     2,     2,     0,     1,     1,
       1,     3,     1,     3,     0,     1,     0,     4,     1,     1,
       1,     0,     1,     2,     1,     1,     2,     1,     3,     3,
       1,     1,     0,     2,     0,     1,     5,     0,     3,     3,
       1,     0,     2,     2,     2,     0,     3,     3,     6,     6,
       1,     1,     2,     2,     2,     1,     2,     2,     1,     1,
       0,     1,     1,     1,     1,     0,     1,     1,     1,     0,
       1,     2,     0,     1,     0,     1,     0,     1,     1,     2,
       1,     2,     1,     2,     2,     2,     3,     2,     3,     3,
       3,     3,     1,     1,     1,     1,     3,     1,     1,     1,
       4,     2,     1,     4,     0,     1,     2,     0,     2,     1,
       3,     0,     0,     7,     0,     5,     7,     0,     5,     0,
       5,     0,     5,     0,     4,     0,    10,     3,     4,     3,
       3,     7,     0,     3,     1,     4,     0,     3,     0,     2,
       0,     1,     0,     2,     2,     2,     2,     1,     1,     1,
       4,     4,     0,     6,     4,     0,     5,     0,     6,     4,
       3,     1,     7,     2,     1,     1,     0,     6,     0,     3,
       2,     0,     5,     0,     0,     6,     1,     3,     1,     1,
       3,     3,     3,     2,     4,     0,     7,     0,     0,     8,
       5,     5,     3,     4,     2,     2,     6,     5,     3,     5,
       1,     1,     1,     1,     1,     0,     1,     1,     2,     2,
       3,     3,     3,     3,     0,     1,     0,     1,     0,     2,
       0,     1,     2,     1,     1,     1,     0,     1,     1,     0,
       2,     1,     0,     1,     1,     1,     0,     6,     0,     5,
       4,     4,     3,     0,     1,     1,     3,     3,     2,     2,
       0,     2,     1,     3,     0,     1,     1,     0,     2,     4,
       1,     3,     0,     5,     0,     1,     1,     0,     6,     0,
       1,     1,     2,     1,     1,     1,     0,     5,     1,     3,
       2,     0,     3,     1,     4,     1,     0,     4,     1,     0,
       4,     0,     1,     3,     0,     1,     3,     1,     1,     2,
       0,     5,     0,     1,     1,     2,     1,     1,     1,     1,
       1,     2,     0,     5,     0,     1,     1,     0,     4,     4,
       3,     5,     1,     3,     3,     0,     6,     1,     1,     1,
       3,     2,     3,     1,     1,     0,     6,     1,     1,     1,
       3,     3,     4,     0,     6,     0,     2,     0,     4,     0,
       2,     1,     2,     4,     2,     3,     2,     3,     0,     3,
       0,     0,     6,     2,     1,     1,     2,     2,     8,     4,
       0,     1,     2,     1,     1,     1,     1,     0,     2,     4,
       3,     1,     1,     3,     4,     0,     0,     0,     2,     2,
       1,     1,     0,     2,     3,     0,     2,     3,     0,     2,
       3,     3,     3,     2,     3,     4,     3,     4,     3,     4,
       1,     3,     4,     3,     3,     6,     1,     5,     6,     5,
       7,     6,     8,     5,     6,     4,     4,     5,     3,     4,
       1,     3,     3,     3,     3,     3,     3,     5,     5,     3,
       3,     3,     3,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     2,     1,     2,     1,     1,     1,     2,
       2,     1,     1,     2,     2,     4,     1,     3,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     3,     2,
       2,     2,     2,     3,     3,     5,     6,     4,     4,     7,
       2,     6,     5,     6,     6,     4,     4,     5,     4,     6,
       2,     2,     4,     4,     4,    10,     6,     8,     6,     4,
       4,     6,     4,     4,     4,     6,     4,     7,     7,     7,
       6,     6,     6,     6,     3,     4,     6,     8,     2,     2,
       8,     8,     6,     6,     2,     6,     6,     8,     8,     6,
       8,     6,     2,     8,     8,     2,     2,     2,     6,     6,
       4,     4,     8,     4,     4,     4,     4,     3,     8,     4,
       4,     6,     4,     4,     4,     6,     8,     4,     3,     6,
       4,     6,     5,     8,     7,    10,     1,     6,     4,     4,
       4,     4,     4,     6,     4,     0,     5,     6,     2,     3,
       0,     4,     0,     3,     0,     1,     1,     3,     4,     4,
       5,     4,     4,     4,     5,     4,     0,     0,     7,     4,
       5,     4,     5,     4,     4,     4,     4,     4,     5,     0,
       8,     0,     3,     3,     1,     4,     0,     1,     0,     2,
       0,     0,     4,     4,     2,     0,     3,     2,     3,     2,
       1,     1,     2,     1,     2,     1,     2,     2,     2,     0,
       3,     0,     1,     1,     3,     1,     3,     1,     3,     0,
       1,     0,     2,     4,     5,     1,     1,     1,     1,     4,
       1,     3,     3,     0,     6,     0,     8,     4,     0,     8,
       0,    10,     6,     0,     8,     0,    10,     6,     1,     2,
       1,     1,     2,     0,     1,     5,     0,     5,     3,     5,
       2,     0,     0,     7,     1,     0,     0,     6,     0,     3,
       0,     0,     5,     0,     1,     0,     1,     0,     2,     3,
       3,     1,     1,     0,     7,     0,     7,     1,     2,     0,
       0,     2,     0,     2,     0,     1,     1,     1,     1,     3,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     1,     1,
       0,     2,     0,     1,     0,     0,     3,     0,     0,     3,
       2,     0,     0,     4,     4,     2,     0,     1,     1,     3,
       3,     1,     2,     0,     1,     0,     4,     4,     2,     0,
       1,     1,     0,     1,     0,     1,     2,     5,     4,     1,
       3,     3,     1,     1,     1,     1,     1,     1,     0,     2,
       3,     4,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     0,     6,     0,     1,     3,     1,     3,     0,
       2,     3,     1,     2,     1,     0,     3,     0,     0,     7,
       2,     1,     0,     3,     0,     7,     0,     7,     4,     6,
       4,     4,     4,     4,     0,     6,     4,     4,     5,     6,
       4,     1,     3,     1,     2,     1,     3,     1,     0,     2,
       0,     1,     0,     0,     8,     0,     0,     6,     0,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     3,     4,
       0,     3,     3,     1,     2,     2,     0,     3,     0,     5,
       3,     1,     3,     1,     3,     1,     1,     0,     1,     0,
       4,     0,     1,     3,     1,     1,     1,     0,     0,     6,
       0,     0,    11,     3,     1,     3,     3,     1,     3,     0,
       1,     0,     4,     0,     0,     9,     0,     5,     0,     6,
       0,     2,     1,     3,     2,     4,     0,     2,     0,     2,
       1,     1,     1,     0,     4,     0,     1,     0,     1,     1,
       3,     1,     1,     2,     2,     2,     1,     1,     1,     1,
       0,     3,     0,     3,     2,     4,     4,     3,     4,     4,
       1,     3,     3,     3,     3,     6,     2,     2,     0,     6,
       0,     7,     5,     2,     1,     1,     1,     5,     5,     2,
       2,     1,     4,     3,     2,     3,     2,     2,     1,     3,
       4,     3,     3,     2,     3,     2,     3,     1,     1,     1,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     0,     1,     0,     2,     0,
       1,     1,     1,     0,     2,     0,     2,     0,     2,     2,
       0,     4,     0,     4,     1,     1,     1,     1,     1,     1,
       1,     0,     1,     1,     0,     1,     1,     0,     4,     0,
       4,     1,     0,     1,     4,     0,     3,     3,     1,     2,
       2,     2,     2,     2,     3,     2,     1,     1,     1,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     0,     1,
       0,     3,     0,     3,     3,     1,     0,     4,     1,     2,
       0,     1,     0,     3,     3,     2,     2,     0,     5,     0,
       1,     1,     0,     1,     1,     2,     1,     2,     1,     2,
       0,     0,     0,     0,    22,     1,     1,     0,     1,     0,
       1,     1,     0,     1,     1,     0,     2,     2,     1,     3,
       4,     3,     3,     0,     2,     2,     1,     3,     3,     0,
       4,     0,     3,     1,     1,     0,     3,     2,     3,     1,
       1,     2,     0,     2,     3,     1,     5,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     2,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     2,     2,     2,     1,     1,
       3,     5,     1,     1,     1,     1,     1,     3,     4,     5,
       1,     5,     3,     2,     1,     3,     2,     2,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
       0,     3,     0,     3,     0,     3,     0,     3,     2,     0,
       2,     0,     2,     0,     4,     0,     3,     1,     1,     1,
       1,     0,     1,     1,     1,     0,     2,     2,     2,     3,
       3,     4,     6,     2,     3,     3,     2,     3,     5,     1,
       3,     3,     1,     1,     3,     3,     1,     3,     2,     2,
       2,     2,     2,     1,     1,     4,     4,     1,     1,     1,
       1,     1,     0,     4,     1,     1,     1,     3,     3,     1,
       1,     2,     2,     2,     0,     3,     4,     3,     0,     7,
       1,     2,     1,     1,     1,     1,     1,     1,     0,     5,
       1,     1,     1,     1,     1,     3,     6,     6,     6,     7,
       5,     3,     4,     1,     3,     8,     8,     8,     6,     4,
       0,     3,     0,     3,     1,     3,     2,     1,     1,     0,
       1,     1,     2,     0,     1,     1,     3,     0,     3,     0,
       3,     0,     3,     0,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     2,     1,     1,
       2,     0,     1,     3,     1,     2,     2,     2,     1,     3,
       3,     1,     1,     3,     1,     3,     1,     3,     1,     1,
       1,     1,     4,     5,     4,     6,     1,     0,     3,     3,
       1,     1,     0,     2,     2,     2,     2,     0,     2,     0,
       3,     2,     1,     2,     2,     2,     2,     2,     0,     3,
       0,     1,     0,     3,     2,     0,     1,     2,     0,     1,
       4,     4,     5,     2,     3,     0,     1,     0,     4,     0,
       1,     1,     0,     1,     0,     2,     2,     1,     0,     1,
       1,     2,     3,     2,     0,     6,     3,     0,     0,     0,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     3,     3,
       3,     3,     0,     3,     3,     0,     7,     0,     3,     1,
       3,     0,     3,     2,     4,     0,     3,     4,     4,     0,
       0,     0,    16,     8,     7,     0,     0,     0,     0,     0,
      15,     0,     0,     0,     0,    12,     4,     4,     3,     4,
       3,     2,     1,     3,     5,     1,     1,     0,     1,     1,
       0,     2,     0,     0,     3,     0,     2,     5,     3,     3,
       3,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   931,  1134,  2688,     0,     0,     0,     0,     0,     0,
    2690,   585,    66,  1791,  1919,  1920,  1702,  1730,     2,     0,
    1134,   276,   179,     0,    78,  1732,     0,  1977,     0,     0,
    1134,     0,   487,     0,  1972,     0,     0,  1134,  1735,  1962,
     253,   179,  2690,     0,  1180,  2478,  1832,  1988,     0,     0,
       0,  1815,     0,  2554,  1780,     0,     0,  2821,     0,     0,
       3,     8,    19,     0,    41,    24,    29,    14,    18,    13,
      54,    48,    26,    39,   128,    38,    10,    57,    58,    16,
      45,    11,    12,    15,    37,    44,    33,    40,    52,  1171,
      22,    23,    30,    46,    62,    20,    59,    55,    21,  1921,
      25,    47,    42,    34,    56,    63,    35,    53,    36,    61,
      28,    49,    27,     9,    17,    50,    51,    43,    64,    31,
      60,    32,     0,   960,     0,     0,     0,     0,     0,     0,
    1038,   943,  2755,  2756,  2757,  1136,  1135,     0,  2690,  2092,
    1119,  1145,  2168,  2170,  2169,  2171,  2172,  2173,  2174,  2175,
    2176,  2109,  2177,  2178,  2180,  2179,  2181,  2182,  2183,  2110,
    2111,  2184,  2185,  2186,  2188,  2187,  2189,  2112,  2113,  2190,
    2191,  2192,  2193,  2114,  2116,  2115,  2194,  2197,  2196,  2195,
    2117,  2198,  2199,  2200,  2202,  2118,  2119,  2120,  2121,  2122,
    2201,  2123,  2203,  2124,  2204,  2205,  2206,  2207,  2208,  2209,
    2210,  2212,  2211,  2125,  2213,  2214,  2216,  2217,  2218,  2215,
    2219,  2221,  2220,  2222,  2223,  2224,  2126,  2225,  2226,  2227,
    2228,  2229,  2230,  2231,  2232,  2127,  2233,  2234,  2235,  2254,
    2128,  2236,  2239,  2238,  2237,  2240,  2241,  2242,  2244,  2243,
    2245,  2246,  2129,  2130,  2247,  2248,  2249,  2250,  2252,  2251,
    2256,  2257,  2258,  2131,  2253,  2255,  2455,  2259,  2260,  2262,
    2261,  2263,  2132,  2265,  2264,  2133,  2267,  2266,  2134,  2135,
    2268,  2269,  2270,  2090,  2271,  2091,  2272,  2275,  2276,  2273,
    2277,  2282,  2136,  2274,  2278,  2279,  2280,  2281,  2283,  2137,
    2285,  2284,  2286,  2287,  2288,  2289,  2290,  2291,  2292,  2293,
    2294,  2307,  2298,  2299,  2301,  2302,  2305,  2300,  2306,  2310,
    2309,  2311,  2312,  2313,  2314,  2315,  2308,  2296,  2303,  2304,
    2297,  2316,  2317,  2295,  2318,  2319,  2320,  2321,  2322,  2323,
    2324,  2325,  2326,  2327,  2328,  2330,  2329,  2331,  2332,  2333,
    2334,  2335,  2336,  2338,  2337,  2339,  2340,  2341,  2343,  2342,
    2345,  2346,  2138,  2344,  2347,  2348,  2349,  2350,  2351,  2353,
    2352,  2139,  2141,  2140,  2142,  2354,  2355,  2143,  2356,  2358,
    2357,  2359,  2360,  2361,  2363,  2362,  2364,  2365,  2144,  2145,
    2366,  2367,  2368,  2369,  2370,  2371,  2372,  2373,  2374,  2375,
    2376,  2377,  2378,  2379,  2381,  2380,  2382,  2383,  2384,  2385,
    2386,  2387,  2388,  2146,  2389,  2147,  2390,  2391,  2148,  2392,
    2149,  2393,  2394,  2395,  2396,  2397,  2150,  2398,  2399,  2400,
    2402,  2403,  2401,  2404,  2151,  2405,  2406,  2407,  2152,  2409,
    2408,  2410,  2153,  2412,  2154,  2155,  2411,  2157,  2158,  2413,
    2414,  2415,  2156,  2416,  2159,  2417,  2418,  2420,  2419,  2421,
    2422,  2423,  2160,  2424,  2161,  2425,  2426,  2427,  2428,  2429,
    2431,  2430,  2432,  2433,  2434,  2435,  2438,  2440,  2437,  2439,
    2436,  2441,  2442,  2443,  2444,  2448,  2449,  2450,  2451,  2445,
    2446,  2447,  2162,  2452,  2453,  2454,  2456,  2457,  2459,  2458,
    2163,  2164,  2460,  2461,  2167,  2462,  2463,  2464,  2468,  2465,
    2477,  2466,  2467,  2470,  2469,  2471,  2472,  2473,  2165,  2474,
    2166,  2475,  2476,   198,  2095,   181,  2096,  2108,   112,  2545,
    2544,  1082,  1120,  2691,  2692,   583,   887,     0,     0,   179,
       0,   888,     0,   886,   179,   134,     0,     0,     0,  1808,
       0,  1728,  1728,  1728,  1728,     0,  1728,   179,  1728,     0,
    1731,  1728,   179,  1728,     0,    71,  1927,   277,     0,     0,
       0,     0,     0,  2089,     0,  1738,     0,     0,  1979,  1995,
       0,  1996,  1990,  2542,     0,  1205,     0,     0,     0,     0,
     179,  1137,     0,  1789,     0,   243,   252,   254,   255,   251,
       0,  2692,  2703,  1172,  1178,  1190,     0,  1899,   255,     0,
     112,  1063,     0,   112,  1816,  1813,     0,     0,     0,  1789,
    1989,  2805,     0,     0,     0,  2801,     0,  2806,     0,  1180,
       0,     0,     1,     5,     0,     0,   582,  2757,     0,   579,
     580,  2249,  2358,  1912,  1910,  2084,     0,   934,   961,     0,
     939,     0,   937,  2101,  2100,  2099,     0,   950,   949,   947,
       0,   448,     0,  1040,     0,  2762,   941,  1096,  2689,     0,
     200,     0,     0,   113,   114,     0,     0,     0,  2695,     0,
       0,     0,   586,     0,     0,   133,     0,     0,   583,   583,
     583,  1812,  1811,  1810,     0,  1808,  2169,  2109,  2183,     0,
    2057,     0,     0,     0,  1489,     0,  2114,     0,  2198,  2200,
    2118,  2119,  2120,  2121,  2122,  2125,     0,     0,  1218,  1218,
    1218,  1215,     0,     0,     0,  2223,  2224,  2063,     0,     0,
       0,  2053,  2064,  2262,  2263,     0,  2055,  2056,  2269,     0,
       0,     0,  2284,     0,  2289,  2061,     0,     0,  2325,  2327,
       0,     0,  2331,  2332,  2333,  2334,  2038,  1273,     0,  1215,
    2052,  2060,  2350,  2045,  2359,  2364,  2365,     0,  2374,     0,
       0,  2396,     0,  2403,  2401,  2407,     0,     0,  2428,     0,
       0,  1215,  2037,  2448,  2449,  2450,  2451,     0,  2054,  2162,
    2062,     0,  2462,  1218,  1215,  1215,     0,     0,     0,  2471,
    2472,  2476,     0,     0,     0,  2727,  1272,     0,  1451,     0,
    1483,  1230,  1236,  1250,     0,  1265,  1299,  1300,  1302,  1406,
    1301,  1307,  1306,  1703,  2049,  1305,  1304,  2050,  2051,  1298,
    2074,  2095,  2073,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1895,     0,     0,  1714,  1728,    73,     0,     0,
    2603,  2618,  2619,  1218,  2615,  2620,  2243,  2130,  2256,     0,
    2617,  2609,     0,  2369,  2373,  2613,  2388,  2391,  2607,     0,
    2154,  2432,  2639,  2611,  2616,  2597,  2584,  2598,     0,     0,
    2601,  2605,  2086,  1597,  2557,  2558,     0,    79,  1740,  1741,
    1739,  1036,     0,  2818,  1980,  1981,  1982,     0,  1999,     0,
    1132,     0,     0,   497,   488,     0,  1894,  1893,     0,  1973,
    2704,     0,     0,  1087,  1743,  1790,     0,  1742,  1968,     0,
    1966,  1963,  1965,   244,     0,     0,   274,  2170,  2603,  2373,
    2575,     0,  2583,     0,  2698,  2695,  2705,  2740,  2735,  2734,
    2737,  2738,  1196,  2739,  1195,  2736,  2733,  1205,  1191,  1193,
    1194,   803,     0,     0,  2498,  2499,  2338,  2359,  2397,  2500,
    2445,     0,     0,  2519,  2479,  2484,  2480,     0,     0,  1854,
       0,   803,  1877,  1907,  1855,     0,     0,  1907,     0,  1632,
    1897,  1900,     0,  2502,  1868,   884,   883,  1880,   882,  2503,
    1893,     0,  1840,  1856,     0,  1817,  1861,   112,  2504,     0,
    1896,  1879,     0,  1878,  1632,  1907,     0,  1833,     0,     0,
       0,     0,     0,   250,  1070,  1070,     0,     0,  1062,  1064,
    1065,  1070,  1070,     0,  2819,  2820,  2555,  1036,  2044,  2042,
    2043,  2093,  2802,  2041,  2810,  2812,  2798,  2800,  2807,  1174,
       0,  2709,     6,    65,   129,  1205,  1205,  2757,   583,   581,
       0,  1924,  2760,  2761,  2759,   819,     0,  1218,  2102,  2105,
    2758,  2106,   182,   948,     0,   449,   182,     0,     0,     0,
       0,     0,   450,   451,   387,     0,  1044,  1045,  1039,  1041,
    1043,   945,     0,     0,   944,  2762,     0,     0,  1147,  1149,
    1148,  1165,   202,   199,   180,    80,  1084,  1721,  1723,  1122,
    2694,     0,     0,  2696,  2700,  1271,  1270,     0,   126,   132,
       0,  2590,  2594,     0,     0,  2105,  2666,     0,   130,  2654,
       0,     0,     0,     0,  1792,  1796,  1802,  1806,  1809,     0,
       0,  1602,  1320,  1602,  1602,  1602,  1490,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1602,     0,  1358,  1330,  1331,     0,  1359,     0,     0,     0,
    2065,     0,     0,     0,  2727,     0,     0,     0,  1456,     0,
       0,     0,  2727,     0,     0,     0,     0,     0,     0,  1485,
    1487,  2073,  1602,     0,     0,  1602,     0,     0,     0,     0,
       0,  1223,  1364,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1602,  1602,     0,     0,
    1602,  1372,  2067,     0,     0,     0,  2066,     0,     0,     0,
    2059,   800,   801,  2039,  2058,     0,  1375,  1377,  1376,     0,
    1602,  1602,     0,     0,     0,  1310,  1309,  1311,     0,     0,
       0,     0,     0,     0,  1269,  1268,  1267,  1266,     0,     0,
       0,  1274,     0,  1275,  1276,     0,  1277,  1278,  1279,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1312,     0,
       0,     0,  2040,  1415,     0,  1729,  1708,  1716,  1710,     0,
    1895,  1711,  1713,  1720,   462,     0,  1717,  2107,  2652,  1712,
       0,  1704,     0,    72,     0,  1951,  1956,     0,     0,     0,
    1946,  1954,  1948,  1955,  1947,     0,     0,  1957,   112,     0,
    1949,  1953,  1952,  1928,  1931,  1938,  1929,     0,     0,   275,
     278,   280,     0,   283,  2604,  2602,  2636,  2635,  2640,     0,
    2637,  2633,  2596,  2626,  2667,  2630,     0,  2667,  2632,  2631,
    2667,  2627,  2634,  2667,     0,  2599,     0,  1598,  1599,     0,
    2556,     0,  2085,  1037,     0,     0,  1983,  1984,     0,  1155,
    2000,  2001,  1997,  1597,  2543,  2546,     0,   690,  1206,   498,
       0,     0,   509,     0,     0,    68,    69,     0,  1139,     0,
    1138,  1142,     0,     0,     0,  1746,  1736,  1745,  1523,  1969,
     112,     0,   242,   267,   262,   270,   264,   266,   265,   271,
     272,   273,   268,   263,   269,   256,     0,     0,  2602,     0,
       0,  2599,  2699,     0,  2701,  2718,  1179,  2706,  1202,  1181,
    1201,     0,  1192,   802,     0,   805,   807,  1765,  1766,   806,
     815,     0,   804,     0,     0,  2516,     0,  2505,     0,   811,
     813,   812,  2513,   810,     0,     0,  2489,     0,     0,  1903,
       0,     0,  1867,     0,   583,     0,     0,     0,     0,     0,
       0,  1834,     0,     0,   634,     0,  1860,  1633,  1901,  1902,
    1907,     0,     0,  1907,     0,  1873,  1897,  1907,     0,  1907,
    1829,     0,     0,  1821,  1826,  1822,     0,  1828,  1827,  1830,
    1818,  1819,     0,  1847,  1875,     0,  1897,  1859,  1866,     0,
    1846,  1853,     0,  1864,  1897,  1897,     0,  1907,  1907,  1058,
    1074,  1056,  1068,  1069,     0,     0,  1061,  1060,  1814,  1526,
       0,     0,  2799,  2813,  2797,  2808,  2809,  2796,  1175,  2710,
    1173,  2711,     0,     7,     4,  1205,  1205,  1205,  2754,     0,
    2742,  2749,  2750,  2753,  2752,  2751,  2748,     0,  2741,  2744,
    2745,  2747,  2746,  2762,     0,  1914,  1915,  1916,  1917,  1918,
    1913,  1911,  1925,  1926,   820,   819,   574,   577,   576,     0,
       0,  2104,     0,   940,     0,  1895,   938,     0,     0,  1895,
     398,  1895,   452,   932,  1042,   952,     0,     0,   942,  1097,
    1098,  1101,     0,     0,   486,  1165,  1151,  1167,     0,   203,
     205,     0,  1086,  1085,     0,  1083,  1130,  1129,  1127,     0,
    1128,  1126,  1121,  1123,  1124,  2693,  2697,   584,   819,  1895,
       0,     0,   131,     0,   390,     0,     0,   889,   889,   889,
    1798,  1725,  1523,  1727,  2084,     0,     0,     0,  1804,     0,
       0,  1603,  1602,     0,  1465,     0,     0,     0,     0,  1491,
       0,     0,     0,     0,     0,     0,     0,     0,  1296,     0,
       0,     0,     0,     0,  1436,     0,  1465,  1219,  1677,  1678,
    1662,  1663,  1661,  1664,  1216,     0,  1665,  1676,  1387,     0,
       0,     0,     0,     0,     0,  1573,  1574,  1575,  1576,  1584,
    1577,  1578,  1579,  1586,  1591,  1580,  1581,  1587,  1588,  1589,
    1582,  1590,  1585,  1583,  1592,     0,  1572,     0,  1595,  1593,
    1596,  1594,     0,  1457,  1449,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1602,     0,     0,
       0,  1602,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1398,
       0,     0,     0,     0,     0,  1602,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1354,     0,  2076,  2075,
       0,     0,     0,   852,     0,  1314,     0,  1313,  1535,     0,
    2712,  2728,     0,  2505,  1452,  1454,     0,  1221,  1220,  1222,
    1233,  1226,  1231,  1224,  1228,     0,  1280,  2176,  1234,     0,
       0,  1262,  2727,  1611,  1263,  1248,  1253,  1254,     0,  1251,
    1252,     0,  1256,     0,  1255,  1259,  1260,  1261,  1264,     0,
       0,     0,     0,  1303,  1308,  1484,  1205,  2077,     0,     0,
     462,   465,   464,  1718,   463,  1767,     0,  1046,     0,     0,
      74,    76,  1943,  1940,  1939,  1941,  1945,   112,  1950,  1942,
       0,  1958,  2223,  2448,  2451,   287,     0,   260,   259,   261,
     284,     0,     0,  2629,     0,  2610,     0,  2614,  2608,  2612,
    2592,     0,     0,  2600,     0,  2638,  2621,  2625,  2624,  2622,
       0,  2623,  2628,  2606,  1601,  2257,  2342,     0,  1604,  2560,
    1733,  2817,  1985,  2462,  1986,  1978,     0,  1998,     0,     0,
       0,  1133,   691,     0,  1205,   496,   495,   494,   493,     0,
     511,   491,   499,    70,     0,     0,  1974,     0,     0,     0,
       0,  1089,  1744,     0,     0,  1724,  1524,  1970,  1964,     0,
       0,     0,     0,     0,  2656,  2581,     0,     0,     0,  2702,
    2720,  2719,  2707,  1205,  1623,  1206,  1206,  2073,  2521,     0,
    2515,  2514,     0,     0,     0,  2534,  2517,     0,     0,  2483,
    2522,  2523,  2526,     0,     0,     0,     0,     0,  2520,  2445,
    2485,  2486,     0,  2491,  2481,  2540,  2541,  2538,  2539,  2537,
    2510,  1874,     0,  1905,  1908,  1909,     0,     0,  1888,  1882,
    1881,  1871,  1883,  1872,  1892,  1891,  1890,  1844,  1843,  1645,
    1646,  2400,  1644,  1636,  1639,  1643,  1642,  1837,  1898,  1887,
    1885,  1869,  1907,  1842,  1841,  1886,  1884,  1823,  1824,  1825,
       0,  1632,     0,  1903,  1876,  1907,  1897,     0,  1907,  1907,
    1889,  1863,  1865,  1059,  1076,  1075,  1071,  1072,  1077,  1067,
    1066,  1544,  1543,     0,  1498,     0,  1500,  1497,  1496,  1495,
       0,  1543,  2803,  2811,  2815,     0,  1632,  2717,  2715,     0,
       0,     0,   583,     0,     0,  2743,   115,   575,  1767,  1767,
       0,  2103,     0,     0,     0,     0,     0,     0,     0,   183,
     192,     0,     0,   396,   397,  1767,   395,   438,   439,   442,
     443,   444,     0,     0,     0,     0,     0,     0,     0,     0,
     136,   445,  1767,  1767,   392,   418,   419,   422,   423,   424,
     425,   426,   388,     0,   393,   819,     0,   954,   956,  2763,
    2764,  2765,     0,     0,  1100,  1154,  1146,  1153,  1150,  1165,
    1163,  1152,   879,   878,     0,  1166,   201,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    81,
      82,   100,  1722,  1131,  1125,   127,   819,  1767,  1767,  1767,
    1767,   394,   427,   428,   431,   432,   433,   434,   437,   435,
     436,     0,  2595,     0,     0,  1895,     0,  2658,  2659,     0,
    2655,   890,     0,     0,     0,     0,     0,  1793,     0,  2087,
    1803,  1526,  1807,  1806,     0,  1383,     0,  1429,     0,  1431,
    1432,  1433,     0,     0,     0,     0,     0,  1384,     0,  1328,
    1385,  1386,     0,  1380,     0,  1381,     0,     0,     0,     0,
       0,     0,     0,  1435,     0,  1217,     0,     0,  1332,  1333,
    1325,  1317,     0,  1408,     0,     0,  1334,     0,     0,     0,
       0,  1389,     0,  1409,  1486,     0,  1488,  2077,     0,  1441,
    1390,  1339,     0,  1439,     0,  1340,  1410,  1411,  1412,  1392,
    1393,     0,  1414,     0,  1394,     0,     0,  1397,     0,     0,
    1342,  1445,  1443,     0,     0,     0,     0,  1447,  1344,     0,
       0,     0,  1343,     0,     0,     0,     0,     0,     0,     0,
    1346,     0,  1326,  1444,  1446,  1400,     0,     0,     0,     0,
       0,  1355,     0,  2721,  1534,  2729,  1535,     0,     0,  2723,
    2713,  2718,  2726,  1318,     0,     0,  2078,  1227,  1232,  1225,
    1229,  2727,     0,     0,     0,     0,  1246,  1245,     0,     0,
       0,  2727,  1611,  1249,     0,     0,  1425,  1426,  1481,     0,
    1709,  1706,  1719,  1768,     0,  2653,  1048,  1047,  1715,  1046,
      77,     0,  1944,  1937,  1959,  1932,     0,   279,   288,   281,
     285,   286,   282,  2671,     0,  2670,     0,     0,  2589,  2648,
    2651,  2084,     0,     0,     0,  2570,  2564,  2571,  2573,  2567,
    2572,  2574,  2565,  2566,  2561,  2568,  1605,  1634,     0,  1987,
    1156,  1158,  1159,  1157,  1165,     0,     0,  2549,  2550,  2548,
    2547,   501,     0,   510,     0,   522,     0,     0,     0,  1976,
    1975,     0,  1140,  1143,  1144,  1094,  1093,  1095,  1088,  1090,
    1091,   567,  1750,     0,     0,     0,  1756,  1737,  1747,     0,
    1971,  1967,     0,   257,  2582,     0,     0,     0,     0,     0,
       0,     0,  1200,  1526,  1695,  1197,  1185,  1634,  1624,  1184,
    1207,  1203,     0,   818,   817,   816,   814,     0,     0,     0,
       0,  2528,  2529,     0,     0,  2506,  2507,  2508,     0,  2511,
    2488,  2489,     0,  2490,     0,  1904,     0,  1848,     0,  1870,
       0,     0,     0,     0,  1839,     0,  1862,  1820,  1905,  1838,
    1604,  1897,  1835,  1836,  1074,     0,  1057,  1543,  1526,     0,
       0,  1518,  1545,     0,  1545,  1520,  1521,  1526,     0,  1526,
    1523,  1540,     0,     0,  2814,  1625,  2716,     0,  2791,     0,
       0,     0,   181,   587,     0,     0,   936,   186,   189,   187,
       0,   188,     0,     0,   447,   446,     0,  1895,   440,   140,
     139,   141,   142,  1659,  1660,  1656,  1657,  1655,  1658,   144,
     143,   138,   951,     0,     0,     0,  1895,   420,   399,   400,
     403,   404,   405,  1034,  1767,  1034,     0,  1767,  1767,  1034,
    1767,     0,     0,  1767,  1767,     0,     0,  1767,     0,     0,
    1034,     0,  1767,     0,  1021,     0,     0,  1767,  1767,  1767,
    1767,  1767,  1034,     0,     0,  1767,  1767,   486,  1767,     0,
       0,  1052,     0,     0,  1767,  1767,  1767,  1767,     0,     0,
    1767,  1767,     0,  1767,   968,  1020,   589,   616,   617,   933,
     967,   969,   981,   482,     0,   999,  1023,  1024,  1022,     0,
       0,     0,     0,   150,  2767,  1099,     0,     0,  1564,   204,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1895,   429,  2591,     0,
       0,  1767,   389,   406,   407,   410,   411,   412,   413,   414,
     417,   415,   416,     0,  2662,  2664,     0,     0,   891,     0,
       0,     0,  1726,  1806,  1526,  1604,  2085,  1604,     0,  1805,
       0,     0,  1430,  1466,     0,  1492,     0,  1322,   774,   774,
     774,  1475,   759,  1479,  1470,   774,  1471,   774,  1473,     0,
       0,     0,  1282,  1297,     0,     0,     0,     0,     0,  1437,
    1434,     0,     0,     0,     0,  1460,     0,     0,     0,  1327,
       0,  1420,  1442,  1440,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1448,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     841,   847,   850,   851,   853,   845,     0,  1402,  1315,  1205,
    2730,  2732,  1176,     0,  2722,  2724,   927,  1453,     0,  1243,
    1239,     0,  1237,  1610,  1258,  1257,     0,     0,     0,  1247,
    1206,  1416,  1205,     0,  1482,  2079,  1707,   461,   633,  1705,
      75,  1935,     0,  1930,  1933,     0,     0,  2668,     0,  2679,
       0,     0,     0,     0,     0,     0,     0,     0,  2559,  1635,
    1777,     0,  1165,  1169,  2094,  1991,  2552,  2553,  2551,     0,
     502,   503,   505,  1206,   519,   497,     0,   489,   492,     0,
     501,     0,  1092,  1190,     0,  1769,  1754,  1761,  1755,     0,
       0,     0,  1753,  2069,  2068,  2075,  2705,     0,  1570,     0,
       0,  2580,  2657,     0,     0,     0,  2708,  1604,  1604,  1689,
       0,     0,  1182,  1187,  1183,  1186,     0,  1204,  1211,  1210,
    2070,  2077,  2518,     0,     0,     0,     0,  2533,  2527,  2524,
    2525,     0,  2487,  2509,  2493,  2492,  2495,  2497,  1669,  1670,
    1668,  1666,  1667,  1906,  1632,  1858,  1857,  1647,  1638,     0,
    1641,  1640,  1831,  1850,  1852,  1907,  1073,     0,  1080,  1078,
       0,  2712,  1538,     0,  1522,  1519,  1546,     0,  1545,  1545,
    1526,     0,  1502,  1781,  1784,     0,  1501,  1597,  1528,  1190,
    2804,  2816,     0,     0,     0,   383,   382,     0,   145,  2785,
       0,     0,   671,   116,   473,   482,   588,   591,   632,   631,
     191,   190,   196,   197,  1673,  1674,  1671,  1672,   453,   466,
    1675,   467,   441,   137,   454,   455,   421,     0,   401,  1035,
     924,   583,  1003,     0,   672,   583,   875,   880,   880,   583,
       0,     0,  1134,     0,     0,  1728,     0,     0,  1134,     0,
       0,     0,  1767,     0,  1014,   963,     0,  1728,     0,  1728,
    1728,  1015,     0,     0,   964,  1767,     0,     0,     0,     0,
       0,  1728,  1134,     0,     0,     0,   484,     0,  1134,   983,
    1055,  1054,  1053,     0,  1134,  1134,     0,     0,     0,     0,
     622,   623,   621,     0,     0,     0,   614,   590,   819,   965,
     483,   966,   671,     0,  1049,   668,   674,  2080,     0,     0,
     160,     0,     0,   953,     0,   153,   151,   162,     0,     0,
    1103,     0,  1102,     0,  1567,     0,  1568,  1565,  1566,   101,
      88,    84,   105,   106,    86,    87,    91,    90,    92,    93,
      96,    97,    94,    89,    95,    85,   109,   111,   110,    98,
     107,   108,    83,   460,   459,   458,   457,   430,     0,     0,
       0,  1895,   408,  2663,  2661,  2660,     0,   917,   919,   918,
     905,   904,   117,   120,   123,     0,  1604,  1623,  2088,  1797,
       0,  1356,  1493,     0,     0,   775,  1467,   827,  1477,     0,
    1478,   761,   760,   776,  1469,  1472,  1476,  1474,  1321,  1329,
    1378,     0,  1295,  1379,     0,  1407,  1324,  1323,     0,     0,
       0,  1362,  1363,     0,  1458,     0,     0,  1336,     0,  1338,
       0,     0,  1422,  1391,  1413,  1365,  1395,     0,  1341,  1316,
       0,  1366,     0,  1371,  1369,     0,  1345,     0,     0,  1352,
       0,  1350,     0,  1351,     0,  1353,  1399,  1401,     0,     0,
     852,   838,   839,   840,     0,   842,   844,   846,     0,     0,
    1536,  2731,  1177,     0,     0,  1455,  1235,     0,  1244,  1241,
       0,  1238,  1207,  1427,  1417,     0,     0,   296,   291,   299,
     293,   295,   294,   300,   301,   302,   303,   297,   292,   298,
     290,   289,  2669,     0,  2588,  2593,  2650,  2649,  2672,  2672,
    2672,     0,  1606,     0,  1734,  1160,  1165,  1169,     0,  1161,
    2002,   506,     0,     0,     0,   526,     0,   524,   500,     0,
    1141,  1205,  1751,  1763,     0,  1771,     0,     0,  1748,  1758,
       0,     0,     0,  1757,   486,     0,   258,     0,  2577,  2578,
    2576,  1634,  1612,     0,     0,  1701,     0,  1696,  1198,     0,
    1209,  1208,     0,  2536,  2535,  2531,  2530,  2532,  2512,     0,
       0,  1849,  1637,  1632,  1845,     0,     0,  2718,  1597,  1530,
    1526,  1499,  1526,     0,     0,  1507,  1526,  1503,  1505,     0,
    1604,     0,  1562,  1205,  2072,  1626,  1629,     0,  2792,   386,
     384,   385,     0,     0,   206,   649,   650,   648,   647,     0,
     474,     0,     0,     0,   651,   652,   654,   655,  2002,   481,
     819,   592,   402,   673,   925,  1134,     0,     0,     0,   880,
     667,   583,   924,   889,   881,   583,   583,  1001,  1030,  1031,
       0,     0,   600,   597,     0,   609,   984,   975,   985,   996,
     998,     0,   599,   624,     0,     0,   612,  1728,     0,  1012,
       0,     0,   594,     0,     0,   643,   644,   642,   618,   625,
    1032,  1033,   595,   596,     0,     0,  1619,  1621,  1629,   602,
     601,  1680,  1679,   611,     0,   598,     0,  1018,   991,     0,
     640,   638,   635,   637,   636,   641,   639,   613,   604,   603,
     606,   605,   608,   607,   610,   626,   980,     0,  1034,  1034,
    1000,     0,  2083,     0,  1051,  1002,     0,   656,   669,   657,
       0,     0,   630,   629,   627,   628,   161,   149,     0,     0,
     955,   957,     0,     0,   958,  2769,     0,  2771,  1105,  1106,
       0,     0,  1168,     0,     0,   102,   104,     0,   391,   456,
     409,  2665,     0,     0,     0,  1806,  1799,  1648,     0,  1494,
       0,     0,     0,     0,   821,   832,   830,   824,     0,   828,
     829,  1468,     0,     0,   777,  1480,   741,   774,  1292,   759,
    1286,  1288,  1284,     0,   742,  1287,   774,     0,   827,  1291,
    1283,     0,  1438,     0,     0,  1461,     0,     0,     0,     0,
       0,     0,     0,  1319,     0,  1418,     0,     0,     0,     0,
       0,     0,  1349,  1347,  1348,   836,  1404,     0,   849,   843,
     841,   848,     0,  1634,  2712,   928,  1240,     0,  1428,  1936,
    1960,     0,     0,  2677,  2677,  2677,  1776,  1775,     0,  1774,
    1778,  1162,  1170,  2004,  2003,     0,   504,   507,     0,   499,
       0,   523,     0,   490,   568,     0,     0,     0,  1772,  1760,
    2709,  1749,  1752,  2077,  1525,  1571,  2579,  1189,     0,  1607,
    1700,  1697,     0,  1690,  1692,  1694,     0,  2071,  2494,  2496,
    1851,  1079,  1081,  1531,  1529,  1539,     0,  1495,  1526,  1526,
       0,  1495,     0,     0,  1783,  1623,  1785,  1527,  1559,  1541,
       0,  1630,  1631,  1628,     0,   217,  1205,     0,     0,   207,
     209,   210,     0,     0,   471,   468,   671,   470,   570,   593,
     986,     0,   583,   876,   877,   889,   926,     0,   889,   889,
       0,     0,   974,  1005,  1122,     0,   979,   815,   619,     0,
     970,  1013,  1046,     0,   620,  1007,   972,     0,  1622,   485,
     971,   993,   977,  1958,  1004,  1050,   857,   755,   704,   695,
     774,   698,   697,   774,   709,   759,   757,   727,   759,   759,
     734,   733,   751,   737,   717,   827,   827,   716,   754,   827,
     738,   736,   740,     0,   742,   759,   747,   735,   739,   756,
     732,   729,   753,   774,   774,   774,   713,   752,   827,     0,
     745,   774,   675,   778,   715,   827,   834,     0,     0,   774,
     776,  2082,   147,   152,   163,   164,   946,  2768,     0,  2766,
       0,  1111,     0,  1164,  1569,    99,     0,     0,     0,     0,
       0,     0,  1794,  1357,   772,   770,   773,   771,   823,   822,
     826,     0,   825,   834,     0,     0,  1294,  1289,   743,  1293,
    1285,  1290,  1382,  1360,  1361,     0,  1459,  1450,  1388,     0,
    1337,  1419,     0,     0,  1396,  1367,  1370,  1368,  1373,  1374,
       0,  1403,     0,  1197,  1197,   645,  2725,  1242,     0,  1934,
    2680,     0,     0,  2676,  2674,     0,  2675,  2673,  2641,     0,
    2586,  2587,  2585,  2569,     0,     0,     0,  1205,   512,     0,
     529,   528,   525,  1634,  1762,  1764,  1770,  1759,     0,  1608,
    1623,   808,  1693,     0,  1199,     0,  1508,     0,  1512,  1517,
    1513,     0,  1504,     0,  1648,  1563,     0,  1634,  1629,     0,
     220,   218,   219,     0,   213,   215,   210,  2779,     0,  2786,
       0,     0,  2784,   475,  2709,   587,   653,   571,     0,   988,
       0,     0,     0,     0,     0,     0,  1017,     0,     0,   976,
     997,  1019,  1011,  1010,     0,     0,  1134,  1620,   992,   994,
    1089,     0,     0,   861,   703,   696,   714,   712,   763,   758,
       0,   763,   763,   723,   741,   718,     0,   827,   731,   722,
     743,   746,   748,   750,   763,     0,   827,   711,   710,   720,
     707,   763,   786,     0,     0,     0,     0,   782,     0,   855,
       0,   789,     0,   676,   779,   781,     0,     0,     0,   744,
     827,   700,   835,   834,   702,   827,   834,   763,   763,     0,
     154,   959,   323,  2770,  1180,     0,  2775,     0,  1112,  1108,
    1109,  1104,   103,   135,     0,  1629,   922,     0,     0,  2400,
    1649,  1800,   833,   831,     0,  1462,  1629,     0,  1421,  1423,
     837,     0,  1537,   646,     0,  2647,  2646,  2645,  2642,     0,
       0,     0,     0,     0,     0,  2678,  2682,  1773,     0,     0,
       0,   520,     0,     0,   554,   569,  1616,  1629,     0,  1634,
       0,  1698,  1691,  1532,     0,     0,     0,     0,     0,  1782,
    1551,  1552,     0,     0,  1557,  1561,  1542,  1627,  2783,  2793,
     217,     0,     0,   158,     0,   208,   815,   211,   472,   482,
       0,   477,     0,     0,   987,   670,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1016,  2046,  1049,   486,
    1008,   973,     0,   978,   615,     0,   860,     0,   865,   767,
     768,   769,   724,   764,   766,     0,   726,   694,   719,   749,
     725,     0,   721,   708,   792,   791,  1212,   784,   799,   679,
       0,     0,   790,     0,   780,   788,   783,     0,   699,   701,
     705,   706,   692,   693,  2081,     0,   156,   349,     0,   335,
     321,     0,     0,     0,   325,   165,   168,   166,     0,   167,
     173,     0,   174,   175,   176,   177,   178,   169,   347,   348,
     172,   170,   171,     0,  2097,     0,  2098,  2773,     0,     0,
    2772,  1107,     0,  1114,   892,     0,   921,     0,   894,   896,
    1650,     0,  1205,  1795,   762,     0,  1464,  1335,  1405,  1961,
    2643,  2683,  2686,  2684,  2685,  1652,     0,  2687,  2681,     0,
    1523,  1206,     0,   513,     0,   516,   518,   532,     0,  1767,
    1767,     0,     0,  1767,  1767,  1767,  1767,   547,   555,   557,
       0,  1617,  1618,     0,  1613,  1615,  1609,  1681,   809,  2005,
    2712,  1509,     0,  1514,     0,  1506,  1547,  1547,  1558,   184,
     214,     0,     0,   150,   159,  2787,   797,  2002,     0,  2705,
     990,     0,     0,     0,   658,     0,     0,  2048,  2047,  1006,
     982,  1049,     0,   858,     0,   862,   863,   864,     0,   856,
     765,     0,   929,     0,     0,   798,  1212,   787,  1205,   796,
     795,   793,   794,   155,     0,   148,     0,     0,   334,   337,
       0,     0,   340,   330,   329,   331,     0,   324,   323,   323,
     377,   328,   374,   373,   366,  2709,     0,     0,     0,  1113,
    1118,     0,  1115,  1117,     0,  1767,   118,   893,   913,   912,
     898,     0,  1629,     0,     0,   121,   895,   915,   902,   124,
     897,   914,   900,  1651,  1801,  1629,  1654,  1653,  1779,  1787,
       0,  1992,     0,   521,   514,     0,     0,   530,     0,     0,
    1767,  1767,     0,     0,     0,     0,     0,   527,   556,  1767,
    1629,     0,  1188,     0,  2013,  1533,     0,     0,     0,  1555,
    1553,  2794,   216,  1205,   162,     0,   469,   479,   478,   989,
       0,   664,   892,   660,   662,  1009,     0,   859,     0,     0,
     827,     0,   827,  1213,     0,   785,     0,   157,   350,   361,
     364,   356,   336,     0,     0,     0,   326,   323,     0,   310,
     308,   309,   315,   316,   317,   318,   319,   320,   311,   314,
     312,   313,   323,     0,   225,     0,     0,  2774,     0,  2776,
       0,  1110,     0,   907,     0,  1025,   899,     0,   920,   923,
       0,  1025,   903,  1025,   901,  1463,     0,     0,   808,   508,
     520,   517,   540,   533,   536,     0,   566,   560,     0,     0,
     562,   563,   561,   558,   551,     0,   549,     0,  1614,  1682,
       0,     0,     0,     0,  2006,  2008,     0,  1699,  1511,  1516,
       0,  1548,     0,     0,     0,   194,   193,   185,     0,   323,
    2780,     0,  2788,  2709,   666,   892,   659,   894,   896,     0,
     871,     0,   870,     0,   867,   866,   728,   930,   730,  1214,
     680,     0,     0,   323,   357,     0,   332,     0,     0,     0,
       0,   223,   380,     0,   221,   368,   368,  2777,  2778,  1116,
     906,   119,  1027,  1026,   911,   910,   908,   909,   916,   122,
     125,  1786,  1788,  1993,   515,   540,     0,   538,     0,   534,
     531,   535,   564,   565,     0,   548,     0,   559,     0,     0,
       0,     0,     0,  2007,     0,     0,  2014,  2016,  1550,  1549,
    1564,     0,   195,  2795,     0,   164,   184,   480,   665,   661,
     663,   995,   873,   874,   872,     0,     0,   682,   681,   683,
     358,   364,   354,   362,   323,     0,     0,   322,   341,   376,
     224,     0,   378,     0,   323,     0,   367,   369,   371,  1029,
    1028,  2019,   537,     0,   545,   541,   543,   546,   554,   553,
     550,  1205,  2011,  2012,     0,  2009,     0,     0,  2015,     0,
       0,     0,   146,  2789,     0,     0,     0,   687,   677,   684,
     686,     0,   355,     0,     0,   353,   333,   338,   323,     0,
     323,   236,   235,     0,   227,   304,   375,     0,   226,     0,
    2005,   539,     0,     0,   552,     0,     0,  1685,  1687,  2010,
    2018,  2017,  1556,  1554,  2781,   323,   869,   868,   689,   688,
     685,   359,     0,   323,     0,   323,     0,   323,     0,     0,
       0,     0,     0,   222,     0,  2013,   544,   542,  1206,  1683,
    1205,   323,  2790,     0,   351,   323,   339,   344,   381,     0,
     230,   305,   306,     0,   233,     0,  2021,  1688,  1686,  2782,
     323,   323,   340,   343,   379,     0,     0,   228,   229,   241,
     240,   232,     0,  2020,     0,  2025,   323,   323,   345,   249,
     247,   323,   237,   245,   239,     0,   246,   307,   234,     0,
       0,  2032,     0,   231,   248,  2023,  2024,  2022,  2027,     0,
       0,  2029,  2030,     0,  1994,   238,  2031,  2026,     0,  2033,
    2035,     0,  2028,     0,  1205,  2034,     0,  1206,  2036
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    59,   624,  1534,    60,    61,    62,    63,    64,  1375,
      65,   837,  1293,  1840,  1841,    66,   564,    67,  1601,  2159,
    2160,  3504,  3505,  2161,   662,   663,    68,  2533,  3512,  4445,
    3513,  4451,  3514,  4453,  1618,   627,   535,  2099,  2100,  1538,
    3363,  3083,  3990,  3087,  4146,  4295,  4253,  2117,  3494,  3991,
    3992,  4155,   559,  2531,  1573,  4381,  2079,  4497,  2080,    69,
     660,  1083,  1598,  1599,  3668,  3669,  3901,  3670,  3893,  3894,
    3895,  3896,  4614,  4417,  4534,  4615,  4700,  4735,  4741,  4742,
    4663,  4751,  4752,  4753,  4739,   914,  4754,    70,   587,   588,
     916,  1405,  1855,  1406,    71,    72,   558,  1319,  1320,  1321,
    1322,  2372,  1856,  2367,  2368,  3260,  4664,  4737,  4418,  4419,
    4302,  4420,  4158,  4421,  4306,  4422,  4161,  4423,  4424,  4425,
    4426,  4606,  4427,  4301,  4656,  4414,  4415,  4658,  4717,  4733,
    4428,  4168,  4296,  4521,  4169,  4297,  4601,  4410,  4602,  4651,
    4713,  4411,  4522,  4654,  4525,  4429,  4435,  4616,  4430,  4436,
    4431,  4173,  4313,  4434,  4311,  4433,  4660,  4611,  2967,  3362,
     647,   648,   675,  2185,   649,  1099,  1053,  1575,  2112,  2113,
    2568,  2569,  2682,  2683,  2684,  2104,  2105,  2106,  2171,  2172,
    2173,  2086,  2087,  2088,  1579,  2083,  2084,   650,  1054,  1064,
    2107,  2108,  2109,  2688,  2175,  2176,  2177,  2178,  2110,  1833,
    2111,  2988,  2973,  3905,  3904,  2974,  3677,  4259,  4503,  3378,
    3379,  3070,  3444,  2130,    73,   576,   894,  1372,  2416,  1373,
    2418,  2849,  2850,  2851,  1905,  1906,  3858,  1910,  2415,  4041,
    4460,  4214,  4215,  2853,  4213,  2857,  3286,  3287,  3610,  3860,
    4044,  4465,  4356,  4560,  4463,  4556,  4464,  4558,  4673,  4625,
    4626,  4367,  4475,  4476,  4564,  4628,  4227,  4228,  4229,  2436,
    2863,  3863,  3908,  2165,  1565,  1566,   628,   629,   630,  3392,
      74,  2975,  2625,  2976,  2977,  3467,  2627,  2628,  2817,  1463,
    3457,  3428,  3833,  3369,  3373,  3374,  3375,  3376,  3377,  4392,
    4507,  4508,  4505,  3477,  3390,  3003,  3004,  3075,  3480,  3762,
    3972,  4599,  4648,  4649,  4650,    75,   891,  4076,  3940,  3955,
    3764,  3765,  3766,  3767,  3768,  3769,  3770,  3160,  3161,  4112,
    4113,  4114,  3155,  3156,  3535,  3973,  3974,  3975,  4077,  4127,
    1214,  3528,  1429,  1430,  4051,  1441,  1442,  2464,  1950,  2465,
    1569,  3529,  3530,  3531,  3984,  3219,  3830,  3225,  3226,  3227,
    2780,  2781,  2782,  2783,  2784,  2310,  3976,  3479,  3933,  4105,
    4108,  4279,  4514,  3005,  3391,  3006,  3395,   996,   536,  3007,
    3008,  2191,  2192,  4326,  4335,  4339,  4327,  4340,  4336,  4328,
    4329,  4330,  4342,  4338,  3140,  4004,  4005,  3383,  3393,  3235,
    4281,    76,   130,  2115,  1045,  1056,  1052,  1075,   655,  1585,
    2118,  2643,  3776,   637,  2629,  3926,  3694,  3930,  2630,  3407,
    2631,  3909,  4084,  2632,  3711,  3928,  4102,  3408,  3409,  2633,
    2634,  2635,  3918,  3925,  4271,  4541,  4542,  4543,  3009,  1354,
     652,   653,  1068,  1069,  1070,  2358,  3475,  3053,    77,  2038,
    2033,    78,  1008,  1009,  1010,  1509,  1510,  2036,  2037,  2506,
    2939,    79,   665,  1605,    80,  1383,  2428,  2429,  2430,    81,
    1076,  1589,  1590,  2124,  3092,  3500,  3781,  4001,  4183,  3997,
    4321,  4322,    82,    83,   666,  1612,  1613,  1614,    84,  1366,
     137,    85,   902,  1378,  1380,  1381,    86,   659,  1077,  1078,
    1079,  1080,  2126,    87,  1896,  2400,  2401,  2402,  2403,  1595,
    2647,  1596,  1597,  2135,  3279,    88,    89,   621,  2318,   593,
     926,   594,   595,  1944,  2455,  3834,   937,   938,   939,  2892,
    1419,  1420,  1421,  1902,  2897,  4285,  1146,  1142,   800,   801,
     802,   803,  1239,  1240,  3977,   804,  1249,  1799,  3172,  3550,
    1658,  1659,   805,   806,   807,   808,   809,   810,  1826,  3191,
    3192,  3565,  2345,  2346,  2347,   811,  2232,  3178,  2245,   812,
    1232,  1784,  1714,  3557,  3184,  3815,  4015,  1643,  2208,  2729,
    3163,  2813,  2312,  1168,  1169,  1127,  2215,  1649,  2044,  2045,
    2046,  2047,  2048,  3652,  3653,  4054,  3877,  4056,  3881,  2516,
    2517,  1925,  1926,  2049,  2050,  2940,  3875,  4240,  2313,  2314,
    2315,  3583,  2941,  3340,  2958,  2959,  3887,  2507,  2051,  2947,
    4379,  4063,  4064,  4494,  4493,  4065,  3885,  3886,  3657,  3658,
    3095,  3096,  3097,  2877,  1705,  1706,  1712,  1349,  1350,  1644,
    2397,  2837,  3870,  4048,  2336,  3629,  4046,  4234,  2638,  3436,
    3437,  2457,  2458,  2962,  3355,  3663,  1466,  3835,  2839,  2003,
    2927,  2928,  3792,  4207,  4740,  2785,  2923,  2989,  1676,  1677,
    3443,  4372,  4568,  4676,  4677,  4678,  3315,  3316,  3633,  3634,
    2459,  2889,  3317,  3871,  4239,    90,   540,    91,  1838,  2816,
    1290,  2364,  1087,  1385,  1630,  1631,   824,   554,    92,   565,
    2398,    93,   583,  1923,   881,   906,  1386,  1387,  2437,  2864,
    2871,  2438,  2876,  3620,  2866,  3292,  3293,  2353,  2354,  2867,
    3295,  3617,  3598,  3599,  3274,  3855,    94,   609,  3350,  2953,
    2954,  4348,  4349,   907,    95,   539,  1114,  2705,  4011,  1636,
    2196,  4193,  1115,  1116,  2199,   684,   685,    96,  1013,   605,
    1489,  1490,  1491,  2021,    97,   597,   997,  2924,  3333,  1997,
     898,  1285,  1470,  1000,  1471,  1983,  2487,  1452,    98,  1041,
    1040,  1560,    99,   633,  1561,   100,   838,  1313,  1851,  2823,
    2824,  3245,  1314,  1315,  2365,  3839,   101,   584,   911,   912,
    1390,  2441,   102,   578,   899,  1916,   103,   568,   886,  1358,
    1895,   104,   105,   106,   888,  3280,  4458,  4621,   572,  1898,
    1362,  3678,  4374,  4484,  4485,  4487,  4576,  4577,  4670,  4745,
    4767,  4761,  4770,  4771,  4774,  4779,  4780,   814,  1022,   815,
    4096,   816,   817,   818,  2872,  2873,  3356,   819,  2874,   820,
    3076,  1088,  1633,   562,   514,   644,  1023,  2845,   822,  4175,
    1048,  1287,  1106,  1107,   516,   517,   107,   596,   954,  1446,
    1436,  1445,  1970,  2481,  1974,  2483,  2484,  3329,  2915,  3330,
    2916,  1002,  1966,  1971,  2917,   957,  1959,  1960,  1961,  1962,
    2908,  1956,  1980,   108,   889,   521,  1364,  1365,  2409,   109,
     608,   110,  1351,  1888,  1889,  2394,  2836,  2395,   111,   920,
     921,   112,   866,  1622,  2378,  1101,  1051,  1102,  1874,   869,
    1325,   870,   871,  1340,  1334,  1343,  1337,  4029,  3847,  3848,
    2382,  1289,  1108,  1935,  2189,  3136,  1109,  1865,  2374,  2375,
    3593,  3850,  3264,  4035,  4036,   113,   138,   524,   668,  1094,
    1413,   114,   115,   116,   117,  1416,  1529,  2451,  1530,  2319,
    1531,  1532,  2058,  1942,  1780,  1781,  3233,  1229,  1230,  2322,
    2789,  2790,   940,  1034,  1548,  1540,   131,   132,   133,   134,
    1073,  1074,  2644,  3089,  3496,  3779,  3780,  3996,  4180,  1542,
    4072,  4584,  4711,  1543,  1544,  3364,  4074,  4385,  4586,  4685,
    1545,  2964,  3665,  4249,  4499,   118,  1024,   618,  1527,  1522,
    1524,  2054,  2524,   119,   120,   121
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -4078
static const int yypact[] =
{
    6335,  2243,   890, -4078,  -184,  1057, 57515,   721,  1171,  1171,
     539,  3329, -4078, -4078, -4078, -4078, -4078,  2978, -4078, 57515,
     890,  1238, -4078, 25732, -4078, -4078,   -66, -4078,    50,  1171,
     890,   784, -4078, 57515, -4078,  1016,  1296,   890, -4078, -4078,
   50530, -4078,   539, 57515, -4078, -4078, -4078, -4078, 50530,   207,
     240,   952,  1123, -4078, -4078, 57515,  2203, -4078,  -171,  1557,
    1514, -4078, -4078,  1389, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078,  1476, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, 26370,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078,  1682, 57515,  1694, 57515,  1710, 57515, 48625, 57515,
   -4078,  1764, -4078, -4078,  1806, -4078, -4078,  1171,   539, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078,  1303, -4078, -4078,  -184, -4078,
   -4078, -4078, -4078, -4078,  1971,  1766, -4078,  1801,  1572, -4078,
   48625, -4078, 57515, -4078, -4078, -4078,  1792,  1807,  1827,    81,
   12109,  1844,  1844,  1844,  1844,  1869,  1844, -4078,  1844, 57515,
   -4078,  1844, -4078,  1844,  1171, -4078, -4078, -4078,  1932, 36560,
   57515,  1705,   203,  -129, 48625,  1515, 57515,  -184,    47, -4078,
    1857, -4078, -4078, -4078,  1171, -4078,  2045,  1901,   248, 57515,
   -4078, -4078,  1171,   233,     4,  1504, -4078, -4078,  1633, -4078,
   37195,   230, -4078, -4078, -4078,  2292, 28284,  7246,  1633,  1630,
    -184,  -133,  1632,  -184, -4078, -4078, 57515,  -184,  1171,  1849,
   -4078, -4078,   272,   272,   272, -4078,   272, -4078,   272, -4078,
    -171,  1506, -4078, -4078,  1531, 57515, -4078,   322,  1606, -4078,
    1614,  2026,  2198, -4078, -4078,  1533,   -36, -4078,  1599, 41005,
   -4078, 57515, -4078, -4078, -4078, -4078,  1831, -4078, -4078, -4078,
    1982, -4078,  1690,  1278, 57515,  1725, -4078, -4078, -4078, 25732,
    1567, 57515,  1680, -4078, -4078, 25732, 25732,   232,   753,  1402,
   57515, 57515, -4078, 45450,  2043, -4078,  2252, 41005,  1766,  1766,
    1766, -4078, -4078, -4078, 51165,    81,  1616,  1618,  1628, 17365,
   -4078,  1634,  1647,  1653, 12109,  1678,  1689,  1701,  1704,  1720,
    1722,  1726,  1728,  1731,  1733,  1736,  1746,  1756,  1758,  1758,
    1758,  1773,  1786,  1802,  1812,  -213,  1815, -4078,  1817,  1829,
    1837, -4078, -4078,  1843,  1847,  1855, -4078, -4078,  1867,  1873,
    1879, 12766,  1882,  1891,  1906, -4078, 22530,  1916,  1921,  1923,
    1929,  1938,  1946,  1978,  1980,  1984, -4078, -4078, 12109,  1773,
   -4078, -4078,  2004, -4078,  2010,  2015,  2022,  2024,  2035,  2039,
    2046,  2050,  2053,  2064,  2082,  2084,  2099,  2102,  2104,  2111,
    2113,  1773, -4078,  -205,  2116,  2118,   482,  2120, -4078,  2123,
   -4078,   291,  2127,  1758,  1773,  1773,  2140,  2143,  2165,  2168,
    2183,  2204, 17365, 17365, 17365, 12109, -4078, 57515, -4078, 57515,
     796,  2854, -4078,  2522, 17365,   214, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078,  1643,  1740, -4078, -4078, -4078, -4078, -4078,
   -4078,  2208,  1624,  2184, 57515, 57515, 57515, 57515, 57515, 57515,
   45450, 48625,  1881, 57515, 46085, -4078,  1844,  1799,  4533, 31469,
    2044,  1944,  1243,  1758, -4078, -4078,  -110,   681,   726,  2109,
   -4078, -4078,  1957,   809,  2098, -4078,   841,   402, -4078,    88,
     877,   891, -4078, -4078, -4078, -4078, -4078, -4078,  2074,  2279,
    2025, -4078, -4078,   173, -4078, -4078, 57515, -4078, -4078, -4078,
   -4078,  2496,  2352, -4078, -4078, -4078,   166,  2818,   222, 25732,
   -4078,  2222, 12109,  1538, -4078,   597, -4078, -4078,  2595, -4078,
   -4078, 46085, 25732, -4078, -4078, -4078, 23170, -4078, -4078,  2840,
   -4078,  2241, -4078, -4078,  1740,  3306, -4078,  2516,  2044,  2531,
   -4078,  2723, -4078,  2551,  2452,   753,  2340, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078,  2290,  2292, -4078,
   -4078,   390,  2446,  2280,   440,   463, 40370,   795, 48625,   530,
      37, 28921, 41640,  2281, -4078, -4078, -4078,   116,  2436, -4078,
    2773, -4078, -4078,   733, -4078,  2295,  2474,   733, 46720,  2673,
     184, -4078,   171, -4078,  2754, -4078, -4078, -4078, -4078, -4078,
    2422,  2404,  2453, -4078,   258,  1020, -4078,  -184, -4078,    13,
   -4078, -4078,  2429, -4078,  2673,   733,   184, -4078,  2679,  2805,
     794,  2772,  -174, -4078, -4078, -4078,   755,  2880, -4078,  2318,
   -4078, -4078, -4078, 25732, -4078, -4078, -4078,  2496, -4078, -4078,
   -4078, -4078,  2319, -4078,  2598,  2428, -4078, -4078,    66, -4078,
    2327,   -32,  2824, -4078, -4078,   350,  1331,  1806,  1766, -4078,
    2231, 42275, -4078, -4078, -4078,  2856,  2873,  1758,  2336, -4078,
   -4078, -4078, -4078, -4078,  3001, -4078, -4078,  2355,  2893,  2893,
    2893,  3009, -4078, -4078, -4078, 25732, -4078, -4078, -4078,  1278,
   -4078, -4078,  2530,  2401, -4078,  1725, 25732,  2771,  2380, -4078,
   -4078,  2636, 12109, -4078, -4078, -4078,    53, -4078, -4078,   268,
   -4078,  2982,  2596, -4078, -4078, -4078, -4078,  2870, -4078, -4078,
    3001,  -217, -4078,  2931,  2893,  2828, -4078,  2829,  2397, -4078,
   57515, 57515, 57515, 25732, -4078,  2403, -4078,  2395, -4078, 12109,
   12109,  1127,  2990,  3051,  3051,  3051,   796,  2438, 12109, 12109,
   12109, 12109, 12109, 12109, 12109, 12109, 12109, 12109, 12109, 12109,
    1550,  2414, -4078, -4078, -4078,  2078, -4078,  2416, 12109, 12109,
   -4078, 12109, 12109, 27008, -4078,  3898, 12109,   327,  2927, 12109,
   12109, 12109, 12109,  3033, 12109, 12109, 12109, 27008,  3065,  2421,
   -4078,  2419,  1617, 12109, 12109,  1664, 12109, 12109, 12109, 12109,
   12109, -4078, -4078, 12109, 12109, 12109, 12109, 17365, 12109, 12109,
   12109, 12109, 12109, 12109,  2423, 12109,  3051,  3051, 12109, 12109,
    1681, -4078, -4078, 12109,  2560,  2560, -4078, 12109,  8824, 12109,
   -4078, -4078, -4078, -4078, -4078,  2434, -4078, -4078, -4078, 27008,
    3051,  3051, 12109, 12109, 12109,  2990,  2990,  2990,   237,  2435,
    -112, 12109, 29558,  2430, -4078, -4078, -4078, -4078, 12109, 12109,
   12109, -4078, 17365, -4078, -4078,   897, -4078, -4078, -4078, 13423,
   17365, 17365,  2443, 17365, 17365, 17365, 17365, 17365,  2821, 17365,
   17365, 18022, 18679, 17365, 17365, 17365, 17365,   228,  2990, 48625,
   17365, 12109, -4078, -4078, 57515, -4078, -4078, -4078,  2437,  2725,
    1881, -4078,  2447, -4078,   783,  2939, -4078, -4078, -4078,  2449,
   25732, -4078,  2448, -4078,  2817, -4078, -4078,  2827,  2830,  2831,
   -4078, -4078, -4078, -4078, -4078,  3058,  2832, -4078,  -184,  2833,
   -4078, -4078, -4078, -4078,  2461, -4078, -4078, 19336, 48625, -4078,
    2469, -4078,  2959, -4078, -4078, -4078, -4078, -4078, -4078,  2573,
   -4078, -4078, -4078, -4078,  2476, -4078, 46085,  2476, -4078, -4078,
    2476, -4078, -4078,  2476, 41005,    57,  3759, -4078, -4078, 57515,
   -4078, 58150, -4078, -4078, 23170,  -184, -4078,  2900, 14080, -4078,
   -4078, -4078,  2848,   281,  2477, -4078, 25732, -4078,   796, -4078,
     113,   113,  2732,   168, 48625, -4078, -4078,   175,  2485,  2569,
    2490, -4078,  2572, 25732, 25732, -4078, -4078, -4078,  2747, -4078,
    -184,     4, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078,  2495,  2987,  2951,  2499, 46085,
   41005,   776, -4078, 57515, -4078,  1735, -4078, -4078, -4078,  2506,
   -4078, 12109, -4078, -4078, 57515, -4078, -4078, -4078, -4078, -4078,
    3090, 12109, -4078, 46085,   -78, -4078,    86,  1045,   116, -4078,
   -4078, -4078, -4078, -4078, 57515, 51800,  2519,  9481,  2642,  2922,
    -184, 12109, -4078,  2533,  1766, 57515, 57515, 57515, 25732, 57515,
   25732, -4078,  1217,  1217, -4078, 42910, -4078, -4078, -4078, -4078,
     733, 57515, 57515,   733, 41005, -4078,   184,   -15, 57515,   733,
   -4078,  2925,  2632, -4078, -4078, -4078,  2999, -4078, -4078,  2991,
    2534, -4078,  3020, -4078, -4078,  2659,   184, -4078, -4078, 25732,
   -4078, -4078,   184, -4078,   184,   184, 12109,   733,   733, -4078,
    1315, -4078, -4078, -4078,  2686,  -133, -4078, -4078, -4078,  1003,
     272,  2791, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078,    76, -4078, -4078, -4078, -4078, -4078, -4078,   220,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078,   234, -4078, -4078,
   -4078, -4078, -4078,  1725, 25732, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078,    70, -4078, -4078, -4078,  2105,
    3055, -4078, 48625,  2388,  -124,  1400,  2388,  1709,  -184,   694,
   -4078,   694, -4078, -4078, -4078,  2822,  1272, 25732, -4078,  2544,
   -4078,  2796, 52435, 25732, -4078, -4078, -4078,   176,  2556,  2559,
     796,  4004, -4078, -4078, 25732, -4078, -4078, -4078, -4078,  2613,
   -4078, -4078, -4078, -4078,  1187, -4078, -4078, -4078,    79,  1638,
    3209, 45450, -4078,  2584,  2612,   143, 41005, -4078, -4078, -4078,
    2566, -4078,  2747, -4078,  1294, 57515,  3023, 34013, -4078,   315,
     441, -4078,  3051,  2570, -4078,  2571,  2575,  2576, 12109,   120,
     304,   472,  1134,  1449,   700,   372,   982,   493, -4078,  1474,
     497,   532,   550,   201, -4078,  2577,  2578, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078,  2579, -4078, -4078, -4078,   564,
     658,  1247,  1307,  2580,  2583, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078,  3028, -4078,  1503, -4078, -4078,
   -4078, -4078,  2585, -4078, -4078,  1362,   664,   696,   351,  2591,
    1587,   758,  1602,  1637,  2588, 27008, 57515,  3051,  2594,  1368,
    1376,  3051,  2597,   777,  1393,  1669,  1671,  1695,  1411,  1413,
     871,  1742,  2859,  1423,   884,   895,  1429,   913,   930, -4078,
    1486,  2599,  2601,   956,   254,  3051,  2602,   363,  2603,  2611,
    1494, 10138, 10795, 11452,   285,   978, -4078,  2614, -4078,  2419,
    2617,  2618,   374,   195,  1511, -4078, 12109, -4078, -4078,   640,
    1001,  2637,   148,  1045, -4078,  2755, 57515,  2417,   205, -4078,
   -4078, -4078, -4078, -4078, -4078,  1102, -4078,  2622, -4078,  2624,
    2075,  2616, 12109,  1160,  2616,  3099,  1327,  1327, 17365,  2558,
    2641, 12766,   751, 12766,   751,  2616,  2616,  2616, -4078, 17365,
    2626, 17365, 17365, -4078,  2990,   796,  2627,  -229, 57515, 25732,
     783, -4078, -4078, -4078, -4078,   116, 46085,   133, 25732, 48625,
    2625, -4078, -4078, -4078, -4078, -4078, -4078,  -184, -4078, -4078,
    4625, 25732,  2687,  2689,  2719, -4078, 32106, -4078, -4078, -4078,
   -4078, 32106,   -26, -4078, 57515, -4078,  2712, -4078, -4078, -4078,
    1214, 23808, 23808, -4078, 23808, -4078, -4078, -4078, -4078, -4078,
     402, -4078, -4078, -4078, -4078,   252,   316,  2721,  2669, -4078,
   -4078, -4078, -4078, 33378,   796, -4078, 25732, -4078,  3057,   785,
   25732,  2645, -4078,  2650, -4078, -4078, -4078, -4078, -4078,  3342,
    2762, -4078,  3296, -4078, 12109,  -184, -4078, 46085, 46085, 25732,
   25732,   736, -4078,  1230,  2656, -4078, -4078,  3299, -4078,  3306,
   19336, 45450,  3102,  3115, -4078,  2660, 23808, 23808, 23808, -4078,
   -4078, -4078, -4078, -4078,   137,   796, -4078,  2657, -4078, 47355,
   -4078,   796,   116,  2664,  2668, -4078, -4078,  3054,   761, -4078,
    2670,  2672, -4078,  2671,  2675,  2676, 53070, 12109, -4078,    86,
   -4078, -4078,   116, -4078, -4078, -4078, 17365,  1817, -4078,   796,
   -4078, -4078,  -184,  3131, -4078,   796,  2677, 57515, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078,  3157, -4078,  2860,  -109, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078,   733, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
    2912,  2673,  1020,  2922, -4078,   733,   184, 25732,   733,   733,
     796, -4078, -4078, -4078, -4078, -4078,  2684, -4078,  2740, -4078,
   -4078, -4078, -4078, 57515,  2718,  2853, -4078,  2693, -4078, -4078,
   25732, -4078,  2694, -4078,  3154,  3303,  2673, -4078, -4078,  3160,
   57515, 57515,  1766, 57515, 57515, -4078, -4078, -4078,   116,   116,
    3008, -4078,  -184,  2849,  2858,  2879,  2884,  2885,  2901, -4078,
   -4078,  -184,  -184, -4078, -4078,   116, -4078,  1150, -4078, -4078,
   -4078, -4078,  -184,  -184,  -184,  -184,  3358,  -184,  -184,  1782,
   -4078, -4078,   116,   116, -4078,  1828, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078,  1471, -4078,  5490,   534, -4078,  2964, -4078,
   -4078, -4078, 25732,  3220, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078,  2767, -4078, -4078, 12109,  3260,  3267,
    3269,  3270,  3272,  3275,  3279,  3280,  3281,  3283,  3286,  3291,
    3293,  3295,  3297,  3298,  3300,  3302,  3307,  3310,  3311,  2810,
   -4078, -4078, -4078, -4078, -4078, -4078,   153,   116,   116,   116,
     116, -4078,  2337, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, 41005, -4078, 48625,  3185,  2311,  1135, -4078, -4078, 48625,
   -4078,   701,  3106,  3110,  3112, 57515,  2881, -4078, 34013, -4078,
   -4078,  1003, -4078,  2837, 14737, -4078,  2836, -4078, 12109, -4078,
   -4078, -4078,  1621, 12109, 12109,  3318,  2445, -4078, 47990, -4078,
   -4078, -4078, 12109, -4078, 12109, -4078, 12109, 12109, 12109, 12109,
   47990,  2445, 12109, -4078,  2838, -4078,  3242,  3250, -4078, -4078,
   -4078, -4078, 12109, -4078, 12109, 12109, -4078, 12109, 12109, 12109,
   12109, -4078, 12109, -4078, -4078, 17365, -4078,  2857,  2847, -4078,
   -4078, -4078,  2863, -4078, 12109, -4078, -4078, -4078, -4078, -4078,
   -4078, 12109, -4078, 12109, -4078, 12109, 12109, -4078, 12109, 12109,
   -4078, -4078, -4078, 15394, 12109, 12109,  2866, -4078, -4078, 12109,
   12109, 12109, -4078, 12109,  1218, 12109,  2091, 12109,  2128, 12109,
   -4078, 12109, -4078, -4078, -4078, -4078, 12109,   348,  3342,  3358,
    2867, -4078,  1795, -4078, -4078,  1713, -4078,   640,  2872, -4078,
   -4078,  1735, -4078, -4078, 48625, 12109, -4078, -4078, -4078, -4078,
   -4078, -4078, 17365,   384,  2874, 17365, -4078,  3099,  3033,  3033,
    2193, 12109,  1160,  3099, 12109,  2882,  2869, -4078, 12109, 57515,
   -4078, -4078, -4078, -4078, 48625, -4078, -4078, -4078, -4078,   133,
   -4078,  2448, -4078, -4078,  2645,   211,  3361,  2887, -4078, -4078,
   -4078, -4078, -4078, -4078,  1804, -4078, 41005,  3526, -4078,  2876,
   -4078,  2883,  2961,  2965,  2971, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078,  2673,  1230, -4078,
   -4078,  2896, -4078, -4078,  2636,  2989,  2919,  3273,  3473, -4078,
   -4078, 57515, 17365, -4078,  3523,  2920,  2921,  3412,  2928,   796,
   -4078,  3011, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
     816, -4078, -4078,  2930,  2930, 21252, -4078, -4078, -4078, 57515,
   -4078, -4078,  3422, -4078, -4078,  3206, 46085, 41005,  3391,  3392,
    3393,   657, -4078,   805, -4078,   158,  3343,  2673, -4078,  3398,
   49260, -4078, 34648, -4078, -4078, -4078, -4078,   -78,  3035,  3038,
     -55, -4078, -4078,  3346,  3179, -4078, -4078, -4078,   116,   796,
   -4078,  2519,  9481,  2957, 30195, -4078,  2155, -4078,    55, -4078,
   43545,  3437, 43545, 43545, -4078,  3244, -4078, -4078,  3131, -4078,
    2669,   184, -4078, -4078,  1315,  1823, -4078, -4078,  1006,  3355,
    3357, -4078,  3229,  1383,  3229, -4078, -4078,  1006, 27008,  1003,
    2747, -4078,  3358,  3285, -4078, -4078, -4078, 57515, -4078,  1174,
   57515,  2968,  -156,  4679, 47355, 44180, -4078, -4078, -4078, -4078,
    3504, -4078,  3505,  1483, -4078, -4078,  3114,  1400, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078,  1709,  3114,  3114,   694, -4078,   152, -4078,
   -4078, -4078, -4078,  2878,   116,  3546,  3230,   116,   116,  3546,
     116,  3231,  3234,   116,   116,  3063,  3498,   116,  3380,  3091,
    2270,  3386,   116,  3252, -4078,  3096,  3511,   116,   116,   116,
     116,   116,  3546,  3256,  3610,   116,   116, -4078,   116,  3271,
    3274,   181,  3278,  3282,   116,   116,   116,   116,   192, 57515,
     116,   116,  3284,   116, -4078, -4078,  5769, -4078, -4078, -4078,
   -4078, -4078, -4078,  1107, 24452, -4078, -4078, -4078, -4078,   116,
       7,   332,  3086,  1839,  3016, -4078,   353,  3022, 53705,   796,
    3026,  3358,  -184,  -184,  2155,  -184,  3358,  -184,  -184,  -184,
    -184,  -184,  -184,  -184,  3358,  3358,  -184,   844,  2172,  -184,
    3358,  4004,  -184,  3342,  3114,  3114,  1638, -4078, -4078,  3301,
    3467,   116, -4078,  2227, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078,  3118, -4078,   169,   409,   409, -4078, 25732,
   25732, 25732, -4078,  3024,  1003,  2669,  1437,  2669,  3040, -4078,
   12766,  1560, -4078,   796, 12109,   796,  1858, -4078,  3037,  3037,
    3037, -4078,  3039, -4078, -4078,  3037,  3435,  3037,  3440,  3041,
    3045,  1848,  2180, -4078,  1850,  2185,  1565,  3049,  3052,  1643,
   -4078, 12109, 12109,  1571,  1584,  -136,   986,  1024,   401, -4078,
    1595,  3017, -4078, -4078,  1605,  1650,  1654,  1663,  1036,  1668,
    1863, 12766,  1691,   219,   454, -4078,  1714,  1072,  1113,  1754,
   12109,  1759, 12109,  1767, 12109,  1776,  1803,  1808,  3066,  3066,
     159, -4078,  3056, -4078, -4078, -4078,  3067, -4078, -4078,  2290,
    1713, -4078, -4078,  3064, -4078, -4078,  3060,   796,  3072, -4078,
   -4078, 12109, -4078,   214, -4078, -4078, 17365,   483,  3073, -4078,
     796, -4078, -4078,  3075,  1643, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078,  3263, -4078, -4078,  3802, 32106, -4078, 57515,  1289,
    3347,  3083, 35283, 41005, 41005, 41005,  3079, 12109, -4078, -4078,
    3362, 25732, -4078,  3499, -4078, -4078, -4078, -4078, -4078,  3085,
    3078, -4078, -4078, -4078,  3099,  3462,  3351, -4078, -4078,  3342,
   57515, 46085, -4078,  2292, 27008, -4078,  3087, -4078,  3087,  1501,
    3100,  1868, -4078, -4078, -4078,  3095,  2340,  1886, -4078, 19336,
    3558,  2449, -4078, 41005, 41005, 41005, -4078,  2669,  2669,   947,
    3159,  3510, -4078, -4078, -4078, -4078, 54340, -4078, -4078, -4078,
   -4078,  1268, -4078,  3104,  3117,   224,  3333, -4078, -4078, -4078,
   -4078,  9481, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078,  2673, -4078, -4078, -4078, -4078, 43545,
   -4078, -4078, -4078, -4078, -4078,   733, -4078,  3602, -4078,  3119,
    -225,  1001, -4078,  1401, -4078, -4078, -4078,  3517,  3229,  3229,
    1006,  3518,   923,  3133, -4078,   116, -4078,  3107, -4078,  2292,
   -4078, -4078, 12109,  3321,  3136, -4078, -4078,   139, -4078, -4078,
     942, 25732, 19976, -4078, -4078,  3390, -4078,  3740, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078,  1471, -4078, -4078,
   27646,  1766, -4078,   307, -4078,  1766, -4078,   176,   176,  1766,
   54975, 27646,   890,  2155,  3358,  1844,  3358, 55610,   890,  -184,
    -184,  2493,   116,  3358, -4078, -4078,  3528,  1844,  3529,  1844,
    1844, -4078, 48625, 57515, -4078,   116,  1352,  3358, 56245,  2155,
    2155,  1844,   890, 27008,  2653,  2820, -4078,  -184,   890, -4078,
   -4078, -4078, -4078, 25732,   890,   890,  2826,  3190,  3232,  3258,
   -4078, -4078, -4078,  3358,  2820, 55610, -4078, -4078,  3955, -4078,
   -4078, -4078, 20614, 57515,  1041,   537, -4078,  3132, 38465,  3382,
   -4078, 12109, 12109,  3418, 57515,  3424, -4078,  3715, 57515,  3785,
   -4078,   146, -4078, 55610, -4078,  3152, -4078,  3153, -4078,  3358,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,  3162, 57515,
    3114,  2311, -4078, -4078, -4078, -4078,  -184, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, 34013,  2669,  3421, -4078, -4078,
    3033, -4078,   796, 12109,    97, -4078, -4078,   208, -4078,  1319,
   -4078, -4078, -4078,  3163, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078,  2543, -4078, -4078,  2445, -4078, -4078, -4078,  3156,  3033,
    3033, -4078, -4078,  3763,  3330, 12109, 12109, -4078, 12109, -4078,
    1070,  3167,  3192, -4078, -4078, -4078, -4078, 12109, -4078, -4078,
    3033, -4078, 12109, -4078, -4078, 12109, -4078, 12109, 12109, -4078,
    1821, -4078,  1860, -4078,  1880, -4078, -4078, -4078,  3342,  3170,
    3551, -4078, -4078, -4078,  3342,  3359, -4078, -4078,  3342,  3358,
    2506, -4078, -4078,  -112, 57515, -4078, -4078,  1907, -4078, -4078,
   12109, -4078, 49260, -4078, -4078,  3647,  3543, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078,  3619, -4078, -4078, -4078, -4078,  -157,  -157,
    -157, 16051,   796,  3679, -4078, -4078, -4078,  3499,  3565, -4078,
      48, -4078, 57515,  3182,  1007, -4078,  1942, -4078, -4078,  3183,
   -4078,  2290,  3184, -4078,   116, 16051,  2930,  3353, -4078, -4078,
    1501, 27008, 34648, -4078, -4078, 57515, -4078, 41005,  2660,  2660,
    2660,  2673,  3627,  2989,  2989, -4078, 30832, -4078, -4078,  3350,
   -4078, -4078, 35918, -4078, -4078, -4078, -4078, -4078, -4078, 30195,
   53070, -4078, -4078,  2673, -4078,  -184,  2029,  1735,  3334, -4078,
    1003, -4078,  1006,  3581,  3582, -4078,  1006, -4078, -4078, 27008,
    2669, 16051, -4078,  2290,   796,  3191,   306,   942, -4078, -4078,
   -4078, -4078,  3472,  3474, 57515, -4078, -4078, -4078, -4078,  3338,
   -4078, 25732,  3199,  3208,  3211, -4078, -4078, -4078,   886, -4078,
    6612, -4078, -4078, -4078, -4078,   890,  3218,  3601,  3611,   176,
   -4078,  1766, 27646, -4078, -4078,  1766,  1766, -4078, -4078, -4078,
     933, 55610, -4078, -4078, 27646, -4078, -4078, -4078,  3223, -4078,
   -4078,  3342, -4078, -4078, 44180,  -184, -4078,  1844, 57515, -4078,
   27646, 27646, -4078,  3249,  -184, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, 27646, 55610,  3226, -4078,   306, -4078,
   -4078, -4078, -4078, -4078,  2045, -4078, 55610, -4078, -4078, 55610,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078,  3233,  2889,  1665,
   -4078,  3228, -4078, 57515, -4078, -4078, 25732, -4078, -4078, -4078,
    7796, 57515, -4078, -4078, -4078, -4078, -4078,   796,  3033,  3798,
   -4078, -4078,  3385,  -184,  3742, -4078,  1960, -4078, -4078, -4078,
    3651,  3238, -4078, 53705,  1975, -4078, -4078,  1709, -4078, -4078,
   -4078, -4078,  3240,  3246,  3247,  2837, -4078,  3624,  -242,   796,
    3248,  3251,  3257,  3262,  3867,   172, -4078,  3870, 47990, -4078,
   -4078, -4078,  1981,  3540, -4078, -4078, -4078,  3037, -4078,  3039,
   -4078, -4078, -4078,  3852, -4078, -4078,  3037,  3668,   208, -4078,
   -4078,  3266, -4078,  3268,  3276, -4078,   272,  3277,  1898,  1212,
    1989,  3583,  3656, -4078,  3501, -4078,  1924,  1058,  1953,  1967,
    1986,  1995, -4078, -4078, -4078, -4078, -4078,  3287, -4078, -4078,
     474, -4078,  3288,  1467,  1001, -4078, -4078,  1996, -4078, -4078,
    3906,  3552,  1424,  3304,  3304,  3304,  1817,   796,  2005, -4078,
   -4078, -4078, -4078, -4078, -4078,  3687, -4078, -4078,  3292,  3296,
   57515, -4078,  3351, -4078,  2506, 27008, 16051,  3305,  3294, -4078,
     -32, -4078, -4078,  3290, -4078, -4078,  2660, -4078,  3889,  3720,
   -4078, -4078, 48625,  3308, -4078, -4078,  3600, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078,  2693,  3481,  3345,  1006,  1006,
    3537,  3348, 12109,  3312, -4078,  3421, -4078, -4078,    65,  2506,
   12109, -4078, -4078, -4078,  3443,   974, -4078,  3466,  3314,  3317,
   -4078, -4078,  -184,  3320, -4078, -4078, 20614, -4078,  3935, -4078,
   -4078, 12109,  1766, -4078, -4078, -4078, -4078,  3313, -4078, -4078,
    3826,  3828, -4078, -4078,  1187, 57515, -4078,  3090, -4078, 27646,
    3223, -4078,   465,  3420, -4078, -4078, -4078, 27008, -4078, -4078,
   -4078, 57515, -4078, 25732, -4078, -4078,  3325, -4078,  3037,  3037,
    3037, -4078, -4078,  3037, -4078,  3039,  3568, -4078,  3039,  3039,
   -4078, -4078, -4078, -4078, -4078,   208,   373, -4078, -4078,   208,
   -4078, -4078, -4078,   141,  1425,  3039, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078,  3037,  3037,  3037, -4078, -4078,   208,  3037,
   -4078,  3037, -4078,  3492, -4078,   178,   155,  3037,  3037,  3037,
    3163,  3324, -4078, -4078, -4078, -4078, -4078, -4078, 57515, -4078,
    1037, 57515,   149, -4078, -4078, -4078,  3358,  2012, 57515, 57515,
   57515, 44815, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, 47990, -4078,  3950,  3620,  3336, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, 12109, -4078, -4078, -4078, 12109,
   -4078, -4078,  3654,  3815, -4078, -4078, -4078, -4078, -4078, -4078,
    3349, -4078,  3358,   158,   158, -4078, -4078, -4078,  3853, -4078,
   -4078,  3434,  3436, -4078, -4078,  3441, -4078, -4078,   151,  1997,
   -4078, -4078, -4078, -4078, 16051,  3744,  3451, -4078, -4078,  3356,
    3399, -4078, -4078,  1467, -4078, -4078, -4078, -4078, 12109, -4078,
    3421,  2493, -4078, 30832, -4078,  -112, -4078,  3402, -4078, -4078,
   -4078,  3404,   796, 57515,  3624, -4078,   343,  1467,   306,  -184,
   -4078, -4078, -4078,  3363,  3371, -4078, -4078, -4078,   332, -4078,
   57515,  7796, -4078, -4078,   -32,  5769, -4078, -4078,  1069,   609,
    2000,  3360,  3365, 57515,  3374,  3375, -4078,  2808, 27646, -4078,
   -4078, -4078, -4078, -4078, 25732,  7796,   890, -4078, -4078,  3223,
     816,  3376, 57515,  3699, -4078, -4078, -4078, -4078,  1075, -4078,
    3378,  1075,  1075, -4078,  2446, -4078,  3411,   208, -4078, -4078,
    3414, -4078, -4078, -4078,  1075,  3381,   208, -4078, -4078, -4078,
   -4078,  1075, -4078, 48625,  -184,  3062,  4022, -4078,  3438, -4078,
    3908,  3778,  4023, -4078,  2539, -4078,  3779,  3678,   116, -4078,
     208, -4078, -4078,  3950, -4078,   208,  3950,  1075,  1075, 57515,
    3519, -4078, 63865, -4078, -4078,  -171,  3419,  2027, -4078, -4078,
   -4078, -4078, -4078, -4078,  2054,   306,  3397,  2056,  2058,  3876,
    3579,  3590, -4078, -4078,  3401,  3403,   306,  2002, -4078, -4078,
   -4078,  3407, -4078, -4078,  3994, -4078, -4078, -4078, -4078,   183,
    3680,  3358,  3358,  3358,   677,  1997, -4078, -4078,  3461, 25732,
   17365,  3520, 57515,  1021,  3316, -4078,  1181,   306, 12109,  2673,
   44180, -4078, -4078, -4078, 12109,  3415, 12109,  3416,  2060, -4078,
   -4078, -4078,   176,   176, -4078,   343, -4078, -4078, -4078, -4078,
    1526, 57515, 25732,  3418,  3605, -4078,  3090, -4078, -4078,  3390,
    3353, -4078,  3342,  3351, -4078, -4078, 57515, 57515,  2073, 57515,
   57515,  2687,  2689,  2719,  2172,  2172, -4078, -4078,  1041, -4078,
   -4078, -4078,  3821, -4078, -4078,  2106, -4078,   917,  3696, -4078,
   -4078, -4078, -4078,  1075, -4078,   272, -4078, -4078, -4078, -4078,
   -4078,   272, -4078, -4078, -4078, -4078,  3426, -4078, -4078, -4078,
    3709,  3469, -4078,  3432, -4078, -4078, -4078, 39100, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, 12109,  3914,  3459, 57515,   119,
   -4078, 65135, 65135, 57515, -4078, -4078, -4078, -4078,  6945, -4078,
   -4078,    -1, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078,  4058, -4078,  3430, -4078, -4078,  3439,   226,
   -4078, -4078, 57515, 56880,  1126, 57515, -4078,  3725,   115,  1342,
   -4078,  3920,  2290, -4078, -4078, 12109, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078,  1363, -4078, -4078, 27008,
    2747, -4078,  3342, -4078,  2108, -4078, -4078, -4078,  3532,   116,
     116,  3959,  3961,   116,   116,   116,   116,  3453,  3316, -4078,
    3943, -4078, -4078, 12109, -4078, -4078,   796,  3690, -4078,  4034,
    1001,   796, 57515,   796, 57515, -4078,  3913,  3913, -4078, -4078,
   -4078,  7796,  3915,  1839, -4078, -4078, -4078,   886,  3457,  2340,
   -4078,  2124,  2129,  2132, -4078,  2149,  2151, -4078, -4078, -4078,
   -4078,  1041,  3463, -4078, 57515, -4078, -4078, -4078,   106, -4078,
   -4078,  2153, -4078,  2179,  2609, -4078,  3426, -4078, -4078, -4078,
   -4078, -4078, -4078,   796, 12109, -4078, 12109,  3487, -4078, -4078,
    3916, 57515, -4078, -4078, -4078, -4078, 12109, -4078, 63865, 63865,
   -4078, -4078, -4078, -4078,  4084,   -32,  4053,  3737,  4056, -4078,
   -4078,  2205, -4078, -4078,  -184,   116, -4078,  1126, -4078, -4078,
   -4078,   116,   306,  3468,  3726, -4078,   115, -4078, -4078, -4078,
    1342, -4078, -4078, -4078,  2506,   306, -4078, -4078,  3477, -4078,
     116, -4078,  3475, -4078, -4078, 57515,  3483, -4078,  -184,  -184,
     116,   116,  3366,  3366,  3342, 48625,  3592, -4078, -4078,   116,
     306, 57515, -4078,   104,  3849, -4078,  2213,  2217,  1176, -4078,
   -4078,  3736, -4078, -4078,  3715,  7796, -4078, -4078, -4078, -4078,
    3700, -4078,  1126, -4078, -4078, -4078,  3351, -4078,   915,   915,
     208,   272,   208, -4078,  3486, -4078,  3490,   796,   796, -4078,
     188, -4078, -4078,  3891,  3985, 12109,   796, 60690,  3489, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, 64500, 12109, -4078,    -1,  4058, -4078,  3769, -4078,
    3770, -4078, 56880, -4078,  3358,  1195, -4078, 39735, -4078, -4078,
     955,  1195, -4078,  1195, -4078, -4078, 27008, 16051,  2493, -4078,
    3520, -4078,  3493, -4078, -4078,   676, -4078, -4078,  -184,  -184,
   -4078, -4078, -4078, -4078, -4078,  2226, -4078, 48625, -4078, -4078,
    4106,  4107,  3998,  4109,   104, -4078,  -164, -4078, -4078, -4078,
    4110, -4078,  4111,  3508,  3509, -4078, -4078, -4078,  4024, 63865,
   -4078,  4017, -4078,   -32, -4078,  1126, -4078,   115,  1342,  2234,
   -4078,  4162, -4078,   161,  3792,  3793, -4078, -4078, -4078, -4078,
    -123,  3545, 12109, 63865, -4078,  4010, -4078,  3939,  2079,  3881,
    3516, -4078,  3521,  2007,  4049, 65135, 65135, -4078, -4078, -4078,
   -4078, -4078,  3895,  4170, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078,  2251, -4078, 16708, -4078,
   -4078, -4078, -4078, -4078, 48625, -4078,  3592, -4078,  3531,   272,
     272,  4136,   272, -4078,  4138,  4140,  -164, -4078, -4078, -4078,
   53705, 53705, -4078, -4078,  4035, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078,  3591,  4057, -4078, -4078,   126,
   -4078,   209, -4078,   796, 61325,  4141, 57515, -4078, -4078, -4078,
   -4078, 12109, -4078, 49895, 61960,  3536, -4078, -4078, -4078, -4078,
   -4078,  3723, -4078,  3493, -4078,  3544, -4078,  3099,  3316, -4078,
   -4078,  3547, -4078, -4078,   272, -4078,   272,   272, -4078,  3550,
    2255,  3724, -4078,  3736,   915,   915,  -184,  3942, -4078,   126,
   -4078, 12109, -4078,  4047,  3643, -4078,  3555, -4078, 63865,   382,
   63865, -4078, -4078,  3995,  3561,   284, -4078,  3554, -4078,  3986,
    4034, -4078, 16708,  3566, -4078, 12109,  3567,  3564, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, 63865, -4078, -4078, -4078, -4078,
   -4078,   796,  4175, 63865, 57515, 58785,  3772, 62595,  4040, 57515,
    7796,  4042,  4046, -4078,  4183,  3849, -4078, -4078,   796, -4078,
   -4078, 63865, -4078,  3681, -4078, 59420, -4078,  2691, -4078,  3616,
   -4078, -4078,  4114,  3053, -4078,   272,  4013, -4078, -4078, -4078,
   63865, 63865, -4078, -4078, -4078, 37830, 12109, -4078, -4078, -4078,
   -4078, -4078,   657, -4078,  3879,  3597, 60055, 63230, -4078, -4078,
   -4078, 32743, -4078, -4078, -4078,  4061, -4078,   796, -4078,     9,
   21890,  3758, 37830, -4078, -4078, -4078, -4078, -4078, -4078, 48625,
    2262, -4078, -4078, 27008, -4078, -4078, -4078, -4078, 25092,  3608,
   -4078,   116, -4078, 27008, -4078, -4078, 16051, -4078, -4078
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -4078, -4078, -4078, -4078, -4078,    98, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078,  1899, -4078, -4078, -4078, -4078, -4078,
    1596, -4078,   480, -2355,  -491,  3332, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078,   762,  1707,  3241,
   -4078,   376, -4078,    26, -4078, -4078, -4078, -2970,  -104,  -304,
   -4078, -4078,  1117,    30,  3235,  -302, -4077, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078,   386,   385, -4078, -4078,
     217, -4078, -4078,  -879, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078,  -474,  -434,  1887, -4078, -4078, -4078,  4242, -4078,
    3694, -4078, -1804,  2367, -4078, -4078, -4078, -4078, -4078,  2440,
   -1740, -4078, -4078, -4078,  1473, -4078, -4078, -4078,  -328,   330,
   -4078,   333, -4078,   334, -4078,   335, -4078,   337,   338,   339,
     340, -4078,   341, -4078, -4078,  -408, -4078, -4078, -4078, -4078,
     342, -4078, -4078, -4078, -4078, -4078, -4078, -4078,  -265, -4078,
   -4078,   -73, -4078, -4078,  -262,   352, -4078,  -196,   354, -4078,
     355, -4078,   -94, -4078,   -90, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078,  3253, -4078, -4078,
   -4078, -2076, -4078, -4078, -2454,  2770, -4078, -1680, -4078, -4078,
   -1975, -4078, -4078, -1670,   803, -4078, -4078,  1447,   416, -4078,
   -1388, -2003, -1977, -4078, -4078, -4078, -2040, -2021,  -729,  2524,
   -1213, -2369, -4078, -4078, -4078, -4078,    99, -4078, -4078,   276,
    1737,  2253, -4078, -2546, -4078, -4078,   922, -4078, -4078,  1516,
     764,  1517, -4078,  1093,  3005, -1271, -4078, -4078, -4078, -4078,
   -4078, -4078,    23,   344,   -81, -4078, -3151,   770, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -2866, -4078, -4078, -4078,
    -287, -4078, -4078,  -180, -4078, -4078,  -240, -4078,   162, -2387,
   -4078, -4078, -4078, -4078,  2774, -1384, -4078,  3761, -4078,  -503,
   -4078,   484,  1768, -2443, -1995, -4078,  -927,  -920, -2952, -4078,
   -4078, -4078, -1979,  1039,  1321, -4078,   722,  1763, -2442, -4078,
   -4078, -4078, -4078, -4078,  1324, -4078, -4078,   485, -4078,   475,
   -4078, -4078, -4078, -4078,  -248, -4078,   114, -3228, -4078, -4078,
   -4078, -2946,  1234,   670, -4078, -4078, -4078, -1836, -2996, -1403,
   -4078,   294, -2517, -2579,   638, -4078, -4078,   435, -3848, -4078,
   -4078,  -578, -2164, -2489,   -48, -4078, -4078,   449, -3123,  1883,
   -4078, -4078, -4078, -3416, -2179,  1635, -4078, -4078,  1188, -4078,
   -1230,  1192, -4078, -4078, -4078,  1196, -4078,    25, -4078, -4078,
   -4078, -4078, -2944, -4078, -4078, -1574, -2429, -4078, -4078,  4410,
    4411, -1578, -3114, -4029,   -83,   -82, -4078, -4078, -4078,  2236,
   -1958,   101,    85,    93,  1734, -1088,   247,  1042, -1876, -4078,
     312, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,  1805, -1841,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -2406, -2879, -4078,
   -4078,  1367, -4078, -4078, -4078, -3213, -2091, -2089, -2432,  3423,
   -4078, -4078, -4078, -4078,  3368, -2258, -3030, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078,  2924,  1119, -4078, -4078,  1939, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078,   512,  2014, -4078, -4078,
   -4078, -4078,  2329, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078,    10, -4078, -4078, -4078,   759,  2835, -4078, -4078, -4078,
      -9, -4078, -4078, -4078, -4078,  2535, -4078, -4078, -4078, -4078,
    2862, -4078, -4078, -4078, -4078, -4078, -4078,  1615, -4078,  2055,
   -4078, -1551, -4078, -4078,  1180, -1038,  2009,  -614,  2141,   468,
   -4078,  3844, -4078, -4078, -4078, -1727, -1201, -4078,  3527, -1024,
   -2692,  2521,  -572, -1931,  1224,   182,  1548,  -432,  4169, -4078,
   -1153, -1178, -4078, -4078,  -668, -4078, -4078, -4078, -4078, -4078,
    2244,  2245,  -621, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078,  1657, -4078, -4078, -4078, -4078, -1272,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078,  1139, -4078, -2103,
   -4078, -4078,  -445, -4078,  3309, -4078, -4078, -4078, -2357, -1797,
    1954,  1132, -4078, -4078, -4078, -4078, -4078, -4078, -4078,  1961,
   -4078, -1612, -4078, -2787, -4078, -4078, -4078, -4078, -4078,  2159,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -1669, -4078, -1851,
     231, -4078,   412, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
    -101,   977,  -100, -2686, -1116,  1648, -4078, -4078, -1330,  3344,
   -2367, -4078, -4078, -4078,  2147, -4078, -4078, -4078, -4078, -4078,
     775, -2998,  2953, -4078, -4078, -3301,  -956, -2342,  -929, -4078,
   -1426,  1554,   606, -4078, -1737, -1129, -1499, -2980, -2490, -4078,
    1427, -4078, -4078, -4078, -4078,  -218, -4078, -4078, -4078,   621,
    2040, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078,  -536,  -902, -4078, -4078,  2300,  -484, -4078,  3458, -4078,
   -4078,  3464, -4078, -4078, -4078, -4078,  3143,  3116,  2101, -4078,
   -4078, -2449, -4078, -4078,  2067, -4078,   887,  -894,     3,  1207,
   -4078, -4078,  1210, -3259, -4078, -4078,  3470, -4078, -4078, -4078,
    1157, -4078,    51,  3899,  3471, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078,  2877, -1087,  3829, -4078, -4078, -4078, -4078,
   -4078, -4078,  2494, -4078, -4078, -4078, -4078, -4078, -4078,  3059,
    3918,  -593, -1352, -4078,  -786,  2497,  2019,  -861, -4078, -4078,
   -4078, -4078,  3921, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078,  2674,   806, -4078, -4078, -4078, -4078,  3130,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078,  1245,  -144, -4078,    43,  -177, -4078,   -47, -4078, -4078,
   -4078, -4078, -4078,  -247, -4078, -4078,  -253, -4078, -1029, -1430,
     568, -1307, -2611, -4078,  1235,  3120, -3329,  -693, -1212, -1214,
   -2784,    91, -4078, -4078,  3460,    87,   826,  -395,    -6, -3884,
    -103,  -607,  -610,  -740, -4078, -2956, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078,  2059, -4078, -4078, -4078,  1206, -4078,
    3941, -4078,  2760,  1215,  3948, -1404,  2582,  2072,  2076, -4078,
   -4078,  2080, -2005, -4078, -4078,   170, -4078,  2648, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078,  3722,  -452,  -451,  3142,  3964,
    3639, -4078,  3213, -4078, -4078, -4078, -4078, -4078,   531, -4078,
     279,  2115, -1242, -1771, -4078, -4078,  2936,   548, -4078,  1738,
    -349,  -669, -4078, -4078,   528, -4078, -4078,  1645,  3973,  3640,
   -4078, -4078, -4078, -4078, -4078, -2786,  -918, -4078, -3478, -2842,
   -1749, -4078, -4078, -2217, -3077, -4078, -4078, -1049, -4078, -4078,
   -4078, -4078, -2059, -4078, -4078, -4078,    -7,  3940,  3944,  3945,
   -4078,  -789, -4078, -4078, -4078, -4078, -4078, -4078, -4078,  3534,
   -4078, -4078, -4078, -4078,  3541, -4078, -4078, -4078, -4078, -4078,
    3542, -4078, -4078, -4078, -4078, -4078,  1809, -4078, -4078, -4078,
   -4078, -4078, -4078, -4078, -4078, -4078
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2763
static const yytype_int16 yytable[] =
{
     515,  1097,  1555,   892,   999,  1768,  1030,  1767,  1417,  1742,
    1858,   556,  1562,   555,  2460,  2461,  1675,   563,   952,   995,
    2197,   574,   670,  2134,  2636,   646,  2637,   577,   582,  1050,
    1638,  2320,  1049,  1899,   589,  2005,   513,   592,  1497,  2004,
    1467,  1972,   589,  1170,  2131,  1857,  2979,  1719,  2870,   610,
    2193,  2194,  1431,  1434,  2730,  2838,  2990,  3119,   825,   826,
     827,  3046,   829,  1447,   831,  1467,  2737,   833,  1122,   835,
    1105,  1834,  1800,  1801,  2990,  2990,  1804,  1805,  1806,  1807,
    3422,  1809,  1810,  1812,  1814,  1815,  1816,  1817,  1818,  1790,
    3303,   140,  3656,   635,  1288,   813,  1798,  3230,  3483,  3339,
    1908,  2819,  1870,  1284,  2795,  1684,  1461,   867,   868,  1005,
    2571,  1518,  1012,  3490,   561,  2894,  2366,   638,  1567,   515,
    2626,   515,   645,   651,  2012,  1568,  2443,   656,  2738,  1086,
    1089,  3002,  3811,  2934,  1498,  1267,  2572,  3708,   867,   922,
    3157,  3158,  3867,  3011,  2025,  2689,  3164,  3015,  3166,  3517,
    2938,  2943,  2028,  2029,  3423,   640,  3584,   642,  3030,  3498,
    2952,  1379,  3999,  3345,  2690,  1234,  1235,  3534,   569,  4028,
    3041,  1225,  1226,  1227,  1591,  1110,  1111,  1112,  2102,   522,
    3221,  2067,  2686,  1268,  2990,  2990,  2356,  2089,  1903,  3134,
     634,  3982,  2186,  1347,  3799,  2994,  2995,  2677,  4324,   573,
    3524,  3050,  1564,  3950,  1341,  3162,   581,  1914,  2687,  4646,
    1499,  1564,  1234,  1235,  3525,  2307,  3384,  2456,  1234,  1235,
     599,   867,  1234,  1235,  2925,  3548,  3520,  3400,  3526,  3132,
    3524,  2174,  -935,   961,   942,  1602,  1234,  1235,  1493,   961,
     942,  -572,  4398,  1472,  3525, -2714,  1541,  1549,   667,  3841,
    3183, -2084,  3763,   602,  1234,  1235,  2791,  1356,  3526,  1871,
   -1560,  1450,  1819,  4480,   884,  2492, -2638,  4303,  4304,   961,
     942,  1234,  1235,   874,  4481,  3359,  2213,  1143,  1144,  3687,
    4316,  4597,  1427,  3603,   896,  1564,  1588,  1269,  4765,   570,
    1090,  4317,  4308,  4593, -2482,  1042,  3222,  1953,  1006,  3592,
   -1560,  1347,  1234,  1235,  4496,  3125,  3126,   657,  3325,  2970,
    1018,  1360,  2081, -2644,   619,  -573,   681,   908,  4299,  3943,
    3948,  1234,  1235,  3949,  2216,  1954,  1525,  3661,  1606,  1210,
    1478,  3888,  1234,  1235,   122, -1600,  2453,  3060,  3147,  1348,
    3149,   566,  3959,  1957,  4523,  2370,   273,  3051,   275,  3981,
    1150,  1216,  1291,  1465, -2714,  2890,  3081,  3865,  1202,  2559,
    1507,  1535,  2091,  4506,  4574,  4523,  3090,   904,  1234,  1235,
    3337,  3079,  3386,  1778,  4701,   682,  2905,  4325,   867,   139,
    1234,  1235,  2521,  1468,  2778,  3360,  1911,  2454,  3521,  1234,
    1235,  1234,  1235,  2062,  2085,  3524,  4702,  2906,  4575,  1234,
    1235,  1234,  1235,  4382,  2707,  2250,  2180,  2062,  2821,  3525,
    2779,  1332,  3793,  1620, -2562,  2132,  3202,  2548,  1234,  1235,
    3298,  3080,  2063,  3526,  2348,  2567,  4078,   674,  3091,  3338,
     909,  1912,  2349,  2907,   961,  3944,  2064,  1469,  1621,  2133,
    1151,  3842,  1508,  3662,  2891,   567,  1708,  1348,  1203,  1709,
    1607,  2371,  4309,  2284,  1608,   124,   865,  3137,  1234,  1235,
    1683,   877,  2055,  1539,  1547,  1609,  2082,  3522, -2482,  2308,
    1338,  1234,  1235,  2103,  1170,  1872,  4588,  2913, -2563,  4300,
    1603,  1820,   620,  4766,  2299,  1955,  4016,   865,  4482,  1234,
    1235,  2052,  2998,  1019,  1020,  3221,  1492,  1007,  1626,  4598,
    1234,  1235,  3604,  3387,  1821,   661,  3082,   910,   683,  4318,
    1234,  1235,  1211,  1212,  1234,  1235,  1361,  1958,  2356,  1271,
    3311,  3312,  3061,  2055,   645,  1043,   651,   905,  1526, -2562,
    4594,  4118,   876,  1236,  3381,  1554,  1237,  4502,  4060,  4047,
    4122,  1779,  4696,   651,  1967, -2638,  2493,  1494,   139,  1234,
    1235,  1830,  1044,   645,   872,  3647, -2114,   885,   645,  3651,
     882,   897,  2478,  1415,  4138,  2571,  4496,  1234,  1235,  4140,
     865,  3912,  2786,   900,  3921, -1600,   139,  1795,  4061,  3396,
    1236,  1234,  1235,  1237,   645,  3372,  1236,  4067,  2990,  1237,
     953,  2572,  1357, -2563,  2357,  4037,  1866,  1610,  1091,  3614,
    1014,  1270,  3386,  2057,  1236,   664, -2265,  1237,  3384,  2007,
    1428,  3222,  2010,  1451,  1873,  1571,  2013,  1834,  2016,  1033,
    3693,  2640,  1236,  1858,  1859,  1237,  3223,  3138,  4310, -2291,
    2337,  2626,  1803,   645,   875,  1055,  3701,  3702,  1567,  1236,
    2990,  2340,  1237,  2689,  2343,  1568,  2031,  2032,   515,  1824,
    3705,  4617,  4617,   635,   883,  1084,  2888,  3884,  1857,   635,
     635,  3659,  2690,  2951,  1098,  1055,  4483,   645,  1822,  1933,
    1236,   645, -1560,  1237,  2500,  1234,  1235,  3510,  1117,  2926,
    2686,  1234,  1235,  3523,  1071,  1652,  1653,   664,   571,  1236,
     664,  1567,  1237,  1952,  1015,  1611, -2410,  3763,  1568,  2089,
    1236,  3127,  2162,  1237,  4186,  1473,  2687,  4399,  1604,  1342,
     600,  1707, -1600,  1234,  1235,  4196,  2027,  1234,  1235,  1720,
    2102,  1722,  4647,  3388,   836,  2570,  3845,   865,  1283,  -935,
    1171,  3231,  2895,  1735,  1736,  1737,  1236,  1105,  -572,  1237,
    3361,  1741,  3836,   603,   890,  4334,  4235,  2214,  1236,  1915,
    1081,  1237,   903,  2334,  1837,  3052,  3951,  1236,  3624,  1236,
    1237,  3509,  1237,  2187,  2065,  3800,  1904,  1236,  1536,  1236,
    1237,  3527,  1237,  2188,  3534,  1234,  1235,  3135,  1016,  3516,
    2413, -2644,  2067,   601,  2174,  2960,  1236,  1238,  1604,  1237,
    3946,  1231,  1479,  1233,  1234,  1235,  3979,  2685,  4053,  3499,
    1934,  3527,  4000,  1049,   924,  3224,  2323,  2997,  3154,  2230,
   -2644,  3326,  -573,  1234,  1235,  4409,  3920,  1848,  1276,   515,
    1278,  1279,  1055,   515,   645,   645,  1236,   515,   645,  1237,
    1901,  3154, -1600,  1323,  1238,  1021,  4600,  4437,  2942,  1236,
    1238,  2822,  1237,  1432,  1238,  1435,  2090,  1921,  1438,  1443,
    2309,  3621,  4722,  2843,  1213,  1277,  2231,  1236,  1238,  1281,
    1237,  3878,  3879,  1286,  2011,  1464,  4345,  1049,  1236,  1502,
    1352,  1237,  4049,  3203,  2091,  1072,  1238,  2992,  1236,  3242,
   -2562,  1237,  1236,   635, -2114,  1237,  2996,  3139,  1234,  1235,
    2179,  1775,  1776,  1238,  1710,   645,   635,  1711,  1251,  1927,
     635,  1234,  1235,  3389,  4370,  1339,  3328,  3146,  2957,  2285,
    2870, -2562,  1234,  1235,  3100,  3922, -1600,  1236,  2425,  3105,
    1237,  3382,  3283,  1604,  1238,  3697,  2357,  3113,  3114,  1537,
    1234,  1235,  4261,  3121, -2265,  1236,  2085,  3679,  1237,  2300,
     645,  3223,   645,  1238, -2563,   645,   645,  1234,  1235,  1236,
    4062,  1987,  1237,  4256,  1238,  3116,  2887, -2291,  3806,  2180,
    3684,  1427,   645,  2059,  2060,  2061,  3527,  3809,  4510,  3627,
    2204, -2762,  2692,  1234,  1235, -2563,  3476,  2636,  1936,  2637,
    1363,  3642,  1376,  3655,  4516,  3646,  4518,  3945,  3760,  3650,
    1238,  2069,  1433,  1382,  2571,  1234,  1235,  1388,  2425,  1234,
    1235,  4559,  1238,  1234,  1235,  1775,  2249,   635,  1316,  1450,
    4082,  1238,  3700,  1238,  2641,  2103,  3029,  2288,  2289,  1105,
    2572,  1238,  3162,  1238, -2410,  4587,  3002,  2222,  2305,  2306,
    1553,  4448,  2256,  1480,   518,  1563,  4176,  3030,  2800,  2801,
    1238,  1234,  1235,  1236,  4455,  1206,  1237,  4205,  -476,  1236,
    3473, -2114,  1237,  1234,  1235,  3187,  3188, -2621,  2467,   635,
    2005,  1831,  2005,  2005,  1481,  2496,  2930,  2931,  4269,  4478,
     635,  3551,  3365,  2626,   664,  3306,   664,  2751,  2482,  2406,
    1238,  1236,  1791,  3690,  1237,  1236,  2366,  1100,  1237,  1234,
    1235,  2689,  1467,  1238,  1254,  2205,  2355,  3343,  3344,  3313,
    2526, -2265, -2625,  4254,  1627,  1628,  1629,  1634,  3204,  3205,
    2690,  1238,  3308,  3309,  3310,  3561,  2709,  4275,  1482,  1092,
    3643,  3603,  1238,  1483, -2291,  2316,  2217,  1467,  2686,  1785,
    1234,  1235,  1238,  1512,  2829,  1207,  1238,  3239,  3240,  2471,
    1641,  3936,    44,  1236,  3937,  2858,  1237,  1171,  2224,  2935,
    1831,  2494,  2227,  2399,  2687,  3103,  1583,  4290,   590,  2089,
     139,  1171,  1236,  2426,  2499,  1237,  1823,  2502,  2503,   867,
    2182,  1238,   523,   135,  3956,  3957,  3958,  2421,  2422,  2799,
    2570,  1236,  3961,  2965,  1237, -2624,   273,  2228,   275,  1238,
    3987, -2410,  2320,  3366,  1937,  4176,  4176,  4058,  4552,  1093,
    2342,  3934,  3935,  1238,  1632,  2229,  2966,  2574,  3162,  4324,
    3117,  3162,  3162,  1769,  1503,  1860,  2407, -2622,  3890,  2236,
    1591,  1768,  2804,  2805,  3466,  3608,   645,  3891,  3162,  1234,
    1235,  3474,   990,  1269,  2854,  1234,  1235,  1859,  4549,  1567,
    4550,  4395,  3960,  2426,  1280,  4509,  1568,  1606,  3980,  3983,
    3985,  3986,  3501, -2623,  2344,  1963,  1236,  1374,   136,  1237,
    1095,  1096,  4083,   645,  1234,  1235,  1792, -2628,  1827,  1236,
    3609,  1913,  1237,  1642,  4217,  1484,  2513,  3403, -2714,  3405,
    1236,  4511,  2798,  1237,   635,  2696,  3416,  2327,  2174,  1428,
    2041,  3277,  2808,  2317,  4218,  2685,   141,  1238,  1236,  3347,
    3429,  1237,  2359,  1238,  1768,  3929,  2955,  3440,  3442,  2697,
      58,  1171,   645,  2237, -1895,  1236,  4276,  1832,  1237,  2247,
    3459,  3461,  3463,  4206,  1234,  1235,  3464,  3442,  1964,  4555,
     645,  2335,  2412,  1873,  2091,  1238, -2621,  3314,   645,  1238,
    3604,  1236,  2427,  1884,  1237,  1887,   557,  1504,   635,  3118,
    1485,  2248,  4176,  4176,  2221,  1122,  2362,   273,  2090,   275,
     635,  1451,  3506,  1236,  3803,  3892,  1237,  1236,   645,  1607,
    1237,  1236,  1505,  1608,  1237,  3367,  4512,   635,   635,  1234,
    1235, -2625,  4470,  4471,  1609,  1234,  1235, -2714,  4325,  4490,
    1513,  1604,  2085,  1234,  1235,   664,  2472,  1238,  4375,  1263,
    1264,  1265,  1266,   645,   645,  2119,  1832,  1939,  4513,  1236,
    1234,  1235,  1237,  2252,  1486,  1947,  1238,  2770,  1948,  4277,
    2408,  1236,  2427,  3562,  1237,  4324,  3691,   645,  1234,  1235,
    1234,  1235,  2264,  3394,  3394,  1238,  4491,   575,  1968,   953,
    1234,  1235,  1891,  2179,  3923,  1388,  1234,  1235,  3520,   515,
     515,   515,   635,   515,   635,  4515,  2691,  1236,  2042,  2006,
    1237,  4176,  2043,  2180, -2624,  2008,   515,  4545,   645,  2071,
    2692,  2328,   515,  4388,  1251,  1388,  4176,   664,  1793,   867,
    2444,  2599,  3368,  4267,  4268,  1988,  1989,  1990,  2041,  1992,
    3841,  2041,  3582,   635,  1794,   579, -2622,  2102,  1236,  2005,
    4344,  1237,  2009,  1234,  1235,  1994,  2509,  2607,  2015,   604,
    1238,  1234,  1235,  1066,  3402,  3685,  1610,  1831,   865,  3688,
    3689,  4081,  3994,  1238,  2120,  4567,  2271,  4787,  1234,  1235,
     606,  3348, -2623,  1487,  1238,  1965,  3626,  1984,  2693,  2275,
    3432,  3433,  3425,  4176,  3124,  -476, -2628,  1270,   635,  1991,
    2276,  1993,  1238,  4270,  2431,  2610,  4376,   622,  4377,  2530,
    3692,  4238,  4492,  1641,  2014,  1995,   645,  4176,  2278,  1238,
    1488,  2678,  1858,   273,  1049,   275,  4109,  1234,  1235,  4176,
    4176,   635,  1234,  1235,  2911,  2279,  2127,   635,  1234,  1235,
    2026,  3268,  3269,  3270,  3706,  1238,  4557,  1236,   635,  4561,
    1237,  1234,  1235,  1236,  4325,  3710,  1237,  1857,  3712,  2570,
    3521,  2283,  1234,  1235,  1611,   645,  2982,  1238,  3426,  3148,
     645,  1238,  1234,  1235,  4013,  1238,  2510,  3352,  -212,  1117,
    1641,  2203,  1236,  2301,   607,  1237,  2223,  4012,  1234,  1235,
    1272,  3185,  2085,  2511,  2510,  2066,   673,  2990,  4176,   878,
    1768,   677,  3294,  3238,  4346,  2948,  2042,  1067,  4176,  2042,
    2043,  2511,  3291,  1238,   830,  2101,  2453,  1234,  1235,   834,
    1254,  1234,  1235,  2512,  4110,  1238,   623,  1641,  2121,  3186,
    1234,  1235,  3842,  2329,  2129,  1234,  1235,   591,   990,  3532,
    3995,  3197,  1236,  4258,  1641,  1237,  1664,   901,  2694,  2330,
    4686,  4687,  4176,  3807,  4176,  2250,  1288,  4237,  1234,  1235,
    2696,  1238,  3825,  2085,  2803,  2431,  1327,  4111,  3427,  1171,
    2257,  2167,  4080,  2432,   519,  2843,   927,  3207,   520,  4176,
    3288,  1234,  1235,  4347,  2697,  2983,  2360,  4176,   879,  4176,
    1392,  4176,  2218,  2685,  1465,  3078,  2999,  1236,  1940,  1536,
    1237,  1996,  1238,  1236,  2513,  4176,  1237,  4671,  3353,  4176,
    2034,  1236,  3068,  1727,  1237,  1095,  1096,  1831,  3208,  1105,
    3890,  1234,  1235,  1832,  4176,  4176,  1234,  1235,  1236,  3891,
    2326,  1237,  2734,   658,  1234,  1235,  3843,  2739,  2219,  1271,
    4176,  4176,  2103,  1234,  1235,  4176,  1236,  1328,  1236,  1237,
    2745,  1237,   625,  1329,  4139,  2547,  3911,  4141,  1236,   880,
    1731,  1237,  4231,  4232,  1236,  3394,  1369,  1237,  2090,  1370,
    1234,  1235,  2350,   635,  2092,  1234,  1235,  1755,   865,  1768,
     645,  3438,   635,   645,  2760,  2320,  4233,  2882,  1234,  1235,
    1049,  2035,  2433,  2434,  2377,   635,  2466,  1330,   636,   519,
    1323,  1238,  2949,   520,  2102,  1323,  1072,  1238,  2373,   928,
     639,  3026,  1580,  1581,  1331,  2381,  2381,  3819,  2381,  1626,
    2514,  1236,  2990,  2990,  1237,  1234,  1235,  1234,  1235,  1236,
    2085,  1941,  1237,  2435,  4045,  1867,  1238,   645,  1868,  3938,
     635,  1869,  3941,  3942,   635,  3029,  1236,  1234,  1235,  1237,
     580,  2238, -1806,  2814,  2132,  3523,   952,  1624,  4066,  3954,
    1537,   645,   645,   635,   635,  1234,  1235,  3892,  2692,  3263,
    2351,  2348,  2515,   641,  1171,   645,  1972,   586,  2133,  3322,
    2381,  2381,  2381,  2093,   664,   586,   929,   654,   990,   124,
    2515,  1234,  1235,   645,  1626,  1236,  1238,  2179,  1237, -1806,
    1236,  3844, -2762,  1237,  2691,  2198,  1236,  2990,  1417,  1237,
     953,  2239,  2380,  2380,   661,  2380,  1371,  3845,  3331,  1236,
    1234,  1235,  1237,  1261,  1262,  1263,  1264,  1265,  1266,   676,
    1236,  2489,  3085,  1237,  1234,  1235,  2431,  2404,  1058,   667,
    1236,  1363, -1895,  1237,  3578,  1467,   832,  3086,  3580,  2168,
     669,  1238,  2420,  1234,  1235,  1831,  1236,  1238,  3644,  1237,
    1382,  2424,  1234,  1235,   671,  1238,  2246,  1234,  1235,  1234,
    1235,   635,  2260,  1832,  1234,  1235,   672,  2380,  2380,  2380,
    2261,   678,  1238,  -578,  3518,  1236,   626,  2508,  1237,  1236,
    3952,  1059,  1237,  3953,   635, -1806,   679,  2265,  1236,  3506,
    1238,  1237,  1238,  1236,   515,   515,  1237,  2532,   515,  3341,
    3846,  3351,  1238,  3553,  3554,  2269,   680,  2270,  1238,  2485,
    2085,  2534,  2535,   839,  3334,  2169,  1236,  2274,   823,  1237,
    2679,  3028,   828,  2277,  3567,   873,  2695,  1768,  2546,  3575,
    2528,  2529, -1806,  2332,   893,  4021,  1234,  1235,  2708,  1236,
     895,  2094,  1237,  2220,  1271,  2564,  2565,   887,  1234,  1235,
    3914,  3915,  2095,  2433,  2434,  1432,   635,   913,  2501,  2096,
    2937,  3290,  2141,  2142,  1511,  1238,   915,  1432,  2225,  2226,
    1516,  1517,  1060,  1238,  1004,  1768,  1011,  2955,  2155,  1236,
    2280,  2520,  1237,   905,  1236,  1234,  1235,  1237,  2292,  2103,
    1238,  2383,  1236,  2384,  3297,  1237,  4612,  2243,  1271,  2537,
    1031,  1236, -1922,  1038,  1237,  2311,   961,   942,  2544,  2545,
    2672,  2673,  2674,  2675,   626,   645,   990,   645,  2068,  2549,
    2550,  2551,  2552,   645,  2560,  2561,  1859,  2714,  1236,  2703,
    1032,  1237,  2706,  1236,   876,  1831,  1237,  1234,  1235,  1238,
    3171,  1046,  1234,  1235,  1238,  3174,  1236,  1668,  4030,  1237,
    1238,  2806,   645,  1057,  3151,  2448,  2449,  2450,  2097,  3175,
    1082,  2796,  1251,  1238,   645,  3181,  1105,  1105,  1105,  2170,
    4337,  4341,   930,   931,  1238,   933,   611,   935,  3182,  1103,
    2344,  2251,  1271,  1236,  1238,  1236,  1237,  1065,  1237,  3189,
    1072,  2818,   936,  2102,  1085,   122,  2253,  1271,  1104,  3193,
    1238,  1832,  1645,  1646,  1647,  1236,  2157,  2158,  1237,  1119,
    1669,  1120, -1922,  1934,  1934,  1934,  1049,  1049,  1049,  1665,
    4352,  1121,  3696,  1236,  2918,  1274,  1237,  1123,   612,  1238,
    2772,  2254,  1725,  1238,  4202,  4203,  4204,  1182,  1271,  1670,
    1124,   717,  1238,  1021,  3194,   927,  1125,  1238,  3195,  1236,
    2167,  1728,  1237,  2098,  1732,  4031,  4032,  3196,   645,  1201,
    4033,  4034,  3198,  2266,  1271,  2267,  1271,  2774,  2141,  2142,
    1238,  1128,  1217,  1218, -1923,  1751,  1752,  2102,  1236,  1756,
    1251,  1237,  1129,  2815,  2155,  3201,  1061,  2919,   645,  2268,
    1271,  2999,  1236,  1238,  1130,  1237,  3237,  1131,   123,  1770,
    1771,  2005,  1275,   613,   722,  4010,   990,    13,  3206,  1671,
     645,  1236,  3772,  1132,  1237,  1133,   124,  3640,  4337,  1134,
    1236,  1135,  4341,  1237,  1136,  1236,  1137,  1236,  1237,  1138,
    1237, -1895,  1236,  1238,  2167,  1237,  2272,  1271,  1238,  1139,
    3616,  1768,  2691,  3294,  1467,  2852,  1238,  1292,  3209,  1140,
    2681,  1141,  1062,  3211,  1063,  1238, -2757,  1326,  1254,   990,
    2167,  3213,  1025,  1026,  3153,  1027,  1145,  1028,  3148,  2875,
    3215,  2466,  1432,  2878,  1234,  1235,  2562,  2563,   928,  1147,
     645,   645,  1238,  3414, -1923,   125,  2920,  1238,  1672,  2788,
    1271,  1832,  4620,  4619,  2899,  1148,  2901,  3216,  2827,  2828,
    1238,  1324,  3217,   735,  1236,  1149,  3026,  1237,  1152,  2085,
    1153,  2072,  2157,  2158,  1336,  3572,  1236,    25,   953,  1237,
   -1922,  2718,  1154,  2566,  2006,  2073,  2006,  2006,  4246,  4247,
    1155,  2320,  1333,  1768,  2681,  3438,  1156,  1238,  3385,  1238,
    1157, -1895,  3170,  2226,  3173,  1271,  3397,  2719,  1158,  2132,
    1335, -1922,  1769,  1236,  3573,   929,  1237,  3199,  1271,  1238,
    1159,  2963,  3300,  3301,   515,  2921,  1160,  3816,   645,   645,
     126,  3404,  1161,  2133,  3574,  1164,  1254,  1238,  4116,  4117,
    3304,  3305,   751,  3418,  1165,  3420,  3421,  2898,  2103,  4337,
    4341,  4120,  3818,  2085,   961,   942,  1250,  3434,  4123,  1166,
    2968,  3586,  1271,  1238,  2720,  1236,  3962,  2721,  1237,  1172,
    1236,  1256,  1257,  1237,  1173,  2722,  1174,  3010,  3824,  2085,
    3013,  3014,  1175,  3016,  4142,  4143,  3019,  3020,  2168,  1454,
    3023,  1176,  1238,  2723,  1831,  3032,  3611,  3612,  4351,  1177,
    3036,  3037,  3038,  3039,  3040,  3536,  1238,  3826,  3044,  3045,
    4097,  3047,  3963,  3062,  3777,  3778,   614,  3056,  3057,  3058,
    3059,  3827,  3964,  3063,  3064,  1238,  3066, -1922,  3077,  3785,
    3786,  1178,  2103,  1179,  1238,  3796,  3804,  1180,   615,  1238,
    3828,  1238,  3098,  3820,  1271,  4608,  1238,  1455,  1344,  3829,
    3837,  1271, -1923,  2074,  4085,  1345,  4197,  1183,  4097,  3853,
    3854,   127,  3537,  1184,  1673,  3538,  4003,  2563,  1185,  1251,
    3027,  3965,  2168,  3539,   616,  1186,  1456,  1187,  1831, -1922,
    1346,  4181,  4182, -1923,  3130,    38,  3028,  1689,  1188,  1256,
    1257,  3540,  1189,   635,   635,   635,  2724,  1934,  2168,  1190,
    1049,  4007,  4008,  1191,  1831,  1251,  1192,  4540,  4184,  4185,
    4188,  4185,  4189,  4185,  4245,  3305,    44,  1193,  1238,  1259,
    1260,  1261,  1262,  1263,  1264,  1265,  1266,  4264,  4185,  2075,
    1238,  1353,  1674,   617,   128,  1194,  3541,  1195,  1668,  3101,
    3102,  2922,  3104,  3560,  3106,  3107,  3108,  3109,  3110,  3111,
    3112,   952,  1196,  3115,  2076,  1197,  3120,  1198,   780,  3123,
    4273,  4274,  4354,  4355,  1199,   990,  1200,  1238, -2757,  1204,
     273,  1205,   275,  1208,  2169,  1252,  1209,  4727,  4389,  3612,
    1215,  2206,  2553,  4390,  4185,  3439,  4391,  4185,  1251,  1693,
    3142,  3143,  3144,  1219,  3542,  3587,  1220,   129,  1253, -1923,
    2725,  1669,  -854,  4393,  4185,  4394,  4185,  4400,  4401,  4022,
    4023,   930,   931,   932,   933,   934,   935,  2077,  1221,  1238,
    1323,  1222,  2373,  2509,  1238,  4088,  1352,   645,   645,   645,
    1670,   936,    54,  4402,  4401,   635,  1223,  1259,  1260,  1261,
    1262,  1263,  1264,  1265,  1266,  2554,   690,  4731,  4732,   990,
    1832, -1923,  1758,  1759,  2852,   645,  4788,  1224,  1769,  4441,
    4442,  1273,  2854,  1355, -2757,  1254,  2258,  4488,  3305,  1359,
    2262,  4489,  3305,  1171,  2555,   990,  1367,   645,   645,   645,
    4565,  4566,  3131,  1377,    58,  1095,  1096,  2385,  4591,  3612,
    3321,  1389,  1457,  1694,  2286,  3543,  1391,  1697,  3544,  1407,
    1671,  1254,  1095,  1096,  1698,  4622,  4623,  1409,  3967,  4683,
    3503,  2386,  3450,  2078,  3451,  3968,  4777,  4778,  3630,  3631,
    3594,  3595,  1410,  2006,  2387,  3851,  3852,  1411,  2170,  2818,
    4091,  1412,  3276,  3699,  1832,  1415,  2388,   717,  1418,  1423,
    1448,  1424,  1444,  -671,  2556,  1449,  2726,  3801,  1453,  2553,
    1465,  1474,  3441,  4260,  -671,  3969,  1475,  1476,  3452,  2999,
    1832,  2510,  1255,  1496,  1477,   635,  3077,  1500,  1501,  1506,
    2999,  3000,  1514,  1515,  1520,  1521,  3545,  1523,  2511,  1672,
    3453,  1528,  3000,  3320,  1254,  1699,  1533,  2389,  1564,  2390,
    2512,  1570,  2676,   721,  3077,  1768,  1572,  4350,  4262,  4263,
     722,  4265,  4266,  3401,  3399,  3077,  1251,  1574,  1577,  3411,
    1578,  3410,  2554,  1582,  1586,  2727,  2391,  3454,  1256,  1257,
    1241,  1242,  1587,  2557,  1592,  3415,   645,  3410,  3970,   726,
     727,  1458,  3431,  3435,  1258,  1593,  1594,  1769,  3424,  3446,
    1615,  2555,  1616,  1701,  2728,  3448,  3449,   635,  1617,  1623,
    1234,  1235,  1626,  1459,  1256,  1257,  1637,  1243,  1635,  3410,
   -2107,  1625,  3370,  1269,  1641,  1648,  3077,  3472,  1667,  1244,
    1678,  2513,  3485,  1713,  -671,  1724,  1725,  1749,   515,   526,
    1726,  2392,  3495,  4353,  4137,  -671,  4282,  3410,  1766,  1777,
     526,  1786,  4282,   541,  3897,  1460,  1802,  1808,  1828,   735,
     690,  1829,  1621,  1835,  1836,  1842,  3412,  3413,  1839,  1846,
    1245,  2556,  2273,  3546,  3491,  1843,  1850,  2132,  1844,  1845,
    1847,  1849,  1246,  3508,  1861,  1862,  1863,  1347,  2132,  1864,
    1892,  1897,  1900,  1909,  3445,  3971,  2393,  1256,  1257,  3515,
    1917,  2133,  3547,  1918,  3447,  1919,  1920,  1924,  1931,  1247,
    1929,   542,  2133,  1930,  1932,  4404,  1685,  1686,  1687,  1688,
    1689,  1943,   746,  1949,  1251,  3484,  1259,  1260,  1261,  1262,
    1263,  1264,  1265,  1266,  1973,  1982,  1981,   750,   751,  2017,
     543,  1986,  2553,  2018,  4091,  1702,  2019,  2514,  2020,  2022,
    2557,   717,  2023,  2024,  2039,  1673,  2053,  2070,  2116,  2122,
    2123,  1704,  1254,  1260,  1261,  1262,  1263,  1264,  1265,  1266,
    2136,  1248, -1600,  3635,  2137,  2163,  2181,   544,  2183,  2184,
    3455,  2195,  2201,  3511,  2207,  2209,  2234,  2242,  3585,  2210,
    2211,  2233,  2321,  2235,  2240,  4472,  2899,  2241,  2250,  2558,
    2244,  2255,  1768,  1668,  4350,  2554,  1251,   721,  2259,  2325,
    1150,  2263,  1202,  2281,   722,  2282,  2287,  2515,  2290,  1690,
    1691,  1692,  1693,  4403,  3456,   545,  2291,  1266,  2302, -1600,
    3190,  2303,  2304,  1348,  2555, -1281,  2852,  2331,  3001,  2341,
    2361, -1424,  1206,   726,   727,  4040,  2376,  1261,  1262,  1263,
    1264,  1265,  1266,  4050,  -671,  2875,  3623,  2396,  2405,  3625,
    1604,   645, -1600,  2411, -1600,  -671,  1669,  2414,  2417,  2439,
     645,  1432,  2440,  2445,  2446,  2447,  2815,  2468,  2462,  2553,
   -1600,  2469,  3458,   953,   953,  2473, -1600,  2474,  2470,  2898,
    2486,  2488,  2475,  2490,  2491,  2984,  2476,  2477,  2495,  2504,
    2505,  1417, -1600,  1769,  2556,   273,  2518,   275,  2519,  2522,
   -1600,  2523,  2525,   735,  1347,  1256,  1257, -1600,  3671,  2536,
    1254,  2553,  2527,  1393,  3460,   635,  1694, -1600,  1695,  1696,
    1697,   772,  4517,  1394,  2538,  4092,  3680,  1698,  4093, -1600,
    4627,  4178,  2554,  2539, -1600,  2543,  3077,  2553,  1395,   778,
    3462,   -67,   531, -1600,   780,  3410,   546,   781,  3077,  4219,
    1396,  1397,  1398,   531,  2540,  2985,  2558,  4220,   645,  2541,
    2542,  2555,  3410,  2642,  3077,  3077,   746,  2646,  1236,  1399,
    2648,  1237,  3641,  2557,  2554,  1432,  2650,  4126,  3077,  3410,
    4432,   750,   751,  2651,  4221,  2652,  2653,  4447,  2654, -1600,
    3410,  2655,  1254,  3410,   525,  2656,  2657,  2658,   547,  2659,
    2554,  4230,  2660,  2555,  4094,  4095,  4457,  2661,  1699,  2662,
   -1600,  2663,  3673,  2664,  2665,  2671,  2666,  3715,  2667,   548,
     635,  1668,  2680,  2668,  -671,  3771,  2669,  2670,  2717,  2555,
   -1895,  2556,  2699, -1600,  2986,  -671,  2700,  2553,  2701,  2704,
    2712,  2741,  2740, -1600,  4627,  1668, -1600,  3098,  2708,  2742,
    1348,  2752,  3698,  1259,  1260,  1261,  1262,  1263,  1264,  1265,
    1266,  3704,  -678,  1256,  1257,  1700,  1701,  2753,  2349,  3962,
    2765,  2787,   645,  2556,  2812, -1600,  2794,  2825,  2802,  3872,
     526, -1600,   549,  2830,  1669,  2833,  2811,  2831,   550,  2834,
    4632,  4633,  2826,  4635,  2832,  2835,  1768, -1600,  4772,  2556,
    2554,  2841,  2844, -1600,  2846,  4222,  2847,   551,  1669,  1768,
    2557,  4781,  2848,  1670,  1768,  3963,  4772,  3716,  -885,  1768,
     585,  4781,  2855,  2856,  1904,  3964, -1600, -1600,  2859,  2555,
    3774,  2860,   552,  2865, -1600,  2861,  2509,  2984,  2879,  2880,
    2883,  2884,  2885,  2454, -1600,  1256,  1257,  2453,  2903,   553,
   -1600,  2904,  2557,  1957,  3861,  4679, -1600,  4680,  4681,  1769,
    1958, -1600,  2914,  2929,  2932,  2944,   527,  2945,  2946,  2961,
   -1600,  2969,  2980,  2981,  3965,   772,   645,  2999,  2557,  4092,
    3012,  3017,  4093,  1671,  3018,  4230,  4223,  3021,  1400,  2558,
    3022,  3024,  2509,   778,  4604,  3025, -1600,  3031,   780,  2556,
    3034,   781,  3033,  3035,  4224,  1401,  3042,  2985,  1702,  3043,
    3084,  1259,  1260,  1261,  1262,  1263,  1264,  1265,  1266,  3088,
    3077,  3048,  1238,  1703,  1704,  3093,  3049,  4225,  3054,  3099,
    3129,  3133,  3055,  3128,  3065,  3145,  3165, -1600,  2202,  3410,
    3154,  3167,  3159,  3077,  3246,  3168,  4743,  3966,  1432,  3169,
    2987,  1769, -1600,  3176,  4758,  3410,  3177,   635,  4094,  4095,
   -1600,  3228,  1672,  4498, -1600, -1600,   892,   528,  3232,  3218,
   -1600,  3234,  3229,   273,  2510,   275,  3236,  3241,  2557,  3244,
    3265,  3266,  3271,  3282,  3278, -1600,  2986, -1600,  3273,  3281,
    1369,  2511,  3296,  1259,  1260,  1261,  1262,  1263,  1264,  1265,
    1266,  3285, -1600,  2512,  3299,  -854,  3302,  3307,  3323,  3902,
    3318, -1600, -1600,  3319,  3327, -1600, -1600,  2577,  3335,  2578,
    3635,  3324,  3993,   841,  3336,  3998,  2558,  3342,  3346,  4695,
    2510,  4697,  4006,  4006,  4006,  2006,  3357,  1402,  3349,  3358,
    2607,  3417,  3419,  3481,  3489,   645,  3486,  2511,  3493,   529,
    3492,  -819,  -819, -1600,  2580,  3497,  3502,  2055,  3503,  2512,
    3552,  4500,  3555,  -819,  4715,  3507,  3533,  3556,  2558,  2072,
     530,  3563,  3564,  2583,  3576,  2308,  3223, -1600,  3589,  3590,
    3591,  2584,  3600,  2073,  2513,  3602,  3607,  3613,  2431,  3615,
    3628,  3648,  3649,   531,  2558,  3636,  3660,  1403,  3666,  3672,
    3667,  4746,  4747,  3674,   990,  1095,  1096,  3876,  2586,  3247,
    2466,  3967,  3675,   842,  3682,  1404,  3676,   645,  3968,  3248,
    4226,  3681,  1564, -1600,  3683,  2587,  4495,  2878,  3695,  3703,
    4050,  3707,  3714,   532,  3249,  2640,  3713,  4784,  3773,  3782,
    2513,  3775,  3783,  3788,  3671,   844,  3250,  3251,  3252,  3789,
    3790,  3791,  3794,  3798,  2592,  3795,  3802,  4006,  3969,   845,
    3805,  3796,  3077,  3880,  3808,  3253,  3797,  4101,   635,  3810,
    3812,  3822,  3813,  3821,  3838,   533,  4106,  3823,  1673, -1600,
    3814,  3817,  1875,   534,  3849,  3840,  1876,  3856,  3868,  3869,
    3874,  3831, -1600,  3832,  2558,  3857,  3898,  1432,  1877,  3854,
    2514,  3322,  2987, -1510,  3889,  3907, -1515,   645,  3916,  3866,
    3917,  3468, -1600,  3873, -1600,  3883,  3913,  2574,  3899,  2575,
     849,   273,  3900,   275,  3903,  4498,  4068,  3924,  3932,  2596,
    3939,  3970,  2577,  4144,  2578,  3989,  3982,  2597, -1600, -1600,
    4014,  3804, -1600, -1600,  4018,  4019,  4024,  4025,   850,  4026,
     821,  2074,  2598,  4020,  4027,   851,  2514,  4038,  4039,  4042,
    4055,  4043,  4057,  4086,  2579,  4099,  4107,  4069,  4087,  2580,
    2515,  1685,  1686,  1687,  1688,  1689,  4070,  4089,  4090,  3979,
    4104,  4115,  4119,   635,  4121,  4230,  4216,  4129,  2583,  4130,
    4131,  4132,  4135,  4133,   645,   852,  2584,  4136,  4145,  4179,
    4187,  4125,  4190,  4191,  4192,  4194,  2585,  4199,  4195,  4675,
    2600,  4198,  4209,  4201,  4212,  4251,   635,  4755,  4242,  4244,
    4255,  4272,  4278,  2586,  4286,  4294,  2515,  2075,  2601,  4284,
    4006,  4006,  4287,  4006,  4006,  4288,  -352,  1564,  3971,  4530,
    2587,  4312,  4314,  4315,  4755,  4333,  4343,  4357,  2588,  1095,
    1096,  4360,  2076,  4361,  4530,  3469,  4366,  4369,  4371,  4373,
    4378,  4387,  4383,  2591,  4409,  4412,  4396,  -370,  4438,  2592,
    4439,  4440,  4449,  4450,  1690,  1691,  1692,  1693,  4486,  4459,
    4210,  4292,  4456,  2605,  3254,  2606,  4462,  4474,  4675,  3476,
    4519,  4526,  4298,  2608,  4520,  4527,  4555,  4305,  4531,   821,
    2594,  3255,  4537,  4538,   821,  4569,  4570,  4571,  4572,  4578,
    4579,  4580,  4581,  4252,  4582,  2077,  4585,  4592,  4595,  4596,
    4605,  4583,  4600,  4607,  4609,  4610,  4319,  4323,  1878,  4006,
    4613,  2599,  2574, -2461,  4631,  4634,   273,  4636,   275,  4637,
    4641,   821,  4644,  4645,  2596,  4668,  4655,  4669,   855,  4672,
    4684, -1684,  2597,  1769,  4682,  4689,  1879,  4692,   821,  4693,
    4694,  4698,  4786,  4703,  1880,  2614,  4699,  2598,  4704,  4710,
    4707,  4709,  4358,  4359,  4291,  4718,  4362,  4363,  4364,  4365,
    4714,  1694,  4725,  1695,  1696,  1697,  2878,  4720,  2878,  4723,
    2138,  2599,  1698,  4724,   858,  4734,  4736,  4730,  4744,  4759,
    4760,  4773,   821,   821,   821,   821,  4307,   859,  1881,  4764,
    2820,  2078,  4473,  4783,   821,  3256,  4002,  3122,  4397,  3787,
    2993,  2615,  2616,  2617,  4073,  2600,  4530,  1546,  2618,  4384,
    4501,  4642,  4071,  3257,  4643,  4075,  4667,  4250,  4775,  4738,
     598,  1576,  1003,  2601,  2619,  4413,  2442,  2602,  2620,  3261,
    2139,  2369,  2140,  2141,  2142,  2143,  2144,  1882,  2145,  2146,
    2147,  2148,  2149,  2150,  2151,  2152,  2153,  2621,  2154,  2155,
    2156,  1495,  4156,  1699,  4748,  4157,  4159,  4160,  4444,  4162,
    4163,  4164,  4165,  4166,  4167,  2623,  4652,  4524,   862,  4653,
    4618,  2604,  4536,  3258,  4170,  4535,  4171,  4172,  2605,  4216,
    2606,  2114,   821,  1619,  2352,  4257,  4386,  4712,  2608,   645,
     863,  3259,   864,  4468,  4469,  4479,  3709,  4530,  2624,  4530,
    3069,  3284,  4477,  3859,  2818,  3606,  1907,  3289,  4461,  4554,
    1700,  1701,  3862,  4729,  4211,  4706,  4630,  4530,  4674,  4079,
    4368,  1039,  2166,  3471,  3067,  3380,  3664,  3074,  3906,  3478,
    4100,  4690,  4406,  4098,  2611,  3549,  3947,  4280,  3988,  4134,
    4553,  4443,  4124,  3579,  3220,  4504,  3577,  2978,  4530,  4530,
    3581,   537,   538,  4763,  4589,  4454,  4590,  2698,  4446,  4452,
    2614,  3141,  4332,  4283,  3686,  3470,  4323,  1584,  3071,  2040,
    1519,  4547,  4103,  2936,  2862,  4466,  4467,  2157,  2158,  2164,
    1769,  2645,  4539,  3919,  2423,  2128,  3275,  3601,  2793,  2842,
    2886,  4629,  4177,  1029,  2452,  1422,  3588,  2731,  4405,  3243,
    2733,   645,  3645,  2956,  2950,  2792,  1723,  4248,  4380,  4639,
    3784,  4640,  3927,  3332,  1666,  2056,  2615,  2616,  2617,  2809,
    4059,  3465,  4728,  2618,  4052,  2702,  2893,  1890,  1556,  2840,
    1922,  2868,  3864,  3619,  1557,  3618,  3654,  4551,  1017,  2619,
    1558,  1559,  2200,  2620,  1118,   998,  2497,  2933,  1001,  3931,
    2498,  1928,  1998,  1702,  2363,  3605,  4705,  4573,  4726,  4638,
    4785,  4782,  2621,  4128,  4546,  3638,  3622,   955,  1703,  1704,
    2912,  1946,   821,  2324,   956,  3639,  2910,  2902,  2410,  2909,
    2623,  2480,  1282,  1938,   923,  4562,  4563,  1408,   645,  1883,
    4200,  2881,  2190,  4208,   925,  1414,  3262,  1035,     0,  1294,
    1550,  1036,  1037,     0,  3098,  3098,     0,  1551,  1552,   821,
     821,     0,     0,     0,     0,     0,     0,     0,   821,   821,
     821,   821,   821,   821,   821,   821,   821,   821,   821,   821,
    4657,     0,  1295,     0,     0,     0,     0,  4665,   821,   821,
       0,   821,   821,     0,     0,     0,   821,     0,     0,   821,
     821,   821,   821,     0,   821,   821,   821,     0,     0,     0,
       0,     0,     0,   821,   821,     0,   821,   821,   821,   821,
     821,     0,     0,   821,   821,   821,   821,   821,   821,   821,
     821,   821,   821,   821,     0,   821,     0,     0,   821,   821,
       0,  1294,     0,   821,     0,     0,  4776,   821,   821,   821,
       0,     0,  1296,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   821,   821,   821,     0,     0,     0,  4716,     0,
       0,   821,     0,  4721,  1295,     0,     0,  1297,   821,   821,
     821,  1298,   821,     0,     0,     0,  2577,     0,  2578,   821,
     821,   821,     0,   821,   821,   821,   821,   821,     0,   821,
     821,   821,   821,   821,   821,   821,   821,     0,     0,  4756,
     821,   821,     0,  4688,     0,     0,     0,  1299,     0,     0,
    -819,  -819,     0,  2580,     0,     0,     0,     0,     0,     0,
       0,     0,  -819,     0,  1769,     0,  4756,     0,  1300,     0,
       0,     0,  2583,   645,  1296,     0,     0,  1769,     0,     0,
    2584,     0,  1769,  1301,     0,     0,     0,  1769,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1297,
       0,     0,     0,  1298,     0,     0,     0,  2586,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1564,     0,     0,  2587,     0,     0,     0,   821,     0,
       0,  1302,     0,     0,     0,     0,     0,     0,     0,  1299,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2592,     0,     0,  1303,     0,     0,     0,
    1300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1126,     0,  1301,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   821,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   821,     0,     0,     0,     0,     0,     0,     0,     0,
    1163,     0,     0,     0,     0,     0,     0,   821,     0,     0,
     273,   821,   275,  1302,     0,     0,     0,  1181,  2596,     0,
       0,     0,     0,     0,     0,     0,  2597,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1303,     0,
       0,  2598,     0,     0,     0,     0,     0,     0,     0,     0,
    1304,     0,     0,     0,     0,  2971,     0,     0,     0,  1305,
       0,     0,     0,     0,  1228,     0,   821,     0,     0,     0,
       0,     0,     0,     0,  1306,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1307,     0,     0,     0,     0,     0,     0,  2600,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2601,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1308,     0,     0,  1309,
       0,     0,  1304,     0,     0,     0,     0,     0,     0,     0,
       0,  1305,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1368,     0,     0,     0,     0,  1306,  1310,     0,     0,
       0,     0,  2605,     0,  2606,     0,     0,     0,     0,     0,
       0,     0,  2608,     0,  1307,     0,   519,     0,     0,  1311,
     520,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   821,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1308,     0,
       0,  1309,     0,     0,     0,     0,     0,     0,  1312,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2614,     0,     0,     0,     0,  1310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1311,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2615,  2616,  2617,     0,     0,     0,     0,  2618,     0,     0,
       0,   821,   821,   821,     0,     0,     0,     0,     0,     0,
    1312,     0,     0,  2619,     0,     0,   821,  2620,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1600,     0,     0,     0,     0,  2621,     0,     0,     0,
       0,     0,   821,     0,     0,     0,     0,     0,   821,     0,
       0,   821,     0,   821,  2623,     0,     0,     0,     0,   821,
       0,   821,   821,     0,     0,     0,     0,     0,  1639,  1640,
       0,     0,     0,     0,     0,     0,     0,  1650,  1651,     0,
       0,  1654,  1655,  1656,  1657,  1660,  1661,  1662,  1663,     0,
       0,     0,     0,     0,     0,     0,     0,  1679,  1680,     0,
    1681,  1682,     0,     0,     0,     0,     0,     0,  1715,  1716,
    1717,  1718,  2972,     0,  1721,     0,     0,     0,     0,     0,
       0,     0,  1729,  1730,     0,  1733,  1734,     0,     0,     0,
       0,     0,  1738,  1739,  1740,     0,     0,  1743,  1744,  1745,
    1746,  1747,  1748,     0,  1750,     0,     0,  1753,  1754,     0,
       0,     0,  1757,     0,   821,     0,  1760,  1764,  1765,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1772,  1773,  1774,     0,     0,     0,     0,     0,     0,
    1782,     0,     0,     0,     0,     0,     0,  1787,  1788,  1789,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   821,     0,     0,
       0,     0,     0,     0,     0,     0,   821,     0,     0,     0,
    1825,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2573,     0,     0,     0,
       0,     0,  2574,     0,  2575,     0,  2576,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2577,     0,  2578,
       0,     0,     0,     0,     0,     0,     0,  1894,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2579,
       0,     0,     0,     0,  2580,  2581,     0,     0,     0,     0,
       0,  2582,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2583,     0,  2639,     0,     0,     0,     0,
       0,  2584,     0,     0,     0,     0,     0,     0,     0,     0,
    1945,  2585,     0,     0,     0,     0,     0,   821,     0,     0,
    1951,     0,     0,     0,     0,     0,     0,     0,  2586,     0,
       0,     0,     0,     0,     0,     0,  1979,     0,     0,     0,
    1985,     0,  1564,     0,     0,  2587,     0,     0,     0,     0,
       0,     0,     0,  2588,  2589,     0,     0,     0,     0,     0,
    2590,     0,     0,     0,     0,     0,     0,     0,  2591,     0,
       0,     0,  -962,     0,  2592,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   821,  2593,     0,     0,   821,     0,
       0,     0,     0,   821,   821,  2030,     0,     0,     0,     0,
       0,     0,   821,     0,   821,  2594,   821,   821,   821,   821,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   821,     0,   821,   821,     0,   821,   821,   821,
     821,     0,   821,     0,     0,   821,     0,     0,     0,     0,
       0,   273,     0,   275,   821,     0,     0,  2595,     0,  2596,
       0,   821,     0,   821,     0,   821,   821,  2597,   821,   821,
       0,     0,     0,   821,   821,   821,     0,     0,     0,   821,
     821,   821,  2598,   821,     0,   821,     0,   821,     0,   821,
       0,   821,     0,     0,     0,     0,   821,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2599,     0,     0,     0,
       0,     0,     0,     0,     0,   821,     0,     0,     0,     0,
       0,     0,   821,     0,     0,   821,  2577,     0,  2578,     0,
       0,   821,     0,     0,   821,     0,     0,     0,   821,     0,
    2600,     0,     0,     0,     0,     0,     0,  2212,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2601,     0,
    -819,  -819,  2602,  2580,     0,     0,     0,     0,     0,     0,
       0,     0,  -819,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2583,     0,     0,     0,     0,     0,     0,     0,
    2584,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2603,   821,     0,     0,     0,  2604,     0,     0,     0,
       0,     0,     0,  2605,     0,  2606,     0,  2586,     0,     0,
    2607,     0,     0,  2608,     0,     0,     0,     0,     0,     0,
       0,  1564,     0,     0,  2587,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2609,     0,     0,     0,     0,     0,
    2294,  2296,  2298,  2592,     0,     0,     0,     0,  2610,  2611,
    2612,  2613,   821,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2614,     0,     0,     0,     0,
       0,  2333,     0,     0,     0,     0,     0,     0,     0,     0,
    2338,     0,  2339,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2639,     0,     0,     0,     0,     0,     0,
     273,     0,   275,     0,     0,     0,  2991,     0,  2596,     0,
       0,     0,     0,     0,     0,     0,  2597,     0,     0,     0,
       0,  2615,  2616,  2617,  2991,  2991,     0,     0,  2618,     0,
       0,  2598,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2619,     0,     0,     0,  2620,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2621,     0,     0,
       0,     0,  2622,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2419,     0,  2623,  2639,     0,     0,  2600,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2601,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2991,  2991,  2479,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -962,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2605,     0,  2606,     0,     0,     0,     0,     0,
     821,     0,  2608,     0,   821,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   821,   821,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   821,     0,     0,     0,     0,     0,     0,     0,     0,
     821,     0,   821,     0,   821,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2614,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   821,     0,     0,     0,     0,   821,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   821,     0,     0,
    2615,  2616,  2617,     0,     0,     0,  2649,  2618,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2619,     0,     0,     0,  2620,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2621,     0,     0,     1,
       0,     2,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2623,     0,     0,     0,     3,     0,
       0,   821,     4,  2711,     0,     0,     0,  2713,     0,     0,
       0,     0,  2715,  2716,     0,     0,     5,     6,     0,     0,
       0,  1657,     0,  2732,     7,  1657,     0,  2735,  2736,     8,
       9,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2743,     0,  2744,     0,     0,  2746,  2747,  2748,  2749,
      10,  2750,   821,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2754,     0,     0,     0,  2639,     0,    11,
    2755,     0,  2756,     0,  2757,  2758,     0,  2759,     0,     0,
       0,     0,  2762,  2763,  2764,     0,     0,     0,  2766,  2767,
    2768,     0,  2769,    12,  2771,     0,  2773,     0,  2775,     0,
    2776,    13,    14,    15,     0,  2777,     0,     0,     0,     0,
       0,     0,     0,     0,    16,    17,     0,     0,     0,     0,
       0,     0,     0,     0,  2797,     0,     0,    18,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2807,     0,    19,  2810,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2639,    20,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   821,   821,     0,    21,     0,    22,     0,     0,     0,
       0,    23,     0,     0,     0,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    25,     0,    26,     0,     0,     0,     0,     0,     0,
    2991,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   821,     0,     0,     0,    28,     0,     0,
       0,    29,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2577,
       0,  2578,     0,     0,     0,   821,   821,     0,   821,     0,
       0,  1979,     0,     0,     0,     0,     0,   821,     0,     0,
       0,     0,   821,     0,     0,   821,     0,   821,   821,     0,
       0,     0,     0,     0,     0,     0,  2580,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2583,     0,     0,     0,     0,
     821,     0,     0,  2584,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2586,   821,     0,    31,     0,    32,     0,     0,     0,     0,
       0,     0,     0,     0,  1564,     0,     0,  2587,    33,     0,
       0,     0,     0,     0,     0,   821,     0,     0,     0,    34,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2592,     0,     0,     0,
       0,    35,     0,     0,    36,     0,    37,     0,     0,    38,
       0,     0,    39,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,     0,     0,    42,     0,     0,     0,
       0,   821,     0,     0,    43,     0,     0,     0,     0,     0,
      44,     0,     0,     0,     0,     0,     0,     0,    45,     0,
       0,     0,     0,    46,    47,    48,     0,     0,     0,     0,
    2639,     0,     0,   273,     0,   275,     0,     0,     0,     0,
       0,  2596,     0,     0,     0,     0,     0,     0,     0,  2597,
       0,     0,     0,     0,     0,    49,     0,     0,     0,     0,
       0,     0,    50,     0,  2598,     0,     0,     0,     0,  3150,
       0,     0,     0,  3152,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3179,  3180,     0,     0,     0,     0,     0,    51,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    52,
    3200,     0,  2600,    53,     0,     0,    54,     0,     0,  3210,
       0,  3212,    55,  3214,     0,     0,     0,     0,     0,     0,
    2601,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,     2,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    56,     0,     0,     0,     0,     0,    57,     0,
       0,     0,     4,     0,     0,     0,     0,     0,    58,     0,
       0,     0,     0,     0,     0,     0,     5,     6,     0,     0,
       0,     0,     0,     0,     7,  2605,  3272,  2606,     0,     8,
       9,     0,     0,     0,     0,  2608,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    11,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    12,     0,     0,   821,     0,     0,     0,
    1979,    13,    14,    15,     0,     0,     0,  2614,     0,     0,
       0,     0,     0,     0,    16,    17,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     821,     0,    19,     0,     0,     0,     0,     0,     0,     0,
       0,  3354,     0,     0,     0,     0,     0,     0,     0,    20,
       0,   821,     0,  2615,  2616,  2617,     0,     0,     0,     0,
    2618,     0,     0,     0,    21,     0,    22,     0,     0,     0,
       0,    23,     0,     0,     0,    24,  2619,     0,     0,     0,
    2620,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2621,
       0,    25,     0,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2623,     0,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3978,     0,     0,     0,    28,     0,     0,
       0,    29,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3487,  3488,     0,     0,     0,     0,     0,     0,     0,   958,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   959,     0,     0,     0,   821,     0,     0,     0,   821,
       0,     0,   896,   960,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   961,   942,     0,
       0,     0,     0,     0,   821,   962,     0,     0,     0,     0,
     963,     0,  3519,     0,     0,     0,    30,     0,   821,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    31,     0,    32,   964,     0,   965,     0,
     966,     0,     0,     0,  3558,  3559,     0,     0,    33,     0,
       0,     0,   967,     0,     0,  2639,  3566,     0,     0,    34,
       0,  3568,     0,     0,  3569,     0,  3570,  3571,     0,     0,
       0,     0,     0,    14,    15,     0,     0,     0,     0,     0,
       0,    35,     0,     0,    36,     0,    37,     0,     0,    38,
       0,     0,    39,    40,     0,     0,     0,     0,     0, -1895,
     968,     0,     0,    41,     0,   969,    42,     0,   970,     0,
       0,     0,     0,     0,    43,     0,     0,     0,     0,     0,
      44,     0,     0,     0,  3978,     0,     0,     0,    45,     0,
    3597,     0,     0,    46,    47,    48,   971,     0,   972,     0,
       0,     0,  4174,     0,     0,     0,   973,     0,   974,     0,
       0,     0,     0,     0,  3597,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    49,     0,     0,     0,     0,
       0,     0,    50,     0,   975,   976,   977,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     821,     0,     0,     0,     0,     0,     0,   978,   821,     0,
       0,     0,     0,     0,   821,     0,   821,     0,     0,     0,
    3597,     0,     0,     0,     0,     0,     0,    51,     0,   979,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    52,
       0,     0,     0,    53,     0,     0,    54,     0,     0,     0,
       0,     0,    55,     0,     0,     0,     0,     0,     0,   980,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    56,     0,     0,     0,     0,     0,    57,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    58,     0,
       0,     0,     0,     0,     0,   821,     0,     0,     0,     0,
       0,  4174,  4174,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   981,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4331,     0,     0,     0,  4331,  4331,
       0,     0,   982,     0,     0,   821,     0,     0,     0,     0,
       0,     0,     0,   983,   984,     0,     0,   985,   986,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   987,     0,
       0,     0,     0,   821,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   988,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   989,
       0,     0,     0,     0,   821,     0,   821,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   821,     0,  4174,  4174,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -2501,     0,     0,     0,   990,  3597,     0,  4331,     0,     0,
       0,     0,     0,     0,     0,     0,  4331,     0,     0,     0,
    4331,     0,   991,   992,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3882,     0,     0,     0,     0,     0,     0,     0,  3354,
       0,  3717,  3718,     0,     0,     0,     0,  3719,     0,  3720,
       0,  3721,  3722,     0,     0,     0,     0,     0,     0,     0,
    3910,   993,  4331,     0,     0,     0,     0,     0,  3536,     0,
       0,     0, -2501,     0,     0,     0,     0,     0,     0,     0,
     994,     0,     0,     0,     0,   821,     0,  4174,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4174,   821,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4548,     0,     0,     0,     0,  3723,     0,   821,  3724,     0,
       0,     0,     0,     0,     0,     0,  3725,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3726,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4174,
       0,  3727,     0,     0,     0,  4331,     0,  4331,  4331,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   821,  4174,  3354,     0,     0,  3728,  4017,  3729,
       0,     0,     0,     0,     0,  4174,  4174,     0,     0,     0,
       0,     0,  3730,  3731,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   821,     0,
       0,     0,     0,  3597,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3354,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3732,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4174,     0,     0,     0,     0,     0,
       0,   821,     0,     0,  4174,     0,  3733,     0,     0,     0,
       0,     0,     0,     0,     0,  3734,  3735,     0,  3736,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   821,     0,     0,     0,     0,     0,     0,  4174,     0,
    4174,     0,  3737,  3738,  3739,     0,     0,     0,     0,     0,
       0,     0,   821,     0,     0,   821,     0,     0,     0,     0,
       0,  3740,  3741,  3742,     0,  4174,     0,     0,  3743,     0,
       0,  3744,     0,  4174,     0,  4174,     0,  4174,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3745,  3746,
       0,  4174,     0,     0,     0,  4174,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4174,  4174,     0,     0,     0,     0,   821,     0,     0,     0,
       0,     0,     0,     0,  3747,  3748,  4174,  4174,     0,     0,
       0,  4174,     0,     0,     0,     0,     0,  4236,     0,     0,
       0,     0,     0,  4241,     0,  4243,     0,     0,     0,  3749,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   821,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3750,     0,     0,     0,  3751,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3752,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4293,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3753,     0,     0,  3754,  3354,     0,  3755,  3756,  3757,  3758,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3354,     0,     0,     0,     0,     0,     0,     0,
    3759,  3760,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3761,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4407,     0,  4408,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4416,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4528,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4533,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3597,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4603,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4659,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4691,     0,     0,     0,     0,     0,     0,     0,     0,   142,
       0,   143,   686,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,  4708,     0,   687,     0,   152,   153,
     154,   155,   156,   157,   688,   159,     0,   160,     0,     0,
     689,   161,   690,   691,   692,   162,   693,     0,   163,   164,
     165,  1761,   166,     0,   167,   168,     0,     0,   169,   694,
     695,   170,   171,     0,   172,   696,   697,   174,   175,     0,
     176,   177,   178,   179,   180,   698,   182,     0,   699,   184,
     700,   701,   702,   703,   704,  4757,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   705,   204,     0,   205,   706,   707,   206,     0,     0,
     207,   708,   208,   709,   710,   209,     0,   210,   711,   712,
       0,   211,   212,   213,   713,   714,   715,     0,     0,     0,
       0,   716,   216,   717,     0,  3597,   718,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,   719,     0,   244,   245,   246,   247,   720,   721,
     248,   249,     0,   250,   251,   252,   722,     0,   253,     0,
       0,     0,   254,     0,   255,     0,   256,     0,   257,   258,
     723,   260,   724,   262,   263,     0,   264,     0,   725,     0,
     265,   266,   267,     0,   268,   726,   727,     0,   269,   270,
       0,     0,     0,   728,   272,   273,   274,   275,   729,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
     730,   281,   282,   731,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   732,     0,  1762,   292,     0,   733,   293,   294,     0,
       0,     0,     0,     0,   734,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,   735,     0,     0,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,   736,   321,   322,   323,   324,   737,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   738,   332,     0,
       0,   739,   334,   740,   335,     0,   336,   741,   742,   743,
     744,   745,   341,   342,   343,   344,   345,     0,   746,   346,
     347,     0,     0,   348,   349,   350,   351,   747,   748,   749,
     352,   353,     0,   750,   751,   354,     0,   355,   356,   752,
       0,   358,   359,   360,   361,     0,   362,   363,     0,     0,
       0,     0,     0,     0,     0,     0,   364,   365,   366,     0,
     753,   367,     0,   368,     0,   369,   370,   754,   372,   373,
     374,   375,   755,   756,   378,   757,     0,   379,   380,   381,
       0,   382,     0,   383,   384,   385,   386,   387,     0,   758,
     389,   390,     0,     0,   391,     0,     0,     0,   392,   393,
     394,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,   403,     0,   404,   405,   406,   759,   760,   407,
       0,   408,     0,   409,   410,     0,   411,   412,     0,   413,
       0,   761,     0,   762,   415,   416,   417,   418,   419,   420,
     763,   764,   423,   424,   425,   426,     0,   765,   428,     0,
       0,     0,   429,   430,   431,   432,     0,     0,     0,   433,
       0,     0,     0,   434,     0,   435,   436,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
       0,     0,     0,     0,   447,   448,     0,   449,     0,     0,
     450,     0,     0,   451,   452,     0,     0,     0,   453,   766,
     767,   454,   455,     0,   456,   457,   768,   459,   460,   461,
     769,   770,   462,   463,   464,   465,   771,   466,   467,     0,
     468,     0,   469,   470,   471,   472,     0,   772,   473,   474,
       0,   773,   774,   775,   776,     0,     0,     0,     0,  1763,
     479,   480,   481,     0,   777,   778,   779,   483,   484,   485,
     780,   486,   487,   781,   488,   489,     0,   490,   491,     0,
       0,   492,     0,     0,   493,     0,   494,     0,   782,   496,
     497,     0,     0,   783,   784,   785,   786,   498,     0,     0,
     499,   787,     0,   788,   500,   501,   502,   503,   504,   789,
     790,     0,     0,     0,     0,     0,     0,   507,   508,     0,
     509,   510,   511,     0,     0,   791,     0,     0,     0,     0,
     792,   793,     0,     0,     0,     0,   794,   795,     0,     0,
     796,   797,     0,     0,   798,   799,   142,     0,   143,   686,
     145,   146,   147,   148,  1975,     0,   149,     0,     0,     0,
     150,     0,     0,   687,     0,   152,   153,   154,   155,   156,
     157,   688,   159,     0,   160,     0,     0,  1976,   161,   690,
     691,   692,   162,   693,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,   694,   695,   170,   171,
       0,   172,   696,   697,   174,   175,     0,   176,   177,   178,
     179,   180,   698,   182,     0,   699,   184,   700,   701,   702,
     703,   704,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   705,   204,
       0,   205,   706,   707,   206,     0,     0,   207,   708,   208,
     709,   710,   209,     0,   210,   711,   712,     0,   211,   212,
     213,   713,   714,   715,     0,     0,     0,     0,   716,   216,
     717,     0,     0,  1977,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   719,
       0,   244,   245,   246,   247,   720,   721,   248,   249,     0,
     250,   251,   252,   722,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   723,   260,   724,
     262,   263,     0,   264,     0,   725,     0,   265,   266,   267,
       0,   268,   726,   727,     0,   269,   270,     0,     0,     0,
     728,   272,   273,   274,   275,   729,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,   730,   281,   282,
     731,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,     0,     0,   289,   290,   732,     0,
       0,   292,     0,   733,   293,   294,     0,     0,     0,     0,
       0,   734,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,   735,     0,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,   736,   321,
     322,   323,   324,   737,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   738,   332,     0,     0,   739,   334,
     740,   335,     0,   336,   741,   742,   743,   744,   745,   341,
     342,   343,   344,   345,     0,   746,   346,   347,     0,     0,
     348,   349,   350,   351,   747,   748,   749,   352,   353,     0,
     750,   751,   354,     0,   355,   356,   752,  1978,   358,   359,
     360,   361,     0,   362,   363,     0,     0,     0,     0,     0,
       0,     0,     0,   364,   365,   366,     0,   753,   367,     0,
     368,     0,   369,   370,   754,   372,   373,   374,   375,   755,
     756,   378,   757,     0,   379,   380,   381,     0,   382,     0,
     383,   384,   385,   386,   387,     0,   758,   389,   390,     0,
       0,   391,     0,     0,     0,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,   400,   401,     0,   402,   403,
       0,   404,   405,   406,   759,   760,   407,     0,   408,     0,
     409,   410,     0,   411,   412,     0,   413,     0,   761,     0,
     762,   415,   416,   417,   418,   419,   420,   763,   764,   423,
     424,   425,   426,     0,   765,   428,     0,     0,     0,   429,
     430,   431,   432,     0,     0,     0,   433,     0,     0,     0,
     434,     0,   435,   436,   437,   438,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,     0,     0,     0,
       0,   447,   448,     0,   449,     0,     0,   450,     0,     0,
     451,   452,     0,     0,     0,   453,   766,   767,   454,   455,
       0,   456,   457,   768,   459,   460,   461,   769,   770,   462,
     463,   464,   465,   771,   466,   467,     0,   468,     0,   469,
     470,   471,   472,     0,   772,   473,   474,     0,   773,   774,
     775,   776,     0,     0,     0,     0,     0,   479,   480,   481,
       0,   777,   778,   779,   483,   484,   485,   780,   486,   487,
     781,   488,   489,     0,   490,   491,     0,     0,   492,     0,
       0,   493,     0,   494,     0,   782,   496,   497,     0,     0,
     783,   784,   785,   786,   498,     0,     0,   499,   787,     0,
     788,   500,   501,   502,   503,   504,   789,   790,     0,     0,
       0,     0,     0,     0,   507,   508,     0,   509,   510,   511,
       0,     0,   791,     0,     0,     0,     0,   792,   793,     0,
       0,     0,     0,   794,   795,     0,     0,   796,   797,     0,
       0,   798,   799,   142,     0,   143,   686,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     687,     0,   152,   153,   154,   155,   156,   157,   688,   159,
       0,   160,     0,     0,   689,   161,   690,   691,   692,   162,
     693,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,   694,   695,   170,   171,     0,   172,   696,
     697,   174,   175,     0,   176,   177,   178,   179,   180,   698,
     182,     0,   699,   184,   700,   701,   702,   703,   704,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   705,   204,     0,   205,   706,
     707,   206,     0,     0,   207,   708,   208,   709,   710,   209,
       0,   210,   711,   712,     0,   211,   212,   213,   713,   714,
     715,     0,     0,     0,     0,   716,   216,   717,     0,     0,
     718,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   719,     0,   244,   245,
     246,   247,   720,   721,   248,   249,     0,   250,   251,   252,
     722,     0,   253,     0,     0,     0,   254,  2293,   255,     0,
     256,     0,   257,   258,   723,   260,   724,   262,   263,     0,
     264,     0,   725,     0,   265,   266,   267,     0,   268,   726,
     727,     0,   269,   270,     0,     0,     0,   728,   272,   273,
     274,   275,   729,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,   730,   281,   282,   731,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   732,     0,     0,   292,     0,
     733,   293,   294,     0,     0,     0,     0,     0,   734,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,   735,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   736,   321,   322,   323,   324,
     737,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   738,   332,     0,     0,   739,   334,   740,   335,     0,
     336,   741,   742,   743,   744,   745,   341,   342,   343,   344,
     345,     0,   746,   346,   347,     0,     0,   348,   349,   350,
     351,   747,   748,   749,   352,   353,     0,   750,   751,   354,
       0,   355,   356,   752,     0,   358,   359,   360,   361,     0,
     362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     364,   365,   366,     0,   753,   367,     0,   368,     0,   369,
     370,   754,   372,   373,   374,   375,   755,   756,   378,   757,
       0,   379,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   758,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,     0,   404,   405,
     406,   759,   760,   407,     0,   408,     0,   409,   410,     0,
     411,   412,     0,   413,     0,   761,     0,   762,   415,   416,
     417,   418,   419,   420,   763,   764,   423,   424,   425,   426,
       0,   765,   428,     0,     0,     0,   429,   430,   431,   432,
       0,     0,     0,   433,     0,     0,     0,   434,     0,   435,
     436,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,   452,     0,
       0,     0,   453,   766,   767,   454,   455,     0,   456,   457,
     768,   459,   460,   461,   769,   770,   462,   463,   464,   465,
     771,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,   772,   473,   474,     0,   773,   774,   775,   776,     0,
       0,     0,     0,     0,   479,   480,   481,     0,   777,   778,
     779,   483,   484,   485,   780,   486,   487,   781,   488,   489,
       0,   490,   491,     0,     0,   492,     0,     0,   493,     0,
     494,     0,   782,   496,   497,     0,     0,   783,   784,   785,
     786,   498,     0,     0,   499,   787,     0,   788,   500,   501,
     502,   503,   504,   789,   790,     0,     0,     0,     0,     0,
       0,   507,   508,     0,   509,   510,   511,     0,     0,   791,
       0,     0,     0,     0,   792,   793,     0,     0,     0,     0,
     794,   795,     0,     0,   796,   797,     0,     0,   798,   799,
     142,     0,   143,   686,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   687,     0,   152,
     153,   154,   155,   156,   157,   688,   159,     0,   160,     0,
       0,   689,   161,   690,   691,   692,   162,   693,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
     694,   695,   170,   171,     0,   172,   696,   697,   174,   175,
       0,   176,   177,   178,   179,   180,   698,   182,     0,   699,
     184,   700,   701,   702,   703,   704,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   705,   204,     0,   205,   706,   707,   206,     0,
       0,   207,   708,   208,   709,   710,   209,     0,   210,   711,
     712,     0,   211,   212,   213,   713,   714,   715,     0,     0,
       0,     0,   716,   216,   717,     0,     0,   718,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,   719,     0,   244,   245,   246,   247,   720,
     721,   248,   249,     0,   250,   251,   252,   722,     0,   253,
       0,     0,     0,   254,  2295,   255,     0,   256,     0,   257,
     258,   723,   260,   724,   262,   263,     0,   264,     0,   725,
       0,   265,   266,   267,     0,   268,   726,   727,     0,   269,
     270,     0,     0,     0,   728,   272,   273,   274,   275,   729,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,   730,   281,   282,   731,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   732,     0,     0,   292,     0,   733,   293,   294,
       0,     0,     0,     0,     0,   734,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,   735,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   736,   321,   322,   323,   324,   737,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   738,   332,
       0,     0,   739,   334,   740,   335,     0,   336,   741,   742,
     743,   744,   745,   341,   342,   343,   344,   345,     0,   746,
     346,   347,     0,     0,   348,   349,   350,   351,   747,   748,
     749,   352,   353,     0,   750,   751,   354,     0,   355,   356,
     752,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,   753,   367,     0,   368,     0,   369,   370,   754,   372,
     373,   374,   375,   755,   756,   378,   757,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     758,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,   759,   760,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   761,     0,   762,   415,   416,   417,   418,   419,
     420,   763,   764,   423,   424,   425,   426,     0,   765,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
     766,   767,   454,   455,     0,   456,   457,   768,   459,   460,
     461,   769,   770,   462,   463,   464,   465,   771,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,   772,   473,
     474,     0,   773,   774,   775,   776,     0,     0,     0,     0,
       0,   479,   480,   481,     0,   777,   778,   779,   483,   484,
     485,   780,   486,   487,   781,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   782,
     496,   497,     0,     0,   783,   784,   785,   786,   498,     0,
       0,   499,   787,     0,   788,   500,   501,   502,   503,   504,
     789,   790,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,     0,   791,     0,     0,     0,
       0,   792,   793,     0,     0,     0,     0,   794,   795,     0,
       0,   796,   797,     0,     0,   798,   799,   142,     0,   143,
     686,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   687,     0,   152,   153,   154,   155,
     156,   157,   688,   159,     0,   160,     0,     0,   689,   161,
     690,   691,   692,   162,   693,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,   694,   695,   170,
     171,     0,   172,   696,   697,   174,   175,     0,   176,   177,
     178,   179,   180,   698,   182,     0,   699,   184,   700,   701,
     702,   703,   704,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   705,
     204,     0,   205,   706,   707,   206,     0,     0,   207,   708,
     208,   709,   710,   209,     0,   210,   711,   712,     0,   211,
     212,   213,   713,   714,   715,     0,     0,     0,     0,   716,
     216,   717,     0,     0,   718,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
     719,     0,   244,   245,   246,   247,   720,   721,   248,   249,
       0,   250,   251,   252,   722,     0,   253,     0,     0,     0,
     254,  2297,   255,     0,   256,     0,   257,   258,   723,   260,
     724,   262,   263,     0,   264,     0,   725,     0,   265,   266,
     267,     0,   268,   726,   727,     0,   269,   270,     0,     0,
       0,   728,   272,   273,   274,   275,   729,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,   730,   281,
     282,   731,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   732,
       0,     0,   292,     0,   733,   293,   294,     0,     0,     0,
       0,     0,   734,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,   735,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,   736,
     321,   322,   323,   324,   737,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   738,   332,     0,     0,   739,
     334,   740,   335,     0,   336,   741,   742,   743,   744,   745,
     341,   342,   343,   344,   345,     0,   746,   346,   347,     0,
       0,   348,   349,   350,   351,   747,   748,   749,   352,   353,
       0,   750,   751,   354,     0,   355,   356,   752,     0,   358,
     359,   360,   361,     0,   362,   363,     0,     0,     0,     0,
       0,     0,     0,     0,   364,   365,   366,     0,   753,   367,
       0,   368,     0,   369,   370,   754,   372,   373,   374,   375,
     755,   756,   378,   757,     0,   379,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   758,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,     0,   404,   405,   406,   759,   760,   407,     0,   408,
       0,   409,   410,     0,   411,   412,     0,   413,     0,   761,
       0,   762,   415,   416,   417,   418,   419,   420,   763,   764,
     423,   424,   425,   426,     0,   765,   428,     0,     0,     0,
     429,   430,   431,   432,     0,     0,     0,   433,     0,     0,
       0,   434,     0,   435,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,   452,     0,     0,     0,   453,   766,   767,   454,
     455,     0,   456,   457,   768,   459,   460,   461,   769,   770,
     462,   463,   464,   465,   771,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,   772,   473,   474,     0,   773,
     774,   775,   776,     0,     0,     0,     0,     0,   479,   480,
     481,     0,   777,   778,   779,   483,   484,   485,   780,   486,
     487,   781,   488,   489,     0,   490,   491,     0,     0,   492,
       0,     0,   493,     0,   494,     0,   782,   496,   497,     0,
       0,   783,   784,   785,   786,   498,     0,     0,   499,   787,
       0,   788,   500,   501,   502,   503,   504,   789,   790,     0,
       0,     0,     0,     0,     0,   507,   508,     0,   509,   510,
     511,     0,     0,   791,     0,     0,     0,     0,   792,   793,
       0,     0,     0,     0,   794,   795,     0,     0,   796,   797,
       0,     0,   798,   799,   142,     0,   143,   686,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   687,     0,   152,   153,   154,   155,   156,   157,   688,
     159,     0,   160,     0,     0,   689,   161,   690,   691,   692,
     162,   693,     0,   163,   164,   165,     0,   166,     0,   167,
     168,     0,     0,   169,   694,   695,   170,   171,     0,   172,
     696,   697,   174,   175,     0,   176,   177,   178,   179,   180,
     698,   182,     0,   699,   184,   700,   701,   702,   703,   704,
       0,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,   199,     0,   200,   201,   202,   705,   204,     0,   205,
     706,   707,   206,     0,     0,   207,   708,   208,   709,   710,
     209,     0,   210,   711,   712,     0,   211,   212,   213,   713,
     714,   715,     0,     0,     0,     0,   716,   216,   717,     0,
       0,   718,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,   225,     0,
       0,   226,   227,   228,     0,     0,     0,   229,     0,   230,
     231,     0,   232,   233,   234,     0,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   719,     0,   244,
     245,   246,   247,   720,   721,   248,   249,     0,   250,   251,
     252,   722,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   723,   260,   724,   262,   263,
       0,   264,     0,   725,     0,   265,   266,   267,     0,   268,
     726,   727,     0,   269,   270,     0,     0,     0,   728,   272,
     273,   274,   275,   729,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,   730,   281,   282,   731,     0,
       0,   283,     0,   284,   285,     0,   286,   287,     0,     0,
       0,   288,     0,     0,   289,   290,   732,     0,     0,   292,
       0,   733,   293,   294,     0,     0,     0,     0,     0,   734,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
     735,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,   736,   321,   322,   323,
     324,   737,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   738,   332,     0,     0,   739,   334,   740,   335,
       0,   336,   741,   742,   743,   744,   745,   341,   342,   343,
     344,   345,     0,   746,   346,   347,     0,     0,   348,   349,
     350,   351,   747,   748,   749,   352,   353,     0,   750,   751,
     354,     0,   355,   356,   752,     0,   358,   359,   360,   361,
       0,   362,   363,     0,     0,     0,     0,     0,     0,     0,
       0,   364,   365,   366,     0,   753,   367,     0,   368,     0,
     369,   370,   754,   372,   373,   374,   375,   755,   756,   378,
     757,     0,   379,   380,   381,     0,   382,     0,   383,   384,
     385,   386,   387,     0,   758,   389,   390,     0,     0,   391,
       0,     0,     0,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,   400,   401,     0,   402,   403,     0,   404,
     405,   406,   759,   760,   407,     0,   408,     0,   409,   410,
       0,   411,   412,     0,   413,     0,   761,     0,   762,   415,
     416,   417,   418,   419,   420,   763,   764,   423,   424,   425,
     426,     0,   765,   428,     0,     0,     0,   429,   430,   431,
     432,     0,     0,     0,   433,     0,     0,     0,   434,     0,
     435,   436,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,     0,     0,     0,     0,   447,
     448,     0,   449,     0,     0,   450,     0,     0,   451,   452,
       0,     0,     0,   453,   766,   767,   454,   455,     0,   456,
     457,   768,   459,   460,   461,   769,   770,   462,   463,   464,
     465,   771,   466,   467,     0,   468,     0,   469,   470,   471,
     472,     0,   772,   473,   474,     0,   773,   774,   775,   776,
       0,     0,     0,     0,     0,   479,   480,   481,     0,   777,
     778,   779,   483,   484,   485,   780,   486,   487,   781,   488,
     489,     0,   490,   491,     0,     0,   492,     0,     0,   493,
       0,   494,     0,   782,   496,   497,     0,     0,   783,   784,
     785,   786,   498,     0,     0,   499,   787,     0,   788,   500,
     501,   502,   503,   504,   789,   790,     0,     0,     0,     0,
       0,     0,   507,   508,     0,   509,   510,   511,     0,     0,
     791,     0,     0,     0,     0,   792,   793,     0,     0,     0,
       0,   794,   795,     0,     0,   796,   797,     0,     0,   798,
     799,   142,     0,   143,   686,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   687,     0,
     152,   153,   154,   155,   156,   157,   688,   159,     0,   160,
       0,     0,   689,   161,   690,   691,   692,   162,   693,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,   694,   695,   170,   171,     0,   172,   696,   697,   174,
     175,     0,   176,   177,   178,   179,   180,   698,   182,     0,
     699,   184,   700,   701,   702,   703,   704,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   705,   204,     0,   205,   706,   707,   206,
       0,     0,   207,   708,   208,   709,   710,   209,     0,   210,
     711,   712,     0,   211,   212,   213,   713,   714,   715,     0,
       0,     0,     0,   716,   216,   717,     0,     0,   718,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,   719,     0,   244,   245,   246,   247,
     720,   721,   248,   249,     0,   250,   251,   252,   722,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   723,   260,   724,   262,   263,     0,   264,     0,
     725,     0,   265,   266,   267,     0,   268,   726,   727,     0,
     269,   270,     0,     0,     0,   728,   272,   273,   274,   275,
     729,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,   730,   281,   282,   731,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   732,     0,     0,   292,     0,   733,   293,
     294,     0,     0,     0,     0,     0,   734,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,   735,     0,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,   736,   321,   322,   323,   324,   737,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   738,
     332,     0,     0,   739,   334,   740,   335,     0,   336,   741,
     742,   743,   744,   745,   341,   342,   343,   344,   345,     0,
     746,   346,   347,     0,     0,   348,   349,   350,   351,   747,
     748,   749,   352,   353,     0,   750,   751,   354,     0,   355,
     356,   752,     0,   358,   359,   360,   361,     0,   362,   363,
       0,     0,     0,     0,     0,     0,     0,     0,   364,   365,
     366,     0,   753,   367,     0,   368,     0,   369,   370,   754,
     372,   373,   374,   375,   755,   756,   378,   757,     0,   379,
     380,   381,     0,   382,     0,   383,   384,   385,   386,   387,
       0,   758,   389,   390,     0,     0,   391,     0,     0,     0,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,     0,   404,   405,   406,   759,
     760,   407,     0,   408,     0,   409,   410,     0,   411,   412,
       0,   413,     0,   761,     0,   762,   415,   416,   417,   418,
     419,   420,   763,   764,   423,   424,   425,   426,     0,   765,
     428,     0,     0,     0,   429,   430,   431,   432,     0,     0,
       0,   433,     0,     0,     0,   434,     0,   435,   436,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,     0,     0,     0,     0,   447,   448,     0,   449,
       0,     0,   450,     0,     0,   451,   452,     0,     0,     0,
     453,   766,   767,   454,   455,     0,   456,   457,   768,   459,
     460,   461,   769,   770,   462,   463,   464,   465,   771,   466,
     467,     0,   468,     0,   469,   470,   471,   472,     0,   772,
     473,   474,     0,   773,   774,   775,   776,     0,     0,     0,
       0,     0,   479,   480,   481,     0,   777,   778,   779,   483,
     484,   485,   780,   486,   487,   781,   488,   489,     0,   490,
     491,     0,     0,   492,     0,     0,   493,     0,   494,     0,
     782,   496,   497,     0,     0,   783,   784,   785,   786,   498,
       0,     0,   499,   787,     0,   788,   500,   501,   502,   503,
     504,   789,   790,     0,     0,     0,     0,     0,     0,   507,
     508,     0,   509,   510,   511,     0,     0,   791,     0,     0,
       0,     0,   792,   793,     0,     0,     0,     0,   794,  1162,
       0,     0,   796,   797,     0,     0,   798,   799,   142,     0,
     143,   686,   145,   146,   147,   148,  1796,     0,   149,     0,
       0,     0,  1797,     0,     0,   687,     0,   152,   153,   154,
     155,   156,   157,   688,   159,     0,   160,     0,     0,   689,
     161,   690,   691,   692,   162,   693,     0,   163,   164,   165,
       0,   166,     0,   167,   168,     0,     0,   169,   694,   695,
     170,   171,     0,   172,   696,   697,   174,   175,     0,   176,
     177,   178,   179,   180,   698,   182,     0,   699,   184,   700,
     701,   702,   703,   704,     0,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
     705,   204,     0,   205,   706,   707,   206,     0,     0,   207,
     708,   208,   709,   710,   209,     0,   210,   711,   712,     0,
     211,   212,   213,   713,   714,   715,     0,     0,     0,     0,
     716,   216,   717,     0,     0,   718,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,   225,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,   230,   231,     0,   232,   233,   234,     0,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   719,     0,   244,   245,   246,   247,   720,   721,   248,
     249,     0,   250,   251,   252,   722,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   723,
     260,   724,   262,   263,     0,   264,     0,   725,     0,   265,
     266,   267,     0,   268,   726,   727,     0,   269,   270,     0,
       0,     0,   728,   272,   273,   274,   275,   729,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,   730,
     281,   282,   731,     0,     0,   283,     0,   284,   285,     0,
     286,   287,     0,     0,     0,   288,     0,     0,   289,   290,
     732,     0,     0,   292,     0,   733,   293,   294,     0,     0,
       0,     0,     0,   734,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,   735,     0,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     736,   321,   322,   323,   324,   737,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   738,   332,     0,     0,
     739,   334,   740,   335,     0,   336,   741,   742,   743,   744,
     745,   341,   342,   343,   344,   345,     0,   746,   346,   347,
       0,     0,   348,   349,   350,   351,   747,     0,   749,   352,
     353,     0,   750,   751,   354,     0,   355,   356,   752,     0,
     358,   359,   360,   361,     0,   362,   363,     0,     0,     0,
       0,     0,     0,     0,     0,   364,   365,   366,     0,   753,
     367,     0,   368,     0,   369,   370,   754,   372,   373,   374,
     375,   755,   756,   378,   757,     0,   379,   380,   381,     0,
     382,     0,   383,   384,   385,   386,   387,     0,   758,   389,
     390,     0,     0,   391,     0,     0,     0,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,   400,   401,     0,
     402,   403,     0,   404,   405,   406,   759,   760,   407,     0,
     408,     0,   409,   410,     0,   411,   412,     0,   413,     0,
     761,     0,   762,   415,   416,   417,   418,   419,   420,   763,
     764,   423,   424,   425,   426,     0,   765,   428,     0,     0,
       0,   429,   430,   431,   432,     0,     0,     0,   433,     0,
       0,     0,   434,     0,   435,   436,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,     0,
       0,     0,     0,   447,   448,     0,   449,     0,     0,   450,
       0,     0,   451,   452,     0,     0,     0,   453,   766,   767,
     454,   455,     0,   456,   457,   768,   459,   460,   461,   769,
     770,   462,   463,   464,   465,   771,   466,   467,     0,   468,
       0,   469,   470,   471,   472,     0,   772,   473,   474,     0,
     773,   774,   775,   776,     0,     0,     0,     0,     0,   479,
     480,   481,     0,   777,   778,   779,   483,   484,   485,   780,
     486,   487,   781,   488,   489,     0,   490,   491,     0,     0,
     492,     0,     0,   493,     0,   494,     0,   782,   496,   497,
       0,     0,   783,   784,   785,   786,   498,     0,     0,   499,
     787,     0,   788,   500,   501,   502,   503,   504,   789,   790,
       0,     0,     0,     0,     0,     0,   507,   508,     0,   509,
     510,   511,     0,     0,   791,     0,     0,     0,     0,   792,
     793,     0,     0,     0,     0,   794,   795,     0,     0,   796,
     797,     0,     0,   798,   799,   142,     0,   143,   686,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   687,     0,   152,   153,   154,   155,   156,   157,
     688,   159,     0,   160,     0,     0,   689,   161,   690,   691,
     692,   162,   693,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,   694,   695,   170,   171,     0,
     172,   696,   697,   174,   175,     0,   176,   177,   178,   179,
     180,   698,   182,     0,   699,   184,   700,   701,   702,   703,
     704,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   705,   204,     0,
     205,   706,   707,   206,     0,     0,   207,   708,   208,   709,
     710,   209,     0,   210,   711,   712,     0,   211,   212,   213,
     713,   714,   715,     0,     0,     0,     0,   716,   216,   717,
       0,     0,   718,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   719,     0,
     244,   245,   246,   247,   720,   721,   248,   249,     0,   250,
     251,   252,   722,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   723,   260,   724,   262,
     263,     0,   264,     0,   725,     0,   265,   266,   267,     0,
     268,   726,   727,     0,   269,   270,     0,     0,     0,   728,
     272,   273,   274,   275,   729,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,   730,   281,   282,   731,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   732,     0,     0,
     292,     0,   733,   293,   294,     0,     0,     0,     0,     0,
     734,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,   735,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,   736,   321,   322,
     323,   324,   737,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   738,   332,     0,     0,   739,   334,   740,
     335,     0,   336,   741,   742,   743,   744,   745,   341,   342,
     343,   344,   345,     0,   746,   346,   347,     0,     0,   348,
     349,   350,   351,   747,   748,   749,   352,   353,     0,   750,
     751,   354,     0,   355,   356,   752,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,   753,   367,     0,   368,
       0,   369,   370,   754,   372,   373,   374,   375,   755,   756,
     378,   757,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   758,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,   759,   760,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   761,     0,   762,
     415,   416,   417,   418,   419,   420,   763,   764,   423,   424,
     425,   426,     0,   765,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,   766,   767,   454,   455,     0,
     456,   457,   768,   459,   460,   461,   769,   770,   462,   463,
     464,   465,   771,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,   772,   473,   474,     0,   773,   774,   775,
     776,     0,     0,     0,     0,     0,   479,   480,   481,     0,
     777,   778,   779,   483,   484,   485,   780,   486,   487,   781,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,  1893,   496,   497,     0,     0,   783,
     784,   785,   786,   498,     0,     0,   499,   787,     0,   788,
     500,   501,   502,   503,   504,   789,   790,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
       0,   791,     0,     0,     0,     0,   792,   793,     0,     0,
       0,     0,   794,   795,     0,     0,   796,   797,     0,     0,
     798,   799,   142,     0,   143,   686,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,   687,
       0,   152,   153,   154,   155,   156,   157,   688,   159,     0,
     160,     0,     0,   689,   161,   690,   691,   692,   162,   693,
       0,   163,   164,   165,     0,   166,     0,   167,   168,     0,
       0,   169,   694,   695,   170,   171,     0,   172,   696,   697,
     174,   175,     0,   176,   177,   178,   179,   180,   698,   182,
       0,   699,   184,   700,   701,   702,   703,   704,     0,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,   705,   204,     0,   205,   706,   707,
     206,     0,     0,   207,   708,   208,   709,   710,   209,     0,
     210,   711,   712,     0,   211,   212,   213,   713,   714,   715,
       0,     0,     0,     0,   716,   216,   717,     0,     0,   718,
     217,     0,   218,     0,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,   225,     0,     0,   226,
     227,   228,     0,     0,     0,   229,     0,   230,   231,     0,
     232,   233,   234,     0,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,   719,     0,   244,   245,   246,
     247,   720,   721,   248,   249,     0,   250,   251,   252,   722,
       0,   253,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   723,   260,   724,   262,   263,     0,   264,
       0,   725,     0,   265,   266,   267,     0,   268,   726,   727,
       0,   269,   270,     0,     0,     0,   728,   272,   273,   274,
     275,   729,     0,   276,   277,   278,     0,   279,     0,   280,
       0,     0,     0,   730,   281,   282,  2710,     0,     0,   283,
       0,   284,   285,     0,   286,   287,     0,     0,     0,   288,
       0,     0,   289,   290,   732,     0,     0,   292,     0,   733,
     293,   294,     0,     0,     0,     0,     0,   734,   296,     0,
     297,     0,   298,     0,   299,   300,     0,     0,   735,     0,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,   736,   321,   322,   323,   324,   737,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     738,   332,     0,     0,   739,   334,   740,   335,     0,   336,
     741,   742,   743,   744,   745,   341,   342,   343,   344,   345,
       0,   746,   346,   347,     0,     0,   348,   349,   350,   351,
     747,   748,   749,   352,   353,     0,   750,   751,   354,     0,
     355,   356,   752,     0,   358,   359,   360,   361,     0,   362,
     363,     0,     0,     0,     0,     0,     0,     0,     0,   364,
     365,   366,     0,   753,   367,     0,   368,     0,   369,   370,
     754,   372,   373,   374,   375,   755,   756,   378,   757,     0,
     379,   380,   381,     0,   382,     0,   383,   384,   385,   386,
     387,     0,   758,   389,   390,     0,     0,   391,     0,     0,
       0,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,   400,   401,     0,   402,   403,     0,   404,   405,   406,
     759,   760,   407,     0,   408,     0,   409,   410,     0,   411,
     412,     0,   413,     0,   761,     0,   762,   415,   416,   417,
     418,   419,   420,   763,   764,   423,   424,   425,   426,     0,
     765,   428,     0,     0,     0,   429,   430,   431,   432,     0,
       0,     0,   433,     0,     0,     0,   434,     0,   435,   436,
     437,   438,   439,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,     0,     0,     0,     0,   447,   448,     0,
     449,     0,     0,   450,     0,     0,   451,   452,     0,     0,
       0,   453,   766,   767,   454,   455,     0,   456,   457,   768,
     459,   460,   461,   769,   770,   462,   463,   464,   465,   771,
     466,   467,     0,   468,     0,   469,   470,   471,   472,     0,
     772,   473,   474,     0,   773,   774,   775,   776,     0,     0,
       0,     0,     0,   479,   480,   481,     0,   777,   778,   779,
     483,   484,   485,   780,   486,   487,   781,   488,   489,     0,
     490,   491,     0,     0,   492,     0,     0,   493,     0,   494,
       0,   782,   496,   497,     0,     0,   783,   784,   785,   786,
     498,     0,     0,   499,   787,     0,   788,   500,   501,   502,
     503,   504,   789,   790,     0,     0,     0,     0,     0,     0,
     507,   508,     0,   509,   510,   511,     0,     0,   791,     0,
       0,     0,     0,   792,   793,     0,     0,     0,     0,   794,
     795,     0,     0,   796,   797,     0,     0,   798,   799,   142,
       0,   143,   686,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   687,     0,   152,   153,
     154,   155,   156,   157,   688,   159,     0,   160,     0,     0,
     689,   161,   690,   691,   692,   162,   693,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,   694,
     695,   170,   171,     0,   172,   696,   697,   174,   175,     0,
     176,   177,   178,   179,   180,   698,   182,     0,   699,   184,
     700,   701,   702,   703,   704,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   705,   204,     0,   205,   706,   707,   206,     0,     0,
     207,   708,   208,   709,   710,   209,     0,   210,   711,   712,
       0,   211,   212,   213,   713,   714,   715,     0,     0,     0,
       0,   716,   216,   717,     0,     0,   718,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,   719,     0,   244,   245,   246,   247,   720,   721,
     248,   249,     0,   250,   251,   252,   722,     0,   253,     0,
       0,     0,   254,     0,   255,     0,   256,     0,   257,   258,
     723,   260,   724,   262,   263,     0,   264,     0,   725,     0,
     265,   266,   267,     0,   268,   726,   727,     0,   269,   270,
       0,     0,     0,   728,   272,   273,   274,   275,   729,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
     730,   281,   282,  2761,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   732,     0,     0,   292,     0,   733,   293,   294,     0,
       0,     0,     0,     0,   734,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,   735,     0,     0,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,   736,   321,   322,   323,   324,   737,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   738,   332,     0,
       0,   739,   334,   740,   335,     0,   336,   741,   742,   743,
     744,   745,   341,   342,   343,   344,   345,     0,   746,   346,
     347,     0,     0,   348,   349,   350,   351,   747,   748,   749,
     352,   353,     0,   750,   751,   354,     0,   355,   356,   752,
       0,   358,   359,   360,   361,     0,   362,   363,     0,     0,
       0,     0,     0,     0,     0,     0,   364,   365,   366,     0,
     753,   367,     0,   368,     0,   369,   370,   754,   372,   373,
     374,   375,   755,   756,   378,   757,     0,   379,   380,   381,
       0,   382,     0,   383,   384,   385,   386,   387,     0,   758,
     389,   390,     0,     0,   391,     0,     0,     0,   392,   393,
     394,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,   403,     0,   404,   405,   406,   759,   760,   407,
       0,   408,     0,   409,   410,     0,   411,   412,     0,   413,
       0,   761,     0,   762,   415,   416,   417,   418,   419,   420,
     763,   764,   423,   424,   425,   426,     0,   765,   428,     0,
       0,     0,   429,   430,   431,   432,     0,     0,     0,   433,
       0,     0,     0,   434,     0,   435,   436,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
       0,     0,     0,     0,   447,   448,     0,   449,     0,     0,
     450,     0,     0,   451,   452,     0,     0,     0,   453,   766,
     767,   454,   455,     0,   456,   457,   768,   459,   460,   461,
     769,   770,   462,   463,   464,   465,   771,   466,   467,     0,
     468,     0,   469,   470,   471,   472,     0,   772,   473,   474,
       0,   773,   774,   775,   776,     0,     0,     0,     0,     0,
     479,   480,   481,     0,   777,   778,   779,   483,   484,   485,
     780,   486,   487,   781,   488,   489,     0,   490,   491,     0,
       0,   492,     0,     0,   493,     0,   494,     0,   782,   496,
     497,     0,     0,   783,   784,   785,   786,   498,     0,     0,
     499,   787,     0,   788,   500,   501,   502,   503,   504,   789,
     790,     0,     0,     0,     0,     0,     0,   507,   508,     0,
     509,   510,   511,     0,     0,   791,     0,     0,     0,     0,
     792,   793,     0,     0,     0,     0,   794,   795,     0,     0,
     796,   797,     0,     0,   798,   799,   142,     0,   143,   686,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,   687,     0,   152,   153,   154,   155,   156,
     157,   688,   159,     0,   160,     0,     0,   689,   161,   690,
     691,   692,   162,   693,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,   694,   695,   170,   171,
       0,   172,   696,   697,   174,   175,     0,   176,   177,   178,
     179,   180,   698,   182,     0,   699,   184,   700,   701,   702,
     703,   704,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   705,   204,
       0,   205,   706,   707,   206,     0,     0,   207,   708,   208,
     709,   710,   209,     0,   210,   711,   712,     0,   211,   212,
     213,   713,   714,   715,     0,     0,     0,     0,   716,   216,
     717,     0,     0,  3596,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   719,
       0,   244,   245,   246,   247,   720,   721,   248,   249,     0,
     250,   251,   252,   722,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   723,   260,   724,
     262,   263,     0,   264,     0,   725,     0,   265,   266,   267,
       0,   268,   726,   727,     0,   269,   270,     0,     0,     0,
     728,   272,   273,   274,   275,   729,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,   730,   281,   282,
     731,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,     0,     0,   289,   290,   732,     0,
       0,   292,     0,   733,   293,   294,     0,     0,     0,     0,
       0,   734,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,   735,     0,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,   736,   321,
     322,   323,   324,   737,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   738,   332,     0,     0,   739,   334,
     740,   335,     0,   336,   741,   742,   743,   744,   745,   341,
     342,   343,   344,   345,     0,   746,   346,   347,     0,     0,
     348,   349,   350,   351,   747,   748,   749,   352,   353,     0,
     750,   751,   354,     0,   355,   356,   752,     0,   358,   359,
     360,   361,     0,   362,   363,     0,     0,     0,     0,     0,
       0,     0,     0,   364,   365,   366,     0,   753,   367,     0,
     368,     0,   369,   370,   754,   372,   373,   374,   375,   755,
     756,   378,   757,     0,   379,   380,   381,     0,   382,     0,
     383,   384,   385,   386,   387,     0,   758,   389,   390,     0,
       0,   391,     0,     0,     0,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,   400,   401,     0,   402,   403,
       0,   404,   405,   406,   759,   760,   407,     0,   408,     0,
     409,   410,     0,   411,   412,     0,   413,     0,   761,     0,
     762,   415,   416,   417,   418,   419,   420,   763,   764,   423,
     424,   425,   426,     0,   765,   428,     0,     0,     0,   429,
     430,   431,   432,     0,     0,     0,   433,     0,     0,     0,
     434,     0,   435,   436,   437,   438,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,     0,     0,     0,
       0,   447,   448,     0,   449,     0,     0,   450,     0,     0,
     451,   452,     0,     0,     0,   453,   766,   767,   454,   455,
       0,   456,   457,   768,   459,   460,   461,   769,   770,   462,
     463,   464,   465,   771,   466,   467,     0,   468,     0,   469,
     470,   471,   472,     0,   772,   473,   474,     0,   773,   774,
     775,   776,     0,     0,     0,     0,     0,   479,   480,   481,
       0,   777,   778,   779,   483,   484,   485,   780,   486,   487,
     781,   488,   489,     0,   490,   491,     0,     0,   492,     0,
       0,   493,     0,   494,     0,   782,   496,   497,     0,     0,
     783,   784,   785,   786,   498,     0,     0,   499,   787,     0,
     788,   500,   501,   502,   503,   504,   789,   790,     0,     0,
       0,     0,     0,     0,   507,   508,     0,   509,   510,   511,
       0,     0,   791,     0,     0,     0,     0,   792,   793,     0,
       0,     0,     0,   794,   795,     0,     0,   796,   797,     0,
       0,   798,   799,   142,     0,   143,   686,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     687,     0,   152,   153,   154,   155,   156,   157,   688,   159,
       0,   160,     0,     0,   689,   161,   690,   691,   692,   162,
     693,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,   694,   695,   170,   171,     0,   172,   696,
     697,   174,   175,     0,   176,   177,   178,   179,   180,   698,
     182,     0,   699,   184,   700,   701,   702,   703,   704,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   705,   204,     0,   205,   706,
     707,   206,     0,     0,   207,   708,   208,   709,   710,   209,
       0,   210,   711,   712,     0,   211,   212,   213,   713,   714,
     715,     0,     0,     0,     0,   716,   216,   717,     0,     0,
     718,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   719,     0,   244,   245,
     246,   247,   720,   721,   248,   249,     0,   250,   251,   252,
     722,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   723,   260,   724,   262,   263,     0,
     264,     0,   725,     0,   265,   266,   267,     0,   268,   726,
     727,     0,   269,   270,     0,     0,     0,   728,   272,   273,
     274,   275,   729,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,   730,   281,   282,   731,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   732,     0,     0,   292,     0,
     733,   293,   294,     0,     0,     0,     0,     0,   734,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,   735,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,   736,   321,   322,   323,   324,
     737,   325,   326,  4624,     0,     0,     0,   327,   328,   329,
     330,   738,   332,     0,     0,   739,   334,   740,   335,     0,
     336,   741,   742,   743,   744,   745,   341,   342,   343,   344,
     345,     0,   746,   346,   347,     0,     0,   348,   349,   350,
     351,   747,     0,   749,   352,   353,     0,   750,   751,   354,
       0,   355,   356,   752,     0,   358,   359,   360,   361,     0,
     362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     364,   365,   366,     0,   753,   367,     0,   368,     0,   369,
     370,   754,   372,   373,   374,   375,   755,   756,   378,   757,
       0,   379,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   758,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,     0,   404,   405,
     406,   759,   760,   407,     0,   408,     0,   409,   410,     0,
     411,   412,     0,   413,     0,   761,     0,   762,   415,   416,
     417,   418,   419,   420,   763,   764,   423,   424,   425,   426,
       0,   765,   428,     0,     0,     0,   429,   430,   431,   432,
       0,     0,     0,   433,     0,     0,     0,   434,     0,   435,
     436,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,   452,     0,
       0,     0,   453,   766,   767,   454,   455,     0,   456,   457,
     768,   459,   460,   461,   769,   770,   462,   463,   464,   465,
     771,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,   772,   473,   474,     0,   773,   774,   775,   776,     0,
       0,     0,     0,     0,   479,   480,   481,     0,   777,   778,
     779,   483,   484,   485,   780,   486,   487,   781,   488,   489,
       0,   490,   491,     0,     0,   492,     0,     0,   493,     0,
     494,     0,   782,   496,   497,     0,     0,   783,   784,   785,
     786,   498,     0,     0,   499,   787,     0,   788,   500,   501,
     502,   503,   504,   789,   790,     0,     0,     0,     0,     0,
       0,   507,   508,     0,   509,   510,   511,     0,     0,   791,
       0,     0,     0,     0,   792,   793,     0,     0,     0,     0,
     794,   795,     0,     0,   796,   797,     0,     0,   798,   799,
     142,     0,   143,   686,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   687,     0,   152,
     153,   154,   155,   156,   157,   688,   159,     0,   160,     0,
       0,   689,   161,   690,   691,   692,   162,   693,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
     694,   695,   170,   171,     0,   172,   696,   697,   174,   175,
       0,   176,   177,   178,   179,   180,   698,   182,     0,   699,
     184,   700,   701,   702,   703,   704,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   705,   204,     0,   205,   706,   707,   206,     0,
       0,   207,   708,   208,   709,   710,   209,     0,   210,   711,
     712,     0,   211,   212,   213,   713,   714,   715,     0,     0,
       0,     0,   716,   216,   717,     0,     0,   718,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,   719,     0,   244,   245,   246,   247,   720,
     721,   248,   249,     0,   250,   251,   252,   722,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   723,   260,   724,   262,   263,     0,   264,     0,   725,
       0,   265,   266,   267,     0,   268,   726,   727,     0,   269,
     270,     0,     0,     0,   728,   272,   273,   274,   275,   729,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,   730,   281,   282,   731,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   732,     0,     0,   292,     0,   733,   293,   294,
       0,     0,     0,     0,     0,   734,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,   735,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   736,   321,   322,   323,   324,   737,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   738,   332,
       0,     0,   739,   334,   740,   335,     0,   336,   741,   742,
     743,   744,   745,   341,   342,   343,   344,   345,     0,   746,
     346,   347,     0,     0,   348,   349,   350,   351,   747,     0,
     749,   352,   353,     0,   750,   751,   354,     0,   355,   356,
     752,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,   753,   367,     0,   368,     0,   369,   370,   754,   372,
     373,   374,   375,   755,   756,   378,   757,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     758,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,   759,   760,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   761,     0,   762,   415,   416,   417,   418,   419,
     420,   763,   764,   423,   424,   425,   426,     0,   765,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
     766,   767,   454,   455,     0,   456,   457,   768,   459,   460,
     461,   769,   770,   462,   463,   464,   465,   771,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,   772,   473,
     474,     0,   773,   774,   775,   776,     0,     0,     0,     0,
       0,   479,   480,   481,     0,   777,   778,   779,   483,   484,
     485,   780,   486,   487,   781,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   782,
     496,   497,     0,     0,   783,   784,   785,   786,   498,     0,
       0,   499,   787,     0,   788,   500,   501,   502,   503,   504,
     789,   790,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,     0,   791,     0,     0,     0,
       0,   792,   793,     0,     0,     0,     0,   794,   795,     0,
       0,   796,   797,     0,     0,   798,   799,   142,     0,   143,
     686,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   687,     0,   152,   153,   154,   155,
     156,   157,   688,   159,     0,   160,     0,     0,   689,   161,
     690,   691,   692,   162,   693,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,   694,   695,   170,
     171,     0,   172,   696,   697,   174,   175,     0,   176,   177,
     178,   179,   180,   698,   182,     0,   699,   184,   700,   701,
     702,   703,   704,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   705,
     204,     0,   205,   706,   707,   206,     0,     0,   207,   708,
     208,   709,   710,   209,     0,   210,   711,   712,     0,   211,
     212,   213,   713,   714,   715,     0,     0,     0,     0,   716,
     216,   717,     0,     0,   718,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
     719,     0,   244,   245,   246,   247,   720,   721,   248,   249,
       0,   250,   251,   252,   722,     0,   253,     0,     0,     0,
     254,     0,   255,     0,   256,     0,   257,   258,   723,   260,
     724,   262,   263,     0,   264,     0,   725,     0,   265,   266,
     267,     0,   268,   726,   727,     0,   269,   270,     0,     0,
       0,   728,   272,   273,   274,   275,   729,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,   730,   281,
     282,  1811,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   732,
       0,     0,   292,     0,   733,   293,   294,     0,     0,     0,
       0,     0,   734,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,   735,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,   736,
     321,   322,   323,   324,   737,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   738,   332,     0,     0,   739,
     334,   740,   335,     0,   336,   741,   742,   743,   744,   745,
     341,   342,   343,   344,   345,     0,   746,   346,   347,     0,
       0,   348,   349,   350,   351,   747,     0,   749,   352,   353,
       0,   750,   751,   354,     0,   355,   356,   752,     0,   358,
     359,   360,   361,     0,   362,   363,     0,     0,     0,     0,
       0,     0,     0,     0,   364,   365,   366,     0,   753,   367,
       0,   368,     0,   369,   370,   754,   372,   373,   374,   375,
     755,   756,   378,   757,     0,   379,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   758,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,     0,   404,   405,   406,   759,   760,   407,     0,   408,
       0,   409,   410,     0,   411,   412,     0,   413,     0,   761,
       0,   762,   415,   416,   417,   418,   419,   420,   763,   764,
     423,   424,   425,   426,     0,   765,   428,     0,     0,     0,
     429,   430,   431,   432,     0,     0,     0,   433,     0,     0,
       0,   434,     0,   435,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,   452,     0,     0,     0,   453,   766,   767,   454,
     455,     0,   456,   457,   768,   459,   460,   461,   769,   770,
     462,   463,   464,   465,   771,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,   772,   473,   474,     0,   773,
     774,   775,   776,     0,     0,     0,     0,     0,   479,   480,
     481,     0,   777,   778,   779,   483,   484,   485,   780,   486,
     487,   781,   488,   489,     0,   490,   491,     0,     0,   492,
       0,     0,   493,     0,   494,     0,   782,   496,   497,     0,
       0,   783,   784,   785,   786,   498,     0,     0,   499,   787,
       0,   788,   500,   501,   502,   503,   504,   789,   790,     0,
       0,     0,     0,     0,     0,   507,   508,     0,   509,   510,
     511,     0,     0,   791,     0,     0,     0,     0,   792,   793,
       0,     0,     0,     0,   794,   795,     0,     0,   796,   797,
       0,     0,   798,   799,   142,     0,   143,   686,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   687,     0,   152,   153,   154,   155,   156,   157,   688,
     159,     0,   160,     0,     0,   689,   161,   690,   691,   692,
     162,   693,     0,   163,   164,   165,     0,   166,     0,   167,
     168,     0,     0,   169,   694,   695,   170,   171,     0,   172,
     696,   697,   174,   175,     0,   176,   177,   178,   179,   180,
     698,   182,     0,   699,   184,   700,   701,   702,   703,   704,
       0,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,   199,     0,   200,   201,   202,   705,   204,     0,   205,
     706,   707,   206,     0,     0,   207,   708,   208,   709,   710,
     209,     0,   210,   711,   712,     0,   211,   212,   213,   713,
     714,   715,     0,     0,     0,     0,   716,   216,   717,     0,
       0,   718,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,   225,     0,
       0,   226,   227,   228,     0,     0,     0,   229,     0,   230,
     231,     0,   232,   233,   234,     0,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   719,     0,   244,
     245,   246,   247,   720,   721,   248,   249,     0,   250,   251,
     252,   722,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   723,   260,   724,   262,   263,
       0,   264,     0,   725,     0,   265,   266,   267,     0,   268,
     726,   727,     0,   269,   270,     0,     0,     0,   728,   272,
     273,   274,   275,   729,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,   730,   281,   282,  1813,     0,
       0,   283,     0,   284,   285,     0,   286,   287,     0,     0,
       0,   288,     0,     0,   289,   290,   732,     0,     0,   292,
       0,   733,   293,   294,     0,     0,     0,     0,     0,   734,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
     735,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,   736,   321,   322,   323,
     324,   737,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   738,   332,     0,     0,   739,   334,   740,   335,
       0,   336,   741,   742,   743,   744,   745,   341,   342,   343,
     344,   345,     0,   746,   346,   347,     0,     0,   348,   349,
     350,   351,   747,     0,   749,   352,   353,     0,   750,   751,
     354,     0,   355,   356,   752,     0,   358,   359,   360,   361,
       0,   362,   363,     0,     0,     0,     0,     0,     0,     0,
       0,   364,   365,   366,     0,   753,   367,     0,   368,     0,
     369,   370,   754,   372,   373,   374,   375,   755,   756,   378,
     757,     0,   379,   380,   381,     0,   382,     0,   383,   384,
     385,   386,   387,     0,   758,   389,   390,     0,     0,   391,
       0,     0,     0,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,   400,   401,     0,   402,   403,     0,   404,
     405,   406,   759,   760,   407,     0,   408,     0,   409,   410,
       0,   411,   412,     0,   413,     0,   761,     0,   762,   415,
     416,   417,   418,   419,   420,   763,   764,   423,   424,   425,
     426,     0,   765,   428,     0,     0,     0,   429,   430,   431,
     432,     0,     0,     0,   433,     0,     0,     0,   434,     0,
     435,   436,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,     0,     0,     0,     0,   447,
     448,     0,   449,     0,     0,   450,     0,     0,   451,   452,
       0,     0,     0,   453,   766,   767,   454,   455,     0,   456,
     457,   768,   459,   460,   461,   769,   770,   462,   463,   464,
     465,   771,   466,   467,     0,   468,     0,   469,   470,   471,
     472,     0,   772,   473,   474,     0,   773,   774,   775,   776,
       0,     0,     0,     0,     0,   479,   480,   481,     0,   777,
     778,   779,   483,   484,   485,   780,   486,   487,   781,   488,
     489,     0,   490,   491,     0,     0,   492,     0,     0,   493,
       0,   494,     0,   782,   496,   497,     0,     0,   783,   784,
     785,   786,   498,     0,     0,   499,   787,     0,   788,   500,
     501,   502,   503,   504,   789,   790,     0,     0,     0,     0,
       0,     0,   507,   508,     0,   509,   510,   511,     0,     0,
     791,     0,     0,     0,     0,   792,   793,     0,     0,     0,
       0,   794,   795,     0,     0,   796,   797,     0,     0,   798,
     799,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,     0,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,     0,     0,   161,   690,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,     0,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   203,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,  1852,     0,
       0,     0,     0,   215,   216,   717,     0,     0,     0,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,     0,   244,   245,   246,   247,
       0,   721,   248,   249,     0,   250,   251,   252,   722,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
       0,     0,   265,   266,   267,     0,   268,   726,   727,     0,
     269,   270,     0,     0,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,     0,   281,   282,     0,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   291,     0,     0,   292,     0,     0,   293,
     294,     0,     0,     0,     0,     0,   295,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,   735,     0,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
     746,   346,   347,     0,     0,   348,   349,   350,   351,     0,
       0,     0,   352,   353,     0,   750,   751,   354,     0,   355,
     356,   357,     0,   358,   359,   360,   361,     0,   362,   363,
       0,     0,     0,     0,     0,     0,     0,     0,   364,   365,
     366,     0,     0,   367,     0,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,     0,   379,
     380,   381,     0,   382,     0,   383,   384,   385,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,     0,     0,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,     0,   404,   405,   406,     0,
       0,   407,     0,   408,     0,   409,   410,     0,   411,   412,
       0,   413,     0,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,     0,   429,   430,   431,   432,     0,     0,
       0,   433,     0,     0,     0,   434,     0,   435,   436,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,     0,     0,     0,     0,   447,   448,     0,   449,
       0,     0,   450,     0,     0,   451,   452,     0,     0,     0,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,     0,   469,   470,   471,   472,     0,   772,
     473,   474,     0,  1853,   476,   477,  1854,     0,     0,     0,
       0,     0,   479,   480,   481,     0,     0,   778,   482,   483,
     484,   485,   780,   486,   487,   781,   488,   489,     0,   490,
     491,     0,     0,   492,     0,     0,   493,     0,   494,     0,
     495,   496,   497,     0,     0,     0,     0,     0,     0,   498,
       0,     0,   499,     0,     0,     0,   500,   501,   502,   503,
     504,   505,   506,     0,     0,     0,     0,     0,     0,   507,
     508,     0,   509,   510,   511,     0,     0,   512,     0,     0,
       0,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,   798,   799,   151,     0,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,     0,     0,   161,     0,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,     0,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,  3000,
     200,   201,   202,   203,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,   214,     0,
       0,     0,     0,   215,   216,     0,     0,     0,     0,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,     0,   244,   245,   246,   247,
       0,     0,   248,   249,     0,   250,   251,   252,     0,     0,
     253,     0,     0,     0,   254,     0,   255,   526,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
       0,     0,   265,   266,   267,     0,   268,     0,     0,     0,
     269,   270,     0,     0,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   277,   278,  2132,   279,     0,   280,     0,
       0,     0,     0,   281,   282,     0,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,  2133,
       0,   289,   290,   291,     0,     0,   292,     0,     0,   293,
     294,     0,  3371,     0,     0,     0,   295,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,   347,     0,     0,   348,   349,   350,   351,     0,
       0,     0,   352,   353,     0,     0,     0,   354,     0,   355,
     356,   357,     0,   358,   359,   360,   361,     0,   362,   363,
       0,     0,     0,     0,     0,     0,     0,     0,   364,   365,
     366,     0,     0,   367,     0,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,     0,   379,
     380,   381,     0,   382,     0,   383,   384,   385,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,     0,     0,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,     0,   404,   405,   406,     0,
       0,   407,     0,   408,     0,   409,   410,     0,   411,   412,
       0,   413,     0,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,   427,
     428,  2431,     0,     0,   429,   430,   431,   432,     0,     0,
       0,   433,     0,     0,     0,   434,     0,   435,   436,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
     531,     0,     0,     0,     0,     0,   447,   448,     0,   449,
       0,     0,   450,     0,     0,   451,   452,     0,     0,     0,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,     0,   469,   470,   471,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,     0,     0,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,   488,   489,     0,   490,
     491,     0,     0,   492,     0,     0,   493,     0,   494,     0,
     495,   496,   497,     0,     0,     0,     0,     0,     0,   498,
       0,     0,   499,     0,     0,     0,   500,   501,   502,   503,
     504,   505,   506,     0,     0,     0,     0,     0,     0,   507,
     508,     0,   509,   510,   511,     0,     0,   512,     0,   142,
       0,   143,   144,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   151,  3073,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,     0,     0,
       0,   161,     0,     0,     0,   162,     0,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,     0,
       0,   170,   171,     0,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,  3000,   200,   201,
     202,   203,   204,     0,   205,     0,     0,   206,     0,     0,
     207,     0,   208,     0,     0,   209,     0,   210,     0,     0,
       0,   211,   212,   213,     0,     0,   214,     0,     0,     0,
       0,   215,   216,     0,     0,     0,     0,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,     0,   244,   245,   246,   247,     0,     0,
     248,   249,     0,   250,   251,   252,     0,     0,   253,     0,
       0,     0,   254,     0,   255,   526,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,     0,     0,
     265,   266,   267,     0,   268,     0,     0,     0,   269,   270,
       0,     0,     0,   271,   272,   273,   274,   275,     0,     0,
     276,   277,   278,  2132,   279,     0,   280,     0,     0,     0,
       0,   281,   282,     0,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,  2133,     0,   289,
     290,   291,     0,     0,   292,     0,     0,   293,   294,     0,
       0,     0,     0,     0,   295,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,   346,
     347,     0,     0,   348,   349,   350,   351,     0,     0,     0,
     352,   353,     0,     0,     0,   354,     0,   355,   356,   357,
       0,   358,   359,   360,   361,     0,   362,   363,     0,     0,
       0,     0,     0,     0,     0,     0,   364,   365,   366,     0,
       0,   367,     0,   368,     0,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,     0,     0,   379,   380,   381,
       0,   382,     0,   383,   384,   385,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,     0,     0,   392,   393,
     394,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,   403,     0,   404,   405,   406,     0,     0,   407,
       0,   408,     0,   409,   410,     0,   411,   412,     0,   413,
       0,   414,     0,     0,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,     0,   429,   430,   431,   432,     0,     0,     0,   433,
       0,     0,     0,   434,     0,   435,   436,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   531,     0,
       0,     0,     0,     0,   447,   448,     0,   449,     0,     0,
     450,     0,     0,   451,   452,     0,     0,     0,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,     0,   469,   470,   471,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,     0,     0,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,   488,   489,     0,   490,   491,     0,
       0,   492,     0,     0,   493,     0,   494,     0,   495,   496,
     497,     0,     0,     0,     0,     0,     0,   498,     0,     0,
     499,     0,     0,     0,   500,   501,   502,   503,   504,   505,
     506,     0,     0,     0,     0,     0,     0,   507,   508,     0,
     509,   510,   511,     0,     0,   512,     0,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   151,  3073,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,     0,     0,   161,
       0,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,     0,     0,   170,
     171,     0,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   203,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,     0,     0,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,   214,     0,     0,     0,     0,   215,
     216,     0,     0,     0,     0,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,     0,   244,   245,   246,   247,     0,     0,   248,   249,
       0,   250,   251,   252,     0,     0,   253,     0,     0,     0,
     254,     0,   255,     0,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,     0,     0,   265,   266,
     267,     0,   268,     0,     0,     0,   269,   270,     0,     0,
       0,   271,   272,   273,   274,   275,     0,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,     0,   281,
     282,     0,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   291,
       0,     0,   292,     0,     0,   293,   294,     0,     0,     0,
       0,     0,   295,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,     0,
       0,   348,   349,   350,   351,     0,     0,     0,   352,   353,
       0,     0,     0,   354,     0,   355,   356,   357,     0,   358,
     359,   360,   361,     0,   362,   363,     0,     0,     0,     0,
       0,     0,     0,     0,   364,   365,   366,     0,     0,   367,
       0,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,     0,   379,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,     0,   404,   405,   406,     0,     0,   407,     0,   408,
       0,   409,   410,     0,   411,   412,     0,   413,     0,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,   427,   428,  2431,     0,     0,
     429,   430,   431,   432,     0,     0,     0,   433,     0,     0,
       0,   434,     0,   435,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,   452,     0,     0,     0,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,     0,     0,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,   488,   489,     0,   490,   491,     0,     0,   492,
       0,     0,   493,     0,   494,     0,   495,   496,   497,     0,
       0,     0,     0,     0,     0,   498,     0,     0,   499,     0,
       0,     0,   500,   501,   502,   503,   504,   505,   506,     0,
       0,     0,     0,     0,     0,   507,   508,     0,   509,   510,
     511,     0,     0,   512,     0,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,  2869,     0,     0,   150,
       0,     0,   151,   799,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
       0,   512,     0,     0,     0,   142,     0,   143,   144,   145,
     146,   147,   148,     0,  4768,   149,     0,     0,     0,   150,
    4769,   799,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
       0,   512,     0,     0,     0,   142,     0,   143,   144,   145,
     146,   147,   148,  1167,     0,   149,     0,     0,     0,   150,
       0,   799,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
    1384,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
       0,   512,     0,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     151,   560,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,     0,     0,   161,     0,     0,     0,   162,
       0,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,     0,     0,   170,   171,     0,   172,   173,
       0,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   203,   204,     0,   205,     0,
       0,   206,     0,     0,   207,     0,   208,     0,     0,   209,
       0,   210,     0,     0,     0,   211,   212,   213,     0,     0,
     214,     0,     0,     0,     0,   215,   216,     0,     0,     0,
       0,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,     0,   244,   245,
     246,   247,     0,     0,   248,   249,     0,   250,   251,   252,
       0,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,   267,     0,   268,     0,
       0,     0,   269,   270,     0,     0,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,     0,   281,   282,     0,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   291,     0,     0,   292,     0,
       0,   293,   294,     0,     0,     0,     0,     0,   295,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,     0,     0,   348,   349,   350,
     351,     0,     0,     0,   352,   353,     0,     0,     0,   354,
       0,   355,   356,   357,     0,   358,   359,   360,   361,     0,
     362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     364,   365,   366,     0,     0,   367,     0,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
       0,   379,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,     0,   404,   405,
     406,     0,     0,   407,     0,   408,     0,   409,   410,     0,
     411,   412,     0,   413,     0,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,     0,   429,   430,   431,   432,
       0,     0,     0,   433,     0,     0,     0,   434,     0,   435,
     436,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,   452,     0,
       0,     0,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,     0,
       0,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,   488,   489,
       0,   490,   491,     0,     0,   492,     0,     0,   493,     0,
     494,     0,   495,   496,   497,     0,     0,     0,     0,     0,
       0,   498,     0,     0,   499,     0,     0,     0,   500,   501,
     502,   503,   504,   505,   506,     0,     0,     0,     0,     0,
       0,   507,   508,     0,   509,   510,   511,     0,     0,   512,
       0,     0,     0,     0,     0,     0,  2379,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   149,     0,   560,
       0,   150,     0,     0,   151,     0,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,     0,     0,   161,
       0,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,     0,     0,   170,
     171,     0,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   203,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,     0,     0,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,   214,     0,     0,     0,     0,   215,
     216,     0,     0,     0,     0,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,     0,   244,   245,   246,   247,     0,     0,   248,   249,
       0,   250,   251,   252,     0,     0,   253,     0,     0,     0,
     254,     0,   255,     0,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,     0,     0,   265,   266,
     267,     0,   268,     0,     0,     0,   269,   270,     0,     0,
       0,   271,   272,   273,   274,   275,     0,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,     0,   281,
     282,     0,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   291,
       0,     0,   292,     0,     0,   293,   294,     0,     0,     0,
       0,     0,   295,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,     0,
       0,   348,   349,   350,   351,     0,     0,     0,   352,   353,
       0,     0,     0,   354,     0,   355,   356,   357,     0,   358,
     359,   360,   361,     0,   362,   363,     0,     0,     0,     0,
       0,     0,     0,     0,   364,   365,   366,     0,     0,   367,
       0,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,     0,   379,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,     0,   404,   405,   406,     0,     0,   407,     0,   408,
       0,   409,   410,     0,   411,   412,     0,   413,     0,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,     0,
     429,   430,   431,   432,     0,     0,     0,   433,     0,     0,
       0,   434,     0,   435,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,   452,     0,     0,     0,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,     0,     0,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,   488,   489,     0,   490,   491,     0,     0,   492,
       0,     0,   493,     0,   494,     0,   495,   496,   497,     0,
       0,     0,     0,     0,     0,   498,     0,     0,   499,     0,
       0,     0,   500,   501,   502,   503,   504,   505,   506,     0,
       0,     0,     0,     0,     0,   507,   508,     0,   509,   510,
     511,     0,     0,   512,     0,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,  3072,     0,   149,     0,     0,
       0,   150,     0,  3073,   151,     0,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,     0,     0,   161,
       0,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,     0,     0,   170,
     171,     0,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   203,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,     0,     0,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,   214,     0,     0,     0,     0,   215,
     216,     0,     0,     0,     0,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,     0,   244,   245,   246,   247,     0,     0,   248,   249,
       0,   250,   251,   252,     0,     0,   253,     0,     0,     0,
     254,     0,   255,     0,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,     0,     0,   265,   266,
     267,     0,   268,     0,     0,     0,   269,   270,     0,     0,
       0,   271,   272,   273,   274,   275,     0,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,     0,   281,
     282,     0,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   291,
       0,     0,   292,     0,     0,   293,   294,     0,     0,     0,
       0,     0,   295,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,     0,
       0,   348,   349,   350,   351,     0,     0,     0,   352,   353,
       0,     0,     0,   354,     0,   355,   356,   357,     0,   358,
     359,   360,   361,     0,   362,   363,     0,     0,     0,     0,
       0,     0,     0,     0,   364,   365,   366,     0,     0,   367,
       0,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,     0,   379,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,     0,   404,   405,   406,     0,     0,   407,     0,   408,
       0,   409,   410,     0,   411,   412,     0,   413,     0,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,     0,
     429,   430,   431,   432,     0,     0,     0,   433,     0,     0,
       0,   434,     0,   435,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,   452,     0,     0,     0,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,     0,     0,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,   488,   489,     0,   490,   491,     0,     0,   492,
       0,     0,   493,     0,   494,     0,   495,   496,   497,     0,
       0,     0,     0,     0,     0,   498,     0,     0,   499,     0,
       0,     0,   500,   501,   502,   503,   504,   505,   506,     0,
       0,     0,     0,     0,     0,   507,   508,     0,   509,   510,
     511,     0,     0,   512,     0,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,  4769,   799,   151,     0,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,     0,     0,   161,
       0,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,     0,     0,   170,
     171,     0,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   203,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,     0,     0,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,   214,     0,     0,     0,     0,   215,
     216,     0,     0,     0,     0,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,     0,   244,   245,   246,   247,     0,     0,   248,   249,
       0,   250,   251,   252,     0,     0,   253,     0,     0,     0,
     254,     0,   255,     0,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,     0,     0,   265,   266,
     267,     0,   268,     0,     0,     0,   269,   270,     0,     0,
       0,   271,   272,   273,   274,   275,     0,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,     0,   281,
     282,     0,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   291,
       0,     0,   292,     0,     0,   293,   294,     0,     0,     0,
       0,     0,   295,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,     0,
       0,   348,   349,   350,   351,     0,     0,     0,   352,   353,
       0,     0,     0,   354,     0,   355,   356,   357,     0,   358,
     359,   360,   361,     0,   362,   363,     0,     0,     0,     0,
       0,     0,     0,     0,   364,   365,   366,     0,     0,   367,
       0,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,     0,   379,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,     0,   404,   405,   406,     0,     0,   407,     0,   408,
       0,   409,   410,     0,   411,   412,     0,   413,     0,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,     0,
     429,   430,   431,   432,     0,     0,     0,   433,     0,     0,
       0,   434,     0,   435,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,   452,     0,     0,     0,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,     0,     0,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,   488,   489,     0,   490,   491,     0,     0,   492,
       0,     0,   493,     0,   494,     0,   495,   496,   497,     0,
       0,     0,     0,     0,     0,   498,     0,     0,   499,     0,
       0,     0,   500,   501,   502,   503,   504,   505,   506,     0,
       0,     0,     0,     0,     0,   507,   508,     0,   509,   510,
     511,     0,     0,   512,     0,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,   560,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   631,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   632,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
       0,   512,     0,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     151,   560,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,     0,     0,   161,     0,     0,     0,   162,
       0,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,     0,     0,   170,   171,     0,   172,   173,
       0,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   203,   204,     0,   205,     0,
       0,   206,     0,     0,   207,     0,   208,     0,     0,   209,
       0,   210,     0,     0,     0,   211,   212,   213,     0,     0,
     214,     0,     0,     0,     0,   215,   216,     0,     0,     0,
       0,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,     0,   244,   245,
     246,   247,     0,     0,   248,   249,     0,   250,   251,   252,
       0,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,   267,     0,   268,     0,
       0,     0,   269,   270,     0,     0,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,     0,   281,   282,     0,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   291,     0,     0,   292,     0,
       0,   293,   294,     0,     0,     0,     0,     0,   295,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,     0,     0,   348,   349,   350,
     351,     0,     0,     0,   352,   353,     0,     0,     0,   354,
       0,   355,   356,   357,     0,   358,   359,   360,   361,     0,
     362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     364,   365,   366,     0,     0,   367,     0,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
       0,   379,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,     0,   404,   405,
     406,     0,     0,   407,     0,   408,     0,   409,   410,     0,
     411,   412,     0,   413,     0,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,     0,   429,   430,   431,   432,
       0,     0,     0,   433,     0,     0,     0,   434,     0,   435,
     436,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,   452,     0,
       0,     0,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,     0,
       0,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,   488,   489,
       0,   490,   491,     0,     0,   492,     0,     0,   493,     0,
     494,     0,   495,   496,   497,     0,     0,     0,     0,     0,
       0,   498,     0,     0,   499,     0,     0,     0,   500,   501,
     502,   503,   504,   505,   506,     0,     0,     0,     0,     0,
       0,   507,   508,     0,   509,   510,   511,     0,     0,   512,
       0,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,   799,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,     0,     0,   161,     0,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,     0,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   203,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,   214,     0,
       0,     0,     0,   215,   216,     0,     0,     0,     0,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,     0,   244,   245,   246,   247,
       0,     0,   248,   249,     0,   250,   251,   252,     0,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
       0,     0,   265,   266,   267,     0,   268,     0,     0,     0,
     269,   270,     0,     0,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,     0,   281,   282,     0,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   291,     0,     0,   292,     0,     0,   293,
     294,     0,     0,     0,     0,     0,   295,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,   347,     0,     0,   348,   349,   350,   351,     0,
       0,     0,   352,   353,     0,     0,     0,   354,     0,   355,
     356,   357,     0,   358,   359,   360,   361,     0,   362,   363,
       0,     0,     0,     0,     0,     0,     0,     0,   364,   365,
     366,     0,     0,   367,     0,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,     0,   379,
     380,   381,     0,   382,     0,   383,   384,   385,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,     0,     0,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,     0,   404,   405,   406,     0,
       0,   407,     0,   408,     0,   409,   410,     0,   411,   412,
       0,   413,     0,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,     0,   429,   430,   431,   432,     0,     0,
       0,   433,     0,     0,     0,   434,     0,   435,   436,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,     0,     0,     0,     0,   447,   448,     0,   449,
       0,     0,   450,     0,     0,   451,   452,     0,     0,     0,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,     0,   469,   470,   471,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,     0,     0,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,   488,   489,     0,   490,
     491,     0,     0,   492,     0,     0,   493,     0,   494,     0,
     495,   496,   497,     0,     0,     0,     0,     0,     0,   498,
       0,     0,   499,     0,     0,     0,   500,   501,   502,   503,
     504,   505,   506,     0,     0,     0,     0,     0,     0,   507,
     508,     0,   509,   510,   511,     0,     0,   512,     0,   142,
       0,   143,   144,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   151,  3073,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,     0,     0,
       0,   161,     0,     0,     0,   162,     0,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,     0,
       0,   170,   171,     0,   172,   941,   942,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   203,   204,     0,   205,     0,     0,   206,     0,     0,
     207,     0,   208,     0,     0,   209,     0,   210,     0,     0,
       0,   211,   212,   213,     0,     0,   214,     0,     0,     0,
       0,   215,   216,     0,     0,     0,   943,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,     0,   244,   245,   246,   247,     0,     0,
     248,   249,     0,   250,   251,   252,     0,     0,   253,     0,
       0,     0,   254,     0,   255,     0,   256,     0,   257,   258,
     259,   260,   261,   262,   944,     0,   264,     0,     0,     0,
     265,   266,   267,     0,   268,     0,     0,     0,   269,   270,
       0,     0,     0,   271,   272,   273,   274,   275,     0,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
       0,   281,   282,     0,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   291,     0,     0,   292,     0,     0,   293,   294,     0,
       0,     0,     0,     0,   295,   296,     0,   945,     0,   298,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   946,   344,   345,     0,     0,   346,
     347,     0,     0,   348,   349,   350,   351,     0,     0,     0,
     352,   353,     0,     0,     0,   354,     0,   355,   356,   357,
       0,   358,   359,   360,   361,     0,   362,   363,     0,     0,
       0,     0,     0,     0,     0,     0,   364,   365,   366,     0,
       0,   367,     0,   368,     0,   369,   370,   947,   372,   373,
     374,   375,   376,   377,   378,     0,     0,   379,   380,   381,
       0,   382,     0,   383,   384,   385,   386,   387,     0,   388,
     389,   390,     0,     0,   391,     0,     0,     0,   392,   393,
     394,   395,   396,     0,     0,   397,   398,   399,   400,   401,
       0,   402,   403,     0,   404,   405,   406,     0,     0,   407,
       0,   408,     0,   409,   410,     0,   411,   412,     0,   413,
       0,   414,     0,     0,   948,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,     0,   429,   430,   949,   432,     0,     0,     0,   433,
       0,     0,     0,   434,     0,   435,   436,   437,   438,   439,
     440,     0,   441,   442,   443,   444,   445,   446,     0,     0,
       0,     0,     0,     0,   447,   448,     0,   449,     0,     0,
     450,     0,     0,   451,   452,     0,     0,     0,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,   460,   461,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,     0,   469,   470,   471,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,     0,     0,     0,     0,     0,
     950,   480,   481,     0,     0,     0,   482,   483,   484,   485,
       0,   486,   487,     0,   488,   489,     0,   490,   491,     0,
       0,   492,     0,     0,   493,     0,   494,     0,   495,   496,
     497,     0,     0,     0,     0,     0,     0,   498,     0,     0,
     499,     0,     0,     0,   500,   501,   502,   503,   504,   505,
     506,     0,     0,     0,     0,     0,     0,   507,   508,     0,
     509,   510,   511,     0,     0,   512,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,   151,   951,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,     0,     0,   170,   171,
       0,   172,   173,     0,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   203,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,   216,
       0,     0,     0,     0,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,     0,   265,   266,   267,
       0,   268,     0,     0,     0,   269,   270,     0,     0,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,   282,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,     0,     0,   289,   290,   291,     0,
       0,   292,     0,     0,   293,   294,   643,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,   321,
     322,   323,   324,     0,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,   335,     0,   336,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,   346,   347,     0,     0,
     348,   349,   350,   351,     0,     0,     0,   352,   353,     0,
       0,     0,   354,     0,   355,   356,   357,     0,   358,   359,
     360,   361,     0,   362,   363,     0,     0,     0,     0,     0,
       0,     0,     0,   364,   365,   366,     0,     0,   367,     0,
     368,     0,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,     0,     0,   379,   380,   381,     0,   382,     0,
     383,   384,   385,   386,   387,     0,   388,   389,   390,     0,
       0,   391,     0,     0,     0,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,   400,   401,     0,   402,   403,
       0,   404,   405,   406,     0,     0,   407,     0,   408,     0,
     409,   410,     0,   411,   412,     0,   413,     0,   414,     0,
       0,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,     0,   427,   428,     0,     0,     0,   429,
     430,   431,   432,     0,     0,     0,   433,     0,     0,     0,
     434,     0,   435,   436,   437,   438,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,     0,     0,     0,
       0,   447,   448,     0,   449,     0,     0,   450,     0,     0,
     451,   452,     0,     0,     0,   453,     0,     0,   454,   455,
       0,   456,   457,   458,   459,   460,   461,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,     0,   469,
     470,   471,   472,     0,   139,   473,   474,     0,   475,   476,
     477,   478,     0,     0,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   483,   484,   485,     0,   486,   487,
       0,   488,   489,     0,   490,   491,     0,     0,   492,     0,
       0,   493,     0,   494,     0,   495,   496,   497,     0,     0,
       0,     0,     0,     0,   498,     0,     0,   499,     0,     0,
       0,   500,   501,   502,   503,   504,   505,   506,     0,     0,
       0,     0,     0,     0,   507,   508,     0,   509,   510,   511,
       0,     0,   512,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     151,  1437,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,     0,     0,   161,     0,     0,     0,   162,
       0,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,     0,     0,   170,   171,     0,   172,   173,
       0,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   203,   204,     0,   205,     0,
       0,   206,     0,     0,   207,     0,   208,     0,     0,   209,
       0,   210,     0,     0,     0,   211,   212,   213,     0,     0,
     214,     0,     0,     0,     0,   215,   216,     0,     0,     0,
       0,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,     0,   244,   245,
     246,   247,     0,     0,   248,   249,     0,   250,   251,   252,
       0,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,   267,     0,   268,     0,
       0,     0,   269,   270,     0,     0,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,     0,   281,   282,     0,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   291,     0,     0,   292,     0,
       0,   293,   294,   643,     0,     0,     0,     0,   295,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,     0,     0,   348,   349,   350,
     351,     0,     0,     0,   352,   353,     0,     0,     0,   354,
       0,   355,   356,   357,     0,   358,   359,   360,   361,     0,
     362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     364,   365,   366,     0,     0,   367,     0,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
       0,   379,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,     0,   404,   405,
     406,     0,     0,   407,     0,   408,     0,   409,   410,     0,
     411,   412,     0,   413,     0,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,     0,   429,   430,   431,   432,
       0,     0,     0,   433,     0,     0,     0,   434,     0,   435,
     436,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,   452,     0,
       0,     0,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,   139,   473,   474,     0,   475,   476,   477,   478,     0,
       0,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,   488,   489,
       0,   490,   491,     0,     0,   492,     0,     0,   493,     0,
     494,     0,   495,   496,   497,     0,     0,     0,     0,     0,
       0,   498,     0,     0,   499,     0,     0,     0,   500,   501,
     502,   503,   504,   505,   506,     0,     0,     0,     0,     0,
       0,   507,   508,     0,   509,   510,   511,     0,     0,   512,
     142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,  1783,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   941,   942,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,   943,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   944,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   945,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   946,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   947,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   948,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   949,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,     0,   512,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   151,   951,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,     0,     0,   161,
       0,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,     0,     0,   170,
     171,     0,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   203,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,     0,     0,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,   214,     0,     0,     0,     0,   215,
     216,     0,     0,     0,     0,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,     0,   244,   245,   246,   247,     0,     0,   248,   249,
       0,   250,   251,   252,     0,     0,   253,     0,     0,     0,
     254,     0,   255,     0,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,     0,     0,   265,   266,
     267,     0,   268,     0,     0,     0,   269,   270,     0,     0,
       0,   271,   272,   273,   274,   275,     0,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,     0,   281,
     282,     0,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   291,
       0,     0,   292,     0,     0,   293,   294,   643,     0,     0,
       0,     0,   295,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,   346,   347,     0,
       0,   348,   349,   350,   351,     0,     0,     0,   352,   353,
       0,     0,     0,   354,     0,   355,   356,   357,     0,   358,
     359,   360,   361,     0,   362,   363,     0,     0,     0,     0,
       0,     0,     0,     0,   364,   365,   366,     0,     0,   367,
       0,   368,     0,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,     0,   379,   380,   381,     0,   382,
       0,   383,   384,   385,   386,   387,     0,   388,   389,   390,
       0,     0,   391,     0,     0,     0,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,   400,   401,     0,   402,
     403,     0,   404,   405,   406,     0,     0,   407,     0,   408,
       0,   409,   410,     0,   411,   412,     0,   413,     0,   414,
       0,     0,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,     0,
     429,   430,   431,   432,     0,     0,     0,   433,     0,     0,
       0,   434,     0,   435,   436,   437,   438,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,     0,     0,
       0,     0,   447,   448,     0,   449,     0,     0,   450,     0,
       0,   451,   452,     0,     0,     0,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,     0,
     469,   470,   471,   472,     0,   139,   473,   474,     0,   475,
     476,   477,   478,     0,     0,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,   483,   484,   485,     0,   486,
     487,     0,   488,   489,     0,   490,   491,     0,     0,   492,
       0,     0,   493,     0,   494,     0,   495,   496,   497,     0,
       0,     0,     0,     0,     0,   498,     0,     0,   499,     0,
       0,     0,   500,   501,   502,   503,   504,   505,   506,     0,
       0,     0,     0,     0,     0,   507,   508,     0,   509,   510,
     511,     0,     0,   512,   142,     0,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   151,  3632,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,     0,     0,   161,     0,     0,     0,
     162,     0,     0,   163,   164,   165,     0,   166,     0,   167,
     168,     0,     0,   169,     0,     0,   170,   171,     0,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,  1317,
     198,   199,     0,   200,   201,   202,   203,   204,     0,   205,
       0,     0,   206,     0,     0,   207,     0,   208,     0,     0,
     209,     0,   210,     0,     0,     0,   211,   212,   213,     0,
       0,   214,     0,     0,     0,     0,   215,   216,     0,     0,
       0,     0,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,   225,     0,
       0,   226,   227,   228,     0,     0,     0,   229,     0,   230,
     231,     0,   232,   233,   234,     0,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,     0,     0,   265,   266,   267,     0,   268,
       0,     0,     0,   269,   270,     0,     0,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,   282,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,     0,     0,
       0,   288,     0,     0,   289,   290,   291,     0,     0,   292,
       0,     0,   293,   294,     0,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,   321,   322,   323,
     324,     0,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,   335,
       0,   336,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,   346,   347,     0,     0,   348,   349,
     350,   351,     0,     0,     0,   352,   353,     0,     0,     0,
     354,     0,   355,   356,   357,     0,   358,   359,   360,   361,
       0,   362,   363,     0,     0,     0,     0,     0,     0,     0,
       0,   364,   365,   366,     0,     0,   367,     0,   368,     0,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
       0,     0,   379,   380,   381,     0,   382,     0,   383,   384,
     385,   386,   387,     0,   388,   389,   390,     0,     0,   391,
       0,     0,     0,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,   400,   401,     0,   402,   403,     0,   404,
     405,   406,     0,     0,   407,     0,   408,     0,   409,   410,
       0,   411,   412,     0,   413,     0,   414,     0,     0,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,     0,   427,   428,     0,     0,     0,   429,   430,   431,
     432,     0,     0,     0,   433,     0,     0,     0,   434,     0,
     435,   436,   437,   438,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,     0,     0,     0,     0,   447,
     448,     0,   449,     0,     0,   450,     0,     0,   451,   452,
       0,     0,     0,   453,     0,     0,   454,   455,     0,   456,
     457,   458,   459,   460,   461,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,     0,   469,   470,   471,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
       0,     0,     0,     0,     0,   479,   480,   481,     0,     0,
       0,   482,   483,   484,   485,     0,   486,   487,     0,   488,
     489,     0,   490,   491,     0,     0,   492,     0,     0,   493,
       0,   494,     0,   495,   496,   497,     0,     0,     0,     0,
       0,     0,   498,     0,     0,   499,     0,     0,     0,   500,
     501,   502,   503,   504,   505,   506,     0,     0,     0,     0,
       0,     0,   507,   508,     0,   509,   510,   511,     0,     0,
     512,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,  1318,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,     0,     0,   161,     0,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,     0,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   203,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,   214,     0,
       0,     0,     0,   215,   216,     0,     0,     0,     0,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,     0,   244,   245,   246,   247,
       0,     0,   248,   249,     0,   250,   251,   252,     0,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
       0,     0,   265,   266,   267,     0,   268,     0,     0,     0,
     269,   270,     0,     0,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,     0,   281,   282,     0,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   291,     0,     0,   292,     0,     0,   293,
     294,     0,     0,     0,     0,     0,   295,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,   346,   347,     0,     0,   348,   349,   350,   351,     0,
       0,     0,   352,   353,     0,     0,     0,   354,     0,   355,
     356,   357,     0,   358,   359,   360,   361,     0,   362,   363,
       0,     0,     0,     0,     0,     0,     0,     0,   364,   365,
     366,     0,     0,   367,     0,   368,     0,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,     0,   379,
     380,   381,     0,   382,     0,   383,   384,   385,   386,   387,
       0,   388,   389,   390,     0,     0,   391,     0,     0,     0,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
     400,   401,     0,   402,   403,     0,   404,   405,   406,     0,
       0,   407,     0,   408,     0,   409,   410,     0,   411,   412,
       0,   413,     0,   414,     0,     0,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,     0,   429,   430,   431,   432,     0,     0,
       0,   433,     0,     0,     0,   434,     0,   435,   436,   437,
     438,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,     0,     0,     0,     0,   447,   448,     0,   449,
       0,     0,   450,     0,     0,   451,   452,     0,     0,     0,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,     0,   469,   470,   471,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,     0,     0,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   483,
     484,   485,     0,   486,   487,     0,   488,   489,     0,   490,
     491,     0,     0,   492,     0,     0,   493,     0,   494,     0,
     495,   496,   497,     0,     0,     0,     0,     0,     0,   498,
       0,     0,   499,     0,     0,     0,   500,   501,   502,   503,
     504,   505,   506,     0,     0,     0,     0,     0,     0,   507,
     508,     0,   509,   510,   511,     0,     0,   512,   142,     0,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,     0,  1318,   152,   153,   154,
     155,   156,   157,   158,     0,     0,  -372,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,     0,     0,     0,     0,   169,  4147,     0,
     170,   171,     0,   172,     0,     0,     0,     0,     0,   176,
     177,   178,   179,  4148,   181,   182,     0,   183,   184,     0,
       0,     0,     0,     0,     0,   190,     0,   192,     0,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
       0,   204,     0,   205,     0,     0,   206,     0,     0,   207,
       0,   208,     0,     0,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,     0,     0,     0,     0,     0,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,     0,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,     0,   231,     0,   232,   233,   234,     0,
       0,   235,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,   244,   245,   246,   247,     0,     0,   248,
     249,  4149,   250,   251,   252,     0,     0,     0,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,     0,   263,     0,   264,     0,     0,     0,     0,
     266,   267,     0,     0,     0,     0,     0,     0,   270,     0,
       0,     0,   271,   272,   273,   274,   275,  4150,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,     0,
     281,     0,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,  4151,     0,     0,   288,     0,     0,     0,   290,
     291,     0,     0,   292,  4152,     0,   293,   294,     0,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,     0,     0,  -327,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,   321,   322,   323,   324,     0,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,   335,     0,   336,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,   347,
       0,     0,   348,   349,   350,   351,     0,     0,     0,     0,
     353,     0,     0,     0,   354,     0,   355,   356,   357,     0,
     358,   359,   360,  4153,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   365,   366,     0,     0,
       0,     0,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,   377,     0,     0,     0,     0,   380,   381,     0,
     382,     0,   383,   384,   385,   386,   387,     0,   388,   389,
     390,     0,     0,   391,     0,     0,     0,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,   400,   401,     0,
     402,     0,     0,   404,     0,   406,  -327,     0,   407,     0,
       0,     0,   409,     0,     0,   411,   412,     0,   413,  4154,
     414,     0,     0,   415,     0,   417,   418,   419,   420,   421,
     422,   423,     0,   425,   426,     0,   427,     0,     0,     0,
       0,   429,   430,   431,     0,     0,     0,     0,   433,     0,
       0,     0,     0,     0,     0,   436,     0,     0,   439,   440,
       0,   441,     0,   443,     0,   445,   446,     0,     0,     0,
       0,     0,     0,   447,   448,     0,   449,     0,     0,   450,
       0,     0,   451,     0,     0,     0,     0,   453,     0,     0,
       0,   455,     0,   456,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
       0,   469,   470,   471,   472,     0,     0,   473,   474,     0,
     475,   476,   477,   478,     0,     0,     0,     0,     0,   479,
     480,   481,     0,     0,     0,     0,   483,   484,   485,     0,
     486,   487,     0,   488,   489,     0,     0,     0,     0,     0,
     492,     0,     0,   493,     0,     0,     0,   495,   496,   497,
       0,     0,     0,     0,     0,     0,   498,     0,     0,   499,
       0,     0,     0,   500,   501,   502,   503,   504,   505,   506,
       0,     0,  -327,     0,     0,     0,   507,     0,     0,   509,
       0,   511,     0,   142,   512,   143,   144,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,  4762,     0,
     151,     0,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,     0,     0,   161,     0,     0,     0,   162,
       0,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,     0,     0,   170,   171,     0,   172,   173,
       0,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   203,   204,     0,   205,     0,
       0,   206,     0,     0,   207,     0,   208,  1047,     0,   209,
       0,   210,     0,     0,     0,   211,   212,   213,     0,     0,
     214,     0,     0,     0,     0,   215,   216,     0,     0,     0,
       0,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,     0,   244,   245,
     246,   247,     0,     0,   248,   249,     0,   250,   251,   252,
       0,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,   267,     0,   268,     0,
       0,     0,   269,   270,     0,     0,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,     0,   281,   282,     0,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   291,     0,     0,   292,     0,
       0,   293,   294,   643,     0,     0,     0,     0,   295,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,     0,     0,   348,   349,   350,
     351,     0,     0,     0,   352,   353,     0,     0,     0,   354,
       0,   355,   356,   357,     0,   358,   359,   360,   361,     0,
     362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     364,   365,   366,     0,     0,   367,     0,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
       0,   379,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,     0,   404,   405,
     406,     0,     0,   407,     0,   408,     0,   409,   410,     0,
     411,   412,     0,   413,     0,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,     0,   429,   430,   431,   432,
       0,     0,     0,   433,     0,     0,     0,   434,     0,   435,
     436,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,   452,     0,
       0,     0,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,   139,   473,   474,     0,   475,   476,   477,   478,     0,
       0,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,   488,   489,
       0,   490,   491,     0,     0,   492,     0,     0,   493,     0,
     494,     0,   495,   496,   497,     0,     0,     0,     0,     0,
       0,   498,     0,     0,   499,     0,     0,     0,   500,   501,
     502,   503,   504,   505,   506,     0,     0,     0,     0,     0,
       0,   507,   508,     0,   509,   510,   511,     0,   142,   512,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,  1215,   150,     0,     0,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,   167,   168,     0,     0,   169,     0,     0,
     170,   171,     0,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
     203,   204,     0,   205,     0,     0,   206,     0,     0,   207,
       0,   208,     0,     0,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,   216,     0,     0,     0,     0,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,   225,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,   230,   231,     0,   232,   233,   234,     0,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,     0,   244,   245,   246,   247,     0,     0,   248,
     249,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,     0,     0,   265,
     266,   267,     0,   268,     0,     0,     0,   269,   270,     0,
       0,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,     0,
     281,   282,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,     0,     0,     0,   288,     0,     0,   289,   290,
     291,     0,     0,   292,     0,     0,   293,   294,     0,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,   321,   322,   323,   324,     0,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,   335,     0,   336,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,   347,
       0,     0,   348,   349,   350,   351,     0,     0,     0,   352,
     353,     0,     0,     0,   354,     0,   355,   356,   357,     0,
     358,   359,   360,   361,     0,   362,   363,     0,     0,     0,
       0,     0,     0,     0,     0,   364,   365,   366,     0,     0,
     367,     0,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,     0,     0,   379,   380,   381,     0,
     382,     0,   383,   384,   385,   386,   387,     0,   388,   389,
     390,     0,     0,   391,     0,     0,     0,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,   400,   401,     0,
     402,   403,     0,   404,   405,   406,     0,     0,   407,     0,
     408,     0,   409,   410,     0,   411,   412,     0,   413,     0,
     414,     0,     0,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,   427,   428,     0,     0,
       0,   429,   430,   431,   432,     0,     0,     0,   433,     0,
       0,     0,   434,     0,   435,   436,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,     0,
       0,     0,     0,   447,   448,     0,   449,     0,     0,   450,
       0,     0,   451,   452,     0,     0,     0,   453,     0,     0,
     454,   455,     0,   456,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
       0,   469,   470,   471,   472,     0,     0,   473,   474,     0,
     475,   476,   477,   478,     0,     0,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,   483,   484,   485,     0,
     486,   487,     0,   488,   489,     0,   490,   491,     0,     0,
     492,     0,     0,   493,     0,   494,     0,   495,   496,   497,
       0,     0,     0,     0,     0,     0,   498,     0,     0,   499,
       0,     0,     0,   500,   501,   502,   503,   504,   505,   506,
       0,     0,     0,     0,     0,     0,   507,   508,     0,   509,
     510,   511,     0,   142,   512,   143,   144,   145,   146,   147,
     148,  2202,     0,   149,     0,     0,     0,   150,     0,     0,
     151,     0,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,     0,     0,   161,     0,     0,     0,   162,
       0,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,     0,     0,   170,   171,     0,   172,   173,
       0,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   203,   204,     0,   205,     0,
       0,   206,     0,     0,   207,     0,   208,     0,     0,   209,
       0,   210,     0,     0,     0,   211,   212,   213,     0,     0,
     214,     0,     0,     0,     0,   215,   216,     0,     0,     0,
       0,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,     0,   244,   245,
     246,   247,     0,     0,   248,   249,     0,   250,   251,   252,
       0,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,   267,     0,   268,     0,
       0,     0,   269,   270,     0,     0,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,     0,   281,   282,     0,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   291,     0,     0,   292,     0,
       0,   293,   294,     0,     0,     0,     0,     0,   295,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,     0,     0,   348,   349,   350,
     351,     0,     0,     0,   352,   353,     0,     0,     0,   354,
       0,   355,   356,   357,     0,   358,   359,   360,   361,     0,
     362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     364,   365,   366,     0,     0,   367,     0,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
       0,   379,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,     0,   404,   405,
     406,     0,     0,   407,     0,   408,     0,   409,   410,     0,
     411,   412,     0,   413,     0,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,     0,   429,   430,   431,   432,
       0,     0,     0,   433,     0,     0,     0,   434,     0,   435,
     436,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,   452,     0,
       0,     0,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,     0,
       0,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,   488,   489,
       0,   490,   491,     0,     0,   492,     0,     0,   493,     0,
     494,     0,   495,   496,   497,     0,     0,     0,     0,     0,
       0,   498,     0,     0,   499,     0,     0,     0,   500,   501,
     502,   503,   504,   505,   506,     0,     0,     0,     0,     0,
       0,   507,   508,     0,   509,   510,   511,     0,   142,   512,
     143,   144,   145,   146,   147,   148,  2900,     0,   149,     0,
       0,     0,   150,     0,     0,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,   167,   168,     0,     0,   169,     0,     0,
     170,   171,     0,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
     203,   204,     0,   205,     0,     0,   206,     0,     0,   207,
       0,   208,     0,     0,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,   216,     0,     0,     0,     0,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,   225,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,   230,   231,     0,   232,   233,   234,     0,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,     0,   244,   245,   246,   247,     0,     0,   248,
     249,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,     0,     0,   265,
     266,   267,     0,   268,     0,     0,     0,   269,   270,     0,
       0,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,     0,
     281,   282,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,     0,     0,     0,   288,     0,     0,   289,   290,
     291,     0,     0,   292,     0,     0,   293,   294,     0,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,   321,   322,   323,   324,     0,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,   335,     0,   336,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,   346,   347,
       0,     0,   348,   349,   350,   351,     0,     0,     0,   352,
     353,     0,     0,     0,   354,     0,   355,   356,   357,     0,
     358,   359,   360,   361,     0,   362,   363,     0,     0,     0,
       0,     0,     0,     0,     0,   364,   365,   366,     0,     0,
     367,     0,   368,     0,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,     0,     0,   379,   380,   381,     0,
     382,     0,   383,   384,   385,   386,   387,     0,   388,   389,
     390,     0,     0,   391,     0,     0,     0,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,   400,   401,     0,
     402,   403,     0,   404,   405,   406,     0,     0,   407,     0,
     408,     0,   409,   410,     0,   411,   412,     0,   413,     0,
     414,     0,     0,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,     0,   427,   428,     0,     0,
       0,   429,   430,   431,   432,     0,     0,     0,   433,     0,
       0,     0,   434,     0,   435,   436,   437,   438,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,     0,
       0,     0,     0,   447,   448,     0,   449,     0,     0,   450,
       0,     0,   451,   452,     0,     0,     0,   453,     0,     0,
     454,   455,     0,   456,   457,   458,   459,   460,   461,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
       0,   469,   470,   471,   472,     0,     0,   473,   474,     0,
     475,   476,   477,   478,     0,     0,     0,     0,     0,   479,
     480,   481,     0,     0,     0,   482,   483,   484,   485,     0,
     486,   487,     0,   488,   489,     0,   490,   491,     0,     0,
     492,     0,     0,   493,     0,   494,     0,   495,   496,   497,
       0,     0,     0,     0,     0,     0,   498,     0,     0,   499,
       0,     0,     0,   500,   501,   502,   503,   504,   505,   506,
       0,     0,     0,     0,     0,     0,   507,   508,     0,   509,
     510,   511,     0,   142,   512,   143,   144,   145,   146,   147,
     148,  3267,     0,   149,     0,     0,     0,   150,     0,     0,
     151,     0,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,     0,     0,   161,     0,     0,     0,   162,
       0,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,     0,     0,   170,   171,     0,   172,   173,
       0,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   203,   204,     0,   205,     0,
       0,   206,     0,     0,   207,     0,   208,     0,     0,   209,
       0,   210,     0,     0,     0,   211,   212,   213,     0,     0,
     214,     0,     0,     0,     0,   215,   216,     0,     0,     0,
       0,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,     0,   244,   245,
     246,   247,     0,     0,   248,   249,     0,   250,   251,   252,
       0,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,   267,     0,   268,     0,
       0,     0,   269,   270,     0,     0,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,     0,   281,   282,     0,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   291,     0,     0,   292,     0,
       0,   293,   294,     0,     0,     0,     0,     0,   295,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,   346,   347,     0,     0,   348,   349,   350,
     351,     0,     0,     0,   352,   353,     0,     0,     0,   354,
       0,   355,   356,   357,     0,   358,   359,   360,   361,     0,
     362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     364,   365,   366,     0,     0,   367,     0,   368,     0,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
       0,   379,   380,   381,     0,   382,     0,   383,   384,   385,
     386,   387,     0,   388,   389,   390,     0,     0,   391,     0,
       0,     0,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,   400,   401,     0,   402,   403,     0,   404,   405,
     406,     0,     0,   407,     0,   408,     0,   409,   410,     0,
     411,   412,     0,   413,     0,   414,     0,     0,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,     0,   429,   430,   431,   432,
       0,     0,     0,   433,     0,     0,     0,   434,     0,   435,
     436,   437,   438,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,     0,     0,     0,     0,   447,   448,
       0,   449,     0,     0,   450,     0,     0,   451,   452,     0,
       0,     0,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,     0,   469,   470,   471,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,     0,
       0,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,   483,   484,   485,     0,   486,   487,     0,   488,   489,
       0,   490,   491,     0,     0,   492,     0,     0,   493,     0,
     494,     0,   495,   496,   497,     0,     0,     0,     0,     0,
       0,   498,     0,     0,   499,     0,     0,     0,   500,   501,
     502,   503,   504,   505,   506,     0,     0,     0,     0,     0,
       0,   507,   508,     0,   509,   510,   511,     0,     0,   512,
       0,     0,     0,     0,     0,   142,  3637,   143,   144,   145,
     146,   147,   148,   840,   841,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,   842,     0,   207,     0,   208,     0,
     843,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,   844,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
     845,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   846,   240,   241,   242,   847,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   848,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,   849,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,   850,
     279,     0,   280,     0,     0,     0,   851,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,   643,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,   852,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   853,
     384,   385,   386,   854,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,   855,
       0,   397,   398,   399,   400,   401,     0,   856,   403,     0,
     404,   405,   406,     0,     0,   857,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,   858,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,   859,   860,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   861,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,   139,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,   862,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,   863,   494,   864,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   917,   144,   145,   146,   147,   148,   918,   841,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,   842,
       0,   207,     0,   208,     0,   843,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,   844,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,   845,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   846,   240,
     241,   242,   847,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   848,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,   849,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,   850,   279,     0,   280,     0,     0,
       0,   851,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
     643,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,   852,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   853,   384,   385,   386,   919,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,   855,     0,   397,   398,   399,   400,
     401,     0,   856,   403,     0,   404,   405,   406,     0,     0,
     857,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
     858,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,   859,   860,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   861,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,   139,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,   862,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,   863,   494,   864,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,  2553,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,  2554,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,  2555,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,  2556,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,  1095,  1096,     0,   352,   353,     0,     0,
    2557,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,  4749,   585,  4750,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,  2558,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,  1668,     0,     0,  3482,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,  1669,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,  2984,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,  2985,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,  2986,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,   139,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,  2987,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,  1668,
       0,     0,  4289,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,  1669,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,  2984,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,  2985,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
    2986,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,   139,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,  2987,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,  1668,     0,     0,  4544,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,  1669,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,  2984,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,  2985,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,  2986,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,   139,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,  2987,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,  1425,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,  1426,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,  1427,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,   643,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,  1428,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,   139,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,  1047,   843,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
     643,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,   139,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,  1439,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,  1440,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,   643,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,   139,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,  1018,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,  1019,  1020,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,  1021,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,  1999,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
    2000,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,   753,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,  2001,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,  2002,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,  1999,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,  2000,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,   753,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,  2002,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,  1425,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,  1426,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,   643,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,   139,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,  1999,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,  2000,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,   753,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,  4009,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,  2002,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
     843,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,   643,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,   139,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,  1047,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
     643,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,   139,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,  1462,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,   643,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,   139,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,  2463,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
     643,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,   139,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,  1425,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,   643,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,   139,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
     643,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,   139,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
    2896,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,   139,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,  4661,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,  4662,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,   585,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,  1113,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,   943,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,  1969,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,  2125,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,   943,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,  3094,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,   139,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,  3398,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,  3406,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,  3430,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,  4320,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,   352,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,   361,     0,   362,   363,     0,
       0,     0,     0,     0,     0,     0,     0,   364,   365,   366,
       0,     0,   367,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,   379,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,   403,     0,   404,   405,   406,     0,     0,
     407,     0,   408,     0,   409,   410,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,     0,   429,   430,   431,   432,     0,     0,     0,
     433,     0,     0,     0,   434,     0,   435,   436,   437,   438,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,   452,     0,     0,     0,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,   482,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,   490,   491,
       0,     0,   492,     0,     0,   493,     0,   494,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,   508,
       0,   509,   510,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
    1885,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
    1886,   350,   351,     0,     0,     0,   352,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
     361,     0,   362,   363,     0,     0,     0,     0,     0,     0,
       0,     0,   364,   365,   366,     0,     0,   367,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,   379,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,   403,     0,
     404,   405,   406,     0,     0,   407,     0,   408,     0,   409,
     410,     0,   411,   412,     0,   413,     0,   414,     0,     0,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,     0,   429,   430,
     431,   432,     0,     0,     0,   433,     0,     0,     0,   434,
       0,   435,   436,   437,   438,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
     452,     0,     0,     0,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,   490,   491,     0,     0,   492,     0,     0,
     493,     0,   494,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
       0,     0,     0,   507,   508,     0,   509,   510,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,     0,  -372,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,     0,     0,     0,     0,   169,
    4147,     0,   170,   171,     0,   172,     0,     0,     0,     0,
       0,   176,   177,   178,   179,  4148,   181,   182,     0,   183,
     184,     0,     0,     0,     0,     0,     0,   190,     0,   192,
       0,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,     0,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,     0,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,     0,     0,     0,   226,   227,   228,
       0,  -342,  -342,   229,     0,  -342,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,  4149,   250,   251,   252,     0,     0,     0,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,     0,   263,     0,   264,     0,     0,
       0,     0,   266,   267,     0,     0,     0,     0,     0,     0,
     270,     0,     0,     0,   271,   272,   273,   274,   275,  4150,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,     0,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,  4151,     0,     0,   288,     0,     0,
       0,   290,   291,     0,     0,   292,  4152,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,  -327,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,     0,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,  4153,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   365,   366,
       0,     0,     0,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,     0,     0,     0,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,     0,     0,   404,     0,   406,  -327,     0,
     407,     0,     0,     0,   409,     0,     0,   411,   412,     0,
     413,  4154,   414,     0,     0,   415,     0,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,     0,   427,     0,
       0,     0,     0,   429,   430,   431,     0,     0,     0,     0,
     433,     0,     0,     0,     0,     0,     0,   436,     0,     0,
     439,   440,     0,   441,     0,   443,     0,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,     0,     0,     0,     0,   453,
       0,     0,     0,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,     0,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,     0,     0,
       0,     0,   492,     0,     0,   493,     0,     0,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,  -327,     0,     0,     0,   507,     0,
       0,   509,     0,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,     0,     0,   152,   153,   154,   155,   156,   157,
     158,     0,     0,  -372,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
       0,     0,     0,     0,   169,  4147,     0,   170,   171,     0,
     172,     0,     0,     0,     0,     0,   176,   177,   178,   179,
    4148,   181,   182,     0,   183,   184,     0,     0,     0,     0,
       0,     0,   190,     0,   192,     0,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,     0,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,     0,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,     0,
       0,     0,   226,   227,   228,     0,  -363,     0,   229,     0,
    -363,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,     0,     0,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,  4149,   250,
     251,   252,     0,     0,     0,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,     0,
     263,     0,   264,     0,     0,     0,     0,   266,   267,     0,
       0,     0,     0,     0,     0,   270,     0,     0,     0,   271,
     272,   273,   274,   275,  4150,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,     0,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,  4151,
       0,     0,   288,     0,     0,     0,   290,   291,     0,     0,
     292,  4152,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,  -327,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,     0,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
    4153,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   365,   366,     0,     0,     0,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
       0,     0,     0,     0,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,     0,     0,
     404,     0,   406,  -327,     0,   407,     0,     0,     0,   409,
       0,     0,   411,   412,     0,   413,  4154,   414,     0,     0,
     415,     0,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,     0,   427,     0,     0,     0,     0,   429,   430,
     431,     0,     0,     0,     0,   433,     0,     0,     0,     0,
       0,     0,   436,     0,     0,   439,   440,     0,   441,     0,
     443,     0,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
       0,     0,     0,     0,   453,     0,     0,     0,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,     0,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,     0,     0,     0,     0,   492,     0,     0,
     493,     0,     0,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,  -363,     0,  -327,
       0,     0,     0,   507,     0,     0,   509,     0,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,     0,  -372,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,     0,     0,     0,     0,   169,
    4147,     0,   170,   171,     0,   172,     0,     0,     0,     0,
       0,   176,   177,   178,   179,  4148,   181,   182,     0,   183,
     184,     0,     0,     0,     0,     0,     0,   190,     0,   192,
       0,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,     0,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,     0,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,     0,     0,     0,   226,   227,   228,
       0,  -360,     0,   229,     0,  -360,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,  4149,   250,   251,   252,     0,     0,     0,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,     0,   263,     0,   264,     0,     0,
       0,     0,   266,   267,     0,     0,     0,     0,     0,     0,
     270,     0,     0,     0,   271,   272,   273,   274,   275,  4150,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,     0,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,  4151,     0,     0,   288,     0,     0,
       0,   290,   291,     0,     0,   292,  4152,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,  -327,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,     0,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,  4153,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   365,   366,
       0,     0,     0,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,     0,     0,     0,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,     0,     0,   404,     0,   406,  -327,     0,
     407,     0,     0,     0,   409,     0,     0,   411,   412,     0,
     413,  4154,   414,     0,     0,   415,     0,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,     0,   427,     0,
       0,     0,     0,   429,   430,   431,     0,     0,     0,     0,
     433,     0,     0,     0,     0,     0,     0,   436,     0,     0,
     439,   440,     0,   441,     0,   443,     0,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,     0,     0,     0,     0,   453,
       0,     0,     0,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,     0,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,     0,     0,
       0,     0,   492,     0,     0,   493,     0,     0,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,  -360,     0,  -327,     0,     0,     0,   507,     0,
       0,   509,     0,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,     0,     0,   152,   153,   154,   155,   156,   157,
     158,     0,     0,  -372,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
       0,     0,     0,     0,   169,  4147,     0,   170,   171,     0,
     172,     0,     0,     0,     0,     0,   176,   177,   178,   179,
    4148,   181,   182,     0,   183,   184,     0,     0,     0,     0,
       0,     0,   190,     0,   192,     0,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,     0,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,     0,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,     0,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
    4529,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,     0,     0,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,  4149,   250,
     251,   252,     0,     0,     0,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,     0,
     263,     0,   264,     0,     0,     0,     0,   266,   267,     0,
       0,     0,     0,     0,     0,   270,     0,     0,     0,   271,
     272,   273,   274,   275,  4150,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,     0,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,  4151,
       0,     0,   288,     0,     0,     0,   290,   291,     0,     0,
     292,  4152,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,  -327,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,     0,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
    4153,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   365,   366,     0,     0,     0,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
       0,     0,     0,     0,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,     0,     0,
     404,     0,   406,  -327,     0,   407,     0,     0,     0,   409,
       0,     0,   411,   412,     0,   413,  4154,   414,     0,     0,
     415,     0,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,     0,   427,     0,     0,     0,     0,   429,   430,
     431,     0,     0,     0,     0,   433,     0,     0,     0,     0,
       0,     0,   436,     0,     0,   439,   440,     0,   441,     0,
     443,     0,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
       0,     0,     0,     0,   453,     0,     0,     0,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,     0,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,     0,     0,     0,     0,   492,     0,     0,
     493,     0,     0,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,  -327,
       0,     0,     0,   507,     0,     0,   509,     0,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,     0,  -372,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,     0,     0,     0,     0,   169,
    4147,     0,   170,   171,     0,   172,     0,     0,     0,     0,
       0,   176,   177,   178,   179,  4148,   181,   182,     0,   183,
     184,     0,     0,     0,     0,     0,     0,   190,     0,   192,
       0,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,     0,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,     0,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,     0,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,  -365,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,  4149,   250,   251,   252,     0,     0,     0,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,     0,   263,     0,   264,     0,     0,
       0,     0,   266,   267,     0,     0,     0,     0,     0,     0,
     270,     0,     0,     0,   271,   272,   273,   274,   275,  4150,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,     0,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,  4151,     0,     0,   288,     0,     0,
       0,   290,   291,     0,     0,   292,  4152,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,  -327,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,     0,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,  4153,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   365,   366,
       0,     0,     0,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,     0,     0,     0,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,     0,     0,   404,     0,   406,  -327,     0,
     407,     0,     0,     0,   409,     0,     0,   411,   412,     0,
     413,  4154,   414,     0,     0,   415,     0,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,     0,   427,     0,
       0,     0,     0,   429,   430,   431,     0,     0,     0,     0,
     433,     0,     0,     0,     0,     0,     0,   436,     0,     0,
     439,   440,     0,   441,     0,   443,     0,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,     0,     0,     0,     0,   453,
       0,     0,     0,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,     0,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,     0,     0,
       0,     0,   492,     0,     0,   493,     0,     0,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,  -327,     0,     0,     0,   507,     0,
       0,   509,     0,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,     0,     0,   152,   153,   154,   155,   156,   157,
     158,     0,     0,  -372,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
       0,     0,     0,     0,   169,  4147,     0,   170,   171,     0,
     172,     0,     0,     0,     0,     0,   176,   177,   178,   179,
    4148,   181,   182,     0,   183,   184,     0,     0,     0,     0,
       0,     0,   190,     0,   192,     0,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,     0,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,     0,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,     0,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
    4666,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,     0,     0,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,  4149,   250,
     251,   252,     0,     0,     0,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,     0,
     263,     0,   264,     0,     0,     0,     0,   266,   267,     0,
       0,     0,     0,     0,     0,   270,     0,     0,     0,   271,
     272,   273,   274,   275,  4150,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,     0,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,  4151,
       0,     0,   288,     0,     0,     0,   290,   291,     0,     0,
     292,  4152,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,  -327,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,     0,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
    4153,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   365,   366,     0,     0,     0,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
       0,     0,     0,     0,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,     0,     0,
     404,     0,   406,  -327,     0,   407,     0,     0,     0,   409,
       0,     0,   411,   412,     0,   413,  4154,   414,     0,     0,
     415,     0,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,     0,   427,     0,     0,     0,     0,   429,   430,
     431,     0,     0,     0,     0,   433,     0,     0,     0,     0,
       0,     0,   436,     0,     0,   439,   440,     0,   441,     0,
     443,     0,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
       0,     0,     0,     0,   453,     0,     0,     0,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,     0,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,     0,     0,     0,     0,   492,     0,     0,
     493,     0,     0,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,  -327,
       0,     0,     0,   507,     0,     0,   509,     0,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,     0,  -372,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,     0,     0,     0,     0,   169,
    4147,     0,   170,   171,     0,   172,     0,     0,     0,     0,
       0,   176,   177,   178,   179,  4148,   181,   182,     0,   183,
     184,     0,     0,     0,     0,     0,     0,   190,     0,   192,
       0,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,     0,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,     0,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,     0,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,  4719,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,  4149,   250,   251,   252,     0,     0,     0,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,     0,   263,     0,   264,     0,     0,
       0,     0,   266,   267,     0,     0,     0,     0,     0,     0,
     270,     0,     0,     0,   271,   272,   273,   274,   275,  4150,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,     0,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,  4151,     0,     0,   288,     0,     0,
       0,   290,   291,     0,     0,   292,  4152,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,  -327,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,     0,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,  4153,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   365,   366,
       0,     0,     0,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,     0,     0,     0,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,     0,     0,   404,     0,   406,  -327,     0,
     407,     0,     0,     0,   409,     0,     0,   411,   412,     0,
     413,  4154,   414,     0,     0,   415,     0,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,     0,   427,     0,
       0,     0,     0,   429,   430,   431,     0,     0,     0,     0,
     433,     0,     0,     0,     0,     0,     0,   436,     0,     0,
     439,   440,     0,   441,     0,   443,     0,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,     0,     0,     0,     0,   453,
       0,     0,     0,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,     0,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,     0,     0,
       0,     0,   492,     0,     0,   493,     0,     0,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,  -327,     0,     0,     0,   507,     0,
       0,   509,     0,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,     0,     0,   152,   153,   154,   155,   156,   157,
     158,     0,     0,  -372,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
       0,     0,     0,     0,   169,  4147,     0,   170,   171,     0,
     172,     0,     0,     0,     0,     0,   176,   177,   178,   179,
    4148,   181,   182,     0,   183,   184,     0,     0,     0,     0,
       0,     0,   190,     0,   192,     0,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,     0,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,     0,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,     0,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
    -346,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,     0,     0,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,  4149,   250,
     251,   252,     0,     0,     0,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,     0,
     263,     0,   264,     0,     0,     0,     0,   266,   267,     0,
       0,     0,     0,     0,     0,   270,     0,     0,     0,   271,
     272,   273,   274,   275,  4150,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,     0,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,  4151,
       0,     0,   288,     0,     0,     0,   290,   291,     0,     0,
     292,  4152,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,  -327,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,     0,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
    4153,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   365,   366,     0,     0,     0,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
       0,     0,     0,     0,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,     0,     0,
     404,     0,   406,  -327,     0,   407,     0,     0,     0,   409,
       0,     0,   411,   412,     0,   413,  4154,   414,     0,     0,
     415,     0,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,     0,   427,     0,     0,     0,     0,   429,   430,
     431,     0,     0,     0,     0,   433,     0,     0,     0,     0,
       0,     0,   436,     0,     0,   439,   440,     0,   441,     0,
     443,     0,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
       0,     0,     0,     0,   453,     0,     0,     0,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,     0,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,     0,     0,     0,     0,   492,     0,     0,
     493,     0,     0,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,  -327,
       0,     0,     0,   507,     0,     0,   509,     0,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,     0,  -372,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,     0,     0,     0,     0,   169,
    4147,     0,   170,   171,     0,   172,     0,     0,     0,     0,
       0,   176,   177,   178,   179,  4148,   181,   182,     0,   183,
     184,     0,     0,     0,     0,     0,     0,   190,     0,   192,
       0,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,     0,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,     0,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,     0,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,     0,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,  4149,   250,   251,   252,     0,     0,     0,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,     0,   263,     0,   264,     0,     0,
       0,     0,   266,   267,     0,     0,     0,     0,     0,     0,
     270,     0,     0,     0,   271,   272,   273,   274,   275,  4150,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,     0,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,  4151,     0,     0,   288,     0,     0,
       0,   290,   291,     0,     0,   292,  4152,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,  -327,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,     0,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,  4153,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   365,   366,
       0,     0,     0,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,     0,     0,     0,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,     0,     0,   404,     0,   406,  -327,     0,
     407,     0,     0,     0,   409,     0,     0,   411,   412,     0,
     413,  4154,   414,     0,     0,   415,     0,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,     0,   427,     0,
       0,     0,     0,   429,   430,   431,     0,     0,     0,     0,
     433,     0,     0,     0,     0,     0,     0,   436,     0,     0,
     439,   440,     0,   441,     0,   443,     0,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,     0,     0,     0,     0,   453,
       0,     0,     0,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,     0,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,     0,     0,
       0,     0,   492,     0,     0,   493,     0,     0,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,  -327,     0,     0,     0,   507,     0,
       0,   509,     0,   511,     0,   142,   512,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,     0,     0,   152,   153,   154,   155,   156,   157,
     158,     0,     0,  -372,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
       0,     0,     0,     0,   169,  4147,     0,   170,   171,     0,
     172,     0,     0,     0,     0,     0,   176,   177,   178,   179,
    4148,   181,   182,     0,   183,   184,     0,     0,     0,     0,
       0,     0,   190,     0,   192,     0,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,     0,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,     0,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,     0,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
       0,   231,     0,   232,   233,   234,     0,     0,   235,   236,
       0,   237,   238,   239,   240,   241,     0,     0,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,  4149,   250,
     251,   252,     0,     0,     0,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,     0,
     263,     0,   264,     0,     0,     0,     0,   266,   267,     0,
       0,     0,     0,     0,     0,   270,     0,     0,     0,   271,
     272,   273,   274,   275,  4150,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,     0,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,  4151,
       0,     0,   288,     0,     0,     0,   290,   291,     0,     0,
     292,  4152,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,  -327,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,   346,   347,     0,     0,   348,
     349,   350,   351,     0,     0,     0,     0,   353,     0,     0,
       0,   354,     0,   355,   356,   357,     0,   358,   359,   360,
    4153,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   365,   366,     0,     0,     0,     0,   368,
       0,   369,   370,   371,   372,   373,   374,   375,   376,   377,
       0,     0,     0,     0,   380,   381,     0,   382,     0,   383,
     384,   385,   386,   387,     0,   388,   389,   390,     0,     0,
     391,     0,     0,     0,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,   400,   401,     0,   402,     0,     0,
     404,     0,   406,  -327,     0,   407,     0,     0,     0,   409,
       0,     0,   411,   412,     0,   413,  4154,   414,     0,     0,
     415,     0,   417,   418,   419,   420,   421,   422,   423,     0,
     425,   426,     0,   427,     0,     0,     0,     0,   429,   430,
     431,     0,     0,     0,     0,   433,     0,     0,     0,     0,
       0,     0,   436,     0,     0,   439,   440,     0,   441,     0,
     443,     0,   445,   446,     0,     0,     0,     0,     0,     0,
     447,   448,     0,   449,     0,     0,   450,     0,     0,   451,
       0,     0,     0,     0,   453,     0,     0,     0,   455,     0,
     456,   457,   458,   459,   460,   461,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,     0,   469,   470,
     471,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,     0,     0,     0,     0,     0,   479,   480,   481,     0,
       0,     0,     0,   483,   484,   485,     0,   486,   487,     0,
     488,   489,     0,     0,     0,     0,     0,   492,     0,     0,
    4532,     0,     0,     0,   495,   496,   497,     0,     0,     0,
       0,     0,     0,   498,     0,     0,   499,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,     0,     0,  -327,
       0,     0,     0,   507,     0,     0,   509,     0,   511,     0,
     142,   512,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,     0,     0,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,     0,     0,     0,     0,   169,
       0,     0,   170,   171,     0,   172,     0,     0,     0,     0,
       0,   176,   177,   178,   179,     0,   181,   182,     0,   183,
     184,     0,     0,     0,     0,     0,     0,   190,     0,   192,
       0,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,     0,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,     0,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,     0,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,     0,   231,     0,   232,   233,
     234,     0,     0,   235,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,     0,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,     0,   263,     0,   264,     0,     0,
       0,     0,   266,   267,     0,     0,     0,     0,     0,     0,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,     0,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
       0,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
     346,   347,     0,     0,   348,   349,   350,   351,     0,     0,
       0,     0,   353,     0,     0,     0,   354,     0,   355,   356,
     357,     0,   358,   359,   360,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   365,   366,
       0,     0,     0,     0,   368,     0,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,     0,     0,     0,   380,
     381,     0,   382,     0,   383,   384,   385,   386,   387,     0,
     388,   389,   390,     0,     0,   391,     0,     0,     0,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,   400,
     401,     0,   402,     0,     0,   404,     0,   406,     0,     0,
     407,     0,     0,     0,   409,     0,     0,   411,   412,     0,
     413,     0,   414,     0,     0,   415,     0,   417,   418,   419,
     420,   421,   422,   423,     0,   425,   426,     0,   427,     0,
       0,     0,     0,   429,   430,   431,     0,     0,     0,     0,
     433,     0,     0,     0,     0,     0,     0,   436,     0,     0,
     439,   440,     0,   441,     0,   443,     0,   445,   446,     0,
       0,     0,     0,     0,     0,   447,   448,     0,   449,     0,
       0,   450,     0,     0,   451,     0,     0,     0,     0,   453,
       0,     0,     0,   455,     0,   456,   457,   458,   459,   460,
     461,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,     0,   469,   470,   471,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,     0,     0,     0,     0,
       0,   479,   480,   481,     0,     0,     0,     0,   483,   484,
     485,     0,   486,   487,     0,   488,   489,     0,     0,     0,
       0,     0,   492,     0,     0,   493,     0,     0,     0,   495,
     496,   497,     0,     0,     0,     0,     0,     0,   498,     0,
       0,   499,     0,     0,     0,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   507,     0,
       0,   509,     0,   511,     0,     0,   512
};

static const yytype_int16 yycheck[] =
{
       6,   669,  1040,   575,   597,  1219,   620,  1219,   926,  1187,
    1317,    20,  1041,    19,  1945,  1946,  1145,    23,   596,   597,
    1632,    30,   525,  1597,  2115,   128,  2115,    33,    37,   639,
    1117,  1780,   639,  1363,    40,  1465,     6,    43,   994,  1465,
     969,  1445,    48,   736,  1595,  1317,  2535,  1163,  2435,    55,
    1628,  1629,   946,   947,  2218,  2397,  2546,  2668,   542,   543,
     544,  2607,   546,   957,   548,   994,  2230,   551,   689,   553,
     677,  1284,  1250,  1251,  2564,  2565,  1254,  1255,  1256,  1257,
    3032,  1259,  1260,  1261,  1262,  1263,  1264,  1265,  1266,  1242,
    2876,     4,  3351,    99,   834,   540,  1249,  2789,  3078,  2941,
    1371,  2359,  1344,   832,  2321,  1154,   967,   559,   559,   600,
    2113,  1013,   603,  3083,    23,  2457,  1856,   123,  1045,   125,
    2115,   127,   128,   129,  1476,  1045,  1930,   134,  2231,   665,
     666,  2573,  3548,  2500,   995,   803,  2113,  3438,   590,   590,
    2719,  2720,  3620,  2575,  1496,  2185,  2725,  2579,  2727,  3147,
    2505,  2508,  1504,  1505,  3033,   125,  3233,   127,  2590,    13,
    2517,   901,    13,  2950,  2185,    17,    18,  3163,   118,    18,
    2602,   792,   793,   794,  1076,   678,   679,   680,    26,     9,
      21,  1565,  2185,   804,  2674,  2675,    53,  1575,    75,    20,
      99,    36,    49,    20,    22,  2564,  2565,  2172,    83,    29,
      22,    20,   132,    62,   116,  2722,    36,    32,  2185,    83,
     996,   132,    17,    18,    36,    20,  3000,  1944,    17,    18,
      13,   673,    17,    18,   169,  3171,   129,  3011,    50,  2683,
      22,  1619,   162,    61,    62,   182,    17,    18,   225,    61,
      62,   162,   136,    72,    36,   277,  1035,  1036,    18,    66,
     386,   380,  3480,    13,    17,    18,  2315,    91,    50,   202,
     195,   276,    34,   159,   217,   374,   376,  4151,  4152,    61,
      62,    17,    18,    70,   170,   136,   156,   709,   710,  3393,
      54,   404,   166,   235,    36,   132,  1075,    73,   279,   239,
      58,    65,   293,   132,   257,   331,   137,   375,   431,   456,
     235,    20,    17,    18,  4381,  2674,  2675,   137,    84,   465,
      38,    89,   436,   162,   485,   162,   235,   313,   199,  3735,
    3736,    17,    18,  3739,    20,   403,   260,    21,    60,    38,
      72,  3660,    17,    18,    12,   162,   199,   145,  2705,   166,
    2707,   407,  3758,   257,   156,   371,   231,   166,   233,  3765,
     563,   783,   836,   277,   386,   197,    24,  3616,   563,  2096,
     534,    11,  1575,  4392,   528,   156,    13,   134,    17,    18,
     595,   364,    65,   485,    90,   294,   431,   262,   830,   563,
      17,    18,  2051,   199,    36,   246,   218,   250,   291,    17,
      18,    17,    18,   173,   242,    22,   112,   452,   562,    17,
      18,    17,    18,  4251,  2201,   647,  1619,   173,   197,    36,
      62,   843,   654,   630,   162,   239,   197,  2087,    17,    18,
    2869,   414,   202,    50,   653,  2105,  3904,   530,    75,   654,
     426,   263,   661,   488,    61,    62,   202,   253,   655,   263,
     653,   258,   616,   137,   286,   511,   119,   166,   653,   122,
     182,   477,   453,   199,   186,   133,   559,    48,    17,    18,
    1153,   564,   386,  1035,  1036,   197,   590,   370,   431,   274,
      68,    17,    18,   321,  1167,   418,  4505,  2482,   162,   360,
     427,   253,   653,   474,   199,   563,  3815,   590,   384,    17,
      18,  1520,  2568,   221,   222,    21,   987,   630,   655,   622,
      17,    18,   454,   196,   276,   661,   174,   503,   427,   283,
      17,    18,   221,   222,    17,    18,   294,   431,    53,   655,
    2887,  2888,   330,   386,   530,   561,   532,   294,   462,   277,
     369,  3947,   661,   385,  2977,  1038,   388,  4385,   195,  3868,
    3956,   653,   160,   549,  1438,   655,   655,   534,   563,    17,
      18,  1280,   588,   559,   560,  3342,   166,   510,   564,  3346,
     566,   313,  1966,   595,  3980,  2568,  4643,    17,    18,  3985,
     673,  3685,  2309,   579,  3697,   294,   563,  1245,   235,  3008,
     385,    17,    18,   388,   590,  2972,   385,  3888,  3078,   388,
     596,  2568,   426,   277,   461,  3854,  1336,   329,   366,  3291,
     606,   387,    65,  1532,   385,   518,   166,   388,  3392,  1470,
     494,   137,  1473,   628,   557,  1047,  1477,  1830,  1479,   625,
    3404,    87,   385,  1930,  1317,   388,   467,   218,   629,   166,
    1808,  2626,  1253,   639,   431,   641,  3420,  3421,  1565,   385,
    3130,  1819,   388,  2683,  1822,  1565,  1507,  1508,   654,  1270,
    3434,  4535,  4536,   659,   567,   661,  2453,  3655,  1930,   665,
     666,  3353,  2683,  2514,   670,   671,   562,   673,   440,  1409,
     385,   677,   607,   388,  2026,    17,    18,  3131,   684,   624,
    2683,    17,    18,   586,   654,  1130,  1131,   600,   638,   385,
     603,  1618,   388,  1433,   607,   427,   166,  3925,  1618,  2087,
     385,  2676,  1604,   388,  4005,   534,  2683,   601,   655,   621,
     503,  1156,   431,    17,    18,  4016,  1502,    17,    18,  1164,
      26,  1166,   596,   416,   554,  2113,   543,   830,   831,   659,
     736,  2790,  2459,  1178,  1179,  1180,   385,  1344,   659,   388,
     601,  1186,  3584,   503,   574,   630,  4047,   627,   385,   574,
     659,   388,   582,  1802,  1290,   574,   615,   385,  3304,   385,
     388,  3130,   388,   620,  1553,   593,   653,   385,   418,   385,
     388,   593,   388,   630,  3770,    17,    18,   608,   608,  3146,
    1909,   630,  2166,   576,  2172,  2522,   385,   639,   655,   388,
    3736,   797,   534,   799,    17,    18,   618,  2185,  3875,   653,
    1410,   593,   653,  1410,   574,   646,   658,   655,   653,   608,
     659,   587,   659,    17,    18,   627,  3695,  1308,   824,   825,
     826,   827,   828,   829,   830,   831,   385,   833,   834,   388,
    1366,   653,   659,   839,   639,   563,   627,  4315,  2507,   385,
     639,   630,   388,   946,   639,   948,  1575,  1383,   951,   952,
     655,  3300,  4700,  2404,   563,   825,   655,   385,   639,   829,
     388,  3648,  3649,   833,  1474,   968,  4195,  1474,   385,    75,
     876,   388,  3870,   654,  2087,   525,   639,  2547,   385,  2810,
     628,   388,   385,   889,   494,   388,  2566,   478,    17,    18,
    1619,   654,   655,   639,   567,   901,   902,   570,   147,  1390,
     906,    17,    18,   596,  4233,   503,  2911,  2704,  2520,   655,
    3297,   659,    17,    18,  2651,  3699,   635,   385,   182,  2656,
     388,  2997,  2853,   655,   639,  3414,   461,  2664,  2665,   579,
      17,    18,  4083,  2670,   494,   385,   242,  3380,   388,   654,
     946,   467,   948,   639,   628,   951,   952,    17,    18,   385,
     607,  1454,   388,  4076,   639,   111,   151,   494,  3537,  2172,
    3389,   166,   968,  1535,  1536,  1537,   593,  3546,    53,  3311,
     655,   621,  2185,    17,    18,   659,   439,  3068,   202,  3068,
     889,  3336,   895,  3350,  4400,  3342,  4402,   614,   615,  3346,
     639,  1569,   197,   902,  2997,    17,    18,   906,   182,    17,
      18,   325,   639,    17,    18,   654,   655,  1013,   838,   276,
     401,   639,  3418,   639,   480,   321,  2590,   654,   655,  1626,
    2997,   639,  3539,   639,   494,  4503,  3468,   655,   654,   655,
    1037,  4332,  1725,    13,   313,  1041,  3992,  3469,   654,   655,
     639,    17,    18,   385,  4345,   563,   388,   370,   162,   385,
       9,   661,   388,    17,    18,   654,   655,   376,  1952,  1065,
    2490,   367,  2492,  2493,    44,  2021,  2492,  2493,  4098,  4370,
    1076,  3174,   130,  3068,   987,  2879,   989,  2255,  1972,   294,
     639,   385,   185,   150,   388,   385,  2826,   671,   388,    17,
      18,  3131,  2021,   639,   343,   654,  1836,  2948,  2949,   152,
    2056,   661,   376,  4073,  1110,  1111,  1112,  1113,   654,   655,
    3131,   639,  2883,  2884,  2885,    45,  2203,   200,    98,   366,
    3337,   235,   639,   103,   661,   485,   654,  2056,  3131,  1232,
      17,    18,   639,   378,  2376,   653,   639,   654,   655,   378,
      13,  3720,   485,   385,  3723,  2416,   388,  1153,   655,  2501,
     367,  2012,   655,  1893,  3131,  2654,  1065,  4137,    41,  2547,
     563,  1167,   385,   427,  2025,   388,  1269,  2028,  2029,  1621,
    1621,   639,   633,   283,  3753,  3754,  3755,  1917,  1918,  2332,
    2568,   385,  3761,     9,   388,   376,   231,   655,   233,   639,
    3769,   661,  2941,   251,   418,  4151,  4152,  3883,  4457,   446,
    1821,  3718,  3719,   639,  1113,   655,    32,    12,  3725,    83,
     366,  3728,  3729,  1219,   420,  1318,   431,   376,   244,   655,
    2122,  2435,  2338,  2339,  3065,   218,  1232,   253,  3745,    17,
      18,   190,   538,    73,  2412,    17,    18,  1930,  4451,  2166,
    4453,  4271,  3759,   427,   828,  4396,  2166,    60,  3765,  3766,
    3767,  3768,  3093,   376,  1826,   210,   385,   660,   368,   388,
     363,   364,   653,  1269,    17,    18,   369,   376,  1274,   385,
     263,  1374,   388,   146,   253,   255,   353,  3014,   277,  3016,
     385,   366,  2331,   388,  1290,   584,  3023,   185,  2676,   494,
     485,  2842,  2341,   653,   273,  2683,   239,   639,   385,   376,
    3037,   388,  1838,   639,  2518,  3711,  2518,  3044,  3045,   608,
     653,  1317,  1318,   655,   164,   385,   399,   623,   388,   655,
    3057,  3058,  3059,   646,    17,    18,  3063,  3064,   283,   653,
    1336,   171,  1904,   557,  2547,   639,   655,   390,  1344,   639,
     454,   385,   606,  1349,   388,  1351,   108,   553,  1354,   505,
     330,   655,  4308,  4309,   654,  1976,  1847,   231,  2087,   233,
    1366,   628,  3099,   385,  3528,   391,   388,   385,  1374,   182,
     388,   385,   578,   186,   388,   433,   461,  1383,  1384,    17,
      18,   655,  4362,  4363,   197,    17,    18,   386,   262,   213,
     635,   655,   242,    17,    18,  1308,   635,   639,  4240,   648,
     649,   650,   651,  1409,  1410,   133,   623,  1413,   493,   385,
      17,    18,   388,   655,   394,  1421,   639,   199,  1424,   502,
     635,   385,   606,   353,   388,    83,   493,  1433,    17,    18,
      17,    18,   655,  3007,  3008,   639,   260,   653,  1444,  1445,
      17,    18,  1355,  2172,  3702,  1354,    17,    18,   129,  1455,
    1456,  1457,  1458,  1459,  1460,  4399,  2185,   385,   653,  1465,
     388,  4417,   657,  2676,   655,  1471,  1472,  4447,  1474,  1572,
    2683,   369,  1478,  4259,   147,  1384,  4432,  1390,   581,  1931,
    1931,   286,   540,  4094,  4095,  1455,  1456,  1457,   485,  1459,
      66,   485,  3229,  1499,   597,   479,   655,    26,   385,  2929,
    4192,   388,  1472,    17,    18,   288,   105,   400,  1478,   557,
     639,    17,    18,   235,  3013,  3391,   329,   367,  1621,  3395,
    3396,  3908,   485,   639,   252,  4477,   655,  4786,    17,    18,
     407,   608,   655,   513,   639,   490,  3307,  1450,   403,   655,
    3039,  3040,   190,  4499,  2673,   659,   655,   387,  1554,  1458,
     655,  1460,   639,  4099,   485,   448,  4242,     0,  4244,  2062,
    3401,  4050,   386,    13,  1477,   348,  1572,  4523,   655,   639,
     550,  2181,  2879,   231,  2181,   233,   501,    17,    18,  4535,
    4536,  1587,    17,    18,  2478,   655,  1592,  1593,    17,    18,
    1499,  2833,  2834,  2835,  3435,   639,  4462,   385,  1604,  4465,
     388,    17,    18,   385,   262,  3446,   388,  2879,  3449,  2997,
     291,   655,    17,    18,   427,  1621,   133,   639,   266,  2706,
    1626,   639,    17,    18,  3803,   639,   243,  2957,   654,  1635,
      13,  1637,   385,   655,   511,   388,   654,  3801,    17,    18,
     814,   655,   242,   260,   243,  1554,   529,  4137,  4604,   134,
    2864,   534,  2864,  2806,   291,   272,   653,   379,  4614,   653,
     657,   260,  2863,   639,   547,  1578,   199,    17,    18,   552,
     343,    17,    18,   272,   599,   639,   162,    13,  1587,   655,
      17,    18,   258,   581,  1593,    17,    18,    42,   538,   370,
     653,   655,   385,  4080,    13,   388,   146,   580,   563,   597,
    4644,  4645,  4658,  3539,  4660,   647,  2446,  4049,    17,    18,
     584,   639,   654,   242,  2335,   485,   473,   642,   366,  1725,
    1726,    83,   653,   493,   553,  3276,    13,   655,   557,  4685,
    2859,    17,    18,   370,   608,   252,  1839,  4693,   223,  4695,
     914,  4697,   608,  3131,   277,  2639,    81,   385,    13,   418,
     388,   534,   639,   385,   353,  4711,   388,  4623,  2959,  4715,
     445,   385,   655,   146,   388,   363,   364,   367,   655,  2376,
     244,    17,    18,   623,  4730,  4731,    17,    18,   385,   253,
    1786,   388,  2227,   138,    17,    18,   362,  2232,   654,   655,
    4746,  4747,   321,    17,    18,  4751,   385,   554,   385,   388,
    2245,   388,   413,   560,  3983,   655,  3682,  3986,   385,   294,
     146,   388,   631,   632,   385,  3389,   278,   388,  2547,   281,
      17,    18,  1828,  1829,   115,    17,    18,   146,  1931,  3043,
    1836,  3043,  1838,  1839,  2279,  3584,   655,  2447,    17,    18,
    2447,   526,   612,   613,   630,  1851,  1949,   604,   166,   553,
    1856,   639,   469,   557,    26,  1861,   525,   639,  1864,   146,
     166,   196,  1059,  1060,   621,  1871,  1872,   655,  1874,   655,
     469,   385,  4362,  4363,   388,    17,    18,    17,    18,   385,
     242,   146,   388,   653,  3863,  1337,   639,  1893,  1340,  3725,
    1896,  1343,  3728,  3729,  1900,  3469,   385,    17,    18,   388,
     604,   654,   608,  2348,   239,   586,  2484,  1104,  3887,  3745,
     579,  1917,  1918,  1919,  1920,    17,    18,   391,  3131,   630,
    1829,   653,   539,   213,  1930,  1931,  3330,    40,   263,   661,
    1936,  1937,  1938,   224,  1847,    48,   223,   173,   538,   133,
     539,    17,    18,  1949,   655,   385,   639,  2676,   388,   655,
     385,   527,   621,   388,  2683,   661,   385,  4447,  2876,   388,
    1966,   654,  1871,  1872,   661,  1874,   428,   543,  2924,   385,
      17,    18,   388,   646,   647,   648,   649,   650,   651,   532,
     385,  1987,   143,   388,    17,    18,   485,  1896,     6,    18,
     385,  1900,   164,   388,  3224,  2924,   549,   158,  3228,   361,
     234,   639,  1915,    17,    18,   367,   385,   639,  3338,   388,
    1919,  1920,    17,    18,   213,   639,   654,    17,    18,    17,
      18,  2027,   654,   623,    17,    18,   454,  1936,  1937,  1938,
     654,   239,   639,   557,  3150,   385,   560,  2043,   388,   385,
     615,    59,   388,   618,  2050,   608,   239,   654,   385,  3786,
     639,   388,   639,   385,  2060,  2061,   388,  2063,  2064,   658,
     636,  2955,   639,  3179,  3180,   654,   239,   654,   639,  1982,
     242,  2068,  2069,   141,  2935,   437,   385,   654,   234,   388,
    2183,   416,   213,   654,  3200,   380,  2189,  3301,  2085,  3218,
    2060,  2061,   655,    18,    49,  3832,    17,    18,   661,   385,
     199,   392,   388,   654,   655,  2102,  2103,   250,    17,    18,
    3688,  3689,   403,   612,   613,  2218,  2122,   613,  2027,   410,
     297,  2861,   299,   300,  1005,   639,   493,  2230,   654,   655,
    1011,  1012,   150,   639,   504,  3349,   504,  3349,   315,   385,
     654,  2050,   388,   294,   385,    17,    18,   388,   654,   321,
     639,  1872,   385,  1874,   653,   388,   149,   654,   655,  2072,
     654,   385,   136,   557,   388,   654,    61,    62,  2081,  2082,
    2167,  2168,  2169,  2170,   560,  2181,   538,  2183,    73,  2092,
    2093,  2094,  2095,  2189,  2097,  2098,  2879,   566,   385,  2195,
     659,   388,  2198,   385,   661,   367,   388,    17,    18,   639,
      20,   602,    17,    18,   639,    20,   385,   129,   211,   388,
     639,    18,  2218,   382,   654,  1936,  1937,  1938,   509,   654,
     653,  2324,   147,   639,  2230,   654,  2833,  2834,  2835,   591,
    4188,  4189,   519,   520,   639,   522,    33,   524,   654,   196,
    2812,   654,   655,   385,   639,   385,   388,   557,   388,   654,
     525,  2354,   539,    26,   574,    12,   654,   655,     6,   654,
     639,   623,  1123,  1124,  1125,   385,   443,   444,   388,   653,
     192,   653,   246,  2883,  2884,  2885,  2883,  2884,  2885,  1140,
    4211,   653,  3411,   385,   129,   661,   388,   653,    85,   639,
     199,   654,   655,   639,  4031,  4032,  4033,   749,   655,   221,
     653,   129,   639,   563,   654,    13,   653,   639,   654,   385,
      83,  1172,   388,   604,  1175,   318,   319,   654,  2324,   771,
     323,   324,   654,   654,   655,   654,   655,   199,   299,   300,
     639,   653,   784,   785,   136,  1196,  1197,    26,   385,  1200,
     147,   388,   653,  2349,   315,   654,   364,   192,  2354,   654,
     655,    81,   385,   639,   653,   388,  2801,   653,   115,  1220,
    1221,  3791,   178,   160,   192,  3791,   538,   136,   654,   291,
    2376,   385,  3488,   653,   388,   653,   133,  3333,  4336,   653,
     385,   653,  4340,   388,   653,   385,   653,   385,   388,   653,
     388,   164,   385,   639,    83,   388,   654,   655,   639,   653,
    3294,  3615,  3131,  3615,  3333,  2411,   639,   608,   654,   653,
     183,   653,   430,   654,   432,   639,   173,   473,   343,   538,
      83,   654,   613,   614,   566,   616,   653,   618,  3515,  2435,
     654,  2534,  2535,  2439,    17,    18,   654,   655,   146,   653,
    2446,  2447,   639,  3021,   246,   202,   291,   639,   370,   654,
     655,   623,  4543,  4542,  2460,   653,  2462,   654,   654,   655,
     639,   417,   654,   291,   385,   653,   196,   388,   653,   242,
     653,    83,   443,   444,   376,   654,   385,   246,  2484,   388,
     454,    36,   653,   655,  2490,    97,  2492,  2493,  4062,  4063,
     653,  4240,   383,  3707,   183,  3707,   653,   639,  3001,   639,
     653,   164,   654,   655,   654,   655,  3009,    62,   653,   239,
     553,   485,  2518,   385,   654,   223,   388,   654,   655,   639,
     653,  2527,   654,   655,  2530,   370,   653,  3556,  2534,  2535,
     287,  3015,   653,   263,   654,   653,   343,   639,  3941,  3942,
     654,   655,   370,  3027,   653,  3029,  3030,  2460,   321,  4507,
    4508,  3954,   654,   242,    61,    62,    34,  3041,  3961,   653,
    2530,   654,   655,   639,   119,   385,    27,   122,   388,   653,
     385,   496,   497,   388,   653,   130,   653,  2574,   654,   242,
    2577,  2578,   653,  2580,  3987,  3988,  2583,  2584,   361,   115,
    2587,   653,   639,   148,   367,  2592,   654,   655,  4210,   653,
    2597,  2598,  2599,  2600,  2601,    62,   639,   654,  2605,  2606,
    3917,  2608,    73,  2619,   654,   655,   413,  2614,  2615,  2616,
    2617,   654,    83,  2620,  2621,   639,  2623,   601,  2634,   654,
     655,   653,   321,   653,   639,   654,   655,   653,   435,   639,
     654,   639,  2648,   654,   655,   566,   639,   173,   574,   654,
     654,   655,   454,   265,   654,   376,   654,   653,  3965,   654,
     655,   418,   119,   653,   586,   122,   654,   655,   653,   147,
     400,   132,   361,   130,   471,   653,   202,   653,   367,   653,
     655,   654,   655,   485,  2681,   454,   416,   127,   653,   496,
     497,   148,   653,  2699,  2700,  2701,   251,  3307,   361,   653,
    3307,  3789,  3790,   653,   367,   147,   653,  4444,   654,   655,
     654,   655,   654,   655,   654,   655,   485,   653,   639,   644,
     645,   646,   647,   648,   649,   650,   651,   654,   655,   341,
     639,   235,   654,   530,   491,   653,   193,   653,   129,  2652,
    2653,   586,  2655,  3188,  2657,  2658,  2659,  2660,  2661,  2662,
    2663,  3329,   653,  2666,   366,   653,  2669,   653,   586,  2672,
     654,   655,   654,   655,   653,   538,   653,   639,   525,   653,
     231,   653,   233,   653,   437,   253,   653,  4708,   654,   655,
     653,  1642,   129,   654,   655,   132,   654,   655,   147,   229,
    2699,  2700,  2701,   653,   251,  3240,   653,   554,   276,   601,
     355,   192,   263,   654,   655,   654,   655,   654,   655,  3833,
    3834,   519,   520,   521,   522,   523,   524,   429,   653,   639,
    2826,   653,  2828,   105,   639,  3913,  2832,  2833,  2834,  2835,
     221,   539,   601,   654,   655,  2841,   653,   644,   645,   646,
     647,   648,   649,   650,   651,   192,    38,   156,   157,   538,
     623,   653,  1204,  1205,  2860,  2861,  4787,   653,  2864,   654,
     655,   653,  4040,   511,   621,   343,  1727,   654,   655,    51,
    1731,   654,   655,  2879,   221,   538,   654,  2883,  2884,  2885,
     654,   655,   655,   288,   653,   363,   364,   166,   654,   655,
    2896,    51,   418,   333,  1755,   352,   655,   337,   355,   383,
     291,   343,   363,   364,   344,   654,   655,   376,   369,   654,
     655,   190,    86,   525,    88,   376,   654,   655,  3313,  3314,
    3269,  3270,   199,  2929,   203,  3594,  3595,   376,   591,  3032,
     122,   479,  2841,  3417,   623,   595,   215,   129,   648,   493,
     504,   661,   661,    65,   291,   172,   501,  3525,   653,   129,
     277,   197,   132,  4082,    65,   416,   534,   553,   132,    81,
     623,   243,   440,   534,   511,  2971,  2972,   288,   163,   197,
      81,    93,    92,   655,   655,   377,   433,   549,   260,   370,
     154,   654,    93,  2896,   343,   425,   162,   266,   132,   268,
     272,   118,   655,   185,  3000,  4209,   660,  4209,  4086,  4087,
     192,  4089,  4090,  3012,  3010,  3011,   147,     6,   653,  3018,
     117,  3017,   192,     4,   484,   570,   295,   191,   496,   497,
     166,   167,   621,   370,   253,  3022,  3032,  3033,   489,   221,
     222,   557,  3038,  3042,   512,   655,   400,  3043,  3035,  3048,
      58,   221,   446,   483,   599,  3054,  3055,  3053,   178,   118,
      17,    18,   655,   579,   496,   497,   661,   203,   655,  3065,
     232,   232,  2971,    73,    13,   627,  3072,  3073,   654,   215,
     654,   353,  3078,   146,   196,    10,   655,   654,  3084,   201,
     661,   360,  3088,  4212,  3978,   196,  4115,  3093,   654,   654,
     201,   661,  4121,   115,  3666,   621,   653,   276,   661,   291,
      38,   376,   655,   164,   655,   288,  3019,  3020,   660,    51,
     256,   291,   253,   570,  3084,   288,   655,   239,   288,   288,
     288,   288,   268,  3129,   655,   166,   553,    20,   239,   653,
     230,   283,   655,   401,  3047,   596,   415,   496,   497,  3145,
     655,   263,   599,   574,  3053,   655,   574,   400,   197,   295,
     655,   173,   263,   166,   655,  4284,   123,   124,   125,   126,
     127,   655,   354,    73,   147,  3078,   644,   645,   646,   647,
     648,   649,   650,   651,   655,   253,   534,   369,   370,   254,
     202,   648,   129,   551,   122,   625,   187,   469,   197,   655,
     370,   129,   172,   534,   508,   586,   405,   142,   376,   655,
     404,   641,   343,   645,   646,   647,   648,   649,   650,   651,
     654,   357,   105,  3316,   655,   602,     7,   239,   634,   607,
     394,   655,   199,  3136,   654,   654,   648,   199,  3234,   654,
     654,   654,   595,   654,   654,  4364,  3242,   654,   647,   586,
     655,   653,  4456,   129,  4456,   192,   147,   185,   654,   494,
     563,   654,   563,   654,   192,   654,   654,   539,   655,   226,
     227,   228,   229,   654,   438,   287,   655,   651,   654,   162,
     253,   654,   654,   166,   221,   653,  3282,   653,   400,   653,
     655,   654,   563,   221,   222,  3857,   574,   646,   647,   648,
     649,   650,   651,  3871,   416,  3301,  3302,   628,   241,  3305,
     655,  3307,   195,   653,   197,   416,   192,   545,    12,   653,
    3316,  3414,    13,   211,   199,   655,  3322,   653,   661,   129,
     213,   653,   132,  3329,  3330,   655,   219,   655,   274,  3242,
     199,   654,   661,   176,   474,   221,   661,   661,   426,   655,
     600,  4259,   235,  3349,   291,   231,   493,   233,   655,   655,
     243,   197,    49,   291,    20,   496,   497,   250,  3364,   351,
     343,   129,   202,    57,   132,  3371,   333,   260,   335,   336,
     337,   563,  4401,    67,   525,   567,  3385,   344,   570,   272,
    4558,  3995,   192,   525,   277,   484,  3392,   129,    82,   581,
     132,   413,   514,   286,   586,  3401,   418,   589,  3404,    83,
      94,    95,    96,   514,   525,   291,   586,    91,  3414,   525,
     525,   221,  3418,   449,  3420,  3421,   354,   197,   385,   113,
     653,   388,  3335,   370,   192,  3528,   166,   365,  3434,  3435,
    4309,   369,   370,   166,   118,   166,   166,  4331,   166,   105,
    3446,   166,   343,  3449,   115,   166,   166,   166,   470,   166,
     192,  4044,   166,   221,   646,   647,  4350,   166,   425,   166,
     353,   166,  3371,   166,   166,   655,   166,  3473,   166,   491,
    3476,   129,   287,   166,   596,  3481,   166,   166,   160,   221,
     164,   291,   376,   376,   370,   596,   376,   129,   376,   608,
     654,   249,   654,   386,  4672,   129,   162,  3503,   661,   249,
     166,   654,  3415,   644,   645,   646,   647,   648,   649,   650,
     651,  3424,    20,   496,   497,   482,   483,   654,   661,    27,
     654,   654,  3528,   291,   655,   418,   654,   166,   654,  3632,
     201,   197,   554,     7,   192,   574,   654,   661,   560,   574,
    4569,  4570,   655,  4572,   661,   574,  4760,   213,  4760,   291,
     192,   655,   563,   219,   635,   239,   283,   579,   192,  4773,
     370,  4773,    89,   221,  4778,    73,  4778,  3476,   239,  4783,
     517,  4783,    49,   653,   653,    83,   469,   243,   166,   221,
    3493,   653,   604,   653,   250,   574,   105,   221,   166,   383,
     199,   199,   199,   250,   260,   496,   497,   199,   563,   621,
     493,   563,   370,   257,  3610,  4634,   272,  4636,  4637,  3615,
     431,   277,   655,   176,   370,   260,   287,   260,   389,   334,
     286,   653,   118,   118,   132,   563,  3632,    81,   370,   567,
     400,   400,   570,   291,   400,  4228,   320,   574,   332,   586,
     142,   261,   105,   581,  4523,   554,   539,   261,   586,   291,
     554,   589,   400,   142,   338,   349,   400,   291,   625,    49,
     574,   644,   645,   646,   647,   648,   649,   650,   651,   653,
    3676,   400,   639,   640,   641,   653,   402,   361,   400,   653,
     213,   563,   400,   382,   400,   661,   251,   353,   648,  3695,
     653,   251,   653,  3699,   431,   654,  4725,   205,  3801,   654,
     586,  3707,   595,   654,  4742,  3711,   654,  3713,   646,   647,
     376,   655,   370,  4381,   607,   608,  4288,   388,   654,   653,
     386,   661,   655,   231,   243,   233,   654,   654,   370,   654,
     383,   648,   653,   655,   235,   628,   370,   630,   376,   654,
     278,   260,   655,   644,   645,   646,   647,   648,   649,   650,
     651,   400,   418,   272,   654,   263,   661,   199,   654,  3672,
     601,   654,   655,   253,   431,   658,   659,    27,   166,    29,
    3873,   654,  3778,    14,   655,  3781,   586,   260,   260,  4658,
     243,  4660,  3788,  3789,  3790,  3791,   465,   481,   655,   653,
     400,   263,   263,   661,   376,  3801,   414,   260,    83,   470,
     376,    61,    62,   469,    64,    20,   654,   386,   655,   272,
     654,  4383,    49,    73,  4693,   653,   653,   487,   586,    83,
     491,   654,   630,    83,   654,   274,   467,   493,   181,   286,
     211,    91,   153,    97,   353,   270,   654,   654,   485,   655,
     213,   260,   260,   514,   586,   495,   655,   541,   376,   511,
     376,  4730,  4731,   654,   538,   363,   364,   376,   118,    57,
    3963,   369,   654,   104,   263,   559,   655,  3873,   376,    67,
     554,   653,   132,   539,   263,   135,   140,  3883,   655,   630,
    4458,   655,   654,   554,    82,    87,   653,  4781,   503,   238,
     353,   149,   654,   653,  3900,   136,    94,    95,    96,   653,
     653,   277,   654,    36,   164,   654,    36,  3913,   416,   150,
     370,   654,  3918,   376,    62,   113,   654,  3926,  3924,   251,
     654,   265,   654,   340,    18,   596,  3932,   426,   586,   595,
     654,   654,   173,   604,   630,   383,   177,   250,    49,   219,
     340,   654,   608,   655,   586,   653,   480,  4050,   189,   655,
     469,   661,   586,   608,   511,    20,   608,  3963,   132,   654,
     132,     6,   628,   655,   630,   653,   653,    12,   654,    14,
     211,   231,   655,   233,   654,  4643,  3889,   557,   653,   239,
     412,   489,    27,  3989,    29,   661,    36,   247,   654,   655,
     370,   655,   658,   659,   340,   180,   143,   563,   239,   563,
     540,   265,   262,   654,   563,   246,   469,   263,   557,   653,
     608,   612,   608,   653,    59,  3924,   317,   654,   653,    64,
     539,   123,   124,   125,   126,   127,   655,   653,   653,   618,
     654,   653,   618,  4039,   653,  4628,  4042,    15,    83,   601,
     132,   263,   263,    20,  4050,   286,    91,   369,   529,   630,
     653,  3964,   176,   474,   464,   654,   101,    63,   655,  4631,
     320,   654,   601,   383,   544,  4071,  4072,  4735,   653,   653,
     465,   250,   376,   118,   365,   161,   539,   341,   338,   653,
    4086,  4087,   613,  4089,  4090,   653,   627,   132,   596,  4417,
     135,    33,   662,   654,  4762,   370,   176,   565,   143,   363,
     364,   142,   366,   142,  4432,   150,   653,   164,   418,    75,
     197,   654,   197,   158,   627,   199,   653,    33,    65,   164,
     383,    65,   654,   397,   226,   227,   228,   229,   279,   654,
    4039,  4137,   655,   393,   332,   395,   653,   545,  4710,   439,
     654,   250,  4148,   403,   654,   160,   653,  4153,   659,   689,
     195,   349,   383,   383,   694,    49,    49,   159,    49,    49,
      49,   653,   653,  4072,   140,   429,   149,     5,   376,   376,
     160,  4499,   627,   234,   293,   659,  4182,  4183,   419,  4185,
     131,   286,    12,   662,   653,    49,   231,    49,   233,    49,
     155,   731,   601,   136,   239,   659,    55,   474,   439,   655,
     476,   654,   247,  4209,   654,   263,   447,   160,   748,   566,
     655,   216,  4784,   659,   455,   475,   655,   262,   232,   655,
     654,   654,  4219,  4220,  4137,   453,  4223,  4224,  4225,  4226,
      55,   333,    49,   335,   336,   337,  4242,   197,  4244,   197,
     236,   286,   344,   197,   485,   629,   132,   566,   235,   370,
     653,   493,   792,   793,   794,   795,  4158,   498,   499,   198,
    2361,   525,  4365,   655,   804,   463,  3786,  2671,  4274,  3507,
    2563,   531,   532,   533,  3898,   320,  4604,  1036,   538,  4253,
    4384,  4585,  3896,   481,  4586,  3900,  4614,  4070,  4762,  4723,
      48,  1056,   598,   338,   554,  4301,  1929,   342,   558,  2826,
     296,  1861,   298,   299,   300,   301,   302,   548,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   577,   314,   315,
     316,   989,  3992,   425,  4732,  3992,  3992,  3992,  4325,  3992,
    3992,  3992,  3992,  3992,  3992,   595,  4601,  4410,   579,  4601,
    4536,   386,  4436,   541,  3992,  4435,  3992,  3992,   393,  4355,
     395,  1581,   892,  1100,  1830,  4079,  4257,  4685,   403,  4365,
     601,   559,   603,  4360,  4361,  4371,  3444,  4695,  2115,  4697,
    2633,  2855,  4369,  3609,  4477,  3282,  1371,  2860,  4355,  4460,
     482,   483,  3612,  4711,  4040,  4672,  4566,  4715,  4628,  3905,
    4228,   630,  1618,  3072,  2626,   655,  3357,  2634,  3676,  3075,
    3925,  4649,  4288,  3918,   449,  3171,  3736,  4113,  3770,  3974,
    4458,  4324,  3963,  3225,  2779,  4390,  3220,  2534,  4746,  4747,
    3228,    11,    11,  4751,  4507,  4340,  4508,  2191,  4327,  4336,
     475,  2697,  4185,  4121,  3392,  3068,  4442,  1069,  2633,  1515,
    1017,  4447,  3930,  2504,  2430,  4358,  4359,   443,   444,  1614,
    4456,  2122,  4442,  3694,  1919,  1593,  2841,  3277,  2317,  2404,
    2451,  4564,  3994,   619,  1943,   938,  3242,  2222,  4286,  2812,
    2226,  4477,  3340,  2519,  2513,  2316,  1167,  4065,  4247,  4580,
    3503,  4581,  3707,  2929,  1140,  1532,   531,   532,   533,  2342,
    3884,  3064,  4710,   538,  3873,  2195,  2456,  1354,  1040,  2398,
    1384,  2434,  3615,  3296,  1040,  3295,  3349,  4456,   609,   554,
    1040,  1040,  1635,   558,   685,   597,  2022,  2498,   597,  3713,
    2023,  1391,  1463,   625,  1850,  3280,  4670,  4484,  4705,  4576,
    4783,  4778,   577,  3965,  4447,  3329,  3301,   596,   640,   641,
    2481,  1421,  1082,  1783,   596,  3330,  2474,  2467,  1900,  2473,
     595,  1969,   830,  1411,   590,  4468,  4469,   918,  4564,  1346,
    4029,  2446,  1626,  4035,   591,   925,  2828,   627,    -1,    36,
    1036,   627,   627,    -1,  4580,  4581,    -1,  1036,  1036,  1119,
    1120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1128,  1129,
    1130,  1131,  1132,  1133,  1134,  1135,  1136,  1137,  1138,  1139,
    4606,    -1,    69,    -1,    -1,    -1,    -1,  4613,  1148,  1149,
      -1,  1151,  1152,    -1,    -1,    -1,  1156,    -1,    -1,  1159,
    1160,  1161,  1162,    -1,  1164,  1165,  1166,    -1,    -1,    -1,
      -1,    -1,    -1,  1173,  1174,    -1,  1176,  1177,  1178,  1179,
    1180,    -1,    -1,  1183,  1184,  1185,  1186,  1187,  1188,  1189,
    1190,  1191,  1192,  1193,    -1,  1195,    -1,    -1,  1198,  1199,
      -1,    36,    -1,  1203,    -1,    -1,  4769,  1207,  1208,  1209,
      -1,    -1,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1222,  1223,  1224,    -1,    -1,    -1,  4694,    -1,
      -1,  1231,    -1,  4699,    69,    -1,    -1,   164,  1238,  1239,
    1240,   168,  1242,    -1,    -1,    -1,    27,    -1,    29,  1249,
    1250,  1251,    -1,  1253,  1254,  1255,  1256,  1257,    -1,  1259,
    1260,  1261,  1262,  1263,  1264,  1265,  1266,    -1,    -1,  4735,
    1270,  1271,    -1,  4646,    -1,    -1,    -1,   204,    -1,    -1,
      61,    62,    -1,    64,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,  4760,    -1,  4762,    -1,   225,    -1,
      -1,    -1,    83,  4769,   139,    -1,    -1,  4773,    -1,    -1,
      91,    -1,  4778,   240,    -1,    -1,    -1,  4783,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   164,
      -1,    -1,    -1,   168,    -1,    -1,    -1,   118,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   132,    -1,    -1,   135,    -1,    -1,    -1,  1358,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   204,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   164,    -1,    -1,   313,    -1,    -1,    -1,
     225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   694,    -1,   240,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1421,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1431,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     731,    -1,    -1,    -1,    -1,    -1,    -1,  1447,    -1,    -1,
     231,  1451,   233,   288,    -1,    -1,    -1,   748,   239,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   313,    -1,
      -1,   262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     417,    -1,    -1,    -1,    -1,   276,    -1,    -1,    -1,   426,
      -1,    -1,    -1,    -1,   795,    -1,  1506,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   441,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   459,    -1,    -1,    -1,    -1,    -1,    -1,   320,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   338,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,   506,
      -1,    -1,   417,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   426,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   892,    -1,    -1,    -1,    -1,   441,   534,    -1,    -1,
      -1,    -1,   393,    -1,   395,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   403,    -1,   459,    -1,   553,    -1,    -1,   556,
     557,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1648,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,
      -1,   506,    -1,    -1,    -1,    -1,    -1,    -1,   605,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   475,    -1,    -1,    -1,    -1,   534,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   556,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,    -1,   538,    -1,    -1,
      -1,  1761,  1762,  1763,    -1,    -1,    -1,    -1,    -1,    -1,
     605,    -1,    -1,   554,    -1,    -1,  1776,   558,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1082,    -1,    -1,    -1,    -1,   577,    -1,    -1,    -1,
      -1,    -1,  1802,    -1,    -1,    -1,    -1,    -1,  1808,    -1,
      -1,  1811,    -1,  1813,   595,    -1,    -1,    -1,    -1,  1819,
      -1,  1821,  1822,    -1,    -1,    -1,    -1,    -1,  1119,  1120,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1128,  1129,    -1,
      -1,  1132,  1133,  1134,  1135,  1136,  1137,  1138,  1139,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1148,  1149,    -1,
    1151,  1152,    -1,    -1,    -1,    -1,    -1,    -1,  1159,  1160,
    1161,  1162,   653,    -1,  1165,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1173,  1174,    -1,  1176,  1177,    -1,    -1,    -1,
      -1,    -1,  1183,  1184,  1185,    -1,    -1,  1188,  1189,  1190,
    1191,  1192,  1193,    -1,  1195,    -1,    -1,  1198,  1199,    -1,
      -1,    -1,  1203,    -1,  1914,    -1,  1207,  1208,  1209,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1222,  1223,  1224,    -1,    -1,    -1,    -1,    -1,    -1,
    1231,    -1,    -1,    -1,    -1,    -1,    -1,  1238,  1239,  1240,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1967,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1976,    -1,    -1,    -1,
    1271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,
      -1,    -1,    12,    -1,    14,    -1,    16,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    27,    -1,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1358,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,
      -1,    -1,    -1,    -1,    64,    65,    -1,    -1,    -1,    -1,
      -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    83,    -1,  2115,    -1,    -1,    -1,    -1,
      -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1421,   101,    -1,    -1,    -1,    -1,    -1,  2137,    -1,    -1,
    1431,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1447,    -1,    -1,    -1,
    1451,    -1,   132,    -1,    -1,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   143,   144,    -1,    -1,    -1,    -1,    -1,
     150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   158,    -1,
      -1,    -1,   162,    -1,   164,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2204,   175,    -1,    -1,  2208,    -1,
      -1,    -1,    -1,  2213,  2214,  1506,    -1,    -1,    -1,    -1,
      -1,    -1,  2222,    -1,  2224,   195,  2226,  2227,  2228,  2229,
      -1,    -1,  2232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2242,    -1,  2244,  2245,    -1,  2247,  2248,  2249,
    2250,    -1,  2252,    -1,    -1,  2255,    -1,    -1,    -1,    -1,
      -1,   231,    -1,   233,  2264,    -1,    -1,   237,    -1,   239,
      -1,  2271,    -1,  2273,    -1,  2275,  2276,   247,  2278,  2279,
      -1,    -1,    -1,  2283,  2284,  2285,    -1,    -1,    -1,  2289,
    2290,  2291,   262,  2293,    -1,  2295,    -1,  2297,    -1,  2299,
      -1,  2301,    -1,    -1,    -1,    -1,  2306,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2325,    -1,    -1,    -1,    -1,
      -1,    -1,  2332,    -1,    -1,  2335,    27,    -1,    29,    -1,
      -1,  2341,    -1,    -1,  2344,    -1,    -1,    -1,  2348,    -1,
     320,    -1,    -1,    -1,    -1,    -1,    -1,  1648,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   338,    -1,
      61,    62,   342,    64,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   381,  2412,    -1,    -1,    -1,   386,    -1,    -1,    -1,
      -1,    -1,    -1,   393,    -1,   395,    -1,   118,    -1,    -1,
     400,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   132,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   434,    -1,    -1,    -1,    -1,    -1,
    1761,  1762,  1763,   164,    -1,    -1,    -1,    -1,   448,   449,
     450,   451,  2482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   475,    -1,    -1,    -1,    -1,
      -1,  1802,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1811,    -1,  1813,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2533,    -1,    -1,    -1,    -1,    -1,    -1,
     231,    -1,   233,    -1,    -1,    -1,  2546,    -1,   239,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,    -1,    -1,
      -1,   531,   532,   533,  2564,  2565,    -1,    -1,   538,    -1,
      -1,   262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   554,    -1,    -1,    -1,   558,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   577,    -1,    -1,
      -1,    -1,   582,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1914,    -1,   595,  2626,    -1,    -1,   320,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   338,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2674,  2675,  1967,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   659,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,    -1,   395,    -1,    -1,    -1,    -1,    -1,
    2710,    -1,   403,    -1,  2714,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2741,  2742,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2761,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2770,    -1,  2772,    -1,  2774,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   475,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2801,    -1,    -1,    -1,    -1,  2806,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2837,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,  2137,   538,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   554,    -1,    -1,    -1,   558,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   577,    -1,    -1,    14,
      -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   595,    -1,    -1,    -1,    33,    -1,
      -1,  2911,    37,  2204,    -1,    -1,    -1,  2208,    -1,    -1,
      -1,    -1,  2213,  2214,    -1,    -1,    51,    52,    -1,    -1,
      -1,  2222,    -1,  2224,    59,  2226,    -1,  2228,  2229,    64,
      65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2242,    -1,  2244,    -1,    -1,  2247,  2248,  2249,  2250,
      85,  2252,  2962,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2264,    -1,    -1,    -1,  2977,    -1,   104,
    2271,    -1,  2273,    -1,  2275,  2276,    -1,  2278,    -1,    -1,
      -1,    -1,  2283,  2284,  2285,    -1,    -1,    -1,  2289,  2290,
    2291,    -1,  2293,   128,  2295,    -1,  2297,    -1,  2299,    -1,
    2301,   136,   137,   138,    -1,  2306,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   149,   150,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2325,    -1,    -1,   162,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2341,    -1,   177,  2344,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3068,   194,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3081,  3082,    -1,   209,    -1,   211,    -1,    -1,    -1,
      -1,   216,    -1,    -1,    -1,   220,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   246,    -1,   248,    -1,    -1,    -1,    -1,    -1,    -1,
    3130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3153,    -1,    -1,    -1,   282,    -1,    -1,
      -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    27,
      -1,    29,    -1,    -1,    -1,  3185,  3186,    -1,  3188,    -1,
      -1,  2482,    -1,    -1,    -1,    -1,    -1,  3197,    -1,    -1,
      -1,    -1,  3202,    -1,    -1,  3205,    -1,  3207,  3208,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    64,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,
    3240,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,  3271,    -1,   398,    -1,   400,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   132,    -1,    -1,   135,   413,    -1,
      -1,    -1,    -1,    -1,    -1,  3295,    -1,    -1,    -1,   424,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   164,    -1,    -1,    -1,
      -1,   446,    -1,    -1,   449,    -1,   451,    -1,    -1,   454,
      -1,    -1,   457,   458,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   468,    -1,    -1,   471,    -1,    -1,    -1,
      -1,  3351,    -1,    -1,   479,    -1,    -1,    -1,    -1,    -1,
     485,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   493,    -1,
      -1,    -1,    -1,   498,   499,   500,    -1,    -1,    -1,    -1,
    3380,    -1,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,
      -1,   239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   247,
      -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,    -1,    -1,
      -1,    -1,   537,    -1,   262,    -1,    -1,    -1,    -1,  2710,
      -1,    -1,    -1,  2714,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2741,  2742,    -1,    -1,    -1,    -1,    -1,   582,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   594,
    2761,    -1,   320,   598,    -1,    -1,   601,    -1,    -1,  2770,
      -1,  2772,   607,  2774,    -1,    -1,    -1,    -1,    -1,    -1,
     338,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    14,
      -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   637,    -1,    -1,    -1,    -1,    -1,   643,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,   653,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    59,   393,  2837,   395,    -1,    64,
      65,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   128,    -1,    -1,  3616,    -1,    -1,    -1,
    2911,   136,   137,   138,    -1,    -1,    -1,   475,    -1,    -1,
      -1,    -1,    -1,    -1,   149,   150,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3652,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3660,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2962,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,
      -1,  3681,    -1,   531,   532,   533,    -1,    -1,    -1,    -1,
     538,    -1,    -1,    -1,   209,    -1,   211,    -1,    -1,    -1,
      -1,   216,    -1,    -1,    -1,   220,   554,    -1,    -1,    -1,
     558,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   577,
      -1,   246,    -1,   248,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,   264,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3763,    -1,    -1,    -1,   282,    -1,    -1,
      -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3081,  3082,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    -1,    -1,  3815,    -1,    -1,    -1,  3819,
      -1,    -1,    36,    37,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    -1,
      -1,    -1,    -1,    -1,  3854,    69,    -1,    -1,    -1,    -1,
      74,    -1,  3153,    -1,    -1,    -1,   381,    -1,  3868,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   398,    -1,   400,   100,    -1,   102,    -1,
     104,    -1,    -1,    -1,  3185,  3186,    -1,    -1,   413,    -1,
      -1,    -1,   116,    -1,    -1,  3905,  3197,    -1,    -1,   424,
      -1,  3202,    -1,    -1,  3205,    -1,  3207,  3208,    -1,    -1,
      -1,    -1,    -1,   137,   138,    -1,    -1,    -1,    -1,    -1,
      -1,   446,    -1,    -1,   449,    -1,   451,    -1,    -1,   454,
      -1,    -1,   457,   458,    -1,    -1,    -1,    -1,    -1,   163,
     164,    -1,    -1,   468,    -1,   169,   471,    -1,   172,    -1,
      -1,    -1,    -1,    -1,   479,    -1,    -1,    -1,    -1,    -1,
     485,    -1,    -1,    -1,  3974,    -1,    -1,    -1,   493,    -1,
    3271,    -1,    -1,   498,   499,   500,   200,    -1,   202,    -1,
      -1,    -1,  3992,    -1,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,    -1,    -1,  3295,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,    -1,    -1,
      -1,    -1,   537,    -1,   238,   239,   240,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4040,    -1,    -1,    -1,    -1,    -1,    -1,   261,  4048,    -1,
      -1,    -1,    -1,    -1,  4054,    -1,  4056,    -1,    -1,    -1,
    3351,    -1,    -1,    -1,    -1,    -1,    -1,   582,    -1,   283,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   594,
      -1,    -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,
      -1,    -1,   607,    -1,    -1,    -1,    -1,    -1,    -1,   313,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   637,    -1,    -1,    -1,    -1,    -1,   643,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   653,    -1,
      -1,    -1,    -1,    -1,    -1,  4145,    -1,    -1,    -1,    -1,
      -1,  4151,  4152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4184,    -1,    -1,    -1,  4188,  4189,
      -1,    -1,   406,    -1,    -1,  4195,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   417,   418,    -1,    -1,   421,   422,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   442,    -1,
      -1,    -1,    -1,  4233,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   490,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   503,
      -1,    -1,    -1,    -1,  4294,    -1,  4296,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4306,    -1,  4308,  4309,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     534,    -1,    -1,    -1,   538,  3616,    -1,  4327,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4336,    -1,    -1,    -1,
    4340,    -1,   556,   557,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3652,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3660,
      -1,    35,    36,    -1,    -1,    -1,    -1,    41,    -1,    43,
      -1,    45,    46,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3681,   605,  4392,    -1,    -1,    -1,    -1,    -1,    62,    -1,
      -1,    -1,   616,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     624,    -1,    -1,    -1,    -1,  4415,    -1,  4417,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4432,  4433,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4450,    -1,    -1,    -1,    -1,   119,    -1,  4457,   122,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   148,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4499,
      -1,   165,    -1,    -1,    -1,  4505,    -1,  4507,  4508,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4522,  4523,  3815,    -1,    -1,   191,  3819,   193,
      -1,    -1,    -1,    -1,    -1,  4535,  4536,    -1,    -1,    -1,
      -1,    -1,   206,   207,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4558,    -1,
      -1,    -1,    -1,  3854,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3868,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   251,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4604,    -1,    -1,    -1,    -1,    -1,
      -1,  4611,    -1,    -1,  4614,    -1,   280,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   289,   290,    -1,   292,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4651,    -1,    -1,    -1,    -1,    -1,    -1,  4658,    -1,
    4660,    -1,   326,   327,   328,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4672,    -1,    -1,  4675,    -1,    -1,    -1,    -1,
      -1,   345,   346,   347,    -1,  4685,    -1,    -1,   352,    -1,
      -1,   355,    -1,  4693,    -1,  4695,    -1,  4697,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   372,   373,
      -1,  4711,    -1,    -1,    -1,  4715,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4730,  4731,    -1,    -1,    -1,    -1,  4736,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   408,   409,  4746,  4747,    -1,    -1,
      -1,  4751,    -1,    -1,    -1,    -1,    -1,  4048,    -1,    -1,
      -1,    -1,    -1,  4054,    -1,  4056,    -1,    -1,    -1,   433,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4786,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   489,    -1,    -1,    -1,   493,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   507,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4145,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     564,    -1,    -1,   567,  4195,    -1,   570,   571,   572,   573,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     614,   615,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   641,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4294,    -1,  4296,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4306,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4415,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4433,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4457,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4522,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4611,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4651,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,  4675,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      36,    37,    38,    39,    40,    41,    42,    -1,    44,    45,
      46,    47,    48,    -1,    50,    51,    -1,    -1,    54,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,  4736,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,    -1,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,  4786,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,    -1,   212,    -1,   214,    -1,
     216,   217,   218,    -1,   220,   221,   222,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,   234,    -1,
     236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,   269,   270,    -1,   272,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,   291,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,   339,   340,    -1,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,    -1,   354,   355,
     356,    -1,    -1,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
     396,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,   535,
     536,   537,   538,    -1,   540,   541,   542,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,   553,   554,    -1,
     556,    -1,   558,   559,   560,   561,    -1,   563,   564,   565,
      -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,   575,
     576,   577,   578,    -1,   580,   581,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,    -1,   593,   594,    -1,
      -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,
     606,    -1,    -1,   609,   610,   611,   612,   613,    -1,    -1,
     616,   617,    -1,   619,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,    -1,    -1,    -1,
     646,   647,    -1,    -1,    -1,    -1,   652,   653,    -1,    -1,
     656,   657,    -1,    -1,   660,   661,     5,    -1,     7,     8,
       9,    10,    11,    12,    13,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    36,    37,    38,
      39,    40,    41,    42,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    55,    56,    57,    58,
      -1,    60,    61,    62,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
      -1,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,    -1,   212,    -1,   214,    -1,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
      -1,   240,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
     529,   530,    -1,    -1,    -1,   534,   535,   536,   537,   538,
      -1,   540,   541,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,    -1,   556,    -1,   558,
     559,   560,   561,    -1,   563,   564,   565,    -1,   567,   568,
     569,   570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,
      -1,   580,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,
      -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,   646,   647,    -1,
      -1,    -1,    -1,   652,   653,    -1,    -1,   656,   657,    -1,
      -1,   660,   661,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    39,    40,    41,
      42,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
      -1,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,   199,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,    -1,
     212,    -1,   214,    -1,   216,   217,   218,    -1,   220,   221,
     222,    -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,
     232,   233,   234,    -1,   236,   237,   238,    -1,   240,    -1,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,
     272,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,
      -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,   291,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,    -1,    -1,   337,   338,   339,   340,    -1,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,   354,   355,   356,    -1,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
      -1,   373,   374,   375,    -1,   377,   378,   379,   380,    -1,
     382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     392,   393,   394,    -1,   396,   397,    -1,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,    -1,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,    -1,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,    -1,
     462,   463,    -1,   465,    -1,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
      -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,   491,
      -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,   501,
     502,   503,   504,   505,   506,    -1,   508,   509,   510,   511,
     512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,
      -1,   523,    -1,    -1,   526,    -1,    -1,   529,   530,    -1,
      -1,    -1,   534,   535,   536,   537,   538,    -1,   540,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,   554,    -1,   556,    -1,   558,   559,   560,   561,
      -1,   563,   564,   565,    -1,   567,   568,   569,   570,    -1,
      -1,    -1,    -1,    -1,   576,   577,   578,    -1,   580,   581,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
      -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,
     602,    -1,   604,   605,   606,    -1,    -1,   609,   610,   611,
     612,   613,    -1,    -1,   616,   617,    -1,   619,   620,   621,
     622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,
      -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,   641,
      -1,    -1,    -1,    -1,   646,   647,    -1,    -1,    -1,    -1,
     652,   653,    -1,    -1,   656,   657,    -1,    -1,   660,   661,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    36,    37,    38,    39,    40,    41,    42,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      55,    56,    57,    58,    -1,    60,    61,    62,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,   101,   102,   103,    -1,
      -1,   106,   107,   108,   109,   110,   111,    -1,   113,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,    -1,
      -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,   198,   199,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,   214,
      -1,   216,   217,   218,    -1,   220,   221,   222,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,   272,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,   291,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,   339,   340,    -1,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,    -1,    -1,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,   396,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
     535,   536,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,   563,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,   609,   610,   611,   612,   613,    -1,
      -1,   616,   617,    -1,   619,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,    -1,   641,    -1,    -1,    -1,
      -1,   646,   647,    -1,    -1,    -1,    -1,   652,   653,    -1,
      -1,   656,   657,    -1,    -1,   660,   661,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    36,    37,
      38,    39,    40,    41,    42,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
      58,    -1,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,    -1,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,   199,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,    -1,   212,    -1,   214,    -1,   216,   217,
     218,    -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,
      -1,   229,   230,   231,   232,   233,   234,    -1,   236,   237,
     238,    -1,   240,    -1,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,
      -1,    -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,
      -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,
     288,    -1,    -1,   291,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,    -1,    -1,   337,
     338,   339,   340,    -1,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,    -1,   354,   355,   356,    -1,
      -1,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,   369,   370,   371,    -1,   373,   374,   375,    -1,   377,
     378,   379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,
      -1,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,   417,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
      -1,    -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,    -1,   447,
     448,    -1,   450,   451,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,    -1,   462,   463,    -1,   465,    -1,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,
     488,   489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,
      -1,   499,    -1,   501,   502,   503,   504,   505,   506,    -1,
     508,   509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,
      -1,    -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,
      -1,   529,   530,    -1,    -1,    -1,   534,   535,   536,   537,
     538,    -1,   540,   541,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,   554,    -1,   556,    -1,
     558,   559,   560,   561,    -1,   563,   564,   565,    -1,   567,
     568,   569,   570,    -1,    -1,    -1,    -1,    -1,   576,   577,
     578,    -1,   580,   581,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,   609,   610,   611,   612,   613,    -1,    -1,   616,   617,
      -1,   619,   620,   621,   622,   623,   624,   625,   626,    -1,
      -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,
     638,    -1,    -1,   641,    -1,    -1,    -1,    -1,   646,   647,
      -1,    -1,    -1,    -1,   652,   653,    -1,    -1,   656,   657,
      -1,    -1,   660,   661,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    36,    37,    38,    39,    40,
      41,    42,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    55,    56,    57,    58,    -1,    60,
      61,    62,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
     101,   102,   103,    -1,    -1,   106,   107,   108,   109,   110,
     111,    -1,   113,   114,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
      -1,   212,    -1,   214,    -1,   216,   217,   218,    -1,   220,
     221,   222,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,   234,    -1,   236,   237,   238,    -1,   240,
      -1,   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,   272,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
     291,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,   339,   340,
      -1,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,    -1,    -1,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,   396,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,   530,
      -1,    -1,    -1,   534,   535,   536,   537,   538,    -1,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,   550,
     551,   552,   553,   554,    -1,   556,    -1,   558,   559,   560,
     561,    -1,   563,   564,   565,    -1,   567,   568,   569,   570,
      -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,   580,
     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
     591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,
      -1,   602,    -1,   604,   605,   606,    -1,    -1,   609,   610,
     611,   612,   613,    -1,    -1,   616,   617,    -1,   619,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,
     641,    -1,    -1,    -1,    -1,   646,   647,    -1,    -1,    -1,
      -1,   652,   653,    -1,    -1,   656,   657,    -1,    -1,   660,
     661,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    36,    37,    38,    39,    40,    41,    42,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    55,    56,    57,    58,    -1,    60,    61,    62,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,    -1,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,    -1,   212,    -1,
     214,    -1,   216,   217,   218,    -1,   220,   221,   222,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
     234,    -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,
      -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,   272,   273,
     274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,   291,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,    -1,    -1,   337,   338,   339,   340,    -1,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,    -1,
     354,   355,   356,    -1,    -1,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,    -1,   373,
     374,   375,    -1,   377,   378,   379,   380,    -1,   382,   383,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,
     394,    -1,   396,   397,    -1,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,   417,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,    -1,   447,   448,    -1,   450,   451,   452,   453,
     454,   455,    -1,   457,    -1,   459,   460,    -1,   462,   463,
      -1,   465,    -1,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,    -1,   483,
     484,    -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,
      -1,   495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,
     504,   505,   506,    -1,   508,   509,   510,   511,   512,   513,
      -1,    -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,
      -1,    -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,
     534,   535,   536,   537,   538,    -1,   540,   541,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
     554,    -1,   556,    -1,   558,   559,   560,   561,    -1,   563,
     564,   565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,
      -1,    -1,   576,   577,   578,    -1,   580,   581,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,    -1,   593,
     594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,
     604,   605,   606,    -1,    -1,   609,   610,   611,   612,   613,
      -1,    -1,   616,   617,    -1,   619,   620,   621,   622,   623,
     624,   625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,
     634,    -1,   636,   637,   638,    -1,    -1,   641,    -1,    -1,
      -1,    -1,   646,   647,    -1,    -1,    -1,    -1,   652,   653,
      -1,    -1,   656,   657,    -1,    -1,   660,   661,     5,    -1,
       7,     8,     9,    10,    11,    12,    13,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    36,
      37,    38,    39,    40,    41,    42,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    55,    56,
      57,    58,    -1,    60,    61,    62,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,   101,   102,   103,    -1,    -1,   106,
     107,   108,   109,   110,   111,    -1,   113,   114,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,
     127,   128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,    -1,   212,    -1,   214,    -1,   216,
     217,   218,    -1,   220,   221,   222,    -1,   224,   225,    -1,
      -1,    -1,   229,   230,   231,   232,   233,   234,    -1,   236,
     237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,   246,
     247,   248,   249,    -1,    -1,   252,    -1,   254,   255,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,
     267,    -1,    -1,   270,    -1,   272,   273,   274,    -1,    -1,
      -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,
     287,   288,    -1,    -1,   291,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,   332,   333,   334,    -1,    -1,
     337,   338,   339,   340,    -1,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,   356,
      -1,    -1,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,    -1,   369,   370,   371,    -1,   373,   374,   375,    -1,
     377,   378,   379,   380,    -1,   382,   383,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,   396,
     397,    -1,   399,    -1,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,   413,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,    -1,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,    -1,   462,   463,    -1,   465,    -1,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,    -1,   483,   484,    -1,    -1,
      -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,    -1,
      -1,    -1,   499,    -1,   501,   502,   503,   504,   505,   506,
      -1,   508,   509,   510,   511,   512,   513,    -1,    -1,    -1,
      -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,   526,
      -1,    -1,   529,   530,    -1,    -1,    -1,   534,   535,   536,
     537,   538,    -1,   540,   541,   542,   543,   544,   545,   546,
     547,   548,   549,   550,   551,   552,   553,   554,    -1,   556,
      -1,   558,   559,   560,   561,    -1,   563,   564,   565,    -1,
     567,   568,   569,   570,    -1,    -1,    -1,    -1,    -1,   576,
     577,   578,    -1,   580,   581,   582,   583,   584,   585,   586,
     587,   588,   589,   590,   591,    -1,   593,   594,    -1,    -1,
     597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,
      -1,    -1,   609,   610,   611,   612,   613,    -1,    -1,   616,
     617,    -1,   619,   620,   621,   622,   623,   624,   625,   626,
      -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,
     637,   638,    -1,    -1,   641,    -1,    -1,    -1,    -1,   646,
     647,    -1,    -1,    -1,    -1,   652,   653,    -1,    -1,   656,
     657,    -1,    -1,   660,   661,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    36,    37,    38,    39,
      40,    41,    42,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    55,    56,    57,    58,    -1,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,    -1,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,   214,    -1,   216,   217,   218,    -1,
     220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,   246,   247,   248,   249,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,   291,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,   339,
     340,    -1,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,   354,   355,   356,    -1,    -1,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,   535,   536,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,   563,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
     580,   581,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,   609,
     610,   611,   612,   613,    -1,    -1,   616,   617,    -1,   619,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
      -1,   641,    -1,    -1,    -1,    -1,   646,   647,    -1,    -1,
      -1,    -1,   652,   653,    -1,    -1,   656,   657,    -1,    -1,
     660,   661,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    36,    37,    38,    39,    40,    41,    42,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    55,    56,    57,    58,    -1,    60,    61,    62,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,   101,   102,
     103,    -1,    -1,   106,   107,   108,   109,   110,   111,    -1,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,   178,    -1,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,    -1,   212,
      -1,   214,    -1,   216,   217,   218,    -1,   220,   221,   222,
      -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,   232,
     233,   234,    -1,   236,   237,   238,    -1,   240,    -1,   242,
      -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,   252,
      -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,
      -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,   272,
     273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,
     283,    -1,   285,    -1,   287,   288,    -1,    -1,   291,    -1,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,
     333,   334,    -1,    -1,   337,   338,   339,   340,    -1,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,   356,    -1,    -1,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,    -1,
     373,   374,   375,    -1,   377,   378,   379,   380,    -1,   382,
     383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,
     393,   394,    -1,   396,   397,    -1,   399,    -1,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
     413,   414,   415,    -1,   417,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,    -1,    -1,   430,    -1,    -1,
      -1,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,    -1,   447,   448,    -1,   450,   451,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,    -1,   462,
     463,    -1,   465,    -1,   467,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,    -1,
     483,   484,    -1,    -1,    -1,   488,   489,   490,   491,    -1,
      -1,    -1,   495,    -1,    -1,    -1,   499,    -1,   501,   502,
     503,   504,   505,   506,    -1,   508,   509,   510,   511,   512,
     513,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,    -1,
     523,    -1,    -1,   526,    -1,    -1,   529,   530,    -1,    -1,
      -1,   534,   535,   536,   537,   538,    -1,   540,   541,   542,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,   554,    -1,   556,    -1,   558,   559,   560,   561,    -1,
     563,   564,   565,    -1,   567,   568,   569,   570,    -1,    -1,
      -1,    -1,    -1,   576,   577,   578,    -1,   580,   581,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,    -1,
     593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,
      -1,   604,   605,   606,    -1,    -1,   609,   610,   611,   612,
     613,    -1,    -1,   616,   617,    -1,   619,   620,   621,   622,
     623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,    -1,
     633,   634,    -1,   636,   637,   638,    -1,    -1,   641,    -1,
      -1,    -1,    -1,   646,   647,    -1,    -1,    -1,    -1,   652,
     653,    -1,    -1,   656,   657,    -1,    -1,   660,   661,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      36,    37,    38,    39,    40,    41,    42,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,    -1,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,    -1,   212,    -1,   214,    -1,
     216,   217,   218,    -1,   220,   221,   222,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,   234,    -1,
     236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,
     246,   247,   248,   249,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,   272,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,   291,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,   339,   340,    -1,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,    -1,   354,   355,
     356,    -1,    -1,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
     396,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,   535,
     536,   537,   538,    -1,   540,   541,   542,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,   553,   554,    -1,
     556,    -1,   558,   559,   560,   561,    -1,   563,   564,   565,
      -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,    -1,
     576,   577,   578,    -1,   580,   581,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,    -1,   593,   594,    -1,
      -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,
     606,    -1,    -1,   609,   610,   611,   612,   613,    -1,    -1,
     616,   617,    -1,   619,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,    -1,    -1,    -1,
     646,   647,    -1,    -1,    -1,    -1,   652,   653,    -1,    -1,
     656,   657,    -1,    -1,   660,   661,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    36,    37,    38,
      39,    40,    41,    42,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    55,    56,    57,    58,
      -1,    60,    61,    62,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
      -1,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,    -1,   212,    -1,   214,    -1,   216,   217,   218,
      -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
      -1,   240,    -1,   242,    -1,    -1,    -1,   246,   247,   248,
     249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,   291,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
     339,   340,    -1,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,    -1,    -1,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
     529,   530,    -1,    -1,    -1,   534,   535,   536,   537,   538,
      -1,   540,   541,   542,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,    -1,   556,    -1,   558,
     559,   560,   561,    -1,   563,   564,   565,    -1,   567,   568,
     569,   570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,
      -1,   580,   581,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,
      -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,
     609,   610,   611,   612,   613,    -1,    -1,   616,   617,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,    -1,    -1,    -1,   646,   647,    -1,
      -1,    -1,    -1,   652,   653,    -1,    -1,   656,   657,    -1,
      -1,   660,   661,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    39,    40,    41,
      42,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
      -1,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,    -1,
     212,    -1,   214,    -1,   216,   217,   218,    -1,   220,   221,
     222,    -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,
     232,   233,   234,    -1,   236,   237,   238,    -1,   240,    -1,
     242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
     252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,
     272,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,
      -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,   291,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,    -1,    -1,   337,   338,   339,   340,    -1,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,   354,   355,   356,    -1,    -1,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,    -1,   369,   370,   371,
      -1,   373,   374,   375,    -1,   377,   378,   379,   380,    -1,
     382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     392,   393,   394,    -1,   396,   397,    -1,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,    -1,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,    -1,   447,   448,    -1,   450,   451,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,    -1,
     462,   463,    -1,   465,    -1,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
      -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,   491,
      -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,   501,
     502,   503,   504,   505,   506,    -1,   508,   509,   510,   511,
     512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,
      -1,   523,    -1,    -1,   526,    -1,    -1,   529,   530,    -1,
      -1,    -1,   534,   535,   536,   537,   538,    -1,   540,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,   554,    -1,   556,    -1,   558,   559,   560,   561,
      -1,   563,   564,   565,    -1,   567,   568,   569,   570,    -1,
      -1,    -1,    -1,    -1,   576,   577,   578,    -1,   580,   581,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
      -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,
     602,    -1,   604,   605,   606,    -1,    -1,   609,   610,   611,
     612,   613,    -1,    -1,   616,   617,    -1,   619,   620,   621,
     622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,
      -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,   641,
      -1,    -1,    -1,    -1,   646,   647,    -1,    -1,    -1,    -1,
     652,   653,    -1,    -1,   656,   657,    -1,    -1,   660,   661,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    36,    37,    38,    39,    40,    41,    42,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      55,    56,    57,    58,    -1,    60,    61,    62,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,   101,   102,   103,    -1,
      -1,   106,   107,   108,   109,   110,   111,    -1,   113,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,    -1,
      -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,   214,
      -1,   216,   217,   218,    -1,   220,   221,   222,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,   246,   247,   248,   249,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,   272,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,   291,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,   339,   340,    -1,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,    -1,    -1,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,   370,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,   396,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
     535,   536,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,   563,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,   609,   610,   611,   612,   613,    -1,
      -1,   616,   617,    -1,   619,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,    -1,   641,    -1,    -1,    -1,
      -1,   646,   647,    -1,    -1,    -1,    -1,   652,   653,    -1,
      -1,   656,   657,    -1,    -1,   660,   661,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    36,    37,
      38,    39,    40,    41,    42,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
      58,    -1,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,    -1,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,    -1,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,    -1,   212,    -1,   214,    -1,   216,   217,
     218,    -1,   220,   221,   222,    -1,   224,   225,    -1,    -1,
      -1,   229,   230,   231,   232,   233,   234,    -1,   236,   237,
     238,    -1,   240,    -1,   242,    -1,    -1,    -1,   246,   247,
     248,   249,    -1,    -1,   252,    -1,   254,   255,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,
      -1,    -1,   270,    -1,   272,   273,   274,    -1,    -1,    -1,
      -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,
     288,    -1,    -1,   291,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,    -1,    -1,   337,
     338,   339,   340,    -1,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,    -1,   354,   355,   356,    -1,
      -1,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
      -1,   369,   370,   371,    -1,   373,   374,   375,    -1,   377,
     378,   379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   392,   393,   394,    -1,   396,   397,
      -1,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,   417,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
      -1,    -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,    -1,   447,
     448,    -1,   450,   451,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,    -1,   462,   463,    -1,   465,    -1,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,
     488,   489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,
      -1,   499,    -1,   501,   502,   503,   504,   505,   506,    -1,
     508,   509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,
      -1,    -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,
      -1,   529,   530,    -1,    -1,    -1,   534,   535,   536,   537,
     538,    -1,   540,   541,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,   554,    -1,   556,    -1,
     558,   559,   560,   561,    -1,   563,   564,   565,    -1,   567,
     568,   569,   570,    -1,    -1,    -1,    -1,    -1,   576,   577,
     578,    -1,   580,   581,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,   609,   610,   611,   612,   613,    -1,    -1,   616,   617,
      -1,   619,   620,   621,   622,   623,   624,   625,   626,    -1,
      -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,
     638,    -1,    -1,   641,    -1,    -1,    -1,    -1,   646,   647,
      -1,    -1,    -1,    -1,   652,   653,    -1,    -1,   656,   657,
      -1,    -1,   660,   661,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    36,    37,    38,    39,    40,
      41,    42,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    55,    56,    57,    58,    -1,    60,
      61,    62,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
     101,   102,   103,    -1,    -1,   106,   107,   108,   109,   110,
     111,    -1,   113,   114,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
      -1,   212,    -1,   214,    -1,   216,   217,   218,    -1,   220,
     221,   222,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,   234,    -1,   236,   237,   238,    -1,   240,
      -1,   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,   272,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
     291,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,   339,   340,
      -1,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,    -1,    -1,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,    -1,   369,   370,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,   396,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,   530,
      -1,    -1,    -1,   534,   535,   536,   537,   538,    -1,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,   550,
     551,   552,   553,   554,    -1,   556,    -1,   558,   559,   560,
     561,    -1,   563,   564,   565,    -1,   567,   568,   569,   570,
      -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,   580,
     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
     591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,
      -1,   602,    -1,   604,   605,   606,    -1,    -1,   609,   610,
     611,   612,   613,    -1,    -1,   616,   617,    -1,   619,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,
     641,    -1,    -1,    -1,    -1,   646,   647,    -1,    -1,    -1,
      -1,   652,   653,    -1,    -1,   656,   657,    -1,    -1,   660,
     661,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    38,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,   183,
      -1,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,   218,    -1,   220,   221,   222,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
      -1,    -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,
      -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,
     274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,   291,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,    -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,    -1,
     354,   355,   356,    -1,    -1,   359,   360,   361,   362,    -1,
      -1,    -1,   366,   367,    -1,   369,   370,   371,    -1,   373,
     374,   375,    -1,   377,   378,   379,   380,    -1,   382,   383,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,
     394,    -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,    -1,    -1,   413,
     414,   415,    -1,   417,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,    -1,   447,   448,    -1,   450,   451,   452,    -1,
      -1,   455,    -1,   457,    -1,   459,   460,    -1,   462,   463,
      -1,   465,    -1,   467,    -1,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,    -1,   483,
     484,    -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,
      -1,   495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,
     504,   505,   506,    -1,   508,   509,   510,   511,   512,   513,
      -1,    -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,
      -1,    -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,
     534,    -1,    -1,   537,   538,    -1,   540,   541,   542,   543,
     544,   545,    -1,    -1,   548,   549,   550,   551,    -1,   553,
     554,    -1,   556,    -1,   558,   559,   560,   561,    -1,   563,
     564,   565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,
      -1,    -1,   576,   577,   578,    -1,    -1,   581,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,    -1,   593,
     594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,
     604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,
      -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,
     624,   625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,
     634,    -1,   636,   637,   638,    -1,    -1,   641,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,   660,   661,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,   183,
      -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,
     194,    -1,    -1,    -1,   198,    -1,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
      -1,    -1,   236,   237,   238,   239,   240,    -1,   242,    -1,
      -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,   263,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,
     274,    -1,   276,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,    -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,    -1,
      -1,   355,   356,    -1,    -1,   359,   360,   361,   362,    -1,
      -1,    -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,
     374,   375,    -1,   377,   378,   379,   380,    -1,   382,   383,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,
     394,    -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,    -1,    -1,   413,
     414,   415,    -1,   417,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,    -1,   447,   448,    -1,   450,   451,   452,    -1,
      -1,   455,    -1,   457,    -1,   459,   460,    -1,   462,   463,
      -1,   465,    -1,   467,    -1,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,    -1,   483,
     484,   485,    -1,    -1,   488,   489,   490,   491,    -1,    -1,
      -1,   495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,
     504,   505,   506,    -1,   508,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,
      -1,    -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,
     534,    -1,    -1,   537,   538,    -1,   540,   541,   542,   543,
     544,   545,    -1,    -1,   548,   549,   550,   551,    -1,   553,
     554,    -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,
     564,   565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,
      -1,    -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,
     584,   585,    -1,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,
     604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,
      -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,
     624,   625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,
     634,    -1,   636,   637,   638,    -1,    -1,   641,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   661,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,
      -1,    57,    58,    -1,    60,    61,    -1,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,    -1,   200,   201,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
     236,   237,   238,   239,   240,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,   263,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,    -1,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,    -1,    -1,   355,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,    -1,
      -1,   537,   538,    -1,   540,   541,   542,   543,   544,   545,
      -1,    -1,   548,   549,   550,   551,    -1,   553,   554,    -1,
     556,    -1,   558,   559,   560,   561,    -1,    -1,   564,   565,
      -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,    -1,
     576,   577,   578,    -1,    -1,    -1,   582,   583,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
      -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,   661,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    -1,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,   187,
      -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,
     198,    -1,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,   229,   230,   231,   232,   233,    -1,    -1,   236,   237,
     238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,
      -1,    -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,
      -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,    -1,    -1,   337,
     338,    -1,   340,    -1,   342,    -1,   344,   345,   346,   347,
     348,   349,   350,   351,   352,    -1,    -1,   355,   356,    -1,
      -1,   359,   360,   361,   362,    -1,    -1,    -1,   366,   367,
      -1,    -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,
     378,   379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,
      -1,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,    -1,    -1,   413,   414,   415,    -1,   417,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
      -1,    -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,
      -1,   459,   460,    -1,   462,   463,    -1,   465,    -1,   467,
      -1,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,    -1,   483,   484,   485,    -1,    -1,
     488,   489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,
      -1,   499,    -1,   501,   502,   503,   504,   505,   506,    -1,
     508,   509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,
      -1,    -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,
      -1,   529,   530,    -1,    -1,    -1,   534,    -1,    -1,   537,
     538,    -1,   540,   541,   542,   543,   544,   545,    -1,    -1,
     548,   549,   550,   551,    -1,   553,   554,    -1,   556,    -1,
     558,   559,   560,   561,    -1,    -1,   564,   565,    -1,   567,
     568,   569,   570,    -1,    -1,    -1,    -1,    -1,   576,   577,
     578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
      -1,    -1,   620,   621,   622,   623,   624,   625,   626,    -1,
      -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,
     638,    -1,    -1,   641,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,   654,    -1,    -1,    19,
      -1,    -1,    22,   661,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,    -1,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
      -1,   641,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,   654,    15,    -1,    -1,    -1,    19,
     660,   661,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,    -1,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
      -1,   641,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,   653,    -1,    15,    -1,    -1,    -1,    19,
      -1,   661,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
     250,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,    -1,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
      -1,   641,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,   661,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      -1,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
     182,   183,    -1,    -1,   186,   187,    -1,   189,   190,   191,
      -1,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,
     232,   233,    -1,    -1,   236,   237,   238,    -1,   240,    -1,
     242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,
      -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,
      -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,    -1,    -1,   337,   338,    -1,   340,    -1,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,    -1,   355,   356,    -1,    -1,   359,   360,   361,
     362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,   371,
      -1,   373,   374,   375,    -1,   377,   378,   379,   380,    -1,
     382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,    -1,
      -1,   413,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,    -1,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,    -1,   447,   448,    -1,   450,   451,
     452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,    -1,
     462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
      -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,   491,
      -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,   501,
     502,   503,   504,   505,   506,    -1,   508,   509,   510,   511,
     512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,
      -1,   523,    -1,    -1,   526,    -1,    -1,   529,   530,    -1,
      -1,    -1,   534,    -1,    -1,   537,   538,    -1,   540,   541,
     542,   543,   544,   545,    -1,    -1,   548,   549,   550,   551,
      -1,   553,   554,    -1,   556,    -1,   558,   559,   560,   561,
      -1,    -1,   564,   565,    -1,   567,   568,   569,   570,    -1,
      -1,    -1,    -1,    -1,   576,   577,   578,    -1,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,
     602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,
      -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,
     622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,
      -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,   641,
      -1,    -1,    -1,    -1,    -1,    -1,   648,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,   661,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    -1,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,   187,
      -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,
     198,    -1,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,   229,   230,   231,   232,   233,    -1,    -1,   236,   237,
     238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,
      -1,    -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,
      -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,    -1,    -1,   337,
     338,    -1,   340,    -1,   342,    -1,   344,   345,   346,   347,
     348,   349,   350,   351,   352,    -1,    -1,   355,   356,    -1,
      -1,   359,   360,   361,   362,    -1,    -1,    -1,   366,   367,
      -1,    -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,
     378,   379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,
      -1,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,    -1,    -1,   413,   414,   415,    -1,   417,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
      -1,    -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,
      -1,   459,   460,    -1,   462,   463,    -1,   465,    -1,   467,
      -1,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,
     488,   489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,
      -1,   499,    -1,   501,   502,   503,   504,   505,   506,    -1,
     508,   509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,
      -1,    -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,
      -1,   529,   530,    -1,    -1,    -1,   534,    -1,    -1,   537,
     538,    -1,   540,   541,   542,   543,   544,   545,    -1,    -1,
     548,   549,   550,   551,    -1,   553,   554,    -1,   556,    -1,
     558,   559,   560,   561,    -1,    -1,   564,   565,    -1,   567,
     568,   569,   570,    -1,    -1,    -1,    -1,    -1,   576,   577,
     578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
      -1,    -1,   620,   621,   622,   623,   624,   625,   626,    -1,
      -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,
     638,    -1,    -1,   641,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    12,   653,    -1,    15,    -1,    -1,
      -1,    19,    -1,   661,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    -1,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,   187,
      -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,
     198,    -1,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,   229,   230,   231,   232,   233,    -1,    -1,   236,   237,
     238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,
      -1,    -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,
      -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,    -1,    -1,   337,
     338,    -1,   340,    -1,   342,    -1,   344,   345,   346,   347,
     348,   349,   350,   351,   352,    -1,    -1,   355,   356,    -1,
      -1,   359,   360,   361,   362,    -1,    -1,    -1,   366,   367,
      -1,    -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,
     378,   379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,
      -1,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,    -1,    -1,   413,   414,   415,    -1,   417,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
      -1,    -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,
      -1,   459,   460,    -1,   462,   463,    -1,   465,    -1,   467,
      -1,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,
     488,   489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,
      -1,   499,    -1,   501,   502,   503,   504,   505,   506,    -1,
     508,   509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,
      -1,    -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,
      -1,   529,   530,    -1,    -1,    -1,   534,    -1,    -1,   537,
     538,    -1,   540,   541,   542,   543,   544,   545,    -1,    -1,
     548,   549,   550,   551,    -1,   553,   554,    -1,   556,    -1,
     558,   559,   560,   561,    -1,    -1,   564,   565,    -1,   567,
     568,   569,   570,    -1,    -1,    -1,    -1,    -1,   576,   577,
     578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
      -1,    -1,   620,   621,   622,   623,   624,   625,   626,    -1,
      -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,
     638,    -1,    -1,   641,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,   660,   661,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    -1,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,   187,
      -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,
     198,    -1,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,   229,   230,   231,   232,   233,    -1,    -1,   236,   237,
     238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,
      -1,    -1,   270,    -1,    -1,   273,   274,    -1,    -1,    -1,
      -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,    -1,    -1,   337,
     338,    -1,   340,    -1,   342,    -1,   344,   345,   346,   347,
     348,   349,   350,   351,   352,    -1,    -1,   355,   356,    -1,
      -1,   359,   360,   361,   362,    -1,    -1,    -1,   366,   367,
      -1,    -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,
     378,   379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,
      -1,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,    -1,    -1,   413,   414,   415,    -1,   417,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
      -1,    -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,
      -1,   459,   460,    -1,   462,   463,    -1,   465,    -1,   467,
      -1,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,
     488,   489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,
      -1,   499,    -1,   501,   502,   503,   504,   505,   506,    -1,
     508,   509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,
      -1,    -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,
      -1,   529,   530,    -1,    -1,    -1,   534,    -1,    -1,   537,
     538,    -1,   540,   541,   542,   543,   544,   545,    -1,    -1,
     548,   549,   550,   551,    -1,   553,   554,    -1,   556,    -1,
     558,   559,   560,   561,    -1,    -1,   564,   565,    -1,   567,
     568,   569,   570,    -1,    -1,    -1,    -1,    -1,   576,   577,
     578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
      -1,    -1,   620,   621,   622,   623,   624,   625,   626,    -1,
      -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,
     638,    -1,    -1,   641,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   661,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,    -1,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
      -1,   641,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,   661,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      -1,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
     182,   183,    -1,    -1,   186,   187,    -1,   189,   190,   191,
      -1,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,
     232,   233,    -1,    -1,   236,   237,   238,    -1,   240,    -1,
     242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,
      -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,
      -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,    -1,    -1,   337,   338,    -1,   340,    -1,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,    -1,   355,   356,    -1,    -1,   359,   360,   361,
     362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,   371,
      -1,   373,   374,   375,    -1,   377,   378,   379,   380,    -1,
     382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,    -1,
      -1,   413,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,    -1,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,    -1,   447,   448,    -1,   450,   451,
     452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,    -1,
     462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
      -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,   491,
      -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,   501,
     502,   503,   504,   505,   506,    -1,   508,   509,   510,   511,
     512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,
      -1,   523,    -1,    -1,   526,    -1,    -1,   529,   530,    -1,
      -1,    -1,   534,    -1,    -1,   537,   538,    -1,   540,   541,
     542,   543,   544,   545,    -1,    -1,   548,   549,   550,   551,
      -1,   553,   554,    -1,   556,    -1,   558,   559,   560,   561,
      -1,    -1,   564,   565,    -1,   567,   568,   569,   570,    -1,
      -1,    -1,    -1,    -1,   576,   577,   578,    -1,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,
     602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,
      -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,
     622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,
      -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,   641,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   661,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,   183,
      -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,
     194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
      -1,    -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,
      -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,
     274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,    -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,    -1,
      -1,   355,   356,    -1,    -1,   359,   360,   361,   362,    -1,
      -1,    -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,
     374,   375,    -1,   377,   378,   379,   380,    -1,   382,   383,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,
     394,    -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,    -1,    -1,   413,
     414,   415,    -1,   417,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,    -1,   447,   448,    -1,   450,   451,   452,    -1,
      -1,   455,    -1,   457,    -1,   459,   460,    -1,   462,   463,
      -1,   465,    -1,   467,    -1,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,    -1,   483,
     484,    -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,
      -1,   495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,
     504,   505,   506,    -1,   508,   509,   510,   511,   512,   513,
      -1,    -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,
      -1,    -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,
     534,    -1,    -1,   537,   538,    -1,   540,   541,   542,   543,
     544,   545,    -1,    -1,   548,   549,   550,   551,    -1,   553,
     554,    -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,
     564,   565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,
      -1,    -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,
     584,   585,    -1,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,
     604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,
      -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,
     624,   625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,
     634,    -1,   636,   637,   638,    -1,    -1,   641,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   661,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,
      -1,    57,    58,    -1,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
      -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,
     236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,
      -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,
      -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,    -1,   323,   324,    -1,
      -1,    -1,    -1,   329,   330,   331,   332,   333,   334,    -1,
      -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,    -1,    -1,   355,
     356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,
     366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,
      -1,   377,   378,   379,   380,    -1,   382,   383,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,
      -1,   397,    -1,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,   413,   414,   415,
      -1,   417,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
      -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,   455,
      -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,   465,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
      -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,
      -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,
     526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,    -1,
      -1,   537,   538,    -1,   540,   541,   542,   543,   544,   545,
      -1,    -1,   548,   549,   550,   551,    -1,   553,   554,    -1,
     556,    -1,   558,   559,   560,   561,    -1,    -1,   564,   565,
      -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,    -1,
     576,   577,   578,    -1,    -1,    -1,   582,   583,   584,   585,
      -1,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
      -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,
     606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,
     616,    -1,    -1,    -1,   620,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   660,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,    -1,    -1,   186,   187,    -1,
     189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,
      -1,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,
      -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
     229,   230,   231,   232,   233,    -1,    -1,   236,   237,   238,
      -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,
      -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,   270,    -1,    -1,   273,   274,   275,    -1,    -1,    -1,
      -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,
     329,   330,   331,   332,   333,   334,    -1,    -1,   337,   338,
      -1,   340,    -1,   342,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,
     359,   360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,
      -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,   378,
     379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,    -1,
      -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,   448,
      -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,
     459,   460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,
     489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,   508,
     509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,
      -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,
     529,   530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,
      -1,   540,   541,   542,   543,   544,   545,    -1,    -1,   548,
     549,   550,   551,    -1,   553,   554,    -1,   556,    -1,   558,
     559,   560,   561,    -1,   563,   564,   565,    -1,   567,   568,
     569,   570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,
      -1,    -1,    -1,   582,   583,   584,   585,    -1,   587,   588,
      -1,   590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,
      -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,
      -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,
      -1,   620,   621,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,   660,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      -1,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
     182,   183,    -1,    -1,   186,   187,    -1,   189,   190,   191,
      -1,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,
     232,   233,    -1,    -1,   236,   237,   238,    -1,   240,    -1,
     242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,
      -1,   273,   274,   275,    -1,    -1,    -1,    -1,   280,   281,
      -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,    -1,    -1,   337,   338,    -1,   340,    -1,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,    -1,   355,   356,    -1,    -1,   359,   360,   361,
     362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,   371,
      -1,   373,   374,   375,    -1,   377,   378,   379,   380,    -1,
     382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,    -1,
      -1,   413,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,    -1,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,    -1,   447,   448,    -1,   450,   451,
     452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,    -1,
     462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
      -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,   491,
      -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,   501,
     502,   503,   504,   505,   506,    -1,   508,   509,   510,   511,
     512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,
      -1,   523,    -1,    -1,   526,    -1,    -1,   529,   530,    -1,
      -1,    -1,   534,    -1,    -1,   537,   538,    -1,   540,   541,
     542,   543,   544,   545,    -1,    -1,   548,   549,   550,   551,
      -1,   553,   554,    -1,   556,    -1,   558,   559,   560,   561,
      -1,   563,   564,   565,    -1,   567,   568,   569,   570,    -1,
      -1,    -1,    -1,    -1,   576,   577,   578,    -1,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,
     602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,
      -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,
     622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,
      -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,   641,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,   660,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    62,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,    -1,   641,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,   660,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    -1,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,   187,
      -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,    -1,
     198,    -1,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,   229,   230,   231,   232,   233,    -1,    -1,   236,   237,
     238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,   257,
     258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,   267,
      -1,    -1,   270,    -1,    -1,   273,   274,   275,    -1,    -1,
      -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,   287,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,    -1,    -1,    -1,
      -1,   329,   330,   331,   332,   333,   334,    -1,    -1,   337,
     338,    -1,   340,    -1,   342,    -1,   344,   345,   346,   347,
     348,   349,   350,   351,   352,    -1,    -1,   355,   356,    -1,
      -1,   359,   360,   361,   362,    -1,    -1,    -1,   366,   367,
      -1,    -1,    -1,   371,    -1,   373,   374,   375,    -1,   377,
     378,   379,   380,    -1,   382,   383,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   392,   393,   394,    -1,    -1,   397,
      -1,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,    -1,    -1,   413,   414,   415,    -1,   417,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
      -1,    -1,   430,    -1,    -1,    -1,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,    -1,   447,
     448,    -1,   450,   451,   452,    -1,    -1,   455,    -1,   457,
      -1,   459,   460,    -1,   462,   463,    -1,   465,    -1,   467,
      -1,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,    -1,   483,   484,    -1,    -1,    -1,
     488,   489,   490,   491,    -1,    -1,    -1,   495,    -1,    -1,
      -1,   499,    -1,   501,   502,   503,   504,   505,   506,    -1,
     508,   509,   510,   511,   512,   513,    -1,    -1,    -1,    -1,
      -1,    -1,   520,   521,    -1,   523,    -1,    -1,   526,    -1,
      -1,   529,   530,    -1,    -1,    -1,   534,    -1,    -1,   537,
     538,    -1,   540,   541,   542,   543,   544,   545,    -1,    -1,
     548,   549,   550,   551,    -1,   553,   554,    -1,   556,    -1,
     558,   559,   560,   561,    -1,   563,   564,   565,    -1,   567,
     568,   569,   570,    -1,    -1,    -1,    -1,    -1,   576,   577,
     578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,   597,
      -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,    -1,
      -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,    -1,
      -1,    -1,   620,   621,   622,   623,   624,   625,   626,    -1,
      -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,
     638,    -1,    -1,   641,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   660,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,
     231,   232,   233,    -1,    -1,   236,   237,   238,    -1,   240,
      -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,
      -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,
      -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,
     281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,   330,
     331,   332,   333,   334,    -1,    -1,   337,   338,    -1,   340,
      -1,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,   360,
     361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,
     371,    -1,   373,   374,   375,    -1,   377,   378,   379,   380,
      -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
      -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,    -1,    -1,   430,
      -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,   448,    -1,   450,
     451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,
      -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,
     491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,
     521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,   530,
      -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,   540,
     541,   542,   543,   544,   545,    -1,    -1,   548,   549,   550,
     551,    -1,   553,   554,    -1,   556,    -1,   558,   559,   560,
     561,    -1,    -1,   564,   565,    -1,   567,   568,   569,   570,
      -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,    -1,
      -1,   582,   583,   584,   585,    -1,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,
      -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,
     621,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,
     641,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   660,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,   183,
      -1,    -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,
     194,    -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,   229,   230,   231,   232,   233,
      -1,    -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,
      -1,    -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
     254,   255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,
      -1,   265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,
     274,    -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,
      -1,   285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,    -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,
     334,    -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,    -1,
      -1,   355,   356,    -1,    -1,   359,   360,   361,   362,    -1,
      -1,    -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,
     374,   375,    -1,   377,   378,   379,   380,    -1,   382,   383,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,
     394,    -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,    -1,    -1,   413,
     414,   415,    -1,   417,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,    -1,   447,   448,    -1,   450,   451,   452,    -1,
      -1,   455,    -1,   457,    -1,   459,   460,    -1,   462,   463,
      -1,   465,    -1,   467,    -1,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,    -1,   483,
     484,    -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,
      -1,   495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,
     504,   505,   506,    -1,   508,   509,   510,   511,   512,   513,
      -1,    -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,
      -1,    -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,
     534,    -1,    -1,   537,   538,    -1,   540,   541,   542,   543,
     544,   545,    -1,    -1,   548,   549,   550,   551,    -1,   553,
     554,    -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,
     564,   565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,
      -1,    -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,
     584,   585,    -1,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,
     604,   605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,
      -1,    -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,
     624,   625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,
     634,    -1,   636,   637,   638,    -1,    -1,   641,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    -1,   660,    24,    25,    26,
      27,    28,    29,    30,    -1,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    -1,    -1,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    -1,    -1,    -1,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,    -1,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,    -1,
      -1,    -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,
     187,   188,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,
      -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,    -1,    -1,    -1,   225,    -1,
      -1,    -1,   229,   230,   231,   232,   233,   234,    -1,   236,
     237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,
     247,    -1,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,
     257,   258,   259,    -1,    -1,   262,    -1,    -1,    -1,   266,
     267,    -1,    -1,   270,   271,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,
     287,   288,    -1,    -1,    -1,    -1,   293,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,   332,   333,   334,    -1,    -1,
     337,   338,    -1,   340,    -1,   342,    -1,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,    -1,   355,   356,
      -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,    -1,
     367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,    -1,
     377,   378,   379,   380,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,    -1,    -1,
      -1,    -1,   399,    -1,   401,   402,   403,   404,   405,   406,
     407,   408,   409,    -1,    -1,    -1,    -1,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,    -1,
     447,    -1,    -1,   450,    -1,   452,   453,    -1,   455,    -1,
      -1,    -1,   459,    -1,    -1,   462,   463,    -1,   465,   466,
     467,    -1,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,   480,   481,    -1,   483,    -1,    -1,    -1,
      -1,   488,   489,   490,    -1,    -1,    -1,    -1,   495,    -1,
      -1,    -1,    -1,    -1,    -1,   502,    -1,    -1,   505,   506,
      -1,   508,    -1,   510,    -1,   512,   513,    -1,    -1,    -1,
      -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,   526,
      -1,    -1,   529,    -1,    -1,    -1,    -1,   534,    -1,    -1,
      -1,   538,    -1,   540,   541,   542,   543,   544,   545,    -1,
      -1,   548,   549,   550,   551,    -1,   553,   554,    -1,   556,
      -1,   558,   559,   560,   561,    -1,    -1,   564,   565,    -1,
     567,   568,   569,   570,    -1,    -1,    -1,    -1,    -1,   576,
     577,   578,    -1,    -1,    -1,    -1,   583,   584,   585,    -1,
     587,   588,    -1,   590,   591,    -1,    -1,    -1,    -1,    -1,
     597,    -1,    -1,   600,    -1,    -1,    -1,   604,   605,   606,
      -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,
      -1,    -1,    -1,   620,   621,   622,   623,   624,   625,   626,
      -1,    -1,   629,    -1,    -1,    -1,   633,    -1,    -1,   636,
      -1,   638,    -1,     5,   641,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,   655,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      -1,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,   109,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
     182,   183,    -1,    -1,   186,   187,    -1,   189,   190,   191,
      -1,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,
     232,   233,    -1,    -1,   236,   237,   238,    -1,   240,    -1,
     242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,
      -1,   273,   274,   275,    -1,    -1,    -1,    -1,   280,   281,
      -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,    -1,    -1,   337,   338,    -1,   340,    -1,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,    -1,   355,   356,    -1,    -1,   359,   360,   361,
     362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,   371,
      -1,   373,   374,   375,    -1,   377,   378,   379,   380,    -1,
     382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,    -1,
      -1,   413,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,    -1,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,    -1,   447,   448,    -1,   450,   451,
     452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,    -1,
     462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
      -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,   491,
      -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,   501,
     502,   503,   504,   505,   506,    -1,   508,   509,   510,   511,
     512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,
      -1,   523,    -1,    -1,   526,    -1,    -1,   529,   530,    -1,
      -1,    -1,   534,    -1,    -1,   537,   538,    -1,   540,   541,
     542,   543,   544,   545,    -1,    -1,   548,   549,   550,   551,
      -1,   553,   554,    -1,   556,    -1,   558,   559,   560,   561,
      -1,   563,   564,   565,    -1,   567,   568,   569,   570,    -1,
      -1,    -1,    -1,    -1,   576,   577,   578,    -1,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,
     602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,
      -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,
     622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,
      -1,   633,   634,    -1,   636,   637,   638,    -1,     5,   641,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,   653,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,
     187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,
      -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,   236,
     237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,
     267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,
     287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,   332,   333,   334,    -1,    -1,
     337,   338,    -1,   340,    -1,   342,    -1,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,    -1,   355,   356,
      -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,   366,
     367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,    -1,
     377,   378,   379,   380,    -1,   382,   383,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,    -1,
     397,    -1,   399,    -1,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,    -1,    -1,   413,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,    -1,
     447,   448,    -1,   450,   451,   452,    -1,    -1,   455,    -1,
     457,    -1,   459,   460,    -1,   462,   463,    -1,   465,    -1,
     467,    -1,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,    -1,   483,   484,    -1,    -1,
      -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,    -1,
      -1,    -1,   499,    -1,   501,   502,   503,   504,   505,   506,
      -1,   508,   509,   510,   511,   512,   513,    -1,    -1,    -1,
      -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,   526,
      -1,    -1,   529,   530,    -1,    -1,    -1,   534,    -1,    -1,
     537,   538,    -1,   540,   541,   542,   543,   544,   545,    -1,
      -1,   548,   549,   550,   551,    -1,   553,   554,    -1,   556,
      -1,   558,   559,   560,   561,    -1,    -1,   564,   565,    -1,
     567,   568,   569,   570,    -1,    -1,    -1,    -1,    -1,   576,
     577,   578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,
     587,   588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,
     597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,
      -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,
      -1,    -1,    -1,   620,   621,   622,   623,   624,   625,   626,
      -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,
     637,   638,    -1,     5,   641,     7,     8,     9,    10,    11,
      12,   648,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      -1,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
     182,   183,    -1,    -1,   186,   187,    -1,   189,   190,   191,
      -1,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,
     232,   233,    -1,    -1,   236,   237,   238,    -1,   240,    -1,
     242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,
      -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,
      -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,    -1,    -1,   337,   338,    -1,   340,    -1,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,    -1,   355,   356,    -1,    -1,   359,   360,   361,
     362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,   371,
      -1,   373,   374,   375,    -1,   377,   378,   379,   380,    -1,
     382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,    -1,
      -1,   413,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,    -1,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,    -1,   447,   448,    -1,   450,   451,
     452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,    -1,
     462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
      -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,   491,
      -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,   501,
     502,   503,   504,   505,   506,    -1,   508,   509,   510,   511,
     512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,
      -1,   523,    -1,    -1,   526,    -1,    -1,   529,   530,    -1,
      -1,    -1,   534,    -1,    -1,   537,   538,    -1,   540,   541,
     542,   543,   544,   545,    -1,    -1,   548,   549,   550,   551,
      -1,   553,   554,    -1,   556,    -1,   558,   559,   560,   561,
      -1,    -1,   564,   565,    -1,   567,   568,   569,   570,    -1,
      -1,    -1,    -1,    -1,   576,   577,   578,    -1,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,
     602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,
      -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,
     622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,
      -1,   633,   634,    -1,   636,   637,   638,    -1,     5,   641,
       7,     8,     9,    10,    11,    12,   648,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,   183,    -1,    -1,   186,
     187,    -1,   189,   190,   191,    -1,    -1,   194,    -1,    -1,
      -1,   198,    -1,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,   218,    -1,   220,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,   229,   230,   231,   232,   233,    -1,    -1,   236,
     237,   238,    -1,   240,    -1,   242,    -1,    -1,    -1,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,   254,   255,    -1,
     257,   258,    -1,    -1,    -1,   262,    -1,    -1,   265,   266,
     267,    -1,    -1,   270,    -1,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,   280,   281,    -1,   283,    -1,   285,    -1,
     287,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,    -1,    -1,
      -1,    -1,   329,   330,   331,   332,   333,   334,    -1,    -1,
     337,   338,    -1,   340,    -1,   342,    -1,   344,   345,   346,
     347,   348,   349,   350,   351,   352,    -1,    -1,   355,   356,
      -1,    -1,   359,   360,   361,   362,    -1,    -1,    -1,   366,
     367,    -1,    -1,    -1,   371,    -1,   373,   374,   375,    -1,
     377,   378,   379,   380,    -1,   382,   383,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   392,   393,   394,    -1,    -1,
     397,    -1,   399,    -1,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,    -1,    -1,   413,   414,   415,    -1,
     417,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,    -1,    -1,   430,    -1,    -1,    -1,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,    -1,
     447,   448,    -1,   450,   451,   452,    -1,    -1,   455,    -1,
     457,    -1,   459,   460,    -1,   462,   463,    -1,   465,    -1,
     467,    -1,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,    -1,   483,   484,    -1,    -1,
      -1,   488,   489,   490,   491,    -1,    -1,    -1,   495,    -1,
      -1,    -1,   499,    -1,   501,   502,   503,   504,   505,   506,
      -1,   508,   509,   510,   511,   512,   513,    -1,    -1,    -1,
      -1,    -1,    -1,   520,   521,    -1,   523,    -1,    -1,   526,
      -1,    -1,   529,   530,    -1,    -1,    -1,   534,    -1,    -1,
     537,   538,    -1,   540,   541,   542,   543,   544,   545,    -1,
      -1,   548,   549,   550,   551,    -1,   553,   554,    -1,   556,
      -1,   558,   559,   560,   561,    -1,    -1,   564,   565,    -1,
     567,   568,   569,   570,    -1,    -1,    -1,    -1,    -1,   576,
     577,   578,    -1,    -1,    -1,   582,   583,   584,   585,    -1,
     587,   588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,
     597,    -1,    -1,   600,    -1,   602,    -1,   604,   605,   606,
      -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,    -1,   616,
      -1,    -1,    -1,   620,   621,   622,   623,   624,   625,   626,
      -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,
     637,   638,    -1,     5,   641,     7,     8,     9,    10,    11,
      12,   648,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      -1,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
     182,   183,    -1,    -1,   186,   187,    -1,   189,   190,   191,
      -1,    -1,   194,    -1,    -1,    -1,   198,    -1,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,   218,    -1,   220,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,   229,   230,   231,
     232,   233,    -1,    -1,   236,   237,   238,    -1,   240,    -1,
     242,    -1,    -1,    -1,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,   254,   255,    -1,   257,   258,    -1,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,   270,    -1,
      -1,   273,   274,    -1,    -1,    -1,    -1,    -1,   280,   281,
      -1,   283,    -1,   285,    -1,   287,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,    -1,    -1,    -1,    -1,   329,   330,   331,
     332,   333,   334,    -1,    -1,   337,   338,    -1,   340,    -1,
     342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,    -1,   355,   356,    -1,    -1,   359,   360,   361,
     362,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,   371,
      -1,   373,   374,   375,    -1,   377,   378,   379,   380,    -1,
     382,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     392,   393,   394,    -1,    -1,   397,    -1,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,    -1,
      -1,   413,   414,   415,    -1,   417,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,    -1,    -1,   430,    -1,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,    -1,   447,   448,    -1,   450,   451,
     452,    -1,    -1,   455,    -1,   457,    -1,   459,   460,    -1,
     462,   463,    -1,   465,    -1,   467,    -1,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
      -1,   483,   484,    -1,    -1,    -1,   488,   489,   490,   491,
      -1,    -1,    -1,   495,    -1,    -1,    -1,   499,    -1,   501,
     502,   503,   504,   505,   506,    -1,   508,   509,   510,   511,
     512,   513,    -1,    -1,    -1,    -1,    -1,    -1,   520,   521,
      -1,   523,    -1,    -1,   526,    -1,    -1,   529,   530,    -1,
      -1,    -1,   534,    -1,    -1,   537,   538,    -1,   540,   541,
     542,   543,   544,   545,    -1,    -1,   548,   549,   550,   551,
      -1,   553,   554,    -1,   556,    -1,   558,   559,   560,   561,
      -1,    -1,   564,   565,    -1,   567,   568,   569,   570,    -1,
      -1,    -1,    -1,    -1,   576,   577,   578,    -1,    -1,    -1,
     582,   583,   584,   585,    -1,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,    -1,   597,    -1,    -1,   600,    -1,
     602,    -1,   604,   605,   606,    -1,    -1,    -1,    -1,    -1,
      -1,   613,    -1,    -1,   616,    -1,    -1,    -1,   620,   621,
     622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,
      -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,   641,
      -1,    -1,    -1,    -1,    -1,     5,   648,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,   104,    -1,   106,    -1,   108,    -1,
     110,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,   136,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
     150,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,   239,
     240,    -1,   242,    -1,    -1,    -1,   246,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,   286,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,   485,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,   498,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,   563,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,   579,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,   601,   602,   603,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,   104,
      -1,   106,    -1,   108,    -1,   110,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,   136,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,   239,   240,    -1,   242,    -1,    -1,
      -1,   246,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
     275,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,   286,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
     485,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,   498,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,   563,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,   579,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,   601,   602,   603,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,   221,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,   291,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,   363,   364,    -1,   366,   367,    -1,    -1,
     370,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,   516,   517,   518,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,    -1,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,   586,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,   221,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,   291,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,   370,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,   563,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,   586,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,   221,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,   291,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
     370,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,   563,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,   586,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,   221,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,   291,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,   370,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,   563,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,   586,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    36,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,   494,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,   563,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,   109,   110,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
     275,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,   563,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    36,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,   563,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    38,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,   221,   222,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,   563,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,   291,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
     370,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,   396,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,    -1,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,   586,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,   291,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,   370,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,   396,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,   586,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    36,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,   563,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,   291,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,   370,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,   396,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,   586,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
     110,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,   563,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,   109,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
     275,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,   563,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    13,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,   563,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
     275,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,   563,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    36,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,   563,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
     275,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,   563,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      20,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,   563,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,   517,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,    -1,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,   199,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,    -1,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,    -1,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,   563,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    13,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,    -1,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,    -1,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,   194,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,    -1,   220,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,   366,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,   382,   383,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,   394,
      -1,    -1,   397,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,    -1,    -1,   413,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,   448,    -1,   450,   451,   452,    -1,    -1,
     455,    -1,   457,    -1,   459,   460,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,    -1,    -1,   488,   489,   490,   491,    -1,    -1,    -1,
     495,    -1,    -1,    -1,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,   534,
      -1,    -1,   537,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,   582,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,   597,    -1,    -1,   600,    -1,   602,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,    -1,   189,
     190,   191,    -1,    -1,   194,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,   218,    -1,
     220,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,    -1,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,    -1,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
     270,    -1,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,   393,   394,    -1,    -1,   397,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,   413,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,   448,    -1,
     450,   451,   452,    -1,    -1,   455,    -1,   457,    -1,   459,
     460,    -1,   462,   463,    -1,   465,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,    -1,    -1,   488,   489,
     490,   491,    -1,    -1,    -1,   495,    -1,    -1,    -1,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,   508,   509,
     510,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,    -1,    -1,   537,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,    -1,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,   582,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,   597,    -1,    -1,
     600,    -1,   602,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,
      -1,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
      -1,   156,   157,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,    -1,    -1,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,    -1,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,
      -1,   266,   267,    -1,    -1,   270,   271,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,   293,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
      -1,    -1,    -1,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,    -1,    -1,   450,    -1,   452,   453,    -1,
     455,    -1,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,
     465,   466,   467,    -1,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,   481,    -1,   483,    -1,
      -1,    -1,    -1,   488,   489,   490,    -1,    -1,    -1,    -1,
     495,    -1,    -1,    -1,    -1,    -1,    -1,   502,    -1,    -1,
     505,   506,    -1,   508,    -1,   510,    -1,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,    -1,    -1,    -1,    -1,   534,
      -1,    -1,    -1,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,    -1,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,    -1,    -1,
      -1,    -1,   597,    -1,    -1,   600,    -1,    -1,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,   629,    -1,    -1,    -1,   633,    -1,
      -1,   636,    -1,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,    29,
      30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
      -1,    -1,   152,   153,   154,    -1,   156,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,   188,   189,
     190,   191,    -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,    -1,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,    -1,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,   259,
      -1,    -1,   262,    -1,    -1,    -1,   266,   267,    -1,    -1,
     270,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,   293,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,    -1,    -1,    -1,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
      -1,    -1,    -1,    -1,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,    -1,    -1,
     450,    -1,   452,   453,    -1,   455,    -1,    -1,    -1,   459,
      -1,    -1,   462,   463,    -1,   465,   466,   467,    -1,    -1,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,   481,    -1,   483,    -1,    -1,    -1,    -1,   488,   489,
     490,    -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,
      -1,    -1,   502,    -1,    -1,   505,   506,    -1,   508,    -1,
     510,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
      -1,    -1,    -1,    -1,   534,    -1,    -1,    -1,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,    -1,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,    -1,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,    -1,    -1,    -1,    -1,   597,    -1,    -1,
     600,    -1,    -1,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,   627,    -1,   629,
      -1,    -1,    -1,   633,    -1,    -1,   636,    -1,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,
      -1,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
      -1,   156,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,    -1,    -1,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,    -1,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,
      -1,   266,   267,    -1,    -1,   270,   271,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,   293,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
      -1,    -1,    -1,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,    -1,    -1,   450,    -1,   452,   453,    -1,
     455,    -1,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,
     465,   466,   467,    -1,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,   481,    -1,   483,    -1,
      -1,    -1,    -1,   488,   489,   490,    -1,    -1,    -1,    -1,
     495,    -1,    -1,    -1,    -1,    -1,    -1,   502,    -1,    -1,
     505,   506,    -1,   508,    -1,   510,    -1,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,    -1,    -1,    -1,    -1,   534,
      -1,    -1,    -1,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,    -1,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,    -1,    -1,
      -1,    -1,   597,    -1,    -1,   600,    -1,    -1,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,   627,    -1,   629,    -1,    -1,    -1,   633,    -1,
      -1,   636,    -1,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,    29,
      30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,   188,   189,
     190,   191,    -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,    -1,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,    -1,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,   259,
      -1,    -1,   262,    -1,    -1,    -1,   266,   267,    -1,    -1,
     270,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,   293,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,    -1,    -1,    -1,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
      -1,    -1,    -1,    -1,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,    -1,    -1,
     450,    -1,   452,   453,    -1,   455,    -1,    -1,    -1,   459,
      -1,    -1,   462,   463,    -1,   465,   466,   467,    -1,    -1,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,   481,    -1,   483,    -1,    -1,    -1,    -1,   488,   489,
     490,    -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,
      -1,    -1,   502,    -1,    -1,   505,   506,    -1,   508,    -1,
     510,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
      -1,    -1,    -1,    -1,   534,    -1,    -1,    -1,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,    -1,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,    -1,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,    -1,    -1,    -1,    -1,   597,    -1,    -1,
     600,    -1,    -1,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,   629,
      -1,    -1,    -1,   633,    -1,    -1,   636,    -1,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,
      -1,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,    -1,    -1,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,    -1,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,
      -1,   266,   267,    -1,    -1,   270,   271,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,   293,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
      -1,    -1,    -1,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,    -1,    -1,   450,    -1,   452,   453,    -1,
     455,    -1,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,
     465,   466,   467,    -1,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,   481,    -1,   483,    -1,
      -1,    -1,    -1,   488,   489,   490,    -1,    -1,    -1,    -1,
     495,    -1,    -1,    -1,    -1,    -1,    -1,   502,    -1,    -1,
     505,   506,    -1,   508,    -1,   510,    -1,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,    -1,    -1,    -1,    -1,   534,
      -1,    -1,    -1,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,    -1,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,    -1,    -1,
      -1,    -1,   597,    -1,    -1,   600,    -1,    -1,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,   629,    -1,    -1,    -1,   633,    -1,
      -1,   636,    -1,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,    29,
      30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,   188,   189,
     190,   191,    -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,    -1,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,    -1,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,   259,
      -1,    -1,   262,    -1,    -1,    -1,   266,   267,    -1,    -1,
     270,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,   293,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,    -1,    -1,    -1,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
      -1,    -1,    -1,    -1,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,    -1,    -1,
     450,    -1,   452,   453,    -1,   455,    -1,    -1,    -1,   459,
      -1,    -1,   462,   463,    -1,   465,   466,   467,    -1,    -1,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,   481,    -1,   483,    -1,    -1,    -1,    -1,   488,   489,
     490,    -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,
      -1,    -1,   502,    -1,    -1,   505,   506,    -1,   508,    -1,
     510,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
      -1,    -1,    -1,    -1,   534,    -1,    -1,    -1,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,    -1,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,    -1,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,    -1,    -1,    -1,    -1,   597,    -1,    -1,
     600,    -1,    -1,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,   629,
      -1,    -1,    -1,   633,    -1,    -1,   636,    -1,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,
      -1,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,    -1,    -1,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,    -1,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,
      -1,   266,   267,    -1,    -1,   270,   271,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,   293,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
      -1,    -1,    -1,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,    -1,    -1,   450,    -1,   452,   453,    -1,
     455,    -1,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,
     465,   466,   467,    -1,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,   481,    -1,   483,    -1,
      -1,    -1,    -1,   488,   489,   490,    -1,    -1,    -1,    -1,
     495,    -1,    -1,    -1,    -1,    -1,    -1,   502,    -1,    -1,
     505,   506,    -1,   508,    -1,   510,    -1,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,    -1,    -1,    -1,    -1,   534,
      -1,    -1,    -1,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,    -1,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,    -1,    -1,
      -1,    -1,   597,    -1,    -1,   600,    -1,    -1,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,   629,    -1,    -1,    -1,   633,    -1,
      -1,   636,    -1,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,    29,
      30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,   188,   189,
     190,   191,    -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,    -1,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,    -1,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,   259,
      -1,    -1,   262,    -1,    -1,    -1,   266,   267,    -1,    -1,
     270,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,   293,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,    -1,    -1,    -1,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
      -1,    -1,    -1,    -1,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,    -1,    -1,
     450,    -1,   452,   453,    -1,   455,    -1,    -1,    -1,   459,
      -1,    -1,   462,   463,    -1,   465,   466,   467,    -1,    -1,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,   481,    -1,   483,    -1,    -1,    -1,    -1,   488,   489,
     490,    -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,
      -1,    -1,   502,    -1,    -1,   505,   506,    -1,   508,    -1,
     510,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
      -1,    -1,    -1,    -1,   534,    -1,    -1,    -1,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,    -1,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,    -1,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,    -1,    -1,    -1,    -1,   597,    -1,    -1,
     600,    -1,    -1,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,   629,
      -1,    -1,    -1,   633,    -1,    -1,   636,    -1,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,
      -1,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,    -1,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,    -1,    -1,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,   188,   189,   190,   191,    -1,    -1,    -1,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,    -1,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,
      -1,   266,   267,    -1,    -1,   270,   271,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,   293,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
      -1,    -1,    -1,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,    -1,    -1,   450,    -1,   452,   453,    -1,
     455,    -1,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,
     465,   466,   467,    -1,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,   481,    -1,   483,    -1,
      -1,    -1,    -1,   488,   489,   490,    -1,    -1,    -1,    -1,
     495,    -1,    -1,    -1,    -1,    -1,    -1,   502,    -1,    -1,
     505,   506,    -1,   508,    -1,   510,    -1,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,    -1,    -1,    -1,    -1,   534,
      -1,    -1,    -1,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,    -1,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,    -1,    -1,
      -1,    -1,   597,    -1,    -1,   600,    -1,    -1,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,   629,    -1,    -1,    -1,   633,    -1,
      -1,   636,    -1,   638,    -1,     5,   641,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,    29,
      30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
      -1,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
     180,   181,   182,   183,    -1,    -1,   186,   187,   188,   189,
     190,   191,    -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,    -1,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,   229,
     230,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
     240,    -1,   242,    -1,    -1,    -1,    -1,   247,    -1,    -1,
      -1,    -1,   252,    -1,   254,   255,    -1,   257,   258,   259,
      -1,    -1,   262,    -1,    -1,    -1,   266,   267,    -1,    -1,
     270,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
     280,   281,    -1,   283,    -1,   285,    -1,   287,   288,    -1,
      -1,    -1,    -1,   293,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,    -1,    -1,    -1,    -1,   329,
     330,   331,   332,   333,   334,    -1,    -1,   337,   338,    -1,
     340,    -1,   342,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,    -1,   355,   356,    -1,    -1,   359,
     360,   361,   362,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,   371,    -1,   373,   374,   375,    -1,   377,   378,   379,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,    -1,    -1,    -1,    -1,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
      -1,    -1,    -1,    -1,   414,   415,    -1,   417,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,    -1,    -1,
     430,    -1,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,    -1,   447,    -1,    -1,
     450,    -1,   452,   453,    -1,   455,    -1,    -1,    -1,   459,
      -1,    -1,   462,   463,    -1,   465,   466,   467,    -1,    -1,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
     480,   481,    -1,   483,    -1,    -1,    -1,    -1,   488,   489,
     490,    -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,
      -1,    -1,   502,    -1,    -1,   505,   506,    -1,   508,    -1,
     510,    -1,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,   523,    -1,    -1,   526,    -1,    -1,   529,
      -1,    -1,    -1,    -1,   534,    -1,    -1,    -1,   538,    -1,
     540,   541,   542,   543,   544,   545,    -1,    -1,   548,   549,
     550,   551,    -1,   553,   554,    -1,   556,    -1,   558,   559,
     560,   561,    -1,    -1,   564,   565,    -1,   567,   568,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
      -1,    -1,    -1,   583,   584,   585,    -1,   587,   588,    -1,
     590,   591,    -1,    -1,    -1,    -1,    -1,   597,    -1,    -1,
     600,    -1,    -1,    -1,   604,   605,   606,    -1,    -1,    -1,
      -1,    -1,    -1,   613,    -1,    -1,   616,    -1,    -1,    -1,
     620,   621,   622,   623,   624,   625,   626,    -1,    -1,   629,
      -1,    -1,    -1,   633,    -1,    -1,   636,    -1,   638,    -1,
       5,   641,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    66,    67,    68,    69,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,
      -1,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,    -1,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,    -1,    -1,    -1,    -1,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,    -1,    -1,    -1,
      -1,    -1,    -1,   198,    -1,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
     225,    -1,    -1,    -1,   229,   230,   231,   232,   233,    -1,
      -1,   236,   237,   238,    -1,   240,    -1,   242,    -1,    -1,
      -1,    -1,   247,    -1,    -1,    -1,    -1,   252,    -1,   254,
     255,    -1,   257,   258,    -1,    -1,    -1,   262,    -1,    -1,
      -1,   266,   267,    -1,    -1,   270,    -1,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,   280,   281,    -1,   283,    -1,
     285,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
      -1,    -1,    -1,    -1,   329,   330,   331,   332,   333,   334,
      -1,    -1,   337,   338,    -1,   340,    -1,   342,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,    -1,
     355,   356,    -1,    -1,   359,   360,   361,   362,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    -1,   371,    -1,   373,   374,
     375,    -1,   377,   378,   379,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
      -1,    -1,    -1,    -1,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,    -1,    -1,    -1,   414,
     415,    -1,   417,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,    -1,    -1,   430,    -1,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,    -1,   447,    -1,    -1,   450,    -1,   452,    -1,    -1,
     455,    -1,    -1,    -1,   459,    -1,    -1,   462,   463,    -1,
     465,    -1,   467,    -1,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,   480,   481,    -1,   483,    -1,
      -1,    -1,    -1,   488,   489,   490,    -1,    -1,    -1,    -1,
     495,    -1,    -1,    -1,    -1,    -1,    -1,   502,    -1,    -1,
     505,   506,    -1,   508,    -1,   510,    -1,   512,   513,    -1,
      -1,    -1,    -1,    -1,    -1,   520,   521,    -1,   523,    -1,
      -1,   526,    -1,    -1,   529,    -1,    -1,    -1,    -1,   534,
      -1,    -1,    -1,   538,    -1,   540,   541,   542,   543,   544,
     545,    -1,    -1,   548,   549,   550,   551,    -1,   553,   554,
      -1,   556,    -1,   558,   559,   560,   561,    -1,    -1,   564,
     565,    -1,   567,   568,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,    -1,    -1,    -1,   583,   584,
     585,    -1,   587,   588,    -1,   590,   591,    -1,    -1,    -1,
      -1,    -1,   597,    -1,    -1,   600,    -1,    -1,    -1,   604,
     605,   606,    -1,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   616,    -1,    -1,    -1,   620,   621,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,    -1,
      -1,   636,    -1,   638,    -1,    -1,   641
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    14,    16,    33,    37,    51,    52,    59,    64,    65,
      85,   104,   128,   136,   137,   138,   149,   150,   162,   177,
     194,   209,   211,   216,   220,   246,   248,   264,   282,   286,
     381,   398,   400,   413,   424,   446,   449,   451,   454,   457,
     458,   468,   471,   479,   485,   493,   498,   499,   500,   530,
     537,   582,   594,   598,   601,   607,   637,   643,   653,   664,
     667,   668,   669,   670,   671,   673,   678,   680,   689,   722,
     750,   757,   758,   877,   933,   968,  1054,  1101,  1104,  1114,
    1117,  1122,  1135,  1136,  1141,  1144,  1149,  1156,  1168,  1169,
    1338,  1340,  1351,  1354,  1379,  1387,  1400,  1407,  1421,  1425,
    1428,  1439,  1445,  1449,  1454,  1455,  1456,  1509,  1536,  1542,
    1544,  1551,  1554,  1588,  1594,  1595,  1596,  1597,  1648,  1656,
    1657,  1658,    12,   115,   133,   202,   287,   418,   491,   554,
    1055,  1619,  1620,  1621,  1622,   283,   368,  1143,  1589,   563,
    1498,   239,     5,     7,     8,     9,    10,    11,    12,    15,
      19,    22,    24,    25,    26,    27,    28,    29,    30,    31,
      33,    37,    41,    44,    45,    46,    48,    50,    51,    54,
      57,    58,    60,    61,    63,    64,    66,    67,    68,    69,
      70,    71,    72,    74,    75,    76,    77,    78,    79,    80,
      82,    83,    84,    85,    86,    87,    88,    89,    91,    92,
      94,    95,    96,    97,    98,   100,   103,   106,   108,   111,
     113,   117,   118,   119,   122,   127,   128,   133,   135,   139,
     141,   142,   143,   144,   145,   149,   152,   153,   154,   158,
     160,   161,   163,   164,   165,   168,   169,   171,   172,   173,
     174,   175,   176,   177,   180,   181,   182,   183,   186,   187,
     189,   190,   191,   194,   198,   200,   202,   204,   205,   206,
     207,   208,   209,   210,   212,   216,   217,   218,   220,   224,
     225,   229,   230,   231,   232,   233,   236,   237,   238,   240,
     242,   247,   248,   252,   254,   255,   257,   258,   262,   265,
     266,   267,   270,   273,   274,   280,   281,   283,   285,   287,
     288,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   313,   314,   315,
     316,   318,   319,   320,   321,   323,   324,   329,   330,   331,
     332,   333,   334,   337,   338,   340,   342,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   355,   356,   359,   360,
     361,   362,   366,   367,   371,   373,   374,   375,   377,   378,
     379,   380,   382,   383,   392,   393,   394,   397,   399,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   413,
     414,   415,   417,   419,   420,   421,   422,   423,   425,   426,
     427,   430,   434,   435,   436,   437,   438,   441,   442,   443,
     444,   445,   447,   448,   450,   451,   452,   455,   457,   459,
     460,   462,   463,   465,   467,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   483,   484,   488,
     489,   490,   491,   495,   499,   501,   502,   503,   504,   505,
     506,   508,   509,   510,   511,   512,   513,   520,   521,   523,
     526,   529,   530,   534,   537,   538,   540,   541,   542,   543,
     544,   545,   548,   549,   550,   551,   553,   554,   556,   558,
     559,   560,   561,   564,   565,   567,   568,   569,   570,   576,
     577,   578,   582,   583,   584,   585,   587,   588,   590,   591,
     593,   594,   597,   600,   602,   604,   605,   606,   613,   616,
     620,   621,   622,   623,   624,   625,   626,   633,   634,   636,
     637,   638,   641,   716,  1497,  1501,  1507,  1508,   313,   553,
     557,  1538,  1538,   633,  1590,   115,   201,   287,   388,   470,
     491,   514,   554,   596,   604,   699,  1031,  1032,  1033,  1388,
    1339,   115,   173,   202,   239,   287,   418,   470,   491,   554,
     560,   579,   604,   621,  1350,  1501,  1143,   108,   759,   715,
     661,  1494,  1496,  1501,   679,  1352,   407,   511,  1450,   118,
     239,   638,  1461,  1538,  1143,   653,   878,  1501,  1446,   479,
     604,  1538,  1143,  1355,  1440,   517,   747,   751,   752,  1501,
     715,  1590,  1501,  1172,  1174,  1175,  1510,  1408,   751,    13,
     503,   576,    13,   503,   557,  1402,   407,   511,  1543,  1380,
    1501,    33,    85,   160,   413,   435,   471,   530,  1650,   485,
     653,  1170,     0,   162,   665,   413,   560,   698,   929,   930,
     931,   182,   401,  1426,  1494,  1501,   166,  1066,  1501,   166,
     716,   213,   716,   275,  1498,  1501,  1503,   823,   824,   827,
     850,  1501,  1093,  1094,   173,  1061,  1619,  1538,  1590,  1150,
     723,   661,   687,   688,  1498,  1115,  1137,    18,  1591,   234,
     932,   213,   454,   715,  1503,   825,   850,   715,   239,   239,
     239,   235,   294,   427,  1398,  1399,     8,    22,    30,    36,
      38,    39,    40,    42,    55,    56,    61,    62,    71,    74,
      76,    77,    78,    79,    80,    97,   101,   102,   107,   109,
     110,   114,   115,   120,   121,   122,   127,   129,   132,   178,
     184,   185,   192,   206,   208,   214,   221,   222,   229,   234,
     246,   249,   267,   272,   280,   291,   317,   322,   333,   337,
     339,   343,   344,   345,   346,   347,   354,   363,   364,   365,
     369,   370,   375,   396,   403,   408,   409,   411,   425,   453,
     454,   467,   469,   476,   477,   483,   535,   536,   542,   546,
     547,   552,   563,   567,   568,   569,   570,   580,   581,   582,
     586,   589,   604,   609,   610,   611,   612,   617,   619,   625,
     626,   641,   646,   647,   652,   653,   656,   657,   660,   661,
    1191,  1192,  1193,  1194,  1198,  1205,  1206,  1207,  1208,  1209,
    1210,  1218,  1222,  1235,  1480,  1482,  1484,  1485,  1486,  1490,
    1492,  1497,  1501,   234,  1349,  1349,  1349,  1349,   213,  1349,
     715,  1349,   850,  1349,   715,  1349,  1538,   674,  1429,   141,
      13,    14,   104,   110,   136,   150,   173,   177,   189,   211,
     239,   246,   286,   419,   423,   439,   447,   455,   485,   498,
     499,   548,   579,   601,   603,  1503,  1555,  1559,  1560,  1562,
    1564,  1565,  1501,   380,    70,   431,   661,  1503,   134,   223,
     294,  1357,  1501,  1498,   217,   510,  1451,   250,  1457,  1537,
    1538,   969,  1185,    49,   879,   199,    36,   313,  1413,  1447,
    1501,   715,  1145,  1538,   134,   294,  1358,  1386,   313,   426,
     503,  1441,  1442,   613,   748,   493,   753,     7,    13,   423,
    1552,  1553,  1560,  1562,   574,  1591,  1173,    13,   146,   223,
     519,   520,   521,   522,   523,   524,   539,  1179,  1180,  1181,
    1615,    61,    62,   132,   210,   283,   350,   403,   470,   490,
     576,   660,   994,  1501,  1511,  1523,  1527,  1528,    13,    25,
      37,    61,    69,    74,   100,   102,   104,   116,   164,   169,
     172,   200,   202,   210,   212,   238,   239,   240,   261,   283,
     313,   380,   406,   417,   418,   421,   422,   442,   490,   503,
     538,   556,   557,   605,   624,   994,  1030,  1409,  1413,  1414,
    1416,  1425,  1524,   753,   504,   687,   431,   630,  1105,  1106,
    1107,   504,   687,  1401,  1501,  1498,  1538,  1386,    38,   221,
     222,   563,  1481,  1499,  1649,  1649,  1649,  1649,  1649,  1174,
    1170,   654,   659,  1501,  1616,  1620,  1621,  1622,   557,   930,
    1423,  1422,   331,   561,   588,  1057,   602,   109,  1503,  1504,
    1505,  1559,  1059,   829,   851,  1501,  1058,   382,     6,    59,
     150,   364,   430,   432,   852,   557,   235,   379,  1095,  1096,
    1097,   716,   525,  1623,  1624,  1060,  1123,  1151,  1152,  1153,
    1154,  1494,   653,   724,  1501,   574,  1344,  1345,  1494,  1344,
      58,   366,   366,   446,  1592,   363,   364,  1197,  1501,   828,
     851,  1558,  1560,   196,     6,  1504,  1505,  1506,  1575,  1579,
     932,   932,   932,   199,  1389,  1395,  1396,  1501,  1398,   653,
     653,   653,  1205,   653,   653,   653,  1191,  1238,   653,   653,
     653,   653,   653,   653,   653,   653,   653,   653,   653,   653,
     653,   653,  1190,  1190,  1190,   653,  1189,   653,   653,   653,
     563,   653,   653,   653,   653,   653,   653,   653,   653,   653,
     653,   653,   653,  1191,   653,   653,   653,   653,  1236,  1237,
    1490,  1501,   653,   653,   653,   653,   653,   653,   653,   653,
     653,  1191,  1189,   653,   653,   653,   653,   653,   653,   653,
     653,   653,   653,   653,   653,   653,   653,   653,   653,   653,
     653,  1189,   563,   653,   653,   653,   563,   653,   653,   653,
      38,   221,   222,   563,   993,   653,  1190,  1189,  1189,   653,
     653,   653,   653,   653,   653,  1205,  1205,  1205,  1191,  1610,
    1611,  1501,  1223,  1501,    17,    18,   385,   388,   639,  1195,
    1196,   166,   167,   203,   215,   256,   268,   295,   357,  1199,
      34,   147,   253,   276,   343,   440,   496,   497,   512,   644,
     645,   646,   647,   648,   649,   650,   651,  1197,  1205,    73,
     387,   655,  1499,   653,   661,   178,  1501,   716,  1501,  1501,
     851,   716,  1558,  1503,   861,  1414,   716,  1504,  1506,  1574,
    1343,  1349,   608,   675,    36,    69,   139,   164,   168,   204,
     225,   240,   288,   313,   417,   426,   441,   459,   503,   506,
     534,   556,   605,  1430,  1435,  1436,  1538,    90,   660,   760,
     761,   762,   763,  1501,   417,  1563,   473,   473,   554,   560,
     604,   621,  1190,   383,  1567,   553,   376,  1569,    68,   503,
    1566,   116,   621,  1568,   574,   376,   655,    20,   166,  1290,
    1291,  1545,  1501,   235,  1092,   511,    91,   426,  1452,    51,
      89,   294,  1463,  1494,  1539,  1540,  1142,   654,  1191,   278,
     281,   428,   880,   882,   660,   672,  1498,   288,  1146,  1506,
    1147,  1148,  1494,  1118,   250,  1346,  1359,  1360,  1494,    51,
    1443,   655,  1499,    57,    67,    82,    94,    95,    96,   113,
     332,   349,   481,   541,   559,   754,   756,   383,  1563,   376,
     199,   376,   479,  1593,  1592,   595,  1598,  1599,   648,  1183,
    1184,  1185,  1181,   493,   661,    36,   132,   166,   494,   995,
     996,  1370,  1503,   197,  1370,  1503,  1513,   660,  1503,    36,
     132,   998,   999,  1503,   661,  1514,  1512,  1370,   504,   172,
     276,   628,  1420,   653,   115,   173,   202,   418,   557,   579,
     621,  1420,    13,   942,  1503,   277,  1309,  1311,   199,   253,
    1415,  1417,    72,   534,   197,   534,   553,   511,    72,   534,
      13,    44,    98,   103,   255,   330,   394,   513,   550,  1403,
    1404,  1405,   687,   225,   534,   688,   534,  1309,  1420,  1417,
     288,   163,    75,   420,   553,   578,   197,   534,   616,  1108,
    1109,  1108,   378,   635,    92,   655,  1108,  1108,  1345,  1092,
     655,   377,  1652,   549,  1653,   260,   462,  1651,   654,  1599,
    1601,  1603,  1604,   162,   666,    11,   418,   579,   702,  1185,
    1618,  1624,  1632,  1636,  1637,  1643,   702,  1185,  1617,  1624,
    1632,  1637,  1643,  1619,   932,  1168,  1351,  1354,  1379,  1387,
    1424,  1427,  1481,  1501,   132,   927,   928,   939,   940,  1003,
     118,  1190,   660,   717,     6,   830,   717,   653,   117,   847,
     847,   847,     4,  1494,  1097,  1062,   484,   621,  1624,  1124,
    1125,  1345,   253,   655,   400,  1162,  1164,  1165,   725,   726,
    1191,   681,   182,   427,   655,  1116,    60,   182,   186,   197,
     329,   427,  1138,  1139,  1140,    58,   446,   178,   697,   830,
     630,   655,  1556,   118,   847,   232,   655,  1501,  1501,  1501,
    1347,  1348,  1494,  1495,  1501,   655,  1392,   661,  1397,  1191,
    1191,    13,   146,  1230,  1292,  1230,  1230,  1230,   627,  1240,
    1191,  1191,  1235,  1235,  1191,  1191,  1191,  1191,  1203,  1204,
    1191,  1191,  1191,  1191,   146,  1230,  1292,   654,   129,   192,
     221,   291,   370,   586,   654,  1318,  1321,  1322,   654,  1191,
    1191,  1191,  1191,  1490,  1610,   123,   124,   125,   126,   127,
     226,   227,   228,   229,   333,   335,   336,   337,   344,   425,
     482,   483,   625,   640,   641,  1287,  1288,  1235,   119,   122,
     567,   570,  1289,   146,  1225,  1191,  1191,  1191,  1191,  1287,
    1235,  1191,  1235,  1237,    10,   655,   661,   146,  1230,  1191,
    1191,   146,  1230,  1191,  1191,  1235,  1235,  1235,  1191,  1191,
    1191,  1235,  1194,  1191,  1191,  1191,  1191,  1191,  1191,   654,
    1191,  1230,  1230,  1191,  1191,   146,  1230,  1191,  1288,  1288,
    1191,    47,   269,   575,  1191,  1191,   654,  1491,  1492,  1501,
    1230,  1230,  1191,  1191,  1191,   654,   655,   654,   485,   653,
    1607,  1608,  1191,   660,  1224,  1503,   661,  1191,  1191,  1191,
    1193,   185,   369,   581,   597,  1197,    13,    19,  1193,  1200,
    1194,  1194,   653,  1205,  1194,  1194,  1194,  1194,   276,  1194,
    1194,   249,  1194,   249,  1194,  1194,  1194,  1194,  1194,    34,
     253,   276,   440,  1503,  1205,  1191,  1211,  1501,   661,   376,
     861,   367,   623,   862,   863,   164,   655,  1344,  1341,   660,
     676,   677,   288,   288,   288,   288,    51,   288,   687,   288,
     655,  1431,   122,   567,   570,   755,   765,  1222,  1484,  1490,
    1503,   655,   166,   553,   653,  1580,  1506,  1580,  1580,  1580,
    1575,   202,   418,   557,  1561,   173,   177,   189,   419,   447,
     455,   499,   548,  1565,  1501,   190,   360,  1501,  1546,  1547,
    1359,  1498,   230,   604,  1191,  1453,  1157,   283,  1462,  1291,
     655,  1344,  1186,    75,   653,   887,   888,   887,   888,   401,
     890,   218,   263,  1503,    32,   574,  1448,   655,   574,   655,
     574,  1344,  1360,  1356,   400,  1254,  1255,   687,  1442,   655,
     166,   197,   655,  1506,  1505,  1576,   202,   418,  1561,  1501,
      13,   146,  1606,   655,  1176,  1191,  1488,  1501,  1501,    73,
    1001,  1191,  1506,   375,   403,   563,  1534,   257,   431,  1529,
    1530,  1531,  1532,   210,   283,   490,  1525,  1370,  1501,   576,
    1515,  1526,  1528,   655,  1517,    13,    36,   132,   376,  1191,
    1535,   534,   253,  1418,  1498,  1191,   648,   932,   716,   716,
     716,  1494,   716,  1494,   288,   348,   534,  1412,  1412,   291,
     370,   474,   586,  1312,  1313,  1482,  1501,  1420,  1501,   716,
    1420,  1505,  1415,  1420,  1498,   716,  1420,   254,   551,   187,
     197,  1406,   655,   172,   534,  1415,  1494,  1417,  1415,  1415,
    1191,  1420,  1420,  1103,   445,   526,  1110,  1111,  1102,   508,
    1107,   485,   653,   657,  1241,  1242,  1243,  1244,  1245,  1256,
    1257,  1271,  1481,   405,  1654,   386,  1305,  1311,  1605,  1185,
    1185,  1185,   173,   202,   202,  1624,  1494,   928,    73,   994,
     142,  1503,    83,    97,   265,   341,   366,   429,   525,   719,
     721,   436,   590,   848,   849,   242,   844,   845,   846,   853,
     861,   863,   115,   224,   392,   403,   410,   509,   604,   700,
     701,  1498,    26,   321,   838,   839,   840,   853,   854,   855,
     861,   863,   831,   832,   838,  1056,   376,   710,  1063,   133,
     252,  1494,   655,   404,  1126,   132,  1155,  1501,  1153,  1494,
     876,  1164,   239,   263,  1028,  1166,   654,   655,   236,   296,
     298,   299,   300,   301,   302,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   314,   315,   316,   443,   444,   682,
     683,   686,  1345,   602,  1139,   926,   927,    83,   361,   437,
     591,   841,   842,   843,   853,   857,   858,   859,   860,   861,
     863,     7,  1560,   634,   607,   826,    49,   620,   630,  1577,
    1579,  1034,  1035,  1034,  1034,   655,  1393,  1254,   661,  1397,
    1396,   199,   648,  1501,   655,   654,  1230,   654,  1231,   654,
     654,   654,  1191,   156,   627,  1239,    20,   654,   608,   654,
     654,   654,   655,   654,   655,   654,   655,   655,   655,   655,
     608,   655,  1219,   654,   648,   654,   655,   655,   654,   654,
     654,   654,   199,   654,   655,  1221,   654,   655,   655,   655,
     647,   654,   655,   654,   654,   653,  1490,  1501,  1230,   654,
     654,   654,  1230,   654,   655,   654,   654,   654,   654,   654,
     654,   655,   654,   253,   654,   655,   655,   654,   655,   655,
     654,   654,   654,   655,   199,   655,  1230,   654,   654,   655,
     655,   655,   654,   199,  1191,   199,  1191,   199,  1191,   199,
     654,   655,   654,   654,   654,   654,   655,    20,   274,   655,
    1018,   654,  1235,  1261,  1262,  1263,   485,   653,  1171,  1602,
    1603,   595,  1612,   658,  1525,   494,  1501,   185,   369,   581,
     597,   653,    18,  1191,  1610,   171,  1297,  1194,  1191,  1191,
    1194,   653,  1205,  1194,  1185,  1215,  1216,  1217,   653,   661,
    1501,  1494,   862,  1370,  1371,  1506,    53,   461,  1098,  1344,
    1503,   655,   687,  1436,  1344,  1437,   763,   766,   767,   762,
     371,   477,   764,  1501,  1581,  1582,   574,   630,  1557,   648,
    1494,  1501,  1573,  1573,  1573,   166,   190,   203,   215,   266,
     268,   295,   360,   415,  1548,  1550,   628,  1293,  1353,  1506,
    1158,  1159,  1160,  1161,  1494,   241,   294,   431,   635,  1541,
    1540,   653,  1185,  1318,   545,   891,   881,    12,   883,  1191,
    1498,  1506,  1506,  1148,  1494,   182,   427,   606,  1119,  1120,
    1121,   485,   493,   612,   613,   653,   922,  1361,  1364,   653,
      13,  1444,   756,   755,  1560,   211,   199,   655,  1573,  1573,
    1573,  1600,  1184,   199,   250,  1177,  1178,  1304,  1305,  1333,
    1186,  1186,   661,   132,  1000,  1002,  1503,  1370,   653,   653,
     274,   378,   635,   655,   655,   661,   661,   661,  1528,  1191,
    1529,  1516,  1370,  1518,  1519,  1498,   199,  1419,   654,  1501,
     176,   474,   374,   655,  1420,   426,  1309,  1405,  1418,  1420,
    1415,  1494,  1420,  1420,   655,   600,  1112,  1270,  1501,   105,
     243,   260,   272,   353,   469,   539,  1252,  1253,   493,   655,
    1494,  1270,   655,   197,  1655,    49,  1309,   202,   716,   716,
     932,   716,  1501,   690,  1371,  1371,   351,  1498,   525,   525,
     525,   525,   525,   484,  1498,  1498,  1371,   655,   846,  1498,
    1498,  1498,  1498,   129,   192,   221,   291,   370,   586,  1317,
    1498,  1498,   654,   655,  1371,  1371,   655,   840,   833,   834,
     853,   854,   855,     6,    12,    14,    16,    27,    29,    59,
      64,    65,    71,    83,    91,   101,   118,   135,   143,   144,
     150,   158,   164,   175,   195,   237,   239,   247,   262,   286,
     320,   338,   342,   381,   386,   393,   395,   400,   403,   434,
     448,   449,   450,   451,   475,   531,   532,   533,   538,   554,
     558,   577,   582,   595,   874,   935,   937,   939,   940,  1067,
    1071,  1073,  1076,  1082,  1083,  1084,  1089,  1090,  1301,  1497,
      87,   480,   449,  1064,  1625,  1125,   197,  1163,   653,  1191,
     166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
     166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
     166,   655,  1371,  1371,  1371,  1371,   655,   843,  1505,  1503,
     287,   183,   835,   836,   837,   853,   854,   855,   856,   859,
     860,   861,   863,   403,   563,  1503,   584,   608,  1042,   376,
     376,   376,  1348,  1501,   608,  1390,  1501,  1242,   661,  1397,
     249,  1191,   654,  1191,   566,  1191,  1191,   160,    36,    62,
     119,   122,   130,   148,   251,   355,   501,   570,   599,  1232,
     995,  1204,  1191,  1203,  1235,  1191,  1191,   995,  1232,  1235,
     654,   249,   249,  1191,  1191,  1235,  1191,  1191,  1191,  1191,
    1191,  1194,   654,   654,  1191,  1191,  1191,  1191,  1191,  1191,
    1235,   249,  1191,  1191,  1191,   654,  1191,  1191,  1191,  1191,
     199,  1191,   199,  1191,   199,  1191,  1191,  1191,    36,    62,
    1013,  1014,  1015,  1016,  1017,  1318,  1317,   654,   654,  1613,
    1614,  1615,  1262,  1171,   654,  1606,  1503,  1191,  1610,  1193,
     654,   655,   654,  1205,  1287,  1287,    18,  1191,  1610,  1297,
    1191,   654,   655,  1234,  1235,  1501,  1342,   941,  1503,  1098,
     677,   197,   630,  1432,  1433,   166,   655,   654,   655,  1575,
       7,   661,   661,   574,   574,   574,  1549,  1294,  1310,  1311,
    1361,   655,  1162,  1164,   563,  1500,   635,   283,    89,   884,
     885,   886,  1501,   896,  1194,    49,   653,   898,   888,   166,
     653,   574,  1120,   923,  1362,   653,  1367,  1372,  1367,   654,
     922,  1363,  1487,  1488,  1491,  1501,  1365,  1286,  1501,   166,
     383,  1574,  1505,   199,   199,   199,  1169,   151,  1242,  1334,
     197,   286,  1182,  1333,  1310,  1178,    20,  1187,  1498,  1501,
     648,  1501,  1534,   563,   563,   431,   452,   488,  1533,  1531,
    1530,  1370,  1517,  1535,   655,  1521,  1523,  1527,   129,   192,
     291,   370,   586,  1319,  1410,   169,   624,  1313,  1314,   176,
    1313,  1313,   370,  1419,  1293,  1415,  1111,   297,   686,  1113,
    1258,  1265,  1270,  1241,   260,   260,   389,  1272,   272,   469,
    1252,  1272,  1241,  1382,  1383,  1491,  1243,  1254,  1267,  1268,
    1317,   334,  1306,  1501,  1644,     9,    32,   821,   716,   653,
     465,   276,   653,   865,   868,   934,   936,   937,  1002,   996,
     118,   118,   133,   252,   221,   291,   370,   586,   864,  1320,
    1321,  1497,   846,   701,   864,   864,   840,   655,   834,    81,
      93,   400,   951,   958,   959,  1026,  1028,  1032,  1033,  1091,
    1371,  1091,   400,  1371,  1371,  1091,  1371,   400,   400,  1371,
    1371,   574,   142,  1371,   261,   554,   196,   400,   416,  1028,
    1091,   261,  1371,   400,   554,   142,  1371,  1371,  1371,  1371,
    1371,  1091,   400,    49,  1371,  1371,   876,  1371,   400,   402,
      20,   166,   574,  1100,   400,   400,  1371,  1371,  1371,  1371,
     145,   330,  1501,  1371,  1371,   400,  1371,   935,   655,   873,
     874,  1071,   653,   661,   950,   960,  1493,  1501,  1370,   364,
     414,    24,   174,   704,   574,   143,   158,   706,   653,  1626,
      13,    75,  1127,   653,   416,  1283,  1284,  1285,  1501,   653,
    1317,  1498,  1498,  1319,  1498,  1317,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1317,  1317,  1498,   111,   366,   505,  1485,
    1498,  1317,   683,  1498,  1318,   864,   864,   843,   382,   213,
    1371,   655,   837,   563,    20,   608,  1578,    48,   218,   478,
    1047,  1047,  1494,  1494,  1494,   661,  1242,  1293,  1397,  1293,
    1191,   654,  1191,   566,   653,   985,   986,   986,   986,   653,
     980,   981,   985,  1233,   986,   251,   986,   251,   654,   654,
     654,    20,  1201,   654,    20,   654,   654,   654,  1220,  1191,
    1191,   654,   654,   386,  1227,   655,   655,   654,   655,   654,
     253,  1212,  1213,   654,   654,   654,   654,   655,   654,   654,
    1191,   654,   197,   654,   654,   655,   654,   655,   655,   654,
    1191,   654,  1191,   654,  1191,   654,   654,   654,   653,  1008,
    1008,    21,   137,   467,   646,  1010,  1011,  1012,   655,   655,
    1183,  1615,   654,  1609,   661,  1052,   654,  1235,  1193,   654,
     655,   654,  1186,  1217,   654,  1434,   431,    57,    67,    82,
      94,    95,    96,   113,   332,   349,   463,   481,   541,   559,
     768,   767,  1582,   630,  1585,   383,   648,   648,  1575,  1575,
    1575,   653,  1191,   376,  1377,  1160,  1494,  1164,   235,  1167,
    1458,   654,   655,  1186,   882,   400,   899,   900,  1318,   884,
    1506,  1179,  1368,  1369,  1491,  1373,   655,   653,  1364,   654,
     654,   655,   661,  1598,   654,   655,   755,   199,  1576,  1576,
    1576,  1293,  1293,   152,   390,  1329,  1330,  1335,   601,   253,
    1498,  1501,   661,   654,   654,    84,   587,   431,  1535,  1520,
    1522,  1309,  1314,  1411,  1420,   166,   655,   595,   654,  1602,
    1266,   658,   260,  1272,  1272,  1256,   260,   376,   608,   655,
    1381,  1370,  1291,  1179,  1191,  1307,  1489,   465,   653,   136,
     246,   601,   822,   703,  1638,   130,   251,   433,   540,   946,
    1494,   276,   922,   947,   948,   949,   950,   951,   872,   873,
     655,   936,   834,  1050,  1493,   932,    65,   196,   416,   596,
     957,  1027,   932,  1051,  1028,  1029,  1029,   932,   132,  1501,
    1493,  1143,  1319,  1317,  1349,  1317,    13,  1072,  1080,  1081,
    1501,  1143,  1498,  1498,   994,  1371,  1317,   263,  1349,   263,
    1349,  1349,   941,  1081,  1371,   190,   266,   366,   944,  1317,
     132,  1501,  1319,  1319,  1349,  1143,  1302,  1303,  1491,   132,
    1317,   132,  1317,  1323,   875,  1498,  1143,  1494,  1143,  1143,
      86,    88,   132,   154,   191,   394,   438,   943,   132,  1317,
     132,  1317,   132,  1317,  1317,  1323,  1072,   938,     6,   150,
    1084,   947,  1501,     9,   190,  1099,   439,   956,   957,  1020,
     961,   661,   132,  1320,  1498,  1501,   414,  1191,  1191,   376,
     710,   716,   376,    83,   711,  1501,  1627,    20,    13,   653,
    1128,  1072,   654,   655,   684,   685,  1317,   653,  1501,   864,
     837,  1498,   691,   693,   695,  1501,  1293,  1304,  1287,  1191,
     129,   291,   370,   586,    22,    36,    50,   593,   994,  1004,
    1005,  1006,   370,   653,   981,   987,    62,   119,   122,   130,
     148,   193,   251,   352,   355,   433,   570,   599,   974,   975,
    1202,  1232,   654,  1287,  1287,    49,   487,  1226,  1191,  1191,
    1235,    45,   353,   654,   630,  1214,  1191,  1287,  1191,  1191,
    1191,  1191,   654,   654,   654,  1318,   654,  1018,  1013,  1011,
    1013,  1014,  1317,  1264,  1607,  1501,   654,  1235,  1187,   181,
     286,   211,   456,  1583,  1583,  1583,   132,  1191,  1375,  1376,
     153,  1167,   270,   235,   454,  1464,   886,   654,   218,   263,
     901,   654,   655,   654,  1183,   655,  1370,  1374,  1375,  1372,
    1366,  1364,  1487,  1501,   876,  1501,  1576,  1310,   213,  1298,
    1500,  1500,   660,  1331,  1332,  1503,   495,   648,  1521,  1526,
    1309,  1498,   686,  1606,  1291,  1244,  1241,  1256,   260,   260,
    1241,  1256,  1246,  1247,  1383,  1293,  1376,  1281,  1282,  1183,
     655,    21,   137,  1308,   946,  1645,   376,   376,   727,   728,
     730,  1501,   511,  1494,   654,   654,   655,   869,  1464,   936,
    1143,   653,   263,   263,  1029,  1051,  1050,  1035,  1051,  1051,
     150,   493,  1072,  1493,  1069,   655,  1318,   996,  1498,  1349,
    1080,  1493,  1493,   630,  1498,  1493,  1072,   655,  1308,   879,
    1072,  1077,  1072,   653,   654,  1501,  1494,    35,    36,    41,
      43,    45,    46,   119,   122,   130,   148,   165,   191,   193,
     206,   207,   251,   280,   289,   290,   292,   326,   327,   328,
     345,   346,   347,   352,   355,   372,   373,   408,   409,   433,
     489,   493,   507,   564,   567,   570,   571,   572,   573,   614,
     615,   641,   962,   970,   973,   974,   975,   976,   977,   978,
     979,  1501,  1287,   503,  1498,   149,  1065,   654,   655,  1628,
    1629,  1129,   238,   654,  1284,   654,   655,   700,   653,   653,
     653,   277,  1315,   654,   654,   654,   654,   654,    36,    22,
     593,   994,    36,   995,   655,   370,   986,   980,    62,   986,
     251,  1006,   654,   654,   654,  1228,  1481,   654,   654,   655,
     654,   340,   265,   426,   654,   654,   654,   654,   654,   654,
    1009,   654,   655,   945,  1178,  1310,  1602,   654,    18,  1438,
     383,    66,   258,   362,   527,   543,   636,  1571,  1572,   630,
    1584,  1584,  1584,   654,   655,  1378,   250,   653,   889,   883,
     902,  1501,   900,   924,  1369,  1376,   654,  1601,    49,   219,
    1295,  1336,  1503,   655,   340,  1259,   376,  1249,  1256,  1256,
     376,  1251,  1191,   653,  1304,  1279,  1280,  1269,  1489,   511,
     244,   253,   391,   731,   732,   733,   734,  1185,   480,   654,
     655,   729,  1498,   654,   867,   866,   949,    20,   925,  1074,
    1191,  1051,  1035,   653,  1034,  1034,   132,   132,  1085,  1138,
    1081,  1001,  1493,  1098,   557,  1086,  1068,  1303,  1078,  1080,
    1070,  1437,   653,  1021,   985,   985,   986,   986,   980,   412,
     971,   980,   980,  1006,    62,   614,   974,   976,  1006,  1006,
      62,   615,   615,   618,   980,   972,   986,   986,   986,  1006,
     985,   986,    27,    73,    83,   132,   205,   369,   376,   416,
     489,   596,   963,   988,   989,   990,  1019,  1197,  1497,   618,
     985,  1006,    36,   985,  1007,   985,   985,   986,   987,   661,
     705,   712,   713,  1501,   485,   653,  1630,  1132,  1501,    13,
     653,  1130,   685,   654,  1048,  1049,  1501,  1048,  1048,   474,
    1313,  1391,   995,  1007,   370,  1229,  1489,  1191,   340,   180,
     654,  1317,  1182,  1182,   143,   563,   563,   563,    18,  1570,
     211,   318,   319,   323,   324,  1586,  1587,  1376,   263,   557,
    1185,   892,   653,   612,   903,   945,  1299,  1489,  1296,  1304,
     994,   997,  1332,  1607,  1248,   608,  1250,   608,  1286,  1315,
     195,   235,   607,  1274,  1275,  1278,   945,  1308,  1498,   654,
     655,   729,  1633,   704,  1639,   730,   970,   991,  1601,   934,
     653,   922,   401,   653,  1075,   654,   653,   653,  1048,   653,
     653,   122,   567,   570,   646,   647,  1483,  1484,   960,  1494,
     962,  1143,  1079,  1119,   654,  1022,  1501,   317,  1023,   501,
     599,   642,   982,   983,   984,   653,   982,   982,  1006,   618,
     982,   653,  1006,   982,  1000,  1498,   365,   992,  1483,    15,
     601,   132,   263,    20,   990,   263,   369,  1370,  1006,  1007,
    1006,  1007,   982,   982,  1501,   529,   707,    55,    70,   188,
     234,   259,   271,   380,   466,   714,   772,   774,   775,   776,
     778,   779,   780,   781,   782,   783,   785,   793,   794,   797,
     808,   811,   813,   814,  1497,  1502,  1508,  1172,  1170,   630,
    1631,   654,   655,  1131,   654,   655,  1308,   653,   654,   654,
     176,   474,   464,  1394,   654,   655,  1308,   654,   654,    63,
    1571,   383,  1317,  1317,  1317,   370,   646,  1316,  1587,   601,
    1494,   896,   544,   897,   894,   895,  1501,   253,   273,    83,
      91,   118,   239,   320,   338,   361,   554,   919,   920,   921,
    1414,   631,   632,   655,  1300,  1308,  1191,  1310,   996,  1337,
    1260,  1191,   653,  1191,   653,   654,  1028,  1028,  1275,  1646,
     733,  1501,  1494,   709,   710,   465,  1001,   872,   922,   870,
    1318,   899,  1048,  1048,   654,  1048,  1048,  1485,  1485,  1099,
     876,  1087,   250,   654,   655,   200,   399,   502,   376,  1024,
     984,  1053,  1481,  1053,   653,  1188,   365,   613,   653,   132,
    1320,  1498,  1501,  1191,   161,   708,   795,   798,  1501,   199,
     360,   786,   773,  1502,  1502,  1501,   777,   668,   293,   453,
     629,   817,    33,   815,   662,   654,    54,    65,   283,  1501,
     416,  1133,  1134,  1501,    83,   262,  1036,  1039,  1042,  1043,
    1044,  1497,  1049,   370,   630,  1037,  1041,  1043,  1046,  1038,
    1040,  1043,  1045,   176,  1183,  1489,   291,   370,  1384,  1385,
    1491,  1254,  1186,  1318,   654,   655,   905,   565,  1371,  1371,
     142,   142,  1371,  1371,  1371,  1371,   653,   914,   921,   164,
    1489,   418,  1324,    75,  1465,  1602,  1286,  1286,   197,  1273,
    1273,   718,   991,   197,   706,  1640,   869,   654,  1598,   654,
     654,   654,   952,   654,   654,  1099,   653,  1501,   136,   601,
     654,   655,   654,   654,  1318,  1188,   969,  1191,  1191,   627,
     800,   804,   199,  1501,   788,   789,  1191,   736,   771,   772,
     774,   776,   778,   780,   781,   782,   783,   785,   793,   808,
     811,   813,   736,   818,   816,   809,   812,  1601,    65,   383,
      65,   654,   655,  1498,  1371,   692,  1044,  1370,  1308,   654,
     397,   694,  1046,   696,  1045,  1308,   655,  1370,  1459,   654,
     893,   895,   653,   907,   909,   904,  1498,  1498,  1371,  1371,
    1320,  1320,  1318,  1503,   545,   915,   916,  1371,  1308,  1501,
     159,   170,   384,   562,  1466,  1467,   279,  1468,   654,   654,
     213,   260,   386,  1277,  1276,   140,   719,   720,  1197,  1647,
    1185,   711,   991,   871,  1020,   955,  1036,   953,   954,   899,
      53,   366,   461,   493,  1025,  1025,  1006,  1481,  1006,   654,
     654,   796,   805,   156,   804,   807,   250,   160,  1191,   160,
     771,   659,   600,  1191,   737,   817,   815,   383,   383,  1134,
    1317,  1088,  1089,  1090,   132,  1320,  1498,  1501,  1497,  1088,
    1088,  1385,  1376,   997,   897,   653,   908,   909,   910,   325,
     906,   909,  1498,  1498,   917,   654,   655,   941,  1325,    49,
      49,   159,    49,  1467,   528,   562,  1469,  1470,    49,    49,
     653,   653,   140,   771,  1634,   149,  1641,  1601,  1036,  1037,
    1038,   654,     5,   132,   369,   376,   376,   404,   622,   964,
     627,   799,   801,  1191,   736,   160,   784,   234,   566,   293,
     659,   820,   149,   131,   735,   738,   810,  1502,   810,  1090,
    1089,  1460,   654,   655,   325,   912,   913,  1194,   918,  1503,
     916,   653,  1481,  1481,    49,  1481,    49,    49,  1470,  1283,
    1285,   155,   712,   718,   601,   136,    83,   596,   965,   966,
     967,   802,   801,   807,   806,    55,   787,  1501,   790,  1191,
     819,    99,   179,   743,   769,  1501,   160,   771,   659,   474,
    1471,   909,   655,   911,   919,  1185,  1326,  1327,  1328,  1481,
    1481,  1481,   654,   654,   476,  1642,  1025,  1025,  1498,   263,
     967,  1191,   160,   566,   655,   736,   160,   736,   216,   655,
     739,    90,   112,   659,   232,  1465,   913,   654,  1191,   654,
     655,  1635,   771,   803,    55,   736,  1501,   791,   453,   160,
     197,  1501,   991,   197,   197,    49,  1468,  1186,  1328,   771,
     566,   156,   157,   792,   629,   740,   132,   770,   746,   747,
    1317,   741,   742,  1481,   235,  1472,   736,   736,   788,   516,
     518,   744,   745,   746,   749,  1197,  1501,  1191,  1168,   370,
     653,  1474,   655,   771,   198,   279,   474,  1473,   654,   660,
    1475,  1476,  1491,   493,  1477,   745,  1503,   654,   655,  1478,
    1479,  1491,  1476,   655,  1370,  1479,  1185,  1376,  1186
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (thd, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, thd)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, thd); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (thd);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, THD *thd)
#else
static void
yy_reduce_print (yyvsp, yyrule, thd)
    YYSTYPE *yyvsp;
    int yyrule;
    THD *thd;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , thd);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, thd); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, THD *thd)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, thd)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    THD *thd;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (thd);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (THD *thd);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (THD *thd)
#else
int
yyparse (thd)
    THD *thd;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1942 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((thd->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 65:

/* Line 1455 of yacc.c  */
#line 2044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 2058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 2067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 2073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 71:

/* Line 1455 of yacc.c  */
#line 2082 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 72:

/* Line 1455 of yacc.c  */
#line 2088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 2103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 2115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 2123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 80:

/* Line 1455 of yacc.c  */
#line 2134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
    break;

  case 81:

/* Line 1455 of yacc.c  */
#line 2138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 2148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 2152 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 2156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 2160 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 2164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 2168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 2173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 2177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 2181 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 2185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 2189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2193 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 2198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 2202 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 2207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 2238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 2253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 2259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 2283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 2289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_CURRENT_POS;
          }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 2299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_SLAVE_POS;
          }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 2309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_NO;
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 2330 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           Lex->mi.connection_name= (yyvsp[(1) - (1)].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[(1) - (1)].lex_str)))
           {
              my_error(ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME");
              MYSQL_YYABORT;
           }
#endif
         }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 2345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if ((yyvsp[(1) - (5)].num) && (yyvsp[(4) - (5)].num))
            {
               my_error(ER_WRONG_USAGE, MYF(0), "OR REPLACE", "IF NOT EXISTS");
               MYSQL_YYABORT;
            }
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            /*
              For CREATE TABLE we should not open the table even if it exists.
              If the table exists, we should either not create it or replace it
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
            lex->create_info.options= ((yyvsp[(1) - (5)].num) | (yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num));
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(thd);
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 2410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 2413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2429 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 2436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= ((yyvsp[(1) - (1)].num) == 0 ? VIEW_CREATE_NEW :
                                    VIEW_CREATE_OR_REPLACE);
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 2443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].num) && Lex->sql_command != SQLCOM_CREATE_VIEW)
            {
               my_error(ER_WRONG_USAGE, MYF(0), "OR REPLACE",
                       "TRIGGERS / SP / EVENT");
               MYSQL_YYABORT;
            }
          }
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 2452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 2456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_ROLE;
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2460 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 2468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2501 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 142:

/* Line 1455 of yacc.c  */
#line 2509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2513 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 2524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 2554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 2567 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 2569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 2575 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 153:

/* Line 1455 of yacc.c  */
#line 2581 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 2590 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2597 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2605 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 158:

/* Line 1455 of yacc.c  */
#line 2611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 160:

/* Line 1455 of yacc.c  */
#line 2617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 161:

/* Line 1455 of yacc.c  */
#line 2623 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 162:

/* Line 1455 of yacc.c  */
#line 2631 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 163:

/* Line 1455 of yacc.c  */
#line 2633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 164:

/* Line 1455 of yacc.c  */
#line 2640 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 165:

/* Line 1455 of yacc.c  */
#line 2682 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2713 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2728 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2744 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2761 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2766 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2767 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2773 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2775 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2777 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2779 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2783 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 2785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 2790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 194:

/* Line 1455 of yacc.c  */
#line 2791 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 195:

/* Line 1455 of yacc.c  */
#line 2792 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 196:

/* Line 1455 of yacc.c  */
#line 2797 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 197:

/* Line 1455 of yacc.c  */
#line 2801 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 198:

/* Line 1455 of yacc.c  */
#line 2808 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, thd, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 2816 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 2832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 2836 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 2854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2875 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_variable *spvar= spc->add_variable(thd,
                                                  (yyvsp[(1) - (3)].lex_str),
                                                  (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                  sp_variable::MODE_IN);

            if (lex->sphead->fill_field_definition(thd, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 2914 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable *spvar= spc->add_variable(thd,
                                                  (yyvsp[(3) - (4)].lex_str),
                                                  (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                  (sp_variable::enum_mode) (yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(thd, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 2940 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 2941 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 2942 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_OUT; }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 2943 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_INOUT; }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 2947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 2952 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 2958 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 2962 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 2988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(thd);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 2996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->default_value= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(thd, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 3052 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(spc->add_condition(thd, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 3067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_handler *h= lex->spcont->add_handler(thd,
                                                    (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, h);

            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 3093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 3123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor((yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->add_cursor((yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 3148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd);
          }
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 3152 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 3171 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 3172 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 3178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondvalue));
            }
          }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 3222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= Lex->spcont->find_condition((yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spcondvalue) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 3262 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 3268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 3274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 3283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[(2) - (3)].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_condition_value *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_condition((yyvsp[(1) - (1)].lex_str), false);
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_condition_value::SQLSTATE)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= cond;
          }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= NULL; }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            thd->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3388 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 3404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 3406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 3408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 3410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 3412 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 3414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 273:

/* Line 1455 of yacc.c  */
#line 3416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 274:

/* Line 1455 of yacc.c  */
#line 3421 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[(2) - (3)].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 275:

/* Line 1455 of yacc.c  */
#line 3436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 276:

/* Line 1455 of yacc.c  */
#line 3451 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 277:

/* Line 1455 of yacc.c  */
#line 3453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (thd->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (thd->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 3473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_list)= new (thd->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item)))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_item)= new (thd->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip= &thd->m_parser_state->m_lip;
            (yyval.item)= create_item_for_sp_var(thd, (yyvsp[(1) - (1)].lex_str), NULL,
                                       lip->get_tok_start(), lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3530 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cond_info_list)= new (thd->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item)))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cond_info_item)= new (thd->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3563 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3567 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3571 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 302:

/* Line 1455 of yacc.c  */
#line 3575 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 303:

/* Line 1455 of yacc.c  */
#line 3577 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 304:

/* Line 1455 of yacc.c  */
#line 3582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->add_variable(thd,
                              (yyvsp[(1) - (1)].lex_str),
                              MYSQL_TYPE_DECIMAL,
                              sp_variable::MODE_IN);
            (yyval.num)= 1;
          }
    break;

  case 305:

/* Line 1455 of yacc.c  */
#line 3600 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->add_variable(thd,
                              (yyvsp[(3) - (3)].lex_str),
                              MYSQL_TYPE_DECIMAL,
                              sp_variable::MODE_IN);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 306:

/* Line 1455 of yacc.c  */
#line 3620 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 307:

/* Line 1455 of yacc.c  */
#line 3621 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 322:

/* Line 1455 of yacc.c  */
#line 3644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3648 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3656 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 3703 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 3705 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 3731 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label(thd, empty_lex_str,
                                    lex->sphead->instructions());
          }
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 3738 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 3747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == sp_label::BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 330:

/* Line 1455 of yacc.c  */
#line 3800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 331:

/* Line 1455 of yacc.c  */
#line 3843 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 3863 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 3880 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 3885 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 338:

/* Line 1455 of yacc.c  */
#line 3911 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 339:

/* Line 1455 of yacc.c  */
#line 3931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(3) - (3)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 340:

/* Line 1455 of yacc.c  */
#line 3953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 341:

/* Line 1455 of yacc.c  */
#line 3955 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 342:

/* Line 1455 of yacc.c  */
#line 3971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0));
          }
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 3983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 349:

/* Line 1455 of yacc.c  */
#line 4003 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 350:

/* Line 1455 of yacc.c  */
#line 4009 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 351:

/* Line 1455 of yacc.c  */
#line 4022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 352:

/* Line 1455 of yacc.c  */
#line 4030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 353:

/* Line 1455 of yacc.c  */
#line 4038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 358:

/* Line 1455 of yacc.c  */
#line 4056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 359:

/* Line 1455 of yacc.c  */
#line 4060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 360:

/* Line 1455 of yacc.c  */
#line 4072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 361:

/* Line 1455 of yacc.c  */
#line 4081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 362:

/* Line 1455 of yacc.c  */
#line 4085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 363:

/* Line 1455 of yacc.c  */
#line 4095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 364:

/* Line 1455 of yacc.c  */
#line 4104 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 366:

/* Line 1455 of yacc.c  */
#line 4119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label(thd, (yyvsp[(1) - (2)].lex_str), lex->sphead->instructions());
              lab->type= sp_label::ITERATION;
            }
          }
    break;

  case 367:

/* Line 1455 of yacc.c  */
#line 4136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 4153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 4154 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 4159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label(thd, (yyvsp[(1) - (2)].lex_str), lex->sphead->instructions());
            lab->type= sp_label::BEGIN;
          }
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 4174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 4190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->push_label(thd, empty_lex_str, ip);
            lab->type= sp_label::BEGIN;
          }
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 4197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 4205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::REGULAR_SCOPE);
          }
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 4215 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 376:

/* Line 1455 of yacc.c  */
#line 4243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 377:

/* Line 1455 of yacc.c  */
#line 4253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 4255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 4271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 4282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 381:

/* Line 1455 of yacc.c  */
#line 4284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 382:

/* Line 1455 of yacc.c  */
#line 4303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 383:

/* Line 1455 of yacc.c  */
#line 4305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 384:

/* Line 1455 of yacc.c  */
#line 4310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 385:

/* Line 1455 of yacc.c  */
#line 4312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 386:

/* Line 1455 of yacc.c  */
#line 4314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 390:

/* Line 1455 of yacc.c  */
#line 4348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 391:

/* Line 1455 of yacc.c  */
#line 4350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 392:

/* Line 1455 of yacc.c  */
#line 4360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 393:

/* Line 1455 of yacc.c  */
#line 4366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 398:

/* Line 1455 of yacc.c  */
#line 4389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 4491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 4499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 4507 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 4531 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 4536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 4541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 4557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 4565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 4573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 4581 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4589 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4597 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 4610 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 4623 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 4642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 4647 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 4659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulonglong_number);}
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 4661 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 4712 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.option_list= NULL; }
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 4713 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 4714 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 4720 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 4720 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 4722 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {

            Lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            TABLE_LIST *src_table= Lex->select_lex.add_table_to_list(thd,
                                        (yyvsp[(1) - (1)].table), NULL, 0, TL_READ, MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 4735 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(2) - (2)].table); }
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 4736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(3) - (4)].table); }
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 4740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 4742 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 4743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 4745 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 4746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 4751 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 4787 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 4793 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 4811 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 4830 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 4842 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 4851 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 4858 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 4859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 4861 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 4863 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 4865 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 4867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 4871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 4873 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 4878 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 4880 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            switch ((yyvsp[(3) - (3)].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 4896 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 4897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 4901 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 4902 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 4907 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 4926 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 4936 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 4947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 4955 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 4957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 4972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 4974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 4975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 4978 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 4983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 4987 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 4988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 4993 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 5011 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 5026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 5028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 5043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5086 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5141 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 5263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 5286 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 5287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 545:

/* Line 1455 of yacc.c  */
#line 5292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 546:

/* Line 1455 of yacc.c  */
#line 5305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(thd, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 5325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 5339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 5364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 5365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 5370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 5402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 5407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 5411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 5412 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 5416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
          }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 5442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 5444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 5446 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 5474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5500 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 5505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 5509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 5510 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 5514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 5519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->check_exists= FALSE;
            (yyval.num)= 0;
          }
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 5524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->check_exists= TRUE;
            (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS;
          }
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 5532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 5536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= HA_LEX_CREATE_REPLACE;
          }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 5559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 5564 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 5569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 5574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 5579 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 5584 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 5589 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 5594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 5609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 5615 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 5630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 5635 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 5650 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 5656 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 5674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 5679 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 5684 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 5689 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 5694 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 5699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 5704 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 5708 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 5732 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 5737 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 5742 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 5747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 5749 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 5751 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 5753 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 5759 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 5764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 5769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 5775 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 5781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 5787 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 5796 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5814 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 5831 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 5867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 5868 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5869 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 5870 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 5871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 5873 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_PAGE; }
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 5877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 5878 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 5879 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 5883 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 5888 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 5889 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 5890 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 5891 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 5897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 5915 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 5922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 5924 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(2) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 5930 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 5932 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 5938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 5940 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 5946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 5948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (9)].key_type), (yyvsp[(3) - (9)].lex_str).str ? (yyvsp[(3) - (9)].lex_str) : (yyvsp[(1) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 5953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table)->db,
                                      (yyvsp[(8) - (8)].table)->table,
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option,
                                      lex->check_exists);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->option_list= NULL;
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 5974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 5989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 5990 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 5994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 5999 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 6010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (3)].lex_str), (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 6024 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 6028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (enum enum_field_types)MYSQL_TYPE_VIRTUAL;
            Lex->vcol_info->set_field_type((enum enum_field_types) (yyvsp[(1) - (8)].num));
          }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 6036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 6041 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 6045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 6049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 6055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 6056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 6060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 6066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 6072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 6077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 6082 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            if (!Lex->parse_vcol_expr)
            {
              my_message(ER_SYNTAX_ERROR, ER(ER_SYNTAX_ERROR), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 6098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info= new Virtual_column_info();
            if (!Lex->vcol_info)
            {
              mem_alloc_error(sizeof(Virtual_column_info));
              MYSQL_YYABORT;
            }
            uint expr_len= (uint)((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)) - 1;
            Lex->vcol_info->expr_str.str= (char* ) sql_memdup((yyvsp[(1) - (3)].simple_string) + 1, expr_len);
            Lex->vcol_info->expr_str.length= expr_len;
            Lex->vcol_info->expr_item= (yyvsp[(2) - (3)].item);
          }
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 6113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 6114 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 6115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 6117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 6122 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 6126 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 6131 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 6136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 6140 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 6145 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 6150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 6156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 6161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 6167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 6171 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 6176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 6181 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 6199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 6201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 6203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (thd->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 6216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 6218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 6223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 6228 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 6240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 6245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 6250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 6255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 6257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 6259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 6261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 6263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 6265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 6267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 6269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 6271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 6273 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 6275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 6277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 6279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 6281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 6289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 6290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 6292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 6296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 6297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 6298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 6299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 6300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 6304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 6308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 6309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 6313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 6314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 6318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 6319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 6320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 6321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 6322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 6326 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6330 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= thd->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6351 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6374 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6376 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6380 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 6396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 6397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 6410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local((yyvsp[(4) - (4)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 786:

/* Line 1455 of yacc.c  */
#line 6416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 6418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 6436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6441 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6510 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 6515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6537 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6542 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 6560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 6565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[(1) - (1)].lex_str).str)))
              MYSQL_YYABORT;
          }
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 6572 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 6573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 6577 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 6578 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 6582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 6583 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 6588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 6590 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 823:

/* Line 1455 of yacc.c  */
#line 6594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 824:

/* Line 1455 of yacc.c  */
#line 6601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 825:

/* Line 1455 of yacc.c  */
#line 6610 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 6615 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 827:

/* Line 1455 of yacc.c  */
#line 6622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 830:

/* Line 1455 of yacc.c  */
#line 6625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 831:

/* Line 1455 of yacc.c  */
#line 6626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 832:

/* Line 1455 of yacc.c  */
#line 6628 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 833:

/* Line 1455 of yacc.c  */
#line 6633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 6640 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 6641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 6646 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          if ((yyvsp[(2) - (2)].ulong_num) == 0)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
        }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 6654 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (4)].ulong_num); }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 6658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 6659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 6663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 6666 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 6667 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 6668 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (2)].ulong_num) | (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 6669 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) ; }
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 6674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) < 1 ? 1 : ((yyvsp[(1) - (1)].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[(1) - (1)].ulong_num));
          (yyval.ulong_num)--;
        }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 6682 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (1 | (yyvsp[(2) - (2)].ulong_num)) << (yyvsp[(1) - (2)].ulong_num);
        }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 6688 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 6689 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)|= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 6694 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          uint start= (yyvsp[(1) - (3)].ulong_num);
          uint end= (yyvsp[(3) - (3)].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 6703 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 6704 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 6708 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 6709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 6723 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 6730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 6736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 6743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6755 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6757 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 6759 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6761 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6766 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 6772 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 6778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 6785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 6792 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 6800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 6801 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 6802 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 6803 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 6804 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 6808 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 6812 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 6813 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 6817 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 6818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 6822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 6827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 6828 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 6829 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 6833 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 6834 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 6838 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 6843 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 6855 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 6872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 6877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 896:

/* Line 1455 of yacc.c  */
#line 6882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 6902 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 6903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 6908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 6909 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 6911 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 6917 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 6923 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 6929 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 6947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 6959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 6960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 6961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 6965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 6966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 6971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 6977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 6990 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 6991 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 6996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->check_exists && lex->sql_command != SQLCOM_ALTER_TABLE)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
          (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str);
        }
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 7007 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 7008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 929:

/* Line 1455 of yacc.c  */
#line 7012 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 7013 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 7021 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->name.str= 0;
            Lex->name.length= 0;
            Lex->sql_command= SQLCOM_ALTER_TABLE;
            Lex->duplicates= DUP_ERROR; 
            Lex->col_list.empty();
            Lex->select_lex.init_order();
            bzero(&Lex->create_info, sizeof(Lex->create_info));
            Lex->create_info.db_type= 0;
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.row_type= ROW_TYPE_NOT_USED;
            Lex->alter_info.reset();
            Lex->no_write_to_binlog= 0;
            Lex->create_info.storage_media= HA_SM_DEFAULT;
            DBUG_ASSERT(!Lex->m_sql_cmd);
          }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 7038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            Lex->select_lex.db= (Lex->select_lex.table_list.first)->db;
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 7048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (Lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 7058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 935:

/* Line 1455 of yacc.c  */
#line 7063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 936:

/* Line 1455 of yacc.c  */
#line 7072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 7083 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 7094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 7101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 7112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 7119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 7130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 7137 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 7149 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 7151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 7171 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 7184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 7189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 7194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 950:

/* Line 1455 of yacc.c  */
#line 7199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 7204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 7213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 7214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 7215 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 955:

/* Line 1455 of yacc.c  */
#line 7216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 7220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 957:

/* Line 1455 of yacc.c  */
#line 7222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 958:

/* Line 1455 of yacc.c  */
#line 7233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 7234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 960:

/* Line 1455 of yacc.c  */
#line 7238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 961:

/* Line 1455 of yacc.c  */
#line 7239 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 7245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 7275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
          }
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 7287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 7300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
               MYSQL_YYABORT;
          }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 7323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 7335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 7354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7380 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 7387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 7395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(4) - (4)].num);
          }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 7407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 7413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 7418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 7425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 993:

/* Line 1455 of yacc.c  */
#line 7440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 994:

/* Line 1455 of yacc.c  */
#line 7444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 995:

/* Line 1455 of yacc.c  */
#line 7448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 7455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 7456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 7461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1001:

/* Line 1455 of yacc.c  */
#line 7481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 7490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 1003:

/* Line 1455 of yacc.c  */
#line 7494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 7499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 7504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(4) - (4)].lex_str).str;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            lex->option_list= NULL;
          }
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 7511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 7515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 7526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(4) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(6) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(4) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 7539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 7543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(4) - (5)].lex_str).str, (yyvsp[(3) - (5)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 7552 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(5) - (5)].lex_str).str, (yyvsp[(4) - (5)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 7561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name,
                                           FALSE);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7571 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(3) - (4)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 7580 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 7592 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 7601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 7610 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 7629 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= Alter_info::ALTER_CONVERT;
          }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 7649 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 7659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 7663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 7680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 7685 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 7696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 7701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 7711 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 7712 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 7716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 7717 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 7721 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1044:

/* Line 1455 of yacc.c  */
#line 7735 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1045:

/* Line 1455 of yacc.c  */
#line 7737 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_NONE;
          }
    break;

  case 1046:

/* Line 1455 of yacc.c  */
#line 7744 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 7745 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 7746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 7750 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 7752 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 7757 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 7764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 7765 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 7766 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 7767 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 7772 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 7779 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1058:

/* Line 1455 of yacc.c  */
#line 7781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
          }
    break;

  case 1059:

/* Line 1455 of yacc.c  */
#line 7786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 7788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1061:

/* Line 1455 of yacc.c  */
#line 7795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 7805 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1063:

/* Line 1455 of yacc.c  */
#line 7821 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 7825 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1065:

/* Line 1455 of yacc.c  */
#line 7832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 7836 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 7843 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 7847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 7851 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 7857 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 7859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 7868 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 7869 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 1076:

/* Line 1455 of yacc.c  */
#line 7870 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 7874 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1078:

/* Line 1455 of yacc.c  */
#line 7876 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1079:

/* Line 1455 of yacc.c  */
#line 7889 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.gtid_pos_str = (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 7901 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 7908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 7912 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 7913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1086:

/* Line 1455 of yacc.c  */
#line 7914 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1087:

/* Line 1455 of yacc.c  */
#line 7919 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1088:

/* Line 1455 of yacc.c  */
#line 7929 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 7939 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 7940 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 7944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 7945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1093:

/* Line 1455 of yacc.c  */
#line 7949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1094:

/* Line 1455 of yacc.c  */
#line 7950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1095:

/* Line 1455 of yacc.c  */
#line 7951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 7956 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 7966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 7986 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 7988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            thd->lex->with_persistent_for_clause= TRUE;
          }
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 7995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1104:

/* Line 1455 of yacc.c  */
#line 7997 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1105:

/* Line 1455 of yacc.c  */
#line 8000 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1106:

/* Line 1455 of yacc.c  */
#line 8002 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX* lex= thd->lex;
            lex->column_list= new List<LEX_STRING>;
            if (lex->column_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 8013 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 8015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX* lex= thd->lex;
            lex->index_list= new List<LEX_STRING>;
            if (lex->index_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1111:

/* Line 1455 of yacc.c  */
#line 8027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1112:

/* Line 1455 of yacc.c  */
#line 8029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1113:

/* Line 1455 of yacc.c  */
#line 8034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1114:

/* Line 1455 of yacc.c  */
#line 8042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 8049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 8055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING str= {(char*) "PRIMARY", 7};
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&str, sizeof(LEX_STRING)));
          }
    break;

  case 1119:

/* Line 1455 of yacc.c  */
#line 8064 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1120:

/* Line 1455 of yacc.c  */
#line 8072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 8087 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1122:

/* Line 1455 of yacc.c  */
#line 8097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 8098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 8102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 8103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1126:

/* Line 1455 of yacc.c  */
#line 8107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1127:

/* Line 1455 of yacc.c  */
#line 8108 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1128:

/* Line 1455 of yacc.c  */
#line 8109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1129:

/* Line 1455 of yacc.c  */
#line 8110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 8111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 8112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 8117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 8127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1134:

/* Line 1455 of yacc.c  */
#line 8137 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 8138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 8139 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 8144 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 8148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 8150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 8157 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 8162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 8188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 8192 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 8211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 8221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 8230 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 8231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 8236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 8242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 8257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 8267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 8277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 8284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(thd);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1167:

/* Line 1455 of yacc.c  */
#line 8293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1169:

/* Line 1455 of yacc.c  */
#line 8299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 8300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 8310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 8324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 8334 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 8343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 8362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 8370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 8377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 8387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1191:

/* Line 1455 of yacc.c  */
#line 8402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 8419 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1196:

/* Line 1455 of yacc.c  */
#line 8447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 8479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 8485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1202:

/* Line 1455 of yacc.c  */
#line 8497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 8511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 8516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1205:

/* Line 1455 of yacc.c  */
#line 8540 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 8546 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1207:

/* Line 1455 of yacc.c  */
#line 8552 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 8553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 8554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 8555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 8556 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 8560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 8561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 8562 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 8566 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 8567 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 8568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 8572 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 8573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 8579 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (thd->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1221:

/* Line 1455 of yacc.c  */
#line 8630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (thd->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1222:

/* Line 1455 of yacc.c  */
#line 8637 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (thd->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 8680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1224:

/* Line 1455 of yacc.c  */
#line 8686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 8692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 8698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1227:

/* Line 1455 of yacc.c  */
#line 8704 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 8710 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 8716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 8726 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 8732 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 8738 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 8744 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 8750 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 8760 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 8766 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 8775 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 8781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (thd->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 8789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 8795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (thd->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 8805 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 8811 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (thd->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 8820 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item1= new (thd->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (thd->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 8830 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 8836 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 8846 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 8852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 8865 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 8871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 8877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 8883 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 8889 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 8895 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 8901 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 8907 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 8913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 8919 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 8925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 8931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 8937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 8943 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 8972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 8973 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 8974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 8975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 8976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 8977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 8981 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 8982 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 8987 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
	    (yyval.num)= DYN_COL_NULL; /* automatic type */
            lex->charset= NULL;
            lex->length= lex->dec= 0;
	  }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 8993 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (2)].num); }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 8998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_INT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 9005 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_UINT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 9012 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 9019 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 9026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 9033 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= DYN_COL_DECIMAL;
            Lex->charset= NULL;
          }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 9038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->length= lex->dec= 0;
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 9044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->charset= national_charset_info;
            lex->length= lex->dec= 0;
          }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 9051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 9058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_TIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 9066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATETIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 9077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(thd->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->key= (yyvsp[(1) - (4)].item);
     (yyval.dyncol_def)->value= (yyvsp[(3) - (4)].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[(4) - (4)].num);
     (yyval.dyncol_def)->cs= lex->charset;
     if (lex->length)
       (yyval.dyncol_def)->len= strtoul(lex->length, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if (lex->dec)
       (yyval.dyncol_def)->frac= strtoul(lex->dec, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 9099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
         (yyval.dyncol_def_list)= new (thd->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[(1) - (1)].dyncol_def));
       }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 9106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
         (yyvsp[(1) - (3)].dyncol_def_list)->push_back((yyvsp[(3) - (3)].dyncol_def));
         (yyval.dyncol_def_list)= (yyvsp[(1) - (3)].dyncol_def_list);
       }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 9119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 9134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 9140 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9144 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 9162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (thd->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 9168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (thd->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (thd->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string *item;
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM &&
               (item= (Item_string *) (yyvsp[(3) - (4)].item)) &&
                item->collation.repertoire == MY_REPERTOIRE_ASCII &&
                item->str_value.length() < MAX_DATE_STRING_REP_LENGTH * 4)
            {
              enum_field_types type= MYSQL_TYPE_STRING;
              LEX_STRING *ls= &(yyvsp[(2) - (4)].lex_str);
              if (ls->length == 1)
              {
                if (ls->str[0] == 'd')  /* {d'2001-01-01'} */
                  type= MYSQL_TYPE_DATE;
                else if (ls->str[0] == 't') /* {t'10:20:30'} */
                  type= MYSQL_TYPE_TIME;
              }
              else if (ls->length == 2) /* {ts'2001-01-01 10:20:30'} */
              {
                if (ls->str[0] == 't' && ls->str[1] == 's')
                  type= MYSQL_TYPE_DATETIME;
              }
              if (type != MYSQL_TYPE_STRING)
              {
                (yyval.item)= create_temporal_literal(thd,
                                            item->str_value.ptr(),
                                            item->str_value.length(),
                                            item->str_value.charset(),
                                            type, false);
              }
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (thd->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 9325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 9333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_role(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 9341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 9347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 9353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 9359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 9365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 9379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 9390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 9396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 9402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 9408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 9414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 9420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 9426 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 9432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 9438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 9444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 9450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 9456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 9462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 9468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1352:

/* Line 1455 of yacc.c  */
#line 9474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 9480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 9486 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 9494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 9515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 9522 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 9528 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 9535 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 9543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 9550 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 9556 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 9562 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 9568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 9575 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 9581 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 9588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 9594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 9600 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 9606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 9612 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 9618 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (thd->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].num));
            else
              (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 9636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 9642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 9648 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 9655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 9662 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 9670 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_add(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 9677 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_delete(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 9684 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dyncol_check((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 9691 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_create(thd, *(yyvsp[(3) - (4)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 9698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].cast_type),
                                        lex->length, lex->dec,
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 9715 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 9721 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 9727 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 9733 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 9739 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 9746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 9752 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_last_value(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 9758 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 9764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 9770 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 9776 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 9787 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 9793 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 9799 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 9805 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_reverse((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 9811 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 9819 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 9825 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 9836 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 9842 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string((yyvsp[(3) - (5)].item), 0, 0, (yyvsp[(4) - (5)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 9848 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string((yyvsp[(3) - (8)].item), 0, (yyvsp[(6) - (8)].ulong_num),
                                        (yyvsp[(7) - (8)].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 9856 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_char_typecast((yyvsp[(3) - (7)].item), (yyvsp[(6) - (7)].ulong_num), &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(item, 0, (yyvsp[(6) - (7)].ulong_num), MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 9866 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string((yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].ulong_num), (yyvsp[(7) - (10)].ulong_num), (yyvsp[(9) - (10)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 9872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 9888 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 9894 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 9901 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 9908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 9915 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 9922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 9929 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 9933 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 9952 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 9971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 10024 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 10065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 10067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 10071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 10072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 10076 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 10077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 10081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 10082 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 10087 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 10094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 10102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 10128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 10134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 10140 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 10146 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 10152 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 10158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 10167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 10173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 10175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 10177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1439:

/* Line 1455 of yacc.c  */
#line 10183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 10194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 10200 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 10206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 10212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 10218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 10224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 10230 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 10236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 10242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 10248 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 10252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (thd->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 10267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 10275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 10282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (thd->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 10292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 10300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(thd, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 10315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 10316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 10321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 10326 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 10332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 10349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 10351 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 10356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 10365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 10373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 10375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 10377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 10379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 10381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 10383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 10385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 10387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 10389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 10391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_TIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 10397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_DATETIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 10403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 10405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset= NULL; Lex->length= Lex->dec= 0;}
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 10407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DOUBLE; }
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 10410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 10411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 10416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 10423 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 10430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 10431 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 10436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 10443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 10450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 10451 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 10455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 10456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 10461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 10469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 10479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 10481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 10492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 10503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 10504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 10510 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 10512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 10532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=(yyvsp[(2) - (3)].num); }
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 10535 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 10543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	    (yyvsp[(3) - (6)].table_list)->straight=(yyvsp[(2) - (6)].num);
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 10551 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 10555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
	    (yyvsp[(3) - (8)].table_list)->straight=(yyvsp[(2) - (8)].num);
            add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); 
	    (yyval.table_list)=(yyvsp[(3) - (8)].table_list); 
          }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 10561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
	    (yyvsp[(4) - (4)].table_list)->straight=(yyvsp[(3) - (4)].num);
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 10570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 10578 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 10586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1511:

/* Line 1455 of yacc.c  */
#line 10590 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 10596 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 10606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 10614 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 10623 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 10627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 10634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 10645 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 10646 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 10647 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 10651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = (yyvsp[(1) - (1)].num); }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 10652 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 10660 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 10666 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 10680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 10685 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(thd, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1528:

/* Line 1455 of yacc.c  */
#line 10696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1529:

/* Line 1455 of yacc.c  */
#line 10736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            /*else if (($3->select_lex &&
                      $3->select_lex->master_unit()->is_union() &&
                      ($3->select_lex->master_unit()->first_select() ==
                       $3->select_lex || !$3->lifted)) || $5)*/
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 10812 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1531:

/* Line 1455 of yacc.c  */
#line 10822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1532:

/* Line 1455 of yacc.c  */
#line 10827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 10835 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (7)].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 10847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 10866 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 10874 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 10883 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 10889 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 10905 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 10922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 10929 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 10934 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 10959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 10960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 10965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= thd->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 10968 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 10969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 10970 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 10974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 10975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 10980 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 10985 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 10998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->alloc_index_hints(thd); }
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 11002 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 11007 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, NULL, 0); }
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 11008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 11013 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 11015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (char *)"PRIMARY", 7); }
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 11025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1571:

/* Line 1455 of yacc.c  */
#line 11036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 11048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 11049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 11050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 11051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 11052 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 11053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 11054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 11055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 11056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 11057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 11058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 11059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 11063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 11064 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 11065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 11066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 11067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 11068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 11069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 11070 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 11071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 11075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1594:

/* Line 1455 of yacc.c  */
#line 11076 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 11077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 11078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 11088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 11090 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 11103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 11105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 11109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond((yyvsp[(3) - (3)].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 11121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 11125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond((yyvsp[(3) - (3)].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 11136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 11141 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 11162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 11164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 11168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 11170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 11190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 11224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 11242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 11277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 11279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 11283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 11284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 11285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 11290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
	    lex->limit_rows_examined= 0;
          }
    break;

  case 1633:

/* Line 1455 of yacc.c  */
#line 11297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 11301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 11302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 11307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 11311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 11315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1639:

/* Line 1455 of yacc.c  */
#line 11322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 11329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 11336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 11346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 11379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 11383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 11389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 11395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 11404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[(1) - (1)].item);
          }
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 11411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1649:

/* Line 1455 of yacc.c  */
#line 11416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 11422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 11423 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 11427 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 11428 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1654:

/* Line 1455 of yacc.c  */
#line 11429 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 11433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 11434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1657:

/* Line 1455 of yacc.c  */
#line 11435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 11436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 11437 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 11438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 11442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 11443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 11444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 11445 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 11446 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 11450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 11451 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 11452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 11453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1670:

/* Line 1455 of yacc.c  */
#line 11454 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 11458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 11459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 11460 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= strtoull((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 11461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 11462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 11467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 11476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.choice)= (yyvsp[(1) - (1)].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 11477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.choice)= HA_CHOICE_UNDEF; }
    break;

  case 1682:

/* Line 1455 of yacc.c  */
#line 11483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (thd->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1684:

/* Line 1455 of yacc.c  */
#line 11513 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1685:

/* Line 1455 of yacc.c  */
#line 11514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 11524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 11533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1690:

/* Line 1455 of yacc.c  */
#line 11539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1692:

/* Line 1455 of yacc.c  */
#line 11544 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1693:

/* Line 1455 of yacc.c  */
#line 11549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 11568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 11600 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 11612 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 11620 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1700:

/* Line 1455 of yacc.c  */
#line 11623 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1701:

/* Line 1455 of yacc.c  */
#line 11635 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 11646 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 11652 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 11663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->check_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 11672 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1706:

/* Line 1455 of yacc.c  */
#line 11673 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 11674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (7)].lex_str).str, (yyvsp[(3) - (7)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(6) - (7)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 11690 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->check_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 11697 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 11719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 11739 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 11751 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 11755 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_ROLE;
          }
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 11759 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->check_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 11767 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 11769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->check_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 11775 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 11782 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1719:

/* Line 1455 of yacc.c  */
#line 11787 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 11792 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->check_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 11807 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 11818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 11836 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 11847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->check_exists= FALSE;
          (yyval.num)= 0;
        }
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 11852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->check_exists= TRUE;
          (yyval.num)= 1;
        }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 11859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 11860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 11868 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 11876 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 11881 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 11886 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 11893 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 11898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 11903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 11911 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 11913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 11920 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 11924 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 11926 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 11936 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 11937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 11942 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 11950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 11951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 11952 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 11954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 11964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 11965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 11969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 11970 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 11972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 11973 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 11975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 11976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 11991 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 12000 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 12001 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 12005 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 12006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 12011 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 12016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 12024 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 12030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 12035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 12042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 12044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 12053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 12061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 12069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1782:

/* Line 1455 of yacc.c  */
#line 12087 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 12097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(1) - (3)].item)) || add_value_to_list(thd, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 12110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 12119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 12120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 12127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 12142 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 12153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 12154 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 12156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 12162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 12167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 12173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 12191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 12204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 12219 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 12220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 12224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 12225 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 12229 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 12230 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1812:

/* Line 1455 of yacc.c  */
#line 12231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 12236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 12247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 12271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 12275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 12279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 12283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 12287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 12291 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 12295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 12299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 12303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 12310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 12314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 12323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->ident=null_lex_str;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 12332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 12339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(thd, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 12346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 12354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 12362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 12370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 12378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(thd, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 12386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 12393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ident= (yyvsp[(3) - (3)].lex_str);
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 12400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 12406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 12408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 12410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 12419 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 12423 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 12427 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 12432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 12437 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 12446 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(thd, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 12453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 12458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 12463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 12468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 12470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 12472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 12474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 12476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 12478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(thd, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 12485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 12493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 12495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 12503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(thd, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 12510 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(thd, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 12517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_GRANTS;
            if (!(Lex->grant_user= (LEX_USER*)thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            Lex->grant_user->user= current_user_and_current_role;
          }
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 12524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
          }
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 12530 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 12536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 12545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 12553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 12557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 12562 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 12569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 12574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SHOW_CLIENT_STATS;
           if (prepare_schema_table(thd, lex, 0, SCH_CLIENT_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 12581 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_USER_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_USER_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 12588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 12595 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_INDEX_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_INDEX_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 12602 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 12609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 12616 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 12622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 12629 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 12636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 12641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 12646 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 12651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[(3) - (3)].item));
          }
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 12661 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 12663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 12665 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 12679 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 12680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 12684 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 12685 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 12694 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 12695 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 12699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 12700 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1908:

/* Line 1455 of yacc.c  */
#line 12706 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1909:

/* Line 1455 of yacc.c  */
#line 12713 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->where= normalize_cond((yyvsp[(2) - (2)].item));
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 12723 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(thd, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 12734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 12738 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 12740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 12760 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 12761 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 12762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 12766 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 12767 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 12769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 12783 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 12790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 12795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 12809 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 12811 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          TABLE_LIST *tables= Lex->query_tables;
          for (; tables; tables= tables->next_global)
          {
            tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
            tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
            tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
          }
        }
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 12824 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_READ_LOCK | (yyvsp[(4) - (4)].num); }
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 12826 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(ER(ER_NO_TABLES_USED));
              MYSQL_YYABORT;
            } 
            Lex->type|= REFRESH_FOR_EXPORT;
          }
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 12839 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 12844 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 12846 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 12848 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 12850 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 12852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 12854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 12865 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 12867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 12869 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 12871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name.str= (char*) "";
            Lex->relay_log_connection_name.length= 0;
          }
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 12877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 12879 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 12890 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_CLIENT_STATS; }
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 12892 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 12894 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 12896 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_INDEX_STATS; }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 12898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 12900 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 12902 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 12906 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 12907 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 12911 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num)= 0;}
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 12912 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num)= REFRESH_CHECKPOINT; }
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 12916 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 12921 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 12930 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 12932 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 12933 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 12934 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 12938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 12939 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 12944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 12950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 12959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 12963 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 12975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
            lex->kill_type= KILL_TYPE_ID;
          }
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 12983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->kill_signal= (killed_state) ((yyvsp[(3) - (5)].num) | (yyvsp[(4) - (5)].num));
          }
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 12989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 12990 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 12991 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 12994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 12995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 12996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_QUERY; }
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 12998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (int) KILL_QUERY;
            Lex->kill_type= KILL_TYPE_QUERY;
          }
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 13006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->value_list.push_front((yyval.item));
         }
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 13010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->users_list.push_back((yyvsp[(2) - (2)].lex_user));
            Lex->kill_type= KILL_TYPE_USER;
          }
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 13018 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHUTDOWN; }
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 13025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 13036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 13047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 13057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(thd, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 13067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 13071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 13075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 13076 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 13080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 13081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 13085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 13087 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 13094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 13098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 13099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 13100 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 13115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 13120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 13127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 13132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 13150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 13155 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 13162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 13164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 13169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 13176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 13178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 13182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 13183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 13184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 13189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 13191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 13195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 13197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 13205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 13206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 13216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name_no_truncate((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), thd->charset());
          }
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 13229 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 13252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (thd->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 13264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string *str= new (thd->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 13275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= thd->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 13294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             thd->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 13302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 13314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 13322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 13337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 13356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 13357 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 13359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 13366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 13367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 13368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 13370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 13377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 13383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 13389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 13395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 13401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 13407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (thd->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 13436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (thd->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 13467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 13477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 13487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 13493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   thd->charset());
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 13502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 13514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 13520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 13526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 13541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 13542 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 13547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 13556 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 13570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 13575 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 13620 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 13625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 13641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 13646 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 13724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 13748 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 13777 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 13779 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 13795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 13804 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 13809 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 13815 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(thd, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 13821 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 13831 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 13837 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(thd, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 13846 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(thd, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 13855 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 13857 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 13885 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 13899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 13913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 13927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 13929 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 13938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 13940 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 13949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 13950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 13951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 13956 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host= null_lex_str; // User or Role, see get_current_user()
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 13971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            if ((yyval.lex_user)->host.str[0])
            {
              /*
                Convert hostname part of username to lowercase.
                It's OK to use in-place lowercase as long as
                the character set is utf8.
              */
              my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            }
            else
            {
              /*
                fix historical undocumented convention that empty host is the
                same as '%'
              */
              (yyval.lex_user)->host= host_not_specified;
            }
          }
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 14003 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*)thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_user;
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
          }
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 14015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           if ((yyvsp[(1) - (1)].lex_user)->user.str != current_user.str && (yyvsp[(1) - (1)].lex_user)->host.str == 0)
             (yyvsp[(1) - (1)].lex_user)->host= host_not_specified;
           (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user);
         }
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 14024 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 14025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 14026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 14027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 14028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 14029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 14030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 14031 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 14032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 14033 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 14034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 14035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 14036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 14037 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 14038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 14039 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 14040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 14041 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 14042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 14043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 14044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 14045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 14046 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 14047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 14048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 14049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 14050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 14051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 14052 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 14053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 14054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 14055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 14056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 14057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 14058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 14059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 14060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 14061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 14062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 14063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 14064 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 14065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 14066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 14067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 14068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 14069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 14070 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 14071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 14072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 14073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 14074 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 14075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 14076 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 14077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 14078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 14079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 14080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 14081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 14082 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 14083 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 14093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 14094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 14095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 14096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 14097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 14098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 14099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 14100 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 14101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 14102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 14103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 14104 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 14105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 14106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 14107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 14108 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 14109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 14110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 14111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 14112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 14113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 14114 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 14115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 14116 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 14117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 14118 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 14119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 14120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 14121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 14122 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 14123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 14124 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 14125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 14126 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 14127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 14128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 14129 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 14130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 14131 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 14132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 14133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 14134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 14135 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 14136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 14137 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 14138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 14139 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 14140 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 14141 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 14142 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 14147 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 14148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 14149 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 14150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 14151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 14152 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 14153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 14154 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 14155 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 14156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 14157 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 14158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 14159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 14160 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 14161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 14162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 14163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 14164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 14165 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 14166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 14167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 14168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 14169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 14170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 14171 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 14172 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 14173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 14174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 14175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 14176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 14177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 14178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 14179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 14180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 14181 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 14182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 14183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 14184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 14185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 14186 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 14187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 14188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 14189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 14190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 14191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 14192 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 14193 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 14194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 14195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 14196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 14197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 14198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 14199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 14200 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 14201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 14202 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 14203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 14204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 14205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 14206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 14207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 14208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 14209 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 14210 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 14211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 14212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 14213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 14214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 14215 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 14216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 14217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 14218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 14219 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 14220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 14221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 14222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 14223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 14224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 14225 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 14226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 14227 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 14228 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 14229 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 14230 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 14231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 14232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 14233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 14234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 14235 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 14236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 14237 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 14238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 14239 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 14240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 14241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 14242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 14243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 14244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 14245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 14246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 14247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 14248 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 14249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 14250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 14251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 14252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 14253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 14254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 14255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 14256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 14257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 14258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 14259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 14260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 14261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 14262 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 14263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 14264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 14265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 14266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 14267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 14268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 14269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 14270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 14271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 14272 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 14273 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 14274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 14275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 14276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 14277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 14278 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 14279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 14280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 14281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 14282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 14283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 14284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 14285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 14286 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 14287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 14288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 14289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 14290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 14291 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 14292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 14293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 14294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 14295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 14296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 14297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 14298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 14299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 14300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 14301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 14302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 14303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 14304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 14305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 14306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 14307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 14308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 14309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 14310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 14311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 14312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 14313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 14314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 14315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 14316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 14317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2389:

/* Line 1455 of yacc.c  */
#line 14318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2390:

/* Line 1455 of yacc.c  */
#line 14319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 14320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 14321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 14322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 14323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2395:

/* Line 1455 of yacc.c  */
#line 14324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2396:

/* Line 1455 of yacc.c  */
#line 14325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2397:

/* Line 1455 of yacc.c  */
#line 14326 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2398:

/* Line 1455 of yacc.c  */
#line 14327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 14328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 14329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 14330 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 14331 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 14332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 14333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 14334 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 14335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 14336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 14337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 14338 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 14339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 14340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14344 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 14346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 14347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2419:

/* Line 1455 of yacc.c  */
#line 14348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2420:

/* Line 1455 of yacc.c  */
#line 14349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 14350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 14351 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 14352 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 14353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 14354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 14355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 14356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 14357 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 14358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 14359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 14360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 14361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 14362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 14363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 14364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2436:

/* Line 1455 of yacc.c  */
#line 14365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 14366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2438:

/* Line 1455 of yacc.c  */
#line 14367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 14368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 14369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 14370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 14371 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 14372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 14373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 14374 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 14375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 14376 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 14377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 14378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 14379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 14380 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 14381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 14382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 14383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 14384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 14385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2457:

/* Line 1455 of yacc.c  */
#line 14386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2458:

/* Line 1455 of yacc.c  */
#line 14387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2459:

/* Line 1455 of yacc.c  */
#line 14388 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2460:

/* Line 1455 of yacc.c  */
#line 14389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2461:

/* Line 1455 of yacc.c  */
#line 14390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 14391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2463:

/* Line 1455 of yacc.c  */
#line 14392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2464:

/* Line 1455 of yacc.c  */
#line 14393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2465:

/* Line 1455 of yacc.c  */
#line 14394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2466:

/* Line 1455 of yacc.c  */
#line 14395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 14396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 14397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 14398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 14399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 14400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2472:

/* Line 1455 of yacc.c  */
#line 14401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 14402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 14403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 14404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2476:

/* Line 1455 of yacc.c  */
#line 14405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2477:

/* Line 1455 of yacc.c  */
#line 14406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2478:

/* Line 1455 of yacc.c  */
#line 14418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 14429 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 14436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 14442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 14446 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 14451 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 14461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2488:

/* Line 1455 of yacc.c  */
#line 14467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 14481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 14485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 14490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 14494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 14503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2498:

/* Line 1455 of yacc.c  */
#line 14511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 14512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 14513 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 14517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2502:

/* Line 1455 of yacc.c  */
#line 14518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2503:

/* Line 1455 of yacc.c  */
#line 14519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2504:

/* Line 1455 of yacc.c  */
#line 14520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2505:

/* Line 1455 of yacc.c  */
#line 14524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2506:

/* Line 1455 of yacc.c  */
#line 14525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 14526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2508:

/* Line 1455 of yacc.c  */
#line 14527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2509:

/* Line 1455 of yacc.c  */
#line 14533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceeding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2510:

/* Line 1455 of yacc.c  */
#line 14557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if (set_trigger_new_row(thd, &(yyvsp[(1) - (3)].variable).base_name, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (3)].variable).var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable *spv= spc->find_variable((yyvsp[(1) - (3)].variable).base_name, false);

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 14583 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (thd->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2512:

/* Line 1455 of yacc.c  */
#line 14594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2513:

/* Line 1455 of yacc.c  */
#line 14606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 14619 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2515:

/* Line 1455 of yacc.c  */
#line 14634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2516:

/* Line 1455 of yacc.c  */
#line 14653 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            set_var_role *var= new set_var_role((yyvsp[(2) - (2)].lex_str));
            lex->var_list.push_back(var);
          }
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 14659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->user= current_user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 14684 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 14697 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 14723 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(thd, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2521:

/* Line 1455 of yacc.c  */
#line 14766 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(thd, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2526:

/* Line 1455 of yacc.c  */
#line 14787 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2527:

/* Line 1455 of yacc.c  */
#line 14804 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2528:

/* Line 1455 of yacc.c  */
#line 14820 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 14821 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2530:

/* Line 1455 of yacc.c  */
#line 14825 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2531:

/* Line 1455 of yacc.c  */
#line 14826 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 14827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2533:

/* Line 1455 of yacc.c  */
#line 14828 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2534:

/* Line 1455 of yacc.c  */
#line 14832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2535:

/* Line 1455 of yacc.c  */
#line 14834 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? thd->variables.old_passwords ?
              Item_func_old_password::alloc(thd, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(thd, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2536:

/* Line 1455 of yacc.c  */
#line 14843 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::
              alloc(thd, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 14853 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2538:

/* Line 1455 of yacc.c  */
#line 14854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 14856 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2540:

/* Line 1455 of yacc.c  */
#line 14862 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2541:

/* Line 1455 of yacc.c  */
#line 14868 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2542:

/* Line 1455 of yacc.c  */
#line 14879 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 14890 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2548:

/* Line 1455 of yacc.c  */
#line 14905 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2549:

/* Line 1455 of yacc.c  */
#line 14919 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2550:

/* Line 1455 of yacc.c  */
#line 14920 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2551:

/* Line 1455 of yacc.c  */
#line 14922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 14926 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2553:

/* Line 1455 of yacc.c  */
#line 14927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 14932 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 14943 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 14952 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 14964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2558:

/* Line 1455 of yacc.c  */
#line 14976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (thd->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 14996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 15009 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 15010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2562:

/* Line 1455 of yacc.c  */
#line 15014 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2563:

/* Line 1455 of yacc.c  */
#line 15015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2564:

/* Line 1455 of yacc.c  */
#line 15019 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2565:

/* Line 1455 of yacc.c  */
#line 15020 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2566:

/* Line 1455 of yacc.c  */
#line 15021 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2567:

/* Line 1455 of yacc.c  */
#line 15022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2568:

/* Line 1455 of yacc.c  */
#line 15024 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2569:

/* Line 1455 of yacc.c  */
#line 15032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2570:

/* Line 1455 of yacc.c  */
#line 15036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2571:

/* Line 1455 of yacc.c  */
#line 15037 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2572:

/* Line 1455 of yacc.c  */
#line 15038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2573:

/* Line 1455 of yacc.c  */
#line 15039 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2574:

/* Line 1455 of yacc.c  */
#line 15040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2575:

/* Line 1455 of yacc.c  */
#line 15047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 15052 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 15058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2578:

/* Line 1455 of yacc.c  */
#line 15069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 15080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 15084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2581:

/* Line 1455 of yacc.c  */
#line 15091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_REVOKE_ROLE;
            if (Lex->users_list.push_front((yyvsp[(1) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2582:

/* Line 1455 of yacc.c  */
#line 15100 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->with_admin_option= true; (yyval.lex_user)= (yyvsp[(4) - (4)].lex_user); }
    break;

  case 2583:

/* Line 1455 of yacc.c  */
#line 15102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->with_admin_option= false; (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); }
    break;

  case 2584:

/* Line 1455 of yacc.c  */
#line 15107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2585:

/* Line 1455 of yacc.c  */
#line 15113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2586:

/* Line 1455 of yacc.c  */
#line 15120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2587:

/* Line 1455 of yacc.c  */
#line 15132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2588:

/* Line 1455 of yacc.c  */
#line 15143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2589:

/* Line 1455 of yacc.c  */
#line 15150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT_ROLE;
            /* The first role is the one that is granted */
            if (Lex->users_list.push_front((yyvsp[(1) - (4)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2590:

/* Line 1455 of yacc.c  */
#line 15161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->definer = 0; }
    break;

  case 2591:

/* Line 1455 of yacc.c  */
#line 15162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->definer = (yyvsp[(3) - (3)].lex_user); }
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 15165 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->with_admin_option= false; }
    break;

  case 2593:

/* Line 1455 of yacc.c  */
#line 15166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->with_admin_option= true; }
    break;

  case 2594:

/* Line 1455 of yacc.c  */
#line 15170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2595:

/* Line 1455 of yacc.c  */
#line 15175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2596:

/* Line 1455 of yacc.c  */
#line 15183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_role;
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
          }
    break;

  case 2597:

/* Line 1455 of yacc.c  */
#line 15194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].lex_str).length == 0)
            {
              my_error(ER_INVALID_ROLE, MYF(0), "");
              MYSQL_YYABORT;
            }
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host= empty_lex_str;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2601:

/* Line 1455 of yacc.c  */
#line 15222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2602:

/* Line 1455 of yacc.c  */
#line 15224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2607:

/* Line 1455 of yacc.c  */
#line 15242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2608:

/* Line 1455 of yacc.c  */
#line 15243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2609:

/* Line 1455 of yacc.c  */
#line 15245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2610:

/* Line 1455 of yacc.c  */
#line 15246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2611:

/* Line 1455 of yacc.c  */
#line 15248 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2612:

/* Line 1455 of yacc.c  */
#line 15249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2613:

/* Line 1455 of yacc.c  */
#line 15251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2614:

/* Line 1455 of yacc.c  */
#line 15252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2615:

/* Line 1455 of yacc.c  */
#line 15253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 15254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 15255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2618:

/* Line 1455 of yacc.c  */
#line 15256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2619:

/* Line 1455 of yacc.c  */
#line 15257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2620:

/* Line 1455 of yacc.c  */
#line 15258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2621:

/* Line 1455 of yacc.c  */
#line 15259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2622:

/* Line 1455 of yacc.c  */
#line 15260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2623:

/* Line 1455 of yacc.c  */
#line 15261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2624:

/* Line 1455 of yacc.c  */
#line 15262 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2625:

/* Line 1455 of yacc.c  */
#line 15263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2626:

/* Line 1455 of yacc.c  */
#line 15264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2627:

/* Line 1455 of yacc.c  */
#line 15265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2628:

/* Line 1455 of yacc.c  */
#line 15266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2629:

/* Line 1455 of yacc.c  */
#line 15267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2630:

/* Line 1455 of yacc.c  */
#line 15268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2631:

/* Line 1455 of yacc.c  */
#line 15269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2632:

/* Line 1455 of yacc.c  */
#line 15270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2633:

/* Line 1455 of yacc.c  */
#line 15271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2634:

/* Line 1455 of yacc.c  */
#line 15272 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2635:

/* Line 1455 of yacc.c  */
#line 15273 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2636:

/* Line 1455 of yacc.c  */
#line 15274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 15275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 15276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2639:

/* Line 1455 of yacc.c  */
#line 15277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2640:

/* Line 1455 of yacc.c  */
#line 15278 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2641:

/* Line 1455 of yacc.c  */
#line 15282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2642:

/* Line 1455 of yacc.c  */
#line 15283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2645:

/* Line 1455 of yacc.c  */
#line 15293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2646:

/* Line 1455 of yacc.c  */
#line 15303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2647:

/* Line 1455 of yacc.c  */
#line 15313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2648:

/* Line 1455 of yacc.c  */
#line 15326 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2649:

/* Line 1455 of yacc.c  */
#line 15341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2650:

/* Line 1455 of yacc.c  */
#line 15354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2651:

/* Line 1455 of yacc.c  */
#line 15367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2652:

/* Line 1455 of yacc.c  */
#line 15379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2653:

/* Line 1455 of yacc.c  */
#line 15384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2654:

/* Line 1455 of yacc.c  */
#line 15392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2655:

/* Line 1455 of yacc.c  */
#line 15397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2656:

/* Line 1455 of yacc.c  */
#line 15405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2657:

/* Line 1455 of yacc.c  */
#line 15410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2662:

/* Line 1455 of yacc.c  */
#line 15421 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (thd->variables.old_passwords == 1)
              {
                char *buff= 
                  (char *) thd->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) thd->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2663:

/* Line 1455 of yacc.c  */
#line 15450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
          }
    break;

  case 2664:

/* Line 1455 of yacc.c  */
#line 15455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2665:

/* Line 1455 of yacc.c  */
#line 15461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2666:

/* Line 1455 of yacc.c  */
#line 15467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2667:

/* Line 1455 of yacc.c  */
#line 15472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2671:

/* Line 1455 of yacc.c  */
#line 15486 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            String *new_str = new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2673:

/* Line 1455 of yacc.c  */
#line 15515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2674:

/* Line 1455 of yacc.c  */
#line 15519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2675:

/* Line 1455 of yacc.c  */
#line 15523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2676:

/* Line 1455 of yacc.c  */
#line 15527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2677:

/* Line 1455 of yacc.c  */
#line 15533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2679:

/* Line 1455 of yacc.c  */
#line 15538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2680:

/* Line 1455 of yacc.c  */
#line 15539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2681:

/* Line 1455 of yacc.c  */
#line 15543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2682:

/* Line 1455 of yacc.c  */
#line 15544 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2683:

/* Line 1455 of yacc.c  */
#line 15548 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2684:

/* Line 1455 of yacc.c  */
#line 15550 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2685:

/* Line 1455 of yacc.c  */
#line 15556 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2686:

/* Line 1455 of yacc.c  */
#line 15562 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2687:

/* Line 1455 of yacc.c  */
#line 15568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2688:

/* Line 1455 of yacc.c  */
#line 15577 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2689:

/* Line 1455 of yacc.c  */
#line 15582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2690:

/* Line 1455 of yacc.c  */
#line 15586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2691:

/* Line 1455 of yacc.c  */
#line 15587 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2692:

/* Line 1455 of yacc.c  */
#line 15592 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2693:

/* Line 1455 of yacc.c  */
#line 15593 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2694:

/* Line 1455 of yacc.c  */
#line 15594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2695:

/* Line 1455 of yacc.c  */
#line 15599 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2696:

/* Line 1455 of yacc.c  */
#line 15600 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2697:

/* Line 1455 of yacc.c  */
#line 15601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2698:

/* Line 1455 of yacc.c  */
#line 15605 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2699:

/* Line 1455 of yacc.c  */
#line 15606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2700:

/* Line 1455 of yacc.c  */
#line 15611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2701:

/* Line 1455 of yacc.c  */
#line 15623 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2702:

/* Line 1455 of yacc.c  */
#line 15633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2703:

/* Line 1455 of yacc.c  */
#line 15642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2704:

/* Line 1455 of yacc.c  */
#line 15651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2705:

/* Line 1455 of yacc.c  */
#line 15664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2707:

/* Line 1455 of yacc.c  */
#line 15670 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2708:

/* Line 1455 of yacc.c  */
#line 15675 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2709:

/* Line 1455 of yacc.c  */
#line 15685 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2710:

/* Line 1455 of yacc.c  */
#line 15686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2711:

/* Line 1455 of yacc.c  */
#line 15687 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2712:

/* Line 1455 of yacc.c  */
#line 15691 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= false; }
    break;

  case 2713:

/* Line 1455 of yacc.c  */
#line 15692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= true; }
    break;

  case 2714:

/* Line 1455 of yacc.c  */
#line 15696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2715:

/* Line 1455 of yacc.c  */
#line 15711 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2718:

/* Line 1455 of yacc.c  */
#line 15723 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2719:

/* Line 1455 of yacc.c  */
#line 15724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2720:

/* Line 1455 of yacc.c  */
#line 15725 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2721:

/* Line 1455 of yacc.c  */
#line 15730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2722:

/* Line 1455 of yacc.c  */
#line 15734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2724:

/* Line 1455 of yacc.c  */
#line 15743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2725:

/* Line 1455 of yacc.c  */
#line 15749 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2726:

/* Line 1455 of yacc.c  */
#line 15758 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2727:

/* Line 1455 of yacc.c  */
#line 15764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2728:

/* Line 1455 of yacc.c  */
#line 15785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2733:

/* Line 1455 of yacc.c  */
#line 15813 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2734:

/* Line 1455 of yacc.c  */
#line 15815 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2735:

/* Line 1455 of yacc.c  */
#line 15822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2736:

/* Line 1455 of yacc.c  */
#line 15823 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2737:

/* Line 1455 of yacc.c  */
#line 15824 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2738:

/* Line 1455 of yacc.c  */
#line 15826 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2739:

/* Line 1455 of yacc.c  */
#line 15832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2740:

/* Line 1455 of yacc.c  */
#line 15837 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2741:

/* Line 1455 of yacc.c  */
#line 15848 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2742:

/* Line 1455 of yacc.c  */
#line 15850 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2743:

/* Line 1455 of yacc.c  */
#line 15852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2757:

/* Line 1455 of yacc.c  */
#line 15885 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            thd->lex->definer= 0;
          }
    break;

  case 2758:

/* Line 1455 of yacc.c  */
#line 15899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            thd->lex->definer= (yyvsp[(3) - (3)].lex_user);
          }
    break;

  case 2759:

/* Line 1455 of yacc.c  */
#line 15912 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
    break;

  case 2760:

/* Line 1455 of yacc.c  */
#line 15914 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2761:

/* Line 1455 of yacc.c  */
#line 15916 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2762:

/* Line 1455 of yacc.c  */
#line 15921 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2763:

/* Line 1455 of yacc.c  */
#line 15923 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2764:

/* Line 1455 of yacc.c  */
#line 15925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2765:

/* Line 1455 of yacc.c  */
#line 15930 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2767:

/* Line 1455 of yacc.c  */
#line 15946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2769:

/* Line 1455 of yacc.c  */
#line 15952 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2770:

/* Line 1455 of yacc.c  */
#line 15957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2771:

/* Line 1455 of yacc.c  */
#line 15964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2772:

/* Line 1455 of yacc.c  */
#line 15973 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2775:

/* Line 1455 of yacc.c  */
#line 15994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2776:

/* Line 1455 of yacc.c  */
#line 15996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2777:

/* Line 1455 of yacc.c  */
#line 15998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2778:

/* Line 1455 of yacc.c  */
#line 16000 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2779:

/* Line 1455 of yacc.c  */
#line 16017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2780:

/* Line 1455 of yacc.c  */
#line 16023 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2781:

/* Line 1455 of yacc.c  */
#line 16028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $15 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2782:

/* Line 1455 of yacc.c  */
#line 16057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(thd);
            sp->restore_thd_mem_root(thd);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2783:

/* Line 1455 of yacc.c  */
#line 16091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2784:

/* Line 1455 of yacc.c  */
#line 16108 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2785:

/* Line 1455 of yacc.c  */
#line 16130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $5 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2786:

/* Line 1455 of yacc.c  */
#line 16161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2787:

/* Line 1455 of yacc.c  */
#line 16165 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 2788:

/* Line 1455 of yacc.c  */
#line 16174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(thd, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2789:

/* Line 1455 of yacc.c  */
#line 16197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $14 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2790:

/* Line 1455 of yacc.c  */
#line 16205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2791:

/* Line 1455 of yacc.c  */
#line 16260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(thd, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2792:

/* Line 1455 of yacc.c  */
#line 16284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2793:

/* Line 1455 of yacc.c  */
#line 16293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2794:

/* Line 1455 of yacc.c  */
#line 16300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2795:

/* Line 1455 of yacc.c  */
#line 16307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(thd);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2796:

/* Line 1455 of yacc.c  */
#line 16321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2797:

/* Line 1455 of yacc.c  */
#line 16325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2798:

/* Line 1455 of yacc.c  */
#line 16329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2799:

/* Line 1455 of yacc.c  */
#line 16333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2800:

/* Line 1455 of yacc.c  */
#line 16337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2801:

/* Line 1455 of yacc.c  */
#line 16341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2802:

/* Line 1455 of yacc.c  */
#line 16348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2803:

/* Line 1455 of yacc.c  */
#line 16355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2804:

/* Line 1455 of yacc.c  */
#line 16362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2805:

/* Line 1455 of yacc.c  */
#line 16371 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2806:

/* Line 1455 of yacc.c  */
#line 16372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2807:

/* Line 1455 of yacc.c  */
#line 16376 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2808:

/* Line 1455 of yacc.c  */
#line 16377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2809:

/* Line 1455 of yacc.c  */
#line 16378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2810:

/* Line 1455 of yacc.c  */
#line 16382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2811:

/* Line 1455 of yacc.c  */
#line 16383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2812:

/* Line 1455 of yacc.c  */
#line 16388 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2813:

/* Line 1455 of yacc.c  */
#line 16390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2815:

/* Line 1455 of yacc.c  */
#line 16395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2816:

/* Line 1455 of yacc.c  */
#line 16396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2817:

/* Line 1455 of yacc.c  */
#line 16401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2818:

/* Line 1455 of yacc.c  */
#line 16408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2819:

/* Line 1455 of yacc.c  */
#line 16418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2820:

/* Line 1455 of yacc.c  */
#line 16424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2821:

/* Line 1455 of yacc.c  */
#line 16435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	  YYERROR;
	}
    break;



/* Line 1455 of yacc.c  */
#line 44730 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (thd, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (thd, yymsg);
	  }
	else
	  {
	    yyerror (thd, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, thd);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, thd);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (thd, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, thd);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, thd);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



